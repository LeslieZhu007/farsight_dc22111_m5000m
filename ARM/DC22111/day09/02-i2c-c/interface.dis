
interface.elf:     file format elf32-littlearm


Disassembly of section .text:

c0008000 <_start>:
.text

	.global	_start
_start:
@ 异常向量表
	b reset
c0008000:	ea00000d 	b	c000803c <reset>
	ldr pc, _undefined_instruction
c0008004:	e59ff014 	ldr	pc, [pc, #20]	; c0008020 <_undefined_instruction>
	ldr pc, _software_interrupt
c0008008:	e59ff014 	ldr	pc, [pc, #20]	; c0008024 <_software_interrupt>
	ldr pc, _prefetch_abort
c000800c:	e59ff014 	ldr	pc, [pc, #20]	; c0008028 <_prefetch_abort>
	ldr pc, _data_abort
c0008010:	e59ff014 	ldr	pc, [pc, #20]	; c000802c <_data_abort>
	ldr pc, _not_used
c0008014:	e59ff014 	ldr	pc, [pc, #20]	; c0008030 <_not_used>
	ldr pc, _irq
c0008018:	e59ff014 	ldr	pc, [pc, #20]	; c0008034 <_irq>
	ldr pc, _fiq
c000801c:	e59ff014 	ldr	pc, [pc, #20]	; c0008038 <_fiq>

c0008020 <_undefined_instruction>:
c0008020:	c0008140 	andgt	r8, r0, r0, asr #2

c0008024 <_software_interrupt>:
c0008024:	c0008160 	andgt	r8, r0, r0, ror #2

c0008028 <_prefetch_abort>:
c0008028:	c0008180 	andgt	r8, r0, r0, lsl #3

c000802c <_data_abort>:
c000802c:	c00081a0 	andgt	r8, r0, r0, lsr #3

c0008030 <_not_used>:
c0008030:	c00081c0 	andgt	r8, r0, r0, asr #3

c0008034 <_irq>:
c0008034:	c00081e0 	andgt	r8, r0, r0, ror #3

c0008038 <_fiq>:
c0008038:	c0008200 	andgt	r8, r0, r0, lsl #4

c000803c <reset>:

 /* The actual reset code */
reset:
	@ 重新映射异常向量表的入口地址
	/* Set Vector Base Address Register */
	mrc p15, 0, r0, c1, c0, 0
c000803c:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic r0, #(1<<13)
c0008040:	e3c00a02 	bic	r0, r0, #8192	; 0x2000
	mcr p15, 0, r0, c1, c0, 0
c0008044:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	ldr	r0,=0xc0008000
c0008048:	e59f01b8 	ldr	r0, [pc, #440]	; c0008208 <stacktop+0x4>
	mcr	p15,0,r0,c12,c0,0		@ Vector Base Address Register
c000804c:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}

	/* Set the cpu to svc32 mode */
	mrs r0, cpsr
c0008050:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #0x1f
c0008054:	e3c0001f 	bic	r0, r0, #31
	orr r0, r0, #0xd3
c0008058:	e38000d3 	orr	r0, r0, #211	; 0xd3
	msr cpsr, r0
c000805c:	e129f000 	msr	CPSR_fc, r0

	/* Enable NEON/VFP unit */
	mrc p15, #0, r1, c1, c0, #2
c0008060:	ee111f50 	mrc	15, 0, r1, cr1, cr0, {2}
	orr r1, r1, #(0xf << 20)
c0008064:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
	mcr p15, #0, r1, c1, c0, #2
c0008068:	ee011f50 	mcr	15, 0, r1, cr1, cr0, {2}
	mov r1, #0
c000806c:	e3a01000 	mov	r1, #0
	mcr p15, #0, r1, c7, c5, #4
c0008070:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
	mov r0, #0x40000000
c0008074:	e3a00101 	mov	r0, #1073741824	; 0x40000000
	fmxr fpexc, r0
c0008078:	eee80a10 	vmsr	fpexc, r0

	/* Cache init */
	mrc	p15, 0, r0, c0, c0, 0
c000807c:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
	and	r1, r0, #0x00f00000
c0008080:	e200160f 	and	r1, r0, #15728640	; 0xf00000
	and	r2, r0, #0x0000000f
c0008084:	e200200f 	and	r2, r0, #15
	orr r2, r2, r1, lsr #20-4
c0008088:	e1822821 	orr	r2, r2, r1, lsr #16
	cmp r2, #0x30
c000808c:	e3520030 	cmp	r2, #48	; 0x30
	mrceq p15, 0, r0, c1, c0, 1
c0008090:	0e110f30 	mrceq	15, 0, r0, cr1, cr0, {1}
	orreq r0, r0, #0x6
c0008094:	03800006 	orreq	r0, r0, #6
	mcreq p15, 0, r0, c1, c0, 1
c0008098:	0e010f30 	mcreq	15, 0, r0, cr1, cr0, {1}

	/* Invalidate L1 I/D */
	mov r0, #0
c000809c:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c8, c7, 0
c00080a0:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
	mcr	p15, 0, r0, c7, c5, 0
c00080a4:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}

	/* Disable mmu stuff and caches */
	mrc p15, 0, r0, c1, c0, 0
c00080a8:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic r0, r0, #0x00002000
c00080ac:	e3c00a02 	bic	r0, r0, #8192	; 0x2000
	bic r0, r0, #0x00000007
c00080b0:	e3c00007 	bic	r0, r0, #7
	orr r0, r0, #0x00001000
c00080b4:	e3800a01 	orr	r0, r0, #4096	; 0x1000
	orr r0, r0, #0x00000002
c00080b8:	e3800002 	orr	r0, r0, #2
	orr r0, r0, #0x00000800
c00080bc:	e3800b02 	orr	r0, r0, #2048	; 0x800
	mcr p15, 0, r0, c1, c0, 0
c00080c0:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

c00080c4 <init_stack>:

	/* Initialize stacks */
	@ 初始化各种模式下的占空间
init_stack:
	ldr	r0, stacktop        /*get stack top pointer*/
c00080c4:	e59f0138 	ldr	r0, [pc, #312]	; c0008204 <stacktop>

	/********svc mode stack********/
	mov	sp, r0
c00080c8:	e1a0d000 	mov	sp, r0
	sub	r0, #128*4          /*512 byte  for irq mode of stack*/
c00080cc:	e2400c02 	sub	r0, r0, #512	; 0x200
	/********irq mode stack********/
	msr	cpsr, #0xd2
c00080d0:	e329f0d2 	msr	CPSR_fc, #210	; 0xd2
	mov	sp, r0
c00080d4:	e1a0d000 	mov	sp, r0
	sub	r0, #128*4          /*512 byte  for fiq mode of stack*/
c00080d8:	e2400c02 	sub	r0, r0, #512	; 0x200
	/********fiq mode stack********/
	msr	cpsr, #0xd1
c00080dc:	e329f0d1 	msr	CPSR_fc, #209	; 0xd1
	mov	sp, r0
c00080e0:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080e4:	e2400000 	sub	r0, r0, #0
	/********abort mode stack******/
	msr	cpsr, #0xd7
c00080e8:	e329f0d7 	msr	CPSR_fc, #215	; 0xd7
	mov	sp, r0
c00080ec:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080f0:	e2400000 	sub	r0, r0, #0
	/********undefine mode stack**/
	msr	cpsr, #0xdb
c00080f4:	e329f0db 	msr	CPSR_fc, #219	; 0xdb
	mov	sp, r0
c00080f8:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080fc:	e2400000 	sub	r0, r0, #0
    /***sys mode and usr mode stack***/
	msr	cpsr, #0x10
c0008100:	e329f010 	msr	CPSR_fc, #16
	mov	sp, r0             /*1024 byte  for user mode of stack*/
c0008104:	e1a0d000 	mov	sp, r0

    /******clear bss section********/
	@ 清除BSS段
	ldr	r0, =__bss_start	/* this is auto-relocated! */
c0008108:	e59f00fc 	ldr	r0, [pc, #252]	; c000820c <stacktop+0x8>
	ldr	r1, =__bss_end__	/* this is auto-relocated! */
c000810c:	e59f10fc 	ldr	r1, [pc, #252]	; c0008210 <stacktop+0xc>
	mov	r2, #0x00000000		/* prepare zero to clear BSS */
c0008110:	e3a02000 	mov	r2, #0

c0008114 <clbss_l>:

clbss_l: cmp r0, r1			/* while not at end of BSS */
c0008114:	e1500001 	cmp	r0, r1
	strlo r2, [r0]			/* clear 32-bit BSS word */
c0008118:	35802000 	strcc	r2, [r0]
	addlo r0, r0, #4		/* move to next */
c000811c:	32800004 	addcc	r0, r0, #4
	blo	clbss_l
c0008120:	3afffffb 	bcc	c0008114 <clbss_l>

	/* Call _main */
	ldr pc, =main     @ 汇编调用C  跳转到main.c文件的main函数中
c0008124:	e59ff0e8 	ldr	pc, [pc, #232]	; c0008214 <stacktop+0x10>
c0008128:	e320f000 	nop	{0}
c000812c:	e320f000 	nop	{0}
c0008130:	e320f000 	nop	{0}
c0008134:	e320f000 	nop	{0}
c0008138:	e320f000 	nop	{0}
c000813c:	e320f000 	nop	{0}

c0008140 <undefined_instruction>:
/*
 * Exception handlers
 */
	.align 5  // 2的5次方，=32bit 也就是4字节对其
undefined_instruction:
	b	.
c0008140:	eafffffe 	b	c0008140 <undefined_instruction>
c0008144:	e320f000 	nop	{0}
c0008148:	e320f000 	nop	{0}
c000814c:	e320f000 	nop	{0}
c0008150:	e320f000 	nop	{0}
c0008154:	e320f000 	nop	{0}
c0008158:	e320f000 	nop	{0}
c000815c:	e320f000 	nop	{0}

c0008160 <software_interrupt>:

	.align 5
software_interrupt:
	b	.
c0008160:	eafffffe 	b	c0008160 <software_interrupt>
c0008164:	e320f000 	nop	{0}
c0008168:	e320f000 	nop	{0}
c000816c:	e320f000 	nop	{0}
c0008170:	e320f000 	nop	{0}
c0008174:	e320f000 	nop	{0}
c0008178:	e320f000 	nop	{0}
c000817c:	e320f000 	nop	{0}

c0008180 <prefetch_abort>:

	.align 5
prefetch_abort:
	b	.
c0008180:	eafffffe 	b	c0008180 <prefetch_abort>
c0008184:	e320f000 	nop	{0}
c0008188:	e320f000 	nop	{0}
c000818c:	e320f000 	nop	{0}
c0008190:	e320f000 	nop	{0}
c0008194:	e320f000 	nop	{0}
c0008198:	e320f000 	nop	{0}
c000819c:	e320f000 	nop	{0}

c00081a0 <data_abort>:

	.align 5
data_abort:
	b	.
c00081a0:	eafffffe 	b	c00081a0 <data_abort>
c00081a4:	e320f000 	nop	{0}
c00081a8:	e320f000 	nop	{0}
c00081ac:	e320f000 	nop	{0}
c00081b0:	e320f000 	nop	{0}
c00081b4:	e320f000 	nop	{0}
c00081b8:	e320f000 	nop	{0}
c00081bc:	e320f000 	nop	{0}

c00081c0 <not_used>:

	.align 5
not_used:
	b	.
c00081c0:	eafffffe 	b	c00081c0 <not_used>
c00081c4:	e320f000 	nop	{0}
c00081c8:	e320f000 	nop	{0}
c00081cc:	e320f000 	nop	{0}
c00081d0:	e320f000 	nop	{0}
c00081d4:	e320f000 	nop	{0}
c00081d8:	e320f000 	nop	{0}
c00081dc:	e320f000 	nop	{0}

c00081e0 <irq>:

	.align 5
	.global irq
irq:
	sub  lr, lr, #4
c00081e0:	e24ee004 	sub	lr, lr, #4
	stmfd sp!, {r0-r12, lr}
c00081e4:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	bl do_irq
c00081e8:	eb000540 	bl	c00096f0 <do_irq>
	ldmfd sp!, {r0-r12, pc}^
c00081ec:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
c00081f0:	e320f000 	nop	{0}
c00081f4:	e320f000 	nop	{0}
c00081f8:	e320f000 	nop	{0}
c00081fc:	e320f000 	nop	{0}

c0008200 <fiq>:

	.align 5
	.global fiq
fiq:
	b .
c0008200:	eafffffe 	b	c0008200 <fiq>

c0008204 <stacktop>:
c0008204:	c000a9b0 			; <UNDEFINED> instruction: 0xc000a9b0
	ldr	r0,=0xc0008000
c0008208:	c0008000 	andgt	r8, r0, r0
	ldr	r0, =__bss_start	/* this is auto-relocated! */
c000820c:	c000aab0 			; <UNDEFINED> instruction: 0xc000aab0
	ldr	r1, =__bss_end__	/* this is auto-relocated! */
c0008210:	c000aab4 			; <UNDEFINED> instruction: 0xc000aab4
	ldr pc, =main     @ 汇编调用C  跳转到main.c文件的main函数中
c0008214:	c000a088 	andgt	sl, r0, r8, lsl #1

c0008218 <__umodsi3>:
	.text
	.globl	 __umodsi3
	.type  __umodsi3       ,function
	.align 0
 __umodsi3      :
	cmp	divisor, #0
c0008218:	e3510000 	cmp	r1, #0
	beq	Ldiv0
c000821c:	0a000026 	beq	c00082bc <Ldiv0>
	mov	curbit, #1
c0008220:	e3a03001 	mov	r3, #1
	cmp	dividend, divisor
c0008224:	e1500001 	cmp	r0, r1
	movcc	pc, lr
c0008228:	31a0f00e 	movcc	pc, lr

c000822c <Loop1>:
Loop1:
	@ Unless the divisor is very big, shift it up in multiples of
	@ four bits, since this is the amount of unwinding in the main
	@ division loop.  Continue shifting until the divisor is
	@ larger than the dividend.
	cmp	divisor, #0x10000000
c000822c:	e3510201 	cmp	r1, #268435456	; 0x10000000
	cmpcc	divisor, dividend
c0008230:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #4
c0008234:	31a01201 	lslcc	r1, r1, #4
	movcc	curbit, curbit, lsl #4
c0008238:	31a03203 	lslcc	r3, r3, #4
	bcc	Loop1
c000823c:	3afffffa 	bcc	c000822c <Loop1>

c0008240 <Lbignum>:
Lbignum:
	@ For very big divisors, we must shift it a bit at a time, or
	@ we will be in danger of overflowing.
	cmp	divisor, #0x80000000
c0008240:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
	cmpcc	divisor, dividend
c0008244:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #1
c0008248:	31a01081 	lslcc	r1, r1, #1
	movcc	curbit, curbit, lsl #1
c000824c:	31a03083 	lslcc	r3, r3, #1
	bcc	Lbignum
c0008250:	3afffffa 	bcc	c0008240 <Lbignum>

c0008254 <Loop3>:
Loop3:
	@ Test for possible subtractions.  On the final pass, this may
	@ subtract too much from the dividend, so keep track of which
	@ subtractions are done, we can fix them up afterwards...
	mov	overdone, #0
c0008254:	e3a02000 	mov	r2, #0
	cmp	dividend, divisor
c0008258:	e1500001 	cmp	r0, r1
	subcs	dividend, dividend, divisor
c000825c:	20400001 	subcs	r0, r0, r1
	cmp	dividend, divisor, lsr #1
c0008260:	e15000a1 	cmp	r0, r1, lsr #1
	subcs	dividend, dividend, divisor, lsr #1
c0008264:	204000a1 	subcs	r0, r0, r1, lsr #1
	orrcs	overdone, overdone, curbit, ror #1
c0008268:	218220e3 	orrcs	r2, r2, r3, ror #1
	cmp	dividend, divisor, lsr #2
c000826c:	e1500121 	cmp	r0, r1, lsr #2
	subcs	dividend, dividend, divisor, lsr #2
c0008270:	20400121 	subcs	r0, r0, r1, lsr #2
	orrcs	overdone, overdone, curbit, ror #2
c0008274:	21822163 	orrcs	r2, r2, r3, ror #2
	cmp	dividend, divisor, lsr #3
c0008278:	e15001a1 	cmp	r0, r1, lsr #3
	subcs	dividend, dividend, divisor, lsr #3
c000827c:	204001a1 	subcs	r0, r0, r1, lsr #3
	orrcs	overdone, overdone, curbit, ror #3
c0008280:	218221e3 	orrcs	r2, r2, r3, ror #3
	mov	ip, curbit
c0008284:	e1a0c003 	mov	ip, r3
	cmp	dividend, #0			@ Early termination?
c0008288:	e3500000 	cmp	r0, #0
	movnes	curbit, curbit, lsr #4		@ No, any more bits to do?
c000828c:	11b03223 	lsrsne	r3, r3, #4
	movne	divisor, divisor, lsr #4
c0008290:	11a01221 	lsrne	r1, r1, #4
	bne	Loop3
c0008294:	1affffee 	bne	c0008254 <Loop3>
	@ the top three bits of "overdone".  Exactly which were not needed
	@ are governed by the position of the bit, stored in ip.
	@ If we terminated early, because dividend became zero,
	@ then none of the below will match, since the bit in ip will not be
	@ in the bottom nibble.
	ands	overdone, overdone, #0xe0000000
c0008298:	e212220e 	ands	r2, r2, #-536870912	; 0xe0000000
	moveq	pc, lr				@ No fixups needed
c000829c:	01a0f00e 	moveq	pc, lr
	tst	overdone, ip, ror #3
c00082a0:	e11201ec 	tst	r2, ip, ror #3
	addne	dividend, dividend, divisor, lsr #3
c00082a4:	108001a1 	addne	r0, r0, r1, lsr #3
	tst	overdone, ip, ror #2
c00082a8:	e112016c 	tst	r2, ip, ror #2
	addne	dividend, dividend, divisor, lsr #2
c00082ac:	10800121 	addne	r0, r0, r1, lsr #2
	tst	overdone, ip, ror #1
c00082b0:	e11200ec 	tst	r2, ip, ror #1
	addne	dividend, dividend, divisor, lsr #1
c00082b4:	108000a1 	addne	r0, r0, r1, lsr #1
	mov	pc, lr
c00082b8:	e1a0f00e 	mov	pc, lr

c00082bc <Ldiv0>:
Ldiv0:
	str	lr, [sp, #-4]!
c00082bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
@	bl	 __div0       (PLT)
	mov	r0, #0			@ about as wrong as it could be
c00082c0:	e3a00000 	mov	r0, #0
	ldmia	sp!, {pc}
c00082c4:	e8bd8000 	ldmfd	sp!, {pc}

c00082c8 <__udivsi3>:
	.text
	.globl	 __udivsi3
	.type  __udivsi3       ,function
	.align	0
 __udivsi3      :
	cmp	divisor, #0
c00082c8:	e3510000 	cmp	r1, #0
	beq	Ldiv0
c00082cc:	0a00001f 	beq	c0008350 <Ldiv0>
	mov	curbit, #1
c00082d0:	e3a03001 	mov	r3, #1
	mov	result, #0
c00082d4:	e3a02000 	mov	r2, #0
	cmp	dividend, divisor
c00082d8:	e1500001 	cmp	r0, r1
	bcc	Lgot_result
c00082dc:	3a000019 	bcc	c0008348 <Lgot_result>

c00082e0 <Loop1>:
Loop1:
	@ Unless the divisor is very big, shift it up in multiples of
	@ four bits, since this is the amount of unwinding in the main
	@ division loop.  Continue shifting until the divisor is
	@ larger than the dividend.
	cmp	divisor, #0x10000000
c00082e0:	e3510201 	cmp	r1, #268435456	; 0x10000000
	cmpcc	divisor, dividend
c00082e4:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #4
c00082e8:	31a01201 	lslcc	r1, r1, #4
	movcc	curbit, curbit, lsl #4
c00082ec:	31a03203 	lslcc	r3, r3, #4
	bcc	Loop1
c00082f0:	3afffffa 	bcc	c00082e0 <Loop1>

c00082f4 <Lbignum>:
Lbignum:
	@ For very big divisors, we must shift it a bit at a time, or
	@ we will be in danger of overflowing.
	cmp	divisor, #0x80000000
c00082f4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
	cmpcc	divisor, dividend
c00082f8:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #1
c00082fc:	31a01081 	lslcc	r1, r1, #1
	movcc	curbit, curbit, lsl #1
c0008300:	31a03083 	lslcc	r3, r3, #1
	bcc	Lbignum
c0008304:	3afffffa 	bcc	c00082f4 <Lbignum>

c0008308 <Loop3>:
Loop3:
	@ Test for possible subtractions, and note which bits
	@ are done in the result.  On the final pass, this may subtract
	@ too much from the dividend, but the result will be ok, since the
	@ "bit" will have been shifted out at the bottom.
	cmp	dividend, divisor
c0008308:	e1500001 	cmp	r0, r1
	subcs	dividend, dividend, divisor
c000830c:	20400001 	subcs	r0, r0, r1
	orrcs	result, result, curbit
c0008310:	21822003 	orrcs	r2, r2, r3
	cmp	dividend, divisor, lsr #1
c0008314:	e15000a1 	cmp	r0, r1, lsr #1
	subcs	dividend, dividend, divisor, lsr #1
c0008318:	204000a1 	subcs	r0, r0, r1, lsr #1
	orrcs	result, result, curbit, lsr #1
c000831c:	218220a3 	orrcs	r2, r2, r3, lsr #1
	cmp	dividend, divisor, lsr #2
c0008320:	e1500121 	cmp	r0, r1, lsr #2
	subcs	dividend, dividend, divisor, lsr #2
c0008324:	20400121 	subcs	r0, r0, r1, lsr #2
	orrcs	result, result, curbit, lsr #2
c0008328:	21822123 	orrcs	r2, r2, r3, lsr #2
	cmp	dividend, divisor, lsr #3
c000832c:	e15001a1 	cmp	r0, r1, lsr #3
	subcs	dividend, dividend, divisor, lsr #3
c0008330:	204001a1 	subcs	r0, r0, r1, lsr #3
	orrcs	result, result, curbit, lsr #3
c0008334:	218221a3 	orrcs	r2, r2, r3, lsr #3
	cmp	dividend, #0			@ Early termination?
c0008338:	e3500000 	cmp	r0, #0
	movnes	curbit, curbit, lsr #4		@ No, any more bits to do?
c000833c:	11b03223 	lsrsne	r3, r3, #4
	movne	divisor, divisor, lsr #4
c0008340:	11a01221 	lsrne	r1, r1, #4
	bne	Loop3
c0008344:	1affffef 	bne	c0008308 <Loop3>

c0008348 <Lgot_result>:
Lgot_result:
	mov	r0, result
c0008348:	e1a00002 	mov	r0, r2
	mov	pc, lr
c000834c:	e1a0f00e 	mov	pc, lr

c0008350 <Ldiv0>:
Ldiv0:
	str	lr, [sp, #-4]!
c0008350:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	@bl	 __div0       (PLT)
	mov	r0, #0			@ about as wrong as it could be
c0008354:	e3a00000 	mov	r0, #0
	ldmia	sp!, {pc}
c0008358:	e8bd8000 	ldmfd	sp!, {pc}

c000835c <__toupper>:
		c -= 'A'-'a';
	return c;
}

static inline unsigned char __toupper(unsigned char c)
{
c000835c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0008360:	e28db000 	add	fp, sp, #0
c0008364:	e24dd004 	sub	sp, sp, #4
c0008368:	e1a03000 	mov	r3, r0
c000836c:	e54b3004 	strb	r3, [fp, #-4]
	if (islower(c))
c0008370:	e55b2004 	ldrb	r2, [fp, #-4]
c0008374:	e30a39b0 	movw	r3, #43440	; 0xa9b0
c0008378:	e34c3000 	movt	r3, #49152	; 0xc000
c000837c:	e7d33002 	ldrb	r3, [r3, r2]
c0008380:	e2033002 	and	r3, r3, #2
c0008384:	e3530000 	cmp	r3, #0
c0008388:	0a000002 	beq	c0008398 <__toupper+0x3c>
		c -= 'a'-'A';
c000838c:	e55b3004 	ldrb	r3, [fp, #-4]
c0008390:	e2433020 	sub	r3, r3, #32
c0008394:	e54b3004 	strb	r3, [fp, #-4]
	return c;
c0008398:	e55b3004 	ldrb	r3, [fp, #-4]
}
c000839c:	e1a00003 	mov	r0, r3
c00083a0:	e28bd000 	add	sp, fp, #0
c00083a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00083a8:	e12fff1e 	bx	lr

c00083ac <simple_strtoul>:
#include <ctype.h>
#include "uart.h"
#define size_t unsigned int

unsigned long simple_strtoul(const char *cp,char **endp,unsigned int base)
{
c00083ac:	e92d4800 	push	{fp, lr}
c00083b0:	e28db004 	add	fp, sp, #4
c00083b4:	e24dd014 	sub	sp, sp, #20
c00083b8:	e50b0010 	str	r0, [fp, #-16]
c00083bc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c00083c0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
	unsigned long result = 0,value;
c00083c4:	e3a03000 	mov	r3, #0
c00083c8:	e50b3008 	str	r3, [fp, #-8]

	if (*cp == '0') {
c00083cc:	e51b3010 	ldr	r3, [fp, #-16]
c00083d0:	e5d33000 	ldrb	r3, [r3]
c00083d4:	e3530030 	cmp	r3, #48	; 0x30
c00083d8:	1a00001a 	bne	c0008448 <simple_strtoul+0x9c>
		cp++;
c00083dc:	e51b3010 	ldr	r3, [fp, #-16]
c00083e0:	e2833001 	add	r3, r3, #1
c00083e4:	e50b3010 	str	r3, [fp, #-16]
		if ((*cp == 'x') && isxdigit(cp[1])) {
c00083e8:	e51b3010 	ldr	r3, [fp, #-16]
c00083ec:	e5d33000 	ldrb	r3, [r3]
c00083f0:	e3530078 	cmp	r3, #120	; 0x78
c00083f4:	1a00000e 	bne	c0008434 <simple_strtoul+0x88>
c00083f8:	e51b3010 	ldr	r3, [fp, #-16]
c00083fc:	e2833001 	add	r3, r3, #1
c0008400:	e5d33000 	ldrb	r3, [r3]
c0008404:	e1a02003 	mov	r2, r3
c0008408:	e30a39b0 	movw	r3, #43440	; 0xa9b0
c000840c:	e34c3000 	movt	r3, #49152	; 0xc000
c0008410:	e7d33002 	ldrb	r3, [r3, r2]
c0008414:	e2033044 	and	r3, r3, #68	; 0x44
c0008418:	e3530000 	cmp	r3, #0
c000841c:	0a000004 	beq	c0008434 <simple_strtoul+0x88>
			base = 16;
c0008420:	e3a03010 	mov	r3, #16
c0008424:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			cp++;
c0008428:	e51b3010 	ldr	r3, [fp, #-16]
c000842c:	e2833001 	add	r3, r3, #1
c0008430:	e50b3010 	str	r3, [fp, #-16]
		}
		if (!base) {
c0008434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008438:	e3530000 	cmp	r3, #0
c000843c:	1a000001 	bne	c0008448 <simple_strtoul+0x9c>
			base = 8;
c0008440:	e3a03008 	mov	r3, #8
c0008444:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		}
	}
	if (!base) {
c0008448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c000844c:	e3530000 	cmp	r3, #0
c0008450:	1a00000b 	bne	c0008484 <simple_strtoul+0xd8>
		base = 10;
c0008454:	e3a0300a 	mov	r3, #10
c0008458:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	}
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c000845c:	ea000008 	b	c0008484 <simple_strtoul+0xd8>
	    ? toupper(*cp) : *cp)-'A'+10) < base) {
		result = result*base + value;
c0008460:	e51b3008 	ldr	r3, [fp, #-8]
c0008464:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
c0008468:	e0030392 	mul	r3, r2, r3
c000846c:	e51b200c 	ldr	r2, [fp, #-12]
c0008470:	e0823003 	add	r3, r2, r3
c0008474:	e50b3008 	str	r3, [fp, #-8]
		cp++;
c0008478:	e51b3010 	ldr	r3, [fp, #-16]
c000847c:	e2833001 	add	r3, r3, #1
c0008480:	e50b3010 	str	r3, [fp, #-16]
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c0008484:	e51b3010 	ldr	r3, [fp, #-16]
c0008488:	e5d33000 	ldrb	r3, [r3]
c000848c:	e1a02003 	mov	r2, r3
c0008490:	e30a39b0 	movw	r3, #43440	; 0xa9b0
c0008494:	e34c3000 	movt	r3, #49152	; 0xc000
c0008498:	e7d33002 	ldrb	r3, [r3, r2]
c000849c:	e2033044 	and	r3, r3, #68	; 0x44
c00084a0:	e3530000 	cmp	r3, #0
c00084a4:	0a000024 	beq	c000853c <simple_strtoul+0x190>
c00084a8:	e51b3010 	ldr	r3, [fp, #-16]
c00084ac:	e5d33000 	ldrb	r3, [r3]
c00084b0:	e1a02003 	mov	r2, r3
c00084b4:	e30a39b0 	movw	r3, #43440	; 0xa9b0
c00084b8:	e34c3000 	movt	r3, #49152	; 0xc000
c00084bc:	e7d33002 	ldrb	r3, [r3, r2]
c00084c0:	e2033004 	and	r3, r3, #4
c00084c4:	e3530000 	cmp	r3, #0
c00084c8:	0a000003 	beq	c00084dc <simple_strtoul+0x130>
c00084cc:	e51b3010 	ldr	r3, [fp, #-16]
c00084d0:	e5d33000 	ldrb	r3, [r3]
c00084d4:	e2433030 	sub	r3, r3, #48	; 0x30
c00084d8:	ea000012 	b	c0008528 <simple_strtoul+0x17c>
c00084dc:	e51b3010 	ldr	r3, [fp, #-16]
c00084e0:	e5d33000 	ldrb	r3, [r3]
c00084e4:	e1a02003 	mov	r2, r3
c00084e8:	e30a39b0 	movw	r3, #43440	; 0xa9b0
c00084ec:	e34c3000 	movt	r3, #49152	; 0xc000
c00084f0:	e7d33002 	ldrb	r3, [r3, r2]
c00084f4:	e2033002 	and	r3, r3, #2
c00084f8:	e3530000 	cmp	r3, #0
c00084fc:	0a000006 	beq	c000851c <simple_strtoul+0x170>
	    ? toupper(*cp) : *cp)-'A'+10) < base) {
c0008500:	e51b3010 	ldr	r3, [fp, #-16]
c0008504:	e5d33000 	ldrb	r3, [r3]
c0008508:	e1a00003 	mov	r0, r3
c000850c:	ebffff92 	bl	c000835c <__toupper>
c0008510:	e1a03000 	mov	r3, r0
c0008514:	e2433037 	sub	r3, r3, #55	; 0x37
c0008518:	ea000002 	b	c0008528 <simple_strtoul+0x17c>
c000851c:	e51b3010 	ldr	r3, [fp, #-16]
c0008520:	e5d33000 	ldrb	r3, [r3]
c0008524:	e2433037 	sub	r3, r3, #55	; 0x37
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c0008528:	e50b300c 	str	r3, [fp, #-12]
c000852c:	e51b200c 	ldr	r2, [fp, #-12]
c0008530:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008534:	e1520003 	cmp	r2, r3
c0008538:	3affffc8 	bcc	c0008460 <simple_strtoul+0xb4>
	}
	if (endp)
c000853c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008540:	e3530000 	cmp	r3, #0
c0008544:	0a000002 	beq	c0008554 <simple_strtoul+0x1a8>
		*endp = (char *)cp;
c0008548:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000854c:	e51b2010 	ldr	r2, [fp, #-16]
c0008550:	e5832000 	str	r2, [r3]
	return result;
c0008554:	e51b3008 	ldr	r3, [fp, #-8]
}
c0008558:	e1a00003 	mov	r0, r3
c000855c:	e24bd004 	sub	sp, fp, #4
c0008560:	e8bd8800 	pop	{fp, pc}

c0008564 <simple_strtol>:

long simple_strtol(const char *cp,char **endp,unsigned int base)
{
c0008564:	e92d4800 	push	{fp, lr}
c0008568:	e28db004 	add	fp, sp, #4
c000856c:	e24dd00c 	sub	sp, sp, #12
c0008570:	e50b0008 	str	r0, [fp, #-8]
c0008574:	e50b100c 	str	r1, [fp, #-12]
c0008578:	e50b2010 	str	r2, [fp, #-16]
	if(*cp=='-')
c000857c:	e51b3008 	ldr	r3, [fp, #-8]
c0008580:	e5d33000 	ldrb	r3, [r3]
c0008584:	e353002d 	cmp	r3, #45	; 0x2d
c0008588:	1a000008 	bne	c00085b0 <simple_strtol+0x4c>
		return -simple_strtoul(cp+1,endp,base);
c000858c:	e51b3008 	ldr	r3, [fp, #-8]
c0008590:	e2833001 	add	r3, r3, #1
c0008594:	e51b2010 	ldr	r2, [fp, #-16]
c0008598:	e51b100c 	ldr	r1, [fp, #-12]
c000859c:	e1a00003 	mov	r0, r3
c00085a0:	ebffff81 	bl	c00083ac <simple_strtoul>
c00085a4:	e1a03000 	mov	r3, r0
c00085a8:	e2633000 	rsb	r3, r3, #0
c00085ac:	ea000004 	b	c00085c4 <simple_strtol+0x60>
	return simple_strtoul(cp,endp,base);
c00085b0:	e51b2010 	ldr	r2, [fp, #-16]
c00085b4:	e51b100c 	ldr	r1, [fp, #-12]
c00085b8:	e51b0008 	ldr	r0, [fp, #-8]
c00085bc:	ebffff7a 	bl	c00083ac <simple_strtoul>
c00085c0:	e1a03000 	mov	r3, r0
}
c00085c4:	e1a00003 	mov	r0, r3
c00085c8:	e24bd004 	sub	sp, fp, #4
c00085cc:	e8bd8800 	pop	{fp, pc}

c00085d0 <skip_atoi>:

/* we use this so that we can do without the ctype library */
#define is_digit(c)	((c) >= '0' && (c) <= '9')

static int skip_atoi(const char **s)
{
c00085d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00085d4:	e28db000 	add	fp, sp, #0
c00085d8:	e24dd008 	sub	sp, sp, #8
c00085dc:	e50b0008 	str	r0, [fp, #-8]
	int i=0;
c00085e0:	e3a03000 	mov	r3, #0
c00085e4:	e50b3004 	str	r3, [fp, #-4]

	while (is_digit(**s))
c00085e8:	ea00000e 	b	c0008628 <skip_atoi+0x58>
		i = i*10 + *((*s)++) - '0';
c00085ec:	e51b2004 	ldr	r2, [fp, #-4]
c00085f0:	e1a03002 	mov	r3, r2
c00085f4:	e1a03103 	lsl	r3, r3, #2
c00085f8:	e0833002 	add	r3, r3, r2
c00085fc:	e1a03083 	lsl	r3, r3, #1
c0008600:	e1a00003 	mov	r0, r3
c0008604:	e51b3008 	ldr	r3, [fp, #-8]
c0008608:	e5933000 	ldr	r3, [r3]
c000860c:	e2831001 	add	r1, r3, #1
c0008610:	e51b2008 	ldr	r2, [fp, #-8]
c0008614:	e5821000 	str	r1, [r2]
c0008618:	e5d33000 	ldrb	r3, [r3]
c000861c:	e0803003 	add	r3, r0, r3
c0008620:	e2433030 	sub	r3, r3, #48	; 0x30
c0008624:	e50b3004 	str	r3, [fp, #-4]
	while (is_digit(**s))
c0008628:	e51b3008 	ldr	r3, [fp, #-8]
c000862c:	e5933000 	ldr	r3, [r3]
c0008630:	e5d33000 	ldrb	r3, [r3]
c0008634:	e353002f 	cmp	r3, #47	; 0x2f
c0008638:	9a000004 	bls	c0008650 <skip_atoi+0x80>
c000863c:	e51b3008 	ldr	r3, [fp, #-8]
c0008640:	e5933000 	ldr	r3, [r3]
c0008644:	e5d33000 	ldrb	r3, [r3]
c0008648:	e3530039 	cmp	r3, #57	; 0x39
c000864c:	9affffe6 	bls	c00085ec <skip_atoi+0x1c>
	return i;
c0008650:	e51b3004 	ldr	r3, [fp, #-4]
}
c0008654:	e1a00003 	mov	r0, r3
c0008658:	e28bd000 	add	sp, fp, #0
c000865c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0008660:	e12fff1e 	bx	lr

c0008664 <number>:
#ifdef CFG_64BIT_VSPRINTF
static char * number(char * str, long long num, unsigned int base, int size, int precision ,int type)
#else
static char * number(char * str, long num, unsigned int base, int size, int precision ,int type)
#endif
{
c0008664:	e92d4800 	push	{fp, lr}
c0008668:	e28db004 	add	fp, sp, #4
c000866c:	e24dd068 	sub	sp, sp, #104	; 0x68
c0008670:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
c0008674:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
c0008678:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
c000867c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	char c,sign,tmp[66];
	const char *digits="0123456789abcdefghijklmnopqrstuvwxyz";
c0008680:	e30a3140 	movw	r3, #41280	; 0xa140
c0008684:	e34c3000 	movt	r3, #49152	; 0xc000
c0008688:	e50b300c 	str	r3, [fp, #-12]
	int i;

	if (type & LARGE)
c000868c:	e59b3008 	ldr	r3, [fp, #8]
c0008690:	e2033040 	and	r3, r3, #64	; 0x40
c0008694:	e3530000 	cmp	r3, #0
c0008698:	0a000002 	beq	c00086a8 <number+0x44>
		digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
c000869c:	e30a3168 	movw	r3, #41320	; 0xa168
c00086a0:	e34c3000 	movt	r3, #49152	; 0xc000
c00086a4:	e50b300c 	str	r3, [fp, #-12]
	if (type & LEFT)
c00086a8:	e59b3008 	ldr	r3, [fp, #8]
c00086ac:	e2033010 	and	r3, r3, #16
c00086b0:	e3530000 	cmp	r3, #0
c00086b4:	0a000002 	beq	c00086c4 <number+0x60>
		type &= ~ZEROPAD;
c00086b8:	e59b3008 	ldr	r3, [fp, #8]
c00086bc:	e3c33001 	bic	r3, r3, #1
c00086c0:	e58b3008 	str	r3, [fp, #8]
	if (base < 2 || base > 36)
c00086c4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00086c8:	e3530001 	cmp	r3, #1
c00086cc:	9a000002 	bls	c00086dc <number+0x78>
c00086d0:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00086d4:	e3530024 	cmp	r3, #36	; 0x24
c00086d8:	9a000001 	bls	c00086e4 <number+0x80>
		return 0;
c00086dc:	e3a03000 	mov	r3, #0
c00086e0:	ea0000d5 	b	c0008a3c <number+0x3d8>
	c = (type & ZEROPAD) ? '0' : ' ';
c00086e4:	e59b3008 	ldr	r3, [fp, #8]
c00086e8:	e2033001 	and	r3, r3, #1
c00086ec:	e3530000 	cmp	r3, #0
c00086f0:	0a000001 	beq	c00086fc <number+0x98>
c00086f4:	e3a03030 	mov	r3, #48	; 0x30
c00086f8:	ea000000 	b	c0008700 <number+0x9c>
c00086fc:	e3a03020 	mov	r3, #32
c0008700:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	sign = 0;
c0008704:	e3a03000 	mov	r3, #0
c0008708:	e54b3005 	strb	r3, [fp, #-5]
	if (type & SIGN) {
c000870c:	e59b3008 	ldr	r3, [fp, #8]
c0008710:	e2033002 	and	r3, r3, #2
c0008714:	e3530000 	cmp	r3, #0
c0008718:	0a00001e 	beq	c0008798 <number+0x134>
		if (num < 0) {
c000871c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008720:	e3530000 	cmp	r3, #0
c0008724:	aa000008 	bge	c000874c <number+0xe8>
			sign = '-';
c0008728:	e3a0302d 	mov	r3, #45	; 0x2d
c000872c:	e54b3005 	strb	r3, [fp, #-5]
			num = -num;
c0008730:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008734:	e2633000 	rsb	r3, r3, #0
c0008738:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
			size--;
c000873c:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008740:	e2433001 	sub	r3, r3, #1
c0008744:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c0008748:	ea000012 	b	c0008798 <number+0x134>
		} else if (type & PLUS) {
c000874c:	e59b3008 	ldr	r3, [fp, #8]
c0008750:	e2033004 	and	r3, r3, #4
c0008754:	e3530000 	cmp	r3, #0
c0008758:	0a000005 	beq	c0008774 <number+0x110>
			sign = '+';
c000875c:	e3a0302b 	mov	r3, #43	; 0x2b
c0008760:	e54b3005 	strb	r3, [fp, #-5]
			size--;
c0008764:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008768:	e2433001 	sub	r3, r3, #1
c000876c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c0008770:	ea000008 	b	c0008798 <number+0x134>
		} else if (type & SPACE) {
c0008774:	e59b3008 	ldr	r3, [fp, #8]
c0008778:	e2033008 	and	r3, r3, #8
c000877c:	e3530000 	cmp	r3, #0
c0008780:	0a000004 	beq	c0008798 <number+0x134>
			sign = ' ';
c0008784:	e3a03020 	mov	r3, #32
c0008788:	e54b3005 	strb	r3, [fp, #-5]
			size--;
c000878c:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008790:	e2433001 	sub	r3, r3, #1
c0008794:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
		}
	}
	if (type & SPECIAL) {
c0008798:	e59b3008 	ldr	r3, [fp, #8]
c000879c:	e2033020 	and	r3, r3, #32
c00087a0:	e3530000 	cmp	r3, #0
c00087a4:	0a00000c 	beq	c00087dc <number+0x178>
		if (base == 16)
c00087a8:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00087ac:	e3530010 	cmp	r3, #16
c00087b0:	1a000003 	bne	c00087c4 <number+0x160>
			size -= 2;
c00087b4:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00087b8:	e2433002 	sub	r3, r3, #2
c00087bc:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c00087c0:	ea000005 	b	c00087dc <number+0x178>
		else if (base == 8)
c00087c4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00087c8:	e3530008 	cmp	r3, #8
c00087cc:	1a000002 	bne	c00087dc <number+0x178>
			size--;
c00087d0:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00087d4:	e2433001 	sub	r3, r3, #1
c00087d8:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	}
	i = 0;
c00087dc:	e3a03000 	mov	r3, #0
c00087e0:	e50b3010 	str	r3, [fp, #-16]
	if (num == 0)
c00087e4:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c00087e8:	e3530000 	cmp	r3, #0
c00087ec:	1a000022 	bne	c000887c <number+0x218>
		tmp[i++]='0';
c00087f0:	e51b3010 	ldr	r3, [fp, #-16]
c00087f4:	e2832001 	add	r2, r3, #1
c00087f8:	e50b2010 	str	r2, [fp, #-16]
c00087fc:	e24b2004 	sub	r2, fp, #4
c0008800:	e0823003 	add	r3, r2, r3
c0008804:	e3a02030 	mov	r2, #48	; 0x30
c0008808:	e5432058 	strb	r2, [r3, #-88]	; 0xffffffa8
c000880c:	ea00001d 	b	c0008888 <number+0x224>
	else while (num != 0)
	if (i > precision)
c0008810:	e51b2010 	ldr	r2, [fp, #-16]
c0008814:	e59b3004 	ldr	r3, [fp, #4]
c0008818:	e1520003 	cmp	r2, r3
c000881c:	da000016 	ble	c000887c <number+0x218>
		tmp[i++] = digits[do_div(num,base)];
c0008820:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008824:	e51b1068 	ldr	r1, [fp, #-104]	; 0xffffff98
c0008828:	e1a00003 	mov	r0, r3
c000882c:	ebfffe79 	bl	c0008218 <__umodsi3>
c0008830:	e1a03000 	mov	r3, r0
c0008834:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
c0008838:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c000883c:	e51b1068 	ldr	r1, [fp, #-104]	; 0xffffff98
c0008840:	e1a00003 	mov	r0, r3
c0008844:	ebfffe9f 	bl	c00082c8 <__udivsi3>
c0008848:	e1a03000 	mov	r3, r0
c000884c:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
c0008850:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008854:	e1a02003 	mov	r2, r3
c0008858:	e51b300c 	ldr	r3, [fp, #-12]
c000885c:	e0832002 	add	r2, r3, r2
c0008860:	e51b3010 	ldr	r3, [fp, #-16]
c0008864:	e2831001 	add	r1, r3, #1
c0008868:	e50b1010 	str	r1, [fp, #-16]
c000886c:	e5d22000 	ldrb	r2, [r2]
c0008870:	e24b1004 	sub	r1, fp, #4
c0008874:	e0813003 	add	r3, r1, r3
c0008878:	e5432058 	strb	r2, [r3, #-88]	; 0xffffffa8
	else while (num != 0)
c000887c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008880:	e3530000 	cmp	r3, #0
c0008884:	1affffe1 	bne	c0008810 <number+0x1ac>
	precision = i;
c0008888:	e51b3010 	ldr	r3, [fp, #-16]
c000888c:	e58b3004 	str	r3, [fp, #4]
	size -= precision;
c0008890:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
c0008894:	e59b3004 	ldr	r3, [fp, #4]
c0008898:	e0423003 	sub	r3, r2, r3
c000889c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	if (!(type&(ZEROPAD+LEFT)))
c00088a0:	e59b3008 	ldr	r3, [fp, #8]
c00088a4:	e2033011 	and	r3, r3, #17
c00088a8:	e3530000 	cmp	r3, #0
c00088ac:	1a00000a 	bne	c00088dc <number+0x278>
		while(size-->0)
c00088b0:	ea000004 	b	c00088c8 <number+0x264>
			*str++ = ' ';
c00088b4:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00088b8:	e2832001 	add	r2, r3, #1
c00088bc:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00088c0:	e3a02020 	mov	r2, #32
c00088c4:	e5c32000 	strb	r2, [r3]
		while(size-->0)
c00088c8:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00088cc:	e2432001 	sub	r2, r3, #1
c00088d0:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c00088d4:	e3530000 	cmp	r3, #0
c00088d8:	cafffff5 	bgt	c00088b4 <number+0x250>
	if (sign)
c00088dc:	e55b3005 	ldrb	r3, [fp, #-5]
c00088e0:	e3530000 	cmp	r3, #0
c00088e4:	0a000004 	beq	c00088fc <number+0x298>
		*str++ = sign;
c00088e8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00088ec:	e2832001 	add	r2, r3, #1
c00088f0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00088f4:	e55b2005 	ldrb	r2, [fp, #-5]
c00088f8:	e5c32000 	strb	r2, [r3]
	if (type & SPECIAL) {
c00088fc:	e59b3008 	ldr	r3, [fp, #8]
c0008900:	e2033020 	and	r3, r3, #32
c0008904:	e3530000 	cmp	r3, #0
c0008908:	0a000016 	beq	c0008968 <number+0x304>
		if (base==8)
c000890c:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c0008910:	e3530008 	cmp	r3, #8
c0008914:	1a000005 	bne	c0008930 <number+0x2cc>
			*str++ = '0';
c0008918:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c000891c:	e2832001 	add	r2, r3, #1
c0008920:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008924:	e3a02030 	mov	r2, #48	; 0x30
c0008928:	e5c32000 	strb	r2, [r3]
c000892c:	ea00000d 	b	c0008968 <number+0x304>
		else if (base==16) {
c0008930:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c0008934:	e3530010 	cmp	r3, #16
c0008938:	1a00000a 	bne	c0008968 <number+0x304>
			*str++ = '0';
c000893c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008940:	e2832001 	add	r2, r3, #1
c0008944:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008948:	e3a02030 	mov	r2, #48	; 0x30
c000894c:	e5c32000 	strb	r2, [r3]
			*str++ = digits[33];
c0008950:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008954:	e2832001 	add	r2, r3, #1
c0008958:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c000895c:	e51b200c 	ldr	r2, [fp, #-12]
c0008960:	e5d22021 	ldrb	r2, [r2, #33]	; 0x21
c0008964:	e5c32000 	strb	r2, [r3]
		}
	}
	if (!(type & LEFT))
c0008968:	e59b3008 	ldr	r3, [fp, #8]
c000896c:	e2033010 	and	r3, r3, #16
c0008970:	e3530000 	cmp	r3, #0
c0008974:	1a000010 	bne	c00089bc <number+0x358>
		while (size-- > 0)
c0008978:	ea000004 	b	c0008990 <number+0x32c>
			*str++ = c;
c000897c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008980:	e2832001 	add	r2, r3, #1
c0008984:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008988:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
c000898c:	e5c32000 	strb	r2, [r3]
		while (size-- > 0)
c0008990:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008994:	e2432001 	sub	r2, r3, #1
c0008998:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c000899c:	e3530000 	cmp	r3, #0
c00089a0:	cafffff5 	bgt	c000897c <number+0x318>
	while (i < precision--)
c00089a4:	ea000004 	b	c00089bc <number+0x358>
		*str++ = '0';
c00089a8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00089ac:	e2832001 	add	r2, r3, #1
c00089b0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00089b4:	e3a02030 	mov	r2, #48	; 0x30
c00089b8:	e5c32000 	strb	r2, [r3]
	while (i < precision--)
c00089bc:	e59b3004 	ldr	r3, [fp, #4]
c00089c0:	e2432001 	sub	r2, r3, #1
c00089c4:	e58b2004 	str	r2, [fp, #4]
c00089c8:	e51b2010 	ldr	r2, [fp, #-16]
c00089cc:	e1520003 	cmp	r2, r3
c00089d0:	bafffff4 	blt	c00089a8 <number+0x344>
	while (i-- > 0)
c00089d4:	ea000007 	b	c00089f8 <number+0x394>
		*str++ = tmp[i];
c00089d8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00089dc:	e2832001 	add	r2, r3, #1
c00089e0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00089e4:	e24b105c 	sub	r1, fp, #92	; 0x5c
c00089e8:	e51b2010 	ldr	r2, [fp, #-16]
c00089ec:	e0812002 	add	r2, r1, r2
c00089f0:	e5d22000 	ldrb	r2, [r2]
c00089f4:	e5c32000 	strb	r2, [r3]
	while (i-- > 0)
c00089f8:	e51b3010 	ldr	r3, [fp, #-16]
c00089fc:	e2432001 	sub	r2, r3, #1
c0008a00:	e50b2010 	str	r2, [fp, #-16]
c0008a04:	e3530000 	cmp	r3, #0
c0008a08:	cafffff2 	bgt	c00089d8 <number+0x374>
	while (size-- > 0)
c0008a0c:	ea000004 	b	c0008a24 <number+0x3c0>
		*str++ = ' ';
c0008a10:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008a14:	e2832001 	add	r2, r3, #1
c0008a18:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008a1c:	e3a02020 	mov	r2, #32
c0008a20:	e5c32000 	strb	r2, [r3]
	while (size-- > 0)
c0008a24:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008a28:	e2432001 	sub	r2, r3, #1
c0008a2c:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c0008a30:	e3530000 	cmp	r3, #0
c0008a34:	cafffff5 	bgt	c0008a10 <number+0x3ac>
	return str;
c0008a38:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
}
c0008a3c:	e1a00003 	mov	r0, r3
c0008a40:	e24bd004 	sub	sp, fp, #4
c0008a44:	e8bd8800 	pop	{fp, pc}

c0008a48 <strnlen>:

/* Forward decl. needed for IP address printing stuff... */
int sprintf(char * buf, const char *fmt, ...);
size_t strnlen(const char * s, size_t count)
{
c0008a48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0008a4c:	e28db000 	add	fp, sp, #0
c0008a50:	e24dd00c 	sub	sp, sp, #12
c0008a54:	e50b0008 	str	r0, [fp, #-8]
c0008a58:	e50b100c 	str	r1, [fp, #-12]
	const char *sc;

	for (sc = s; count-- && *sc != '\0'; ++sc)
c0008a5c:	e51b3008 	ldr	r3, [fp, #-8]
c0008a60:	e50b3004 	str	r3, [fp, #-4]
c0008a64:	ea000002 	b	c0008a74 <strnlen+0x2c>
c0008a68:	e51b3004 	ldr	r3, [fp, #-4]
c0008a6c:	e2833001 	add	r3, r3, #1
c0008a70:	e50b3004 	str	r3, [fp, #-4]
c0008a74:	e51b300c 	ldr	r3, [fp, #-12]
c0008a78:	e2432001 	sub	r2, r3, #1
c0008a7c:	e50b200c 	str	r2, [fp, #-12]
c0008a80:	e3530000 	cmp	r3, #0
c0008a84:	0a000003 	beq	c0008a98 <strnlen+0x50>
c0008a88:	e51b3004 	ldr	r3, [fp, #-4]
c0008a8c:	e5d33000 	ldrb	r3, [r3]
c0008a90:	e3530000 	cmp	r3, #0
c0008a94:	1afffff3 	bne	c0008a68 <strnlen+0x20>
		/* nothing */;
	return sc - s;
c0008a98:	e51b2004 	ldr	r2, [fp, #-4]
c0008a9c:	e51b3008 	ldr	r3, [fp, #-8]
c0008aa0:	e0423003 	sub	r3, r2, r3
}
c0008aa4:	e1a00003 	mov	r0, r3
c0008aa8:	e28bd000 	add	sp, fp, #0
c0008aac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0008ab0:	e12fff1e 	bx	lr

c0008ab4 <vsprintf>:
int vsprintf(char *buf, const char *fmt, va_list args)
{
c0008ab4:	e92d4800 	push	{fp, lr}
c0008ab8:	e28db004 	add	fp, sp, #4
c0008abc:	e24dd044 	sub	sp, sp, #68	; 0x44
c0008ac0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
c0008ac4:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
c0008ac8:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'q' for integer fields */

	for (str=buf ; *fmt ; ++fmt) {
c0008acc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c0008ad0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
c0008ad4:	ea00021b 	b	c0009348 <vsprintf+0x894>
		if (*fmt != '%') {
c0008ad8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008adc:	e5d33000 	ldrb	r3, [r3]
c0008ae0:	e3530025 	cmp	r3, #37	; 0x25
c0008ae4:	0a000006 	beq	c0008b04 <vsprintf+0x50>
			*str++ = *fmt;
c0008ae8:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
c0008aec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008af0:	e2831001 	add	r1, r3, #1
c0008af4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c0008af8:	e5d22000 	ldrb	r2, [r2]
c0008afc:	e5c32000 	strb	r2, [r3]
			continue;
c0008b00:	ea00020d 	b	c000933c <vsprintf+0x888>
		}

		/* process flags */
		flags = 0;
c0008b04:	e3a03000 	mov	r3, #0
c0008b08:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		repeat:
			++fmt;		/* this also skips first '%' */
c0008b0c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008b10:	e2833001 	add	r3, r3, #1
c0008b14:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			switch (*fmt) {
c0008b18:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008b1c:	e5d33000 	ldrb	r3, [r3]
c0008b20:	e2433020 	sub	r3, r3, #32
c0008b24:	e3530010 	cmp	r3, #16
c0008b28:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c0008b2c:	ea000024 	b	c0008bc4 <vsprintf+0x110>
c0008b30:	c0008b94 	mulgt	r0, r4, fp
c0008b34:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b38:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b3c:	c0008ba4 	andgt	r8, r0, r4, lsr #23
c0008b40:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b44:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b48:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b4c:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b50:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b54:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b58:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b5c:	c0008b84 	andgt	r8, r0, r4, lsl #23
c0008b60:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b64:	c0008b74 	andgt	r8, r0, r4, ror fp
c0008b68:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b6c:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b70:	c0008bb4 			; <UNDEFINED> instruction: 0xc0008bb4
				case '-': flags |= LEFT; goto repeat;
c0008b74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b78:	e3833010 	orr	r3, r3, #16
c0008b7c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008b80:	eaffffe1 	b	c0008b0c <vsprintf+0x58>
				case '+': flags |= PLUS; goto repeat;
c0008b84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b88:	e3833004 	orr	r3, r3, #4
c0008b8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008b90:	eaffffdd 	b	c0008b0c <vsprintf+0x58>
				case ' ': flags |= SPACE; goto repeat;
c0008b94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b98:	e3833008 	orr	r3, r3, #8
c0008b9c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008ba0:	eaffffd9 	b	c0008b0c <vsprintf+0x58>
				case '#': flags |= SPECIAL; goto repeat;
c0008ba4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008ba8:	e3833020 	orr	r3, r3, #32
c0008bac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008bb0:	eaffffd5 	b	c0008b0c <vsprintf+0x58>
				case '0': flags |= ZEROPAD; goto repeat;
c0008bb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008bb8:	e3833001 	orr	r3, r3, #1
c0008bbc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008bc0:	eaffffd1 	b	c0008b0c <vsprintf+0x58>
				}

		/* get field width */
		field_width = -1;
c0008bc4:	e3e03000 	mvn	r3, #0
c0008bc8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		if (is_digit(*fmt))
c0008bcc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008bd0:	e5d33000 	ldrb	r3, [r3]
c0008bd4:	e353002f 	cmp	r3, #47	; 0x2f
c0008bd8:	9a000008 	bls	c0008c00 <vsprintf+0x14c>
c0008bdc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008be0:	e5d33000 	ldrb	r3, [r3]
c0008be4:	e3530039 	cmp	r3, #57	; 0x39
c0008be8:	8a000004 	bhi	c0008c00 <vsprintf+0x14c>
			field_width = skip_atoi(&fmt);
c0008bec:	e24b303c 	sub	r3, fp, #60	; 0x3c
c0008bf0:	e1a00003 	mov	r0, r3
c0008bf4:	ebfffe75 	bl	c00085d0 <skip_atoi>
c0008bf8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
c0008bfc:	ea000014 	b	c0008c54 <vsprintf+0x1a0>
		else if (*fmt == '*') {
c0008c00:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c04:	e5d33000 	ldrb	r3, [r3]
c0008c08:	e353002a 	cmp	r3, #42	; 0x2a
c0008c0c:	1a000010 	bne	c0008c54 <vsprintf+0x1a0>
			++fmt;
c0008c10:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c14:	e2833001 	add	r3, r3, #1
c0008c18:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			/* it's the next argument */
			field_width = va_arg(args, int);
c0008c1c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008c20:	e2832004 	add	r2, r3, #4
c0008c24:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008c28:	e5933000 	ldr	r3, [r3]
c0008c2c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			if (field_width < 0) {
c0008c30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008c34:	e3530000 	cmp	r3, #0
c0008c38:	aa000005 	bge	c0008c54 <vsprintf+0x1a0>
				field_width = -field_width;
c0008c3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008c40:	e2633000 	rsb	r3, r3, #0
c0008c44:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
				flags |= LEFT;
c0008c48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008c4c:	e3833010 	orr	r3, r3, #16
c0008c50:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			}
		}

		/* get the precision */
		precision = -1;
c0008c54:	e3e03000 	mvn	r3, #0
c0008c58:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		if (*fmt == '.') {
c0008c5c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c60:	e5d33000 	ldrb	r3, [r3]
c0008c64:	e353002e 	cmp	r3, #46	; 0x2e
c0008c68:	1a000020 	bne	c0008cf0 <vsprintf+0x23c>
			++fmt;
c0008c6c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c70:	e2833001 	add	r3, r3, #1
c0008c74:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			if (is_digit(*fmt))
c0008c78:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c7c:	e5d33000 	ldrb	r3, [r3]
c0008c80:	e353002f 	cmp	r3, #47	; 0x2f
c0008c84:	9a000008 	bls	c0008cac <vsprintf+0x1f8>
c0008c88:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c8c:	e5d33000 	ldrb	r3, [r3]
c0008c90:	e3530039 	cmp	r3, #57	; 0x39
c0008c94:	8a000004 	bhi	c0008cac <vsprintf+0x1f8>
				precision = skip_atoi(&fmt);
c0008c98:	e24b303c 	sub	r3, fp, #60	; 0x3c
c0008c9c:	e1a00003 	mov	r0, r3
c0008ca0:	ebfffe4a 	bl	c00085d0 <skip_atoi>
c0008ca4:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
c0008ca8:	ea00000b 	b	c0008cdc <vsprintf+0x228>
			else if (*fmt == '*') {
c0008cac:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cb0:	e5d33000 	ldrb	r3, [r3]
c0008cb4:	e353002a 	cmp	r3, #42	; 0x2a
c0008cb8:	1a000007 	bne	c0008cdc <vsprintf+0x228>
				++fmt;
c0008cbc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cc0:	e2833001 	add	r3, r3, #1
c0008cc4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
				/* it's the next argument */
				precision = va_arg(args, int);
c0008cc8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008ccc:	e2832004 	add	r2, r3, #4
c0008cd0:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008cd4:	e5933000 	ldr	r3, [r3]
c0008cd8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
			}
			if (precision < 0)
c0008cdc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0008ce0:	e3530000 	cmp	r3, #0
c0008ce4:	aa000001 	bge	c0008cf0 <vsprintf+0x23c>
				precision = 0;
c0008ce8:	e3a03000 	mov	r3, #0
c0008cec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		}

		/* get the conversion qualifier */
		qualifier = -1;
c0008cf0:	e3e03000 	mvn	r3, #0
c0008cf4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
c0008cf8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cfc:	e5d33000 	ldrb	r3, [r3]
c0008d00:	e3530068 	cmp	r3, #104	; 0x68
c0008d04:	0a000017 	beq	c0008d68 <vsprintf+0x2b4>
c0008d08:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d0c:	e5d33000 	ldrb	r3, [r3]
c0008d10:	e353006c 	cmp	r3, #108	; 0x6c
c0008d14:	0a000013 	beq	c0008d68 <vsprintf+0x2b4>
c0008d18:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d1c:	e5d33000 	ldrb	r3, [r3]
c0008d20:	e353004c 	cmp	r3, #76	; 0x4c
c0008d24:	0a00000f 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d28:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d2c:	e5d33000 	ldrb	r3, [r3]
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
c0008d30:	e353005a 	cmp	r3, #90	; 0x5a
c0008d34:	0a00000b 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d38:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d3c:	e5d33000 	ldrb	r3, [r3]
c0008d40:	e353007a 	cmp	r3, #122	; 0x7a
c0008d44:	0a000007 	beq	c0008d68 <vsprintf+0x2b4>
c0008d48:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d4c:	e5d33000 	ldrb	r3, [r3]
c0008d50:	e3530074 	cmp	r3, #116	; 0x74
c0008d54:	0a000003 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'q' ) {
c0008d58:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d5c:	e5d33000 	ldrb	r3, [r3]
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d60:	e3530071 	cmp	r3, #113	; 0x71
c0008d64:	1a000012 	bne	c0008db4 <vsprintf+0x300>
			qualifier = *fmt;
c0008d68:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d6c:	e5d33000 	ldrb	r3, [r3]
c0008d70:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
			if (qualifier == 'l' && *(fmt+1) == 'l') {
c0008d74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0008d78:	e353006c 	cmp	r3, #108	; 0x6c
c0008d7c:	1a000009 	bne	c0008da8 <vsprintf+0x2f4>
c0008d80:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d84:	e2833001 	add	r3, r3, #1
c0008d88:	e5d33000 	ldrb	r3, [r3]
c0008d8c:	e353006c 	cmp	r3, #108	; 0x6c
c0008d90:	1a000004 	bne	c0008da8 <vsprintf+0x2f4>
				qualifier = 'q';
c0008d94:	e3a03071 	mov	r3, #113	; 0x71
c0008d98:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
				++fmt;
c0008d9c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008da0:	e2833001 	add	r3, r3, #1
c0008da4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			}
			++fmt;
c0008da8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008dac:	e2833001 	add	r3, r3, #1
c0008db0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
		}

		/* default base */
		base = 10;
c0008db4:	e3a0300a 	mov	r3, #10
c0008db8:	e50b3010 	str	r3, [fp, #-16]

		switch (*fmt) {
c0008dbc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008dc0:	e5d33000 	ldrb	r3, [r3]
c0008dc4:	e2433025 	sub	r3, r3, #37	; 0x25
c0008dc8:	e3530053 	cmp	r3, #83	; 0x53
c0008dcc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c0008dd0:	ea0000fc 	b	c00091c8 <vsprintf+0x714>
c0008dd4:	c000917c 	andgt	r9, r0, ip, ror r1
c0008dd8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ddc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008dec:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008dfc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e00:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e04:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e08:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e0c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e10:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e14:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e18:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e1c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e20:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e24:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e28:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e2c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e30:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e34:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e38:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e3c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e40:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e44:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e48:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e4c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e50:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e54:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e58:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e5c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e60:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e64:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e68:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e6c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e70:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e74:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e78:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e7c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e80:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e84:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e88:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e8c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e90:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e94:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e98:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e9c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ea0:	c00091a0 	andgt	r9, r0, r0, lsr #3
c0008ea4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ea8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eac:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ebc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ecc:	c0008f24 	andgt	r8, r0, r4, lsr #30
c0008ed0:	c00091b8 			; <UNDEFINED> instruction: 0xc00091b8
c0008ed4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ed8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008edc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ee0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ee4:	c00091b8 			; <UNDEFINED> instruction: 0xc00091b8
c0008ee8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eec:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef8:	c0009118 	andgt	r9, r0, r8, lsl r1
c0008efc:	c0009194 	mulgt	r0, r4, r1
c0008f00:	c00090bc 	strhgt	r9, [r0], -ip
c0008f04:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f08:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f0c:	c0008fbc 			; <UNDEFINED> instruction: 0xc0008fbc
c0008f10:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f14:	c0009218 	andgt	r9, r0, r8, lsl r2
c0008f18:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f1c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f20:	c00091ac 	andgt	r9, r0, ip, lsr #3
		case 'c':
			if (!(flags & LEFT))
c0008f24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008f28:	e2033010 	and	r3, r3, #16
c0008f2c:	e3530000 	cmp	r3, #0
c0008f30:	1a00000b 	bne	c0008f64 <vsprintf+0x4b0>
				while (--field_width > 0)
c0008f34:	ea000004 	b	c0008f4c <vsprintf+0x498>
					*str++ = ' ';
c0008f38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f3c:	e2832001 	add	r2, r3, #1
c0008f40:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f44:	e3a02020 	mov	r2, #32
c0008f48:	e5c32000 	strb	r2, [r3]
				while (--field_width > 0)
c0008f4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008f50:	e2433001 	sub	r3, r3, #1
c0008f54:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
c0008f58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008f5c:	e3530000 	cmp	r3, #0
c0008f60:	cafffff4 	bgt	c0008f38 <vsprintf+0x484>
			*str++ = (unsigned char) va_arg(args, int);
c0008f64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008f68:	e2832004 	add	r2, r3, #4
c0008f6c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008f70:	e5931000 	ldr	r1, [r3]
c0008f74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f78:	e2832001 	add	r2, r3, #1
c0008f7c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f80:	e6ef2071 	uxtb	r2, r1
c0008f84:	e5c32000 	strb	r2, [r3]
			while (--field_width > 0)
c0008f88:	ea000004 	b	c0008fa0 <vsprintf+0x4ec>
				*str++ = ' ';
c0008f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f90:	e2832001 	add	r2, r3, #1
c0008f94:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f98:	e3a02020 	mov	r2, #32
c0008f9c:	e5c32000 	strb	r2, [r3]
			while (--field_width > 0)
c0008fa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008fa4:	e2433001 	sub	r3, r3, #1
c0008fa8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
c0008fac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008fb0:	e3530000 	cmp	r3, #0
c0008fb4:	cafffff4 	bgt	c0008f8c <vsprintf+0x4d8>
			continue;
c0008fb8:	ea0000df 	b	c000933c <vsprintf+0x888>

		case 's':
			s = va_arg(args, char *);
c0008fbc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008fc0:	e2832004 	add	r2, r3, #4
c0008fc4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008fc8:	e5933000 	ldr	r3, [r3]
c0008fcc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			if (!s)
c0008fd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008fd4:	e3530000 	cmp	r3, #0
c0008fd8:	1a000002 	bne	c0008fe8 <vsprintf+0x534>
				s = "<NULL>";
c0008fdc:	e30a3190 	movw	r3, #41360	; 0xa190
c0008fe0:	e34c3000 	movt	r3, #49152	; 0xc000
c0008fe4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

			len = strnlen(s, precision);
c0008fe8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0008fec:	e1a01003 	mov	r1, r3
c0008ff0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
c0008ff4:	ebfffe93 	bl	c0008a48 <strnlen>
c0008ff8:	e1a03000 	mov	r3, r0
c0008ffc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

			if (!(flags & LEFT))
c0009000:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0009004:	e2033010 	and	r3, r3, #16
c0009008:	e3530000 	cmp	r3, #0
c000900c:	1a00000b 	bne	c0009040 <vsprintf+0x58c>
				while (len < field_width--)
c0009010:	ea000004 	b	c0009028 <vsprintf+0x574>
					*str++ = ' ';
c0009014:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009018:	e2832001 	add	r2, r3, #1
c000901c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009020:	e3a02020 	mov	r2, #32
c0009024:	e5c32000 	strb	r2, [r3]
				while (len < field_width--)
c0009028:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c000902c:	e2432001 	sub	r2, r3, #1
c0009030:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
c0009034:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
c0009038:	e1520003 	cmp	r2, r3
c000903c:	bafffff4 	blt	c0009014 <vsprintf+0x560>
			for (i = 0; i < len; ++i)
c0009040:	e3a03000 	mov	r3, #0
c0009044:	e50b300c 	str	r3, [fp, #-12]
c0009048:	ea00000a 	b	c0009078 <vsprintf+0x5c4>
				*str++ = *s++;
c000904c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
c0009050:	e2823001 	add	r3, r2, #1
c0009054:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
c0009058:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000905c:	e2831001 	add	r1, r3, #1
c0009060:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c0009064:	e5d22000 	ldrb	r2, [r2]
c0009068:	e5c32000 	strb	r2, [r3]
			for (i = 0; i < len; ++i)
c000906c:	e51b300c 	ldr	r3, [fp, #-12]
c0009070:	e2833001 	add	r3, r3, #1
c0009074:	e50b300c 	str	r3, [fp, #-12]
c0009078:	e51b200c 	ldr	r2, [fp, #-12]
c000907c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
c0009080:	e1520003 	cmp	r2, r3
c0009084:	bafffff0 	blt	c000904c <vsprintf+0x598>
			while (len < field_width--)
c0009088:	ea000004 	b	c00090a0 <vsprintf+0x5ec>
				*str++ = ' ';
c000908c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009090:	e2832001 	add	r2, r3, #1
c0009094:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009098:	e3a02020 	mov	r2, #32
c000909c:	e5c32000 	strb	r2, [r3]
			while (len < field_width--)
c00090a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c00090a4:	e2432001 	sub	r2, r3, #1
c00090a8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
c00090ac:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
c00090b0:	e1520003 	cmp	r2, r3
c00090b4:	bafffff4 	blt	c000908c <vsprintf+0x5d8>
			continue;
c00090b8:	ea00009f 	b	c000933c <vsprintf+0x888>

		case 'p':
			if (field_width == -1) {
c00090bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c00090c0:	e3730001 	cmn	r3, #1
c00090c4:	1a000004 	bne	c00090dc <vsprintf+0x628>
				field_width = 2*sizeof(void *);
c00090c8:	e3a03008 	mov	r3, #8
c00090cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
				flags |= ZEROPAD;
c00090d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00090d4:	e3833001 	orr	r3, r3, #1
c00090d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			}
			str = number(str,
				(unsigned long) va_arg(args, void *), 16,
c00090dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00090e0:	e2832004 	add	r2, r3, #4
c00090e4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00090e8:	e5933000 	ldr	r3, [r3]
			str = number(str,
c00090ec:	e1a01003 	mov	r1, r3
c00090f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00090f4:	e58d3004 	str	r3, [sp, #4]
c00090f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c00090fc:	e58d3000 	str	r3, [sp]
c0009100:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0009104:	e3a02010 	mov	r2, #16
c0009108:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
c000910c:	ebfffd54 	bl	c0008664 <number>
c0009110:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
				field_width, precision, flags);
			continue;
c0009114:	ea000088 	b	c000933c <vsprintf+0x888>


		case 'n':
			if (qualifier == 'l') {
c0009118:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c000911c:	e353006c 	cmp	r3, #108	; 0x6c
c0009120:	1a00000a 	bne	c0009150 <vsprintf+0x69c>
				long * ip = va_arg(args, long *);
c0009124:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009128:	e2832004 	add	r2, r3, #4
c000912c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009130:	e5933000 	ldr	r3, [r3]
c0009134:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
				*ip = (str - buf);
c0009138:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c000913c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c0009140:	e0422003 	sub	r2, r2, r3
c0009144:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
c0009148:	e5832000 	str	r2, [r3]
			} else {
				int * ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
c000914c:	ea00007a 	b	c000933c <vsprintf+0x888>
				int * ip = va_arg(args, int *);
c0009150:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009154:	e2832004 	add	r2, r3, #4
c0009158:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c000915c:	e5933000 	ldr	r3, [r3]
c0009160:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
				*ip = (str - buf);
c0009164:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c0009168:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c000916c:	e0422003 	sub	r2, r2, r3
c0009170:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
c0009174:	e5832000 	str	r2, [r3]
			continue;
c0009178:	ea00006f 	b	c000933c <vsprintf+0x888>

		case '%':
			*str++ = '%';
c000917c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009180:	e2832001 	add	r2, r3, #1
c0009184:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009188:	e3a02025 	mov	r2, #37	; 0x25
c000918c:	e5c32000 	strb	r2, [r3]
			continue;
c0009190:	ea000069 	b	c000933c <vsprintf+0x888>

		/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
c0009194:	e3a03008 	mov	r3, #8
c0009198:	e50b3010 	str	r3, [fp, #-16]
			break;
c000919c:	ea00001e 	b	c000921c <vsprintf+0x768>

		case 'X':
			flags |= LARGE;
c00091a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00091a4:	e3833040 	orr	r3, r3, #64	; 0x40
c00091a8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		case 'x':
			base = 16;
c00091ac:	e3a03010 	mov	r3, #16
c00091b0:	e50b3010 	str	r3, [fp, #-16]
			break;
c00091b4:	ea000018 	b	c000921c <vsprintf+0x768>

		case 'd':
		case 'i':
			flags |= SIGN;
c00091b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00091bc:	e3833002 	orr	r3, r3, #2
c00091c0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		case 'u':
			break;
c00091c4:	ea000013 	b	c0009218 <vsprintf+0x764>

		default:
			*str++ = '%';
c00091c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c00091cc:	e2832001 	add	r2, r3, #1
c00091d0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c00091d4:	e3a02025 	mov	r2, #37	; 0x25
c00091d8:	e5c32000 	strb	r2, [r3]
			if (*fmt)
c00091dc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c00091e0:	e5d33000 	ldrb	r3, [r3]
c00091e4:	e3530000 	cmp	r3, #0
c00091e8:	0a000006 	beq	c0009208 <vsprintf+0x754>
				*str++ = *fmt;
c00091ec:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
c00091f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c00091f4:	e2831001 	add	r1, r3, #1
c00091f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c00091fc:	e5d22000 	ldrb	r2, [r2]
c0009200:	e5c32000 	strb	r2, [r3]
			else
				--fmt;
			continue;
c0009204:	ea00004c 	b	c000933c <vsprintf+0x888>
				--fmt;
c0009208:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c000920c:	e2433001 	sub	r3, r3, #1
c0009210:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			continue;
c0009214:	ea000048 	b	c000933c <vsprintf+0x888>
			break;
c0009218:	e320f000 	nop	{0}
#ifdef CFG_64BIT_VSPRINTF
		if (qualifier == 'q')  /* "quad" for 64 bit variables */
			num = va_arg(args, unsigned long long);
		else
#endif
		if (qualifier == 'l') {
c000921c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009220:	e353006c 	cmp	r3, #108	; 0x6c
c0009224:	1a000005 	bne	c0009240 <vsprintf+0x78c>
			num = va_arg(args, unsigned long);
c0009228:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c000922c:	e2832004 	add	r2, r3, #4
c0009230:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009234:	e5933000 	ldr	r3, [r3]
c0009238:	e50b3008 	str	r3, [fp, #-8]
c000923c:	ea000034 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 'Z' || qualifier == 'z') {
c0009240:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009244:	e353005a 	cmp	r3, #90	; 0x5a
c0009248:	0a000002 	beq	c0009258 <vsprintf+0x7a4>
c000924c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009250:	e353007a 	cmp	r3, #122	; 0x7a
c0009254:	1a000005 	bne	c0009270 <vsprintf+0x7bc>
			num = va_arg(args, size_t);
c0009258:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c000925c:	e2832004 	add	r2, r3, #4
c0009260:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009264:	e5933000 	ldr	r3, [r3]
c0009268:	e50b3008 	str	r3, [fp, #-8]
c000926c:	ea000028 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 't') {
c0009270:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009274:	e3530074 	cmp	r3, #116	; 0x74
c0009278:	1a000005 	bne	c0009294 <vsprintf+0x7e0>
			num = va_arg(args, long);
c000927c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009280:	e2832004 	add	r2, r3, #4
c0009284:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009288:	e5933000 	ldr	r3, [r3]
c000928c:	e50b3008 	str	r3, [fp, #-8]
c0009290:	ea00001f 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 'h') {
c0009294:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009298:	e3530068 	cmp	r3, #104	; 0x68
c000929c:	1a00000d 	bne	c00092d8 <vsprintf+0x824>
			num = (unsigned short) va_arg(args, int);
c00092a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00092a4:	e2832004 	add	r2, r3, #4
c00092a8:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00092ac:	e5933000 	ldr	r3, [r3]
c00092b0:	e6ff3073 	uxth	r3, r3
c00092b4:	e50b3008 	str	r3, [fp, #-8]
			if (flags & SIGN)
c00092b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00092bc:	e2033002 	and	r3, r3, #2
c00092c0:	e3530000 	cmp	r3, #0
c00092c4:	0a000012 	beq	c0009314 <vsprintf+0x860>
				num = (short) num;
c00092c8:	e51b3008 	ldr	r3, [fp, #-8]
c00092cc:	e6bf3073 	sxth	r3, r3
c00092d0:	e50b3008 	str	r3, [fp, #-8]
c00092d4:	ea00000e 	b	c0009314 <vsprintf+0x860>
		} else if (flags & SIGN)
c00092d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00092dc:	e2033002 	and	r3, r3, #2
c00092e0:	e3530000 	cmp	r3, #0
c00092e4:	0a000005 	beq	c0009300 <vsprintf+0x84c>
			num = va_arg(args, int);
c00092e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00092ec:	e2832004 	add	r2, r3, #4
c00092f0:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00092f4:	e5933000 	ldr	r3, [r3]
c00092f8:	e50b3008 	str	r3, [fp, #-8]
c00092fc:	ea000004 	b	c0009314 <vsprintf+0x860>
		else
			num = va_arg(args, unsigned int);
c0009300:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009304:	e2832004 	add	r2, r3, #4
c0009308:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c000930c:	e5933000 	ldr	r3, [r3]
c0009310:	e50b3008 	str	r3, [fp, #-8]
		str = number(str, num, base, field_width, precision, flags);
c0009314:	e51b1008 	ldr	r1, [fp, #-8]
c0009318:	e51b2010 	ldr	r2, [fp, #-16]
c000931c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0009320:	e58d3004 	str	r3, [sp, #4]
c0009324:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0009328:	e58d3000 	str	r3, [sp]
c000932c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0009330:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
c0009334:	ebfffcca 	bl	c0008664 <number>
c0009338:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
	for (str=buf ; *fmt ; ++fmt) {
c000933c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0009340:	e2833001 	add	r3, r3, #1
c0009344:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
c0009348:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c000934c:	e5d33000 	ldrb	r3, [r3]
c0009350:	e3530000 	cmp	r3, #0
c0009354:	1afffddf 	bne	c0008ad8 <vsprintf+0x24>
	}
	*str = '\0';
c0009358:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000935c:	e3a02000 	mov	r2, #0
c0009360:	e5c32000 	strb	r2, [r3]
	return str-buf;
c0009364:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c0009368:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c000936c:	e0423003 	sub	r3, r2, r3
}
c0009370:	e1a00003 	mov	r0, r3
c0009374:	e24bd004 	sub	sp, fp, #4
c0009378:	e8bd8800 	pop	{fp, pc}

c000937c <sprintf>:

int sprintf(char * buf, const char *fmt, ...)
{
c000937c:	e92d000e 	push	{r1, r2, r3}
c0009380:	e92d4800 	push	{fp, lr}
c0009384:	e28db004 	add	fp, sp, #4
c0009388:	e24dd00c 	sub	sp, sp, #12
c000938c:	e50b0010 	str	r0, [fp, #-16]
	va_list args;
	int i;

	va_start(args, fmt);
c0009390:	e28b3008 	add	r3, fp, #8
c0009394:	e50b300c 	str	r3, [fp, #-12]
	i=vsprintf(buf,fmt,args);
c0009398:	e51b300c 	ldr	r3, [fp, #-12]
c000939c:	e1a02003 	mov	r2, r3
c00093a0:	e59b1004 	ldr	r1, [fp, #4]
c00093a4:	e51b0010 	ldr	r0, [fp, #-16]
c00093a8:	ebfffdc1 	bl	c0008ab4 <vsprintf>
c00093ac:	e50b0008 	str	r0, [fp, #-8]
	va_end(args);
	return i;
c00093b0:	e51b3008 	ldr	r3, [fp, #-8]
}
c00093b4:	e1a00003 	mov	r0, r3
c00093b8:	e24bd004 	sub	sp, fp, #4
c00093bc:	e8bd4800 	pop	{fp, lr}
c00093c0:	e28dd00c 	add	sp, sp, #12
c00093c4:	e12fff1e 	bx	lr

c00093c8 <printf>:

void printf (const char *fmt, ...)
{
c00093c8:	e92d000f 	push	{r0, r1, r2, r3}
c00093cc:	e92d4800 	push	{fp, lr}
c00093d0:	e28db004 	add	fp, sp, #4
c00093d4:	e24dd068 	sub	sp, sp, #104	; 0x68
	va_list args;
	char printbuffer[100];
	va_start (args, fmt);
c00093d8:	e28b3008 	add	r3, fp, #8
c00093dc:	e50b3008 	str	r3, [fp, #-8]

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	vsprintf (printbuffer, fmt, args);
c00093e0:	e51b2008 	ldr	r2, [fp, #-8]
c00093e4:	e24b306c 	sub	r3, fp, #108	; 0x6c
c00093e8:	e59b1004 	ldr	r1, [fp, #4]
c00093ec:	e1a00003 	mov	r0, r3
c00093f0:	ebfffdaf 	bl	c0008ab4 <vsprintf>
	va_end (args);
	__uart_puts (printbuffer);
c00093f4:	e24b306c 	sub	r3, fp, #108	; 0x6c
c00093f8:	e1a00003 	mov	r0, r3
c00093fc:	eb000096 	bl	c000965c <__uart_puts>
}
c0009400:	e320f000 	nop	{0}
c0009404:	e24bd004 	sub	sp, fp, #4
c0009408:	e8bd4800 	pop	{fp, lr}
c000940c:	e28dd010 	add	sp, sp, #16
c0009410:	e12fff1e 	bx	lr

c0009414 <__uart_init>:
#include "stm32mp1xx_gpio.h"
#include "stm32mp1xx_uart.h"
// UART4_TX : PG11  AF6
// UART4_RX : PB2   AF8
void __uart_init()
{
c0009414:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009418:	e28db000 	add	fp, sp, #0
   	// GPIOB2 设置为复用功能
   	GPIOB->MODER &= (~(0x3 << 4));
c000941c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009420:	e3453000 	movt	r3, #20480	; 0x5000
c0009424:	e5932000 	ldr	r2, [r3]
c0009428:	e3a03a03 	mov	r3, #12288	; 0x3000
c000942c:	e3453000 	movt	r3, #20480	; 0x5000
c0009430:	e3c22030 	bic	r2, r2, #48	; 0x30
c0009434:	e5832000 	str	r2, [r3]
   	GPIOB->MODER |= (0x2 << 4);
c0009438:	e3a03a03 	mov	r3, #12288	; 0x3000
c000943c:	e3453000 	movt	r3, #20480	; 0x5000
c0009440:	e5932000 	ldr	r2, [r3]
c0009444:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009448:	e3453000 	movt	r3, #20480	; 0x5000
c000944c:	e3822020 	orr	r2, r2, #32
c0009450:	e5832000 	str	r2, [r3]
	GPIOB->AFRL &= (~(0xF << 8));
c0009454:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009458:	e3453000 	movt	r3, #20480	; 0x5000
c000945c:	e5932020 	ldr	r2, [r3, #32]
c0009460:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009464:	e3453000 	movt	r3, #20480	; 0x5000
c0009468:	e3c22c0f 	bic	r2, r2, #3840	; 0xf00
c000946c:	e5832020 	str	r2, [r3, #32]
	GPIOB->AFRL |= (0x8 << 8);
c0009470:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009474:	e3453000 	movt	r3, #20480	; 0x5000
c0009478:	e5932020 	ldr	r2, [r3, #32]
c000947c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009480:	e3453000 	movt	r3, #20480	; 0x5000
c0009484:	e3822b02 	orr	r2, r2, #2048	; 0x800
c0009488:	e5832020 	str	r2, [r3, #32]
	// GPIOG11 设置为复用功能 
	GPIOG->MODER &= (~(0x3 << 22));
c000948c:	e3a03902 	mov	r3, #32768	; 0x8000
c0009490:	e3453000 	movt	r3, #20480	; 0x5000
c0009494:	e5932000 	ldr	r2, [r3]
c0009498:	e3a03902 	mov	r3, #32768	; 0x8000
c000949c:	e3453000 	movt	r3, #20480	; 0x5000
c00094a0:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
c00094a4:	e5832000 	str	r2, [r3]
	GPIOG->MODER |= (0x2 << 4);
c00094a8:	e3a03902 	mov	r3, #32768	; 0x8000
c00094ac:	e3453000 	movt	r3, #20480	; 0x5000
c00094b0:	e5932000 	ldr	r2, [r3]
c00094b4:	e3a03902 	mov	r3, #32768	; 0x8000
c00094b8:	e3453000 	movt	r3, #20480	; 0x5000
c00094bc:	e3822020 	orr	r2, r2, #32
c00094c0:	e5832000 	str	r2, [r3]
	GPIOG->AFRH &= (~(0xF << 12));
c00094c4:	e3a03902 	mov	r3, #32768	; 0x8000
c00094c8:	e3453000 	movt	r3, #20480	; 0x5000
c00094cc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00094d0:	e3a03902 	mov	r3, #32768	; 0x8000
c00094d4:	e3453000 	movt	r3, #20480	; 0x5000
c00094d8:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
c00094dc:	e5832024 	str	r2, [r3, #36]	; 0x24
	GPIOG->AFRH |= (0x6 << 12);
c00094e0:	e3a03902 	mov	r3, #32768	; 0x8000
c00094e4:	e3453000 	movt	r3, #20480	; 0x5000
c00094e8:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00094ec:	e3a03902 	mov	r3, #32768	; 0x8000
c00094f0:	e3453000 	movt	r3, #20480	; 0x5000
c00094f4:	e3822a06 	orr	r2, r2, #24576	; 0x6000
c00094f8:	e5832024 	str	r2, [r3, #36]	; 0x24
	// 设置数据长度为8位   USART_CR1  
	USART4->CR1 &= (~(0x1 << 28));
c00094fc:	e3a03000 	mov	r3, #0
c0009500:	e3443001 	movt	r3, #16385	; 0x4001
c0009504:	e5932000 	ldr	r2, [r3]
c0009508:	e3a03000 	mov	r3, #0
c000950c:	e3443001 	movt	r3, #16385	; 0x4001
c0009510:	e3c22201 	bic	r2, r2, #268435456	; 0x10000000
c0009514:	e5832000 	str	r2, [r3]
	USART4->CR1 &= (~(0x1 << 12));
c0009518:	e3a03000 	mov	r3, #0
c000951c:	e3443001 	movt	r3, #16385	; 0x4001
c0009520:	e5932000 	ldr	r2, [r3]
c0009524:	e3a03000 	mov	r3, #0
c0009528:	e3443001 	movt	r3, #16385	; 0x4001
c000952c:	e3c22a01 	bic	r2, r2, #4096	; 0x1000
c0009530:	e5832000 	str	r2, [r3]
	// 采样率为16位 
	USART4->CR1 &= (~(0x1 << 15));
c0009534:	e3a03000 	mov	r3, #0
c0009538:	e3443001 	movt	r3, #16385	; 0x4001
c000953c:	e5932000 	ldr	r2, [r3]
c0009540:	e3a03000 	mov	r3, #0
c0009544:	e3443001 	movt	r3, #16385	; 0x4001
c0009548:	e3c22902 	bic	r2, r2, #32768	; 0x8000
c000954c:	e5832000 	str	r2, [r3]
	// 设置波特率为115200bps 
	USART4->PRESC &= (~(0xF << 0));
c0009550:	e3a03000 	mov	r3, #0
c0009554:	e3443001 	movt	r3, #16385	; 0x4001
c0009558:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
c000955c:	e3a03000 	mov	r3, #0
c0009560:	e3443001 	movt	r3, #16385	; 0x4001
c0009564:	e3c2200f 	bic	r2, r2, #15
c0009568:	e583202c 	str	r2, [r3, #44]	; 0x2c
	USART4->BRR = 0xD0;
c000956c:	e3a03000 	mov	r3, #0
c0009570:	e3443001 	movt	r3, #16385	; 0x4001
c0009574:	e3a020d0 	mov	r2, #208	; 0xd0
c0009578:	e583200c 	str	r2, [r3, #12]
	// 停止位1位
	USART4->CR2 &= (~(0x3 << 12));
c000957c:	e3a03000 	mov	r3, #0
c0009580:	e3443001 	movt	r3, #16385	; 0x4001
c0009584:	e5932004 	ldr	r2, [r3, #4]
c0009588:	e3a03000 	mov	r3, #0
c000958c:	e3443001 	movt	r3, #16385	; 0x4001
c0009590:	e3c22a03 	bic	r2, r2, #12288	; 0x3000
c0009594:	e5832004 	str	r2, [r3, #4]
	// 使能USART串口 
	USART4->CR1 |= (0x1 << 0);
c0009598:	e3a03000 	mov	r3, #0
c000959c:	e3443001 	movt	r3, #16385	; 0x4001
c00095a0:	e5932000 	ldr	r2, [r3]
c00095a4:	e3a03000 	mov	r3, #0
c00095a8:	e3443001 	movt	r3, #16385	; 0x4001
c00095ac:	e3822001 	orr	r2, r2, #1
c00095b0:	e5832000 	str	r2, [r3]
	// 使能USART的发送或者接收功能 
	USART4->CR1 |= (0x1 << 3);
c00095b4:	e3a03000 	mov	r3, #0
c00095b8:	e3443001 	movt	r3, #16385	; 0x4001
c00095bc:	e5932000 	ldr	r2, [r3]
c00095c0:	e3a03000 	mov	r3, #0
c00095c4:	e3443001 	movt	r3, #16385	; 0x4001
c00095c8:	e3822008 	orr	r2, r2, #8
c00095cc:	e5832000 	str	r2, [r3]
	USART4->CR1 |= (0x1 << 2);
c00095d0:	e3a03000 	mov	r3, #0
c00095d4:	e3443001 	movt	r3, #16385	; 0x4001
c00095d8:	e5932000 	ldr	r2, [r3]
c00095dc:	e3a03000 	mov	r3, #0
c00095e0:	e3443001 	movt	r3, #16385	; 0x4001
c00095e4:	e3822004 	orr	r2, r2, #4
c00095e8:	e5832000 	str	r2, [r3]

}
c00095ec:	e320f000 	nop	{0}
c00095f0:	e28bd000 	add	sp, fp, #0
c00095f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00095f8:	e12fff1e 	bx	lr

c00095fc <__uart_putc>:

void __uart_putc(const char data)
{
c00095fc:	e92d4800 	push	{fp, lr}
c0009600:	e28db004 	add	fp, sp, #4
c0009604:	e24dd004 	sub	sp, sp, #4
c0009608:	e1a03000 	mov	r3, r0
c000960c:	e54b3008 	strb	r3, [fp, #-8]
	while (!(USART4->ISR & (0x1 << 7)));
c0009610:	e320f000 	nop	{0}
c0009614:	e3a03000 	mov	r3, #0
c0009618:	e3443001 	movt	r3, #16385	; 0x4001
c000961c:	e593301c 	ldr	r3, [r3, #28]
c0009620:	e2033080 	and	r3, r3, #128	; 0x80
c0009624:	e3530000 	cmp	r3, #0
c0009628:	0afffff9 	beq	c0009614 <__uart_putc+0x18>
	USART4->TDR = data;
c000962c:	e3a03000 	mov	r3, #0
c0009630:	e3443001 	movt	r3, #16385	; 0x4001
c0009634:	e55b2008 	ldrb	r2, [fp, #-8]
c0009638:	e5832028 	str	r2, [r3, #40]	; 0x28
	if (data == '\n')
c000963c:	e55b3008 	ldrb	r3, [fp, #-8]
c0009640:	e353000a 	cmp	r3, #10
c0009644:	1a000001 	bne	c0009650 <__uart_putc+0x54>
		__uart_putc('\r');
c0009648:	e3a0000d 	mov	r0, #13
c000964c:	ebffffea 	bl	c00095fc <__uart_putc>
}
c0009650:	e320f000 	nop	{0}
c0009654:	e24bd004 	sub	sp, fp, #4
c0009658:	e8bd8800 	pop	{fp, pc}

c000965c <__uart_puts>:
void __uart_puts(const  char  *pstr)
{
c000965c:	e92d4800 	push	{fp, lr}
c0009660:	e28db004 	add	fp, sp, #4
c0009664:	e24dd004 	sub	sp, sp, #4
c0009668:	e50b0008 	str	r0, [fp, #-8]
	while(*pstr != '\0')
c000966c:	ea000005 	b	c0009688 <__uart_puts+0x2c>
		__uart_putc(*pstr++);
c0009670:	e51b3008 	ldr	r3, [fp, #-8]
c0009674:	e2832001 	add	r2, r3, #1
c0009678:	e50b2008 	str	r2, [fp, #-8]
c000967c:	e5d33000 	ldrb	r3, [r3]
c0009680:	e1a00003 	mov	r0, r3
c0009684:	ebffffdc 	bl	c00095fc <__uart_putc>
	while(*pstr != '\0')
c0009688:	e51b3008 	ldr	r3, [fp, #-8]
c000968c:	e5d33000 	ldrb	r3, [r3]
c0009690:	e3530000 	cmp	r3, #0
c0009694:	1afffff5 	bne	c0009670 <__uart_puts+0x14>
}
c0009698:	e320f000 	nop	{0}
c000969c:	e24bd004 	sub	sp, fp, #4
c00096a0:	e8bd8800 	pop	{fp, pc}

c00096a4 <__uart_getc>:

char __uart_getc(void)
{
c00096a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00096a8:	e28db000 	add	fp, sp, #0
c00096ac:	e24dd004 	sub	sp, sp, #4
	char ch;
	while(!(USART4->ISR & (0x1 << 5)));
c00096b0:	e320f000 	nop	{0}
c00096b4:	e3a03000 	mov	r3, #0
c00096b8:	e3443001 	movt	r3, #16385	; 0x4001
c00096bc:	e593301c 	ldr	r3, [r3, #28]
c00096c0:	e2033020 	and	r3, r3, #32
c00096c4:	e3530000 	cmp	r3, #0
c00096c8:	0afffff9 	beq	c00096b4 <__uart_getc+0x10>
	ch = (char)USART4->RDR;
c00096cc:	e3a03000 	mov	r3, #0
c00096d0:	e3443001 	movt	r3, #16385	; 0x4001
c00096d4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
c00096d8:	e54b3001 	strb	r3, [fp, #-1]
	return ch;
c00096dc:	e55b3001 	ldrb	r3, [fp, #-1]
}
c00096e0:	e1a00003 	mov	r0, r3
c00096e4:	e28bd000 	add	sp, fp, #0
c00096e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00096ec:	e12fff1e 	bx	lr

c00096f0 <do_irq>:
extern void printf(const char *fmt, ...);
unsigned int i = 0;
void do_irq(void) 
{
c00096f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00096f4:	e28db000 	add	fp, sp, #0
}
c00096f8:	e320f000 	nop	{0}
c00096fc:	e28bd000 	add	sp, fp, #0
c0009700:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009704:	e12fff1e 	bx	lr

c0009708 <si7006_init>:
 * 函数功能：SI7006芯片的初始化
 * 函数参数：无
 * 函数返回值：无
*/
void si7006_init(void)
{
c0009708:	e92d4800 	push	{fp, lr}
c000970c:	e28db004 	add	fp, sp, #4
	i2c_init();
c0009710:	eb000087 	bl	c0009934 <i2c_init>
	i2c_start();
c0009714:	eb0000c2 	bl	c0009a24 <i2c_start>
	i2c_write_byte(SI7006_SLAVE<<1 | 0);
c0009718:	e3a00080 	mov	r0, #128	; 0x80
c000971c:	eb000122 	bl	c0009bac <i2c_write_byte>
	i2c_wait_ack();
c0009720:	eb0001a4 	bl	c0009db8 <i2c_wait_ack>
	i2c_write_byte(0xE6);
c0009724:	e3a000e6 	mov	r0, #230	; 0xe6
c0009728:	eb00011f 	bl	c0009bac <i2c_write_byte>
	i2c_wait_ack();
c000972c:	eb0001a1 	bl	c0009db8 <i2c_wait_ack>
	i2c_write_byte(0x3A);
c0009730:	e3a0003a 	mov	r0, #58	; 0x3a
c0009734:	eb00011c 	bl	c0009bac <i2c_write_byte>
	i2c_wait_ack();
c0009738:	eb00019e 	bl	c0009db8 <i2c_wait_ack>
	i2c_stop();
c000973c:	eb0000e8 	bl	c0009ae4 <i2c_stop>

}
c0009740:	e320f000 	nop	{0}
c0009744:	e8bd8800 	pop	{fp, pc}

c0009748 <si7006_read_hum_data>:
 * 函数返回值：无
*/

//读湿度
unsigned short si7006_read_hum_data(unsigned char slave_addr, unsigned char reg_addr)
{
c0009748:	e92d4800 	push	{fp, lr}
c000974c:	e28db004 	add	fp, sp, #4
c0009750:	e24dd00c 	sub	sp, sp, #12
c0009754:	e1a03000 	mov	r3, r0
c0009758:	e1a02001 	mov	r2, r1
c000975c:	e54b300c 	strb	r3, [fp, #-12]
c0009760:	e1a03002 	mov	r3, r2
c0009764:	e54b3010 	strb	r3, [fp, #-16]
	unsigned short dat;
	unsigned char dat_h,dat_l;
	i2c_start();
c0009768:	eb0000ad 	bl	c0009a24 <i2c_start>
	i2c_write_byte(slave_addr<<1 | 0);
c000976c:	e55b300c 	ldrb	r3, [fp, #-12]
c0009770:	e1a03083 	lsl	r3, r3, #1
c0009774:	e6ef3073 	uxtb	r3, r3
c0009778:	e1a00003 	mov	r0, r3
c000977c:	eb00010a 	bl	c0009bac <i2c_write_byte>
	i2c_wait_ack();
c0009780:	eb00018c 	bl	c0009db8 <i2c_wait_ack>
	i2c_write_byte(reg_addr);
c0009784:	e55b3010 	ldrb	r3, [fp, #-16]
c0009788:	e1a00003 	mov	r0, r3
c000978c:	eb000106 	bl	c0009bac <i2c_write_byte>
	i2c_wait_ack();
c0009790:	eb000188 	bl	c0009db8 <i2c_wait_ack>
	i2c_start();
c0009794:	eb0000a2 	bl	c0009a24 <i2c_start>
	i2c_write_byte(slave_addr<<1|1);
c0009798:	e55b300c 	ldrb	r3, [fp, #-12]
c000979c:	e1a03083 	lsl	r3, r3, #1
c00097a0:	e6af3073 	sxtb	r3, r3
c00097a4:	e3833001 	orr	r3, r3, #1
c00097a8:	e6af3073 	sxtb	r3, r3
c00097ac:	e6ef3073 	uxtb	r3, r3
c00097b0:	e1a00003 	mov	r0, r3
c00097b4:	eb0000fc 	bl	c0009bac <i2c_write_byte>
	i2c_wait_ack();
c00097b8:	eb00017e 	bl	c0009db8 <i2c_wait_ack>
	delay_ms(10);
c00097bc:	e3a0000a 	mov	r0, #10
c00097c0:	eb000214 	bl	c000a018 <delay_ms>
	dat_h = i2c_read_byte(0);
c00097c4:	e3a00000 	mov	r0, #0
c00097c8:	eb00013d 	bl	c0009cc4 <i2c_read_byte>
c00097cc:	e1a03000 	mov	r3, r0
c00097d0:	e54b3005 	strb	r3, [fp, #-5]
	dat_l = i2c_read_byte(1);
c00097d4:	e3a00001 	mov	r0, #1
c00097d8:	eb000139 	bl	c0009cc4 <i2c_read_byte>
c00097dc:	e1a03000 	mov	r3, r0
c00097e0:	e54b3006 	strb	r3, [fp, #-6]
	i2c_stop();
c00097e4:	eb0000be 	bl	c0009ae4 <i2c_stop>
	dat = dat_h;
c00097e8:	e55b3005 	ldrb	r3, [fp, #-5]
c00097ec:	e14b30b8 	strh	r3, [fp, #-8]
	dat<<=8;
c00097f0:	e15b30b8 	ldrh	r3, [fp, #-8]
c00097f4:	e1a03403 	lsl	r3, r3, #8
c00097f8:	e14b30b8 	strh	r3, [fp, #-8]
	dat|=dat_l;
c00097fc:	e55b3006 	ldrb	r3, [fp, #-6]
c0009800:	e6ff2073 	uxth	r2, r3
c0009804:	e15b30b8 	ldrh	r3, [fp, #-8]
c0009808:	e1823003 	orr	r3, r2, r3
c000980c:	e14b30b8 	strh	r3, [fp, #-8]
	return dat;
c0009810:	e15b30b8 	ldrh	r3, [fp, #-8]
}
c0009814:	e1a00003 	mov	r0, r3
c0009818:	e24bd004 	sub	sp, fp, #4
c000981c:	e8bd8800 	pop	{fp, pc}

c0009820 <si7006_read_temp_data>:

short si7006_read_temp_data(unsigned char slave_addr, unsigned char reg_addr)
{
c0009820:	e92d4800 	push	{fp, lr}
c0009824:	e28db004 	add	fp, sp, #4
c0009828:	e24dd00c 	sub	sp, sp, #12
c000982c:	e1a03000 	mov	r3, r0
c0009830:	e1a02001 	mov	r2, r1
c0009834:	e54b300c 	strb	r3, [fp, #-12]
c0009838:	e1a03002 	mov	r3, r2
c000983c:	e54b3010 	strb	r3, [fp, #-16]
    short dat;
	unsigned char dat_h,dat_l;
	i2c_start();
c0009840:	eb000077 	bl	c0009a24 <i2c_start>
	i2c_write_byte(slave_addr<<1 | 0);
c0009844:	e55b300c 	ldrb	r3, [fp, #-12]
c0009848:	e1a03083 	lsl	r3, r3, #1
c000984c:	e6ef3073 	uxtb	r3, r3
c0009850:	e1a00003 	mov	r0, r3
c0009854:	eb0000d4 	bl	c0009bac <i2c_write_byte>
	i2c_wait_ack();
c0009858:	eb000156 	bl	c0009db8 <i2c_wait_ack>
	i2c_write_byte(reg_addr);
c000985c:	e55b3010 	ldrb	r3, [fp, #-16]
c0009860:	e1a00003 	mov	r0, r3
c0009864:	eb0000d0 	bl	c0009bac <i2c_write_byte>
	i2c_wait_ack();
c0009868:	eb000152 	bl	c0009db8 <i2c_wait_ack>
	i2c_start();
c000986c:	eb00006c 	bl	c0009a24 <i2c_start>
	i2c_write_byte(slave_addr<<1|1);
c0009870:	e55b300c 	ldrb	r3, [fp, #-12]
c0009874:	e1a03083 	lsl	r3, r3, #1
c0009878:	e6af3073 	sxtb	r3, r3
c000987c:	e3833001 	orr	r3, r3, #1
c0009880:	e6af3073 	sxtb	r3, r3
c0009884:	e6ef3073 	uxtb	r3, r3
c0009888:	e1a00003 	mov	r0, r3
c000988c:	eb0000c6 	bl	c0009bac <i2c_write_byte>
	i2c_wait_ack();
c0009890:	eb000148 	bl	c0009db8 <i2c_wait_ack>
	delay_ms(10);
c0009894:	e3a0000a 	mov	r0, #10
c0009898:	eb0001de 	bl	c000a018 <delay_ms>
	dat_h = i2c_read_byte(0);
c000989c:	e3a00000 	mov	r0, #0
c00098a0:	eb000107 	bl	c0009cc4 <i2c_read_byte>
c00098a4:	e1a03000 	mov	r3, r0
c00098a8:	e54b3005 	strb	r3, [fp, #-5]
	dat_l = i2c_read_byte(1);
c00098ac:	e3a00001 	mov	r0, #1
c00098b0:	eb000103 	bl	c0009cc4 <i2c_read_byte>
c00098b4:	e1a03000 	mov	r3, r0
c00098b8:	e54b3006 	strb	r3, [fp, #-6]
	i2c_stop();
c00098bc:	eb000088 	bl	c0009ae4 <i2c_stop>
	dat = dat_h;
c00098c0:	e55b3005 	ldrb	r3, [fp, #-5]
c00098c4:	e14b30b8 	strh	r3, [fp, #-8]
	dat<<=8;
c00098c8:	e15b30f8 	ldrsh	r3, [fp, #-8]
c00098cc:	e1a03403 	lsl	r3, r3, #8
c00098d0:	e14b30b8 	strh	r3, [fp, #-8]
	dat|=dat_l;
c00098d4:	e55b3006 	ldrb	r3, [fp, #-6]
c00098d8:	e6bf2073 	sxth	r2, r3
c00098dc:	e15b30b8 	ldrh	r3, [fp, #-8]
c00098e0:	e1823003 	orr	r3, r2, r3
c00098e4:	e14b30b8 	strh	r3, [fp, #-8]
	return dat;
c00098e8:	e15b30f8 	ldrsh	r3, [fp, #-8]
}
c00098ec:	e1a00003 	mov	r0, r3
c00098f0:	e24bd004 	sub	sp, fp, #4
c00098f4:	e8bd8800 	pop	{fp, pc}

c00098f8 <delay_us>:
 * 函数功能：延时函数
 * 函数参数：无
 * 函数返回值：无
 * */
void delay_us(void)
{
c00098f8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00098fc:	e28db000 	add	fp, sp, #0
c0009900:	e24dd004 	sub	sp, sp, #4
	unsigned int i = 2000;
c0009904:	e3a03e7d 	mov	r3, #2000	; 0x7d0
c0009908:	e50b3004 	str	r3, [fp, #-4]
	while(i--);
c000990c:	e320f000 	nop	{0}
c0009910:	e51b3004 	ldr	r3, [fp, #-4]
c0009914:	e2432001 	sub	r2, r3, #1
c0009918:	e50b2004 	str	r2, [fp, #-4]
c000991c:	e3530000 	cmp	r3, #0
c0009920:	1afffffa 	bne	c0009910 <delay_us+0x18>
}
c0009924:	e320f000 	nop	{0}
c0009928:	e28bd000 	add	sp, fp, #0
c000992c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009930:	e12fff1e 	bx	lr

c0009934 <i2c_init>:
 * 函数功能： i2C总线引脚的初始化， 通用输出，推挽输出，输出速度，
 * 函数参数：无
 * 函数返回值：无
 * */
void i2c_init(void)
{
c0009934:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009938:	e28db000 	add	fp, sp, #0
 	// 使能GPIOF端口的时钟
	RCC->MP_AHB4ENSETR |= (0x1 << 5);
c000993c:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c0009940:	e5933a28 	ldr	r3, [r3, #2600]	; 0xa28
c0009944:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c0009948:	e3833020 	orr	r3, r3, #32
c000994c:	e5823a28 	str	r3, [r2, #2600]	; 0xa28
	// 设置PF14，PF15引脚为通用的输出功能
	GPIOF->MODER &= (~(0xF << 28));
c0009950:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009954:	e3453000 	movt	r3, #20480	; 0x5000
c0009958:	e5932000 	ldr	r2, [r3]
c000995c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009960:	e3453000 	movt	r3, #20480	; 0x5000
c0009964:	e3c2220f 	bic	r2, r2, #-268435456	; 0xf0000000
c0009968:	e5832000 	str	r2, [r3]
	GPIOF->MODER |= (0x5 << 28);
c000996c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009970:	e3453000 	movt	r3, #20480	; 0x5000
c0009974:	e5932000 	ldr	r2, [r3]
c0009978:	e3a03a07 	mov	r3, #28672	; 0x7000
c000997c:	e3453000 	movt	r3, #20480	; 0x5000
c0009980:	e3822205 	orr	r2, r2, #1342177280	; 0x50000000
c0009984:	e5832000 	str	r2, [r3]
	// 设置PF14, PF15引脚为推挽输出
	GPIOF->OTYPER &= (~(0x3 << 14));
c0009988:	e3a03a07 	mov	r3, #28672	; 0x7000
c000998c:	e3453000 	movt	r3, #20480	; 0x5000
c0009990:	e5932004 	ldr	r2, [r3, #4]
c0009994:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009998:	e3453000 	movt	r3, #20480	; 0x5000
c000999c:	e3c22903 	bic	r2, r2, #49152	; 0xc000
c00099a0:	e5832004 	str	r2, [r3, #4]
	// 设置PF14, PF15引脚为高速输出
	GPIOF->OSPEEDR |= (0xF << 28);
c00099a4:	e3a03a07 	mov	r3, #28672	; 0x7000
c00099a8:	e3453000 	movt	r3, #20480	; 0x5000
c00099ac:	e5932008 	ldr	r2, [r3, #8]
c00099b0:	e3a03a07 	mov	r3, #28672	; 0x7000
c00099b4:	e3453000 	movt	r3, #20480	; 0x5000
c00099b8:	e382220f 	orr	r2, r2, #-268435456	; 0xf0000000
c00099bc:	e5832008 	str	r2, [r3, #8]
	// 设置PF14, PF15引脚的禁止上拉和下拉
	GPIOF->PUPDR &= (~(0xF << 28));
c00099c0:	e3a03a07 	mov	r3, #28672	; 0x7000
c00099c4:	e3453000 	movt	r3, #20480	; 0x5000
c00099c8:	e593200c 	ldr	r2, [r3, #12]
c00099cc:	e3a03a07 	mov	r3, #28672	; 0x7000
c00099d0:	e3453000 	movt	r3, #20480	; 0x5000
c00099d4:	e3c2220f 	bic	r2, r2, #-268435456	; 0xf0000000
c00099d8:	e583200c 	str	r2, [r3, #12]
	// 空闲状态SDA和SCL拉高 
	I2C_SCL_H;
c00099dc:	e3a03a07 	mov	r3, #28672	; 0x7000
c00099e0:	e3453000 	movt	r3, #20480	; 0x5000
c00099e4:	e5932018 	ldr	r2, [r3, #24]
c00099e8:	e3a03a07 	mov	r3, #28672	; 0x7000
c00099ec:	e3453000 	movt	r3, #20480	; 0x5000
c00099f0:	e3822901 	orr	r2, r2, #16384	; 0x4000
c00099f4:	e5832018 	str	r2, [r3, #24]
	I2C_SDA_H;
c00099f8:	e3a03a07 	mov	r3, #28672	; 0x7000
c00099fc:	e3453000 	movt	r3, #20480	; 0x5000
c0009a00:	e5932018 	ldr	r2, [r3, #24]
c0009a04:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009a08:	e3453000 	movt	r3, #20480	; 0x5000
c0009a0c:	e3822902 	orr	r2, r2, #32768	; 0x8000
c0009a10:	e5832018 	str	r2, [r3, #24]
}
c0009a14:	e320f000 	nop	{0}
c0009a18:	e28bd000 	add	sp, fp, #0
c0009a1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009a20:	e12fff1e 	bx	lr

c0009a24 <i2c_start>:
 * 函数功能：模拟i2c开始信号的时序
 * 函数参数：无
 * 函数返回值：无
 * */
void i2c_start(void)
{
c0009a24:	e92d4800 	push	{fp, lr}
c0009a28:	e28db004 	add	fp, sp, #4
	 *     ----
	 * SDA     \
	 *          --------
	 * */	
	 //1.设置SDA为输出模式
	 SET_SDA_OUT;
c0009a2c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009a30:	e3453000 	movt	r3, #20480	; 0x5000
c0009a34:	e5932000 	ldr	r2, [r3]
c0009a38:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009a3c:	e3453000 	movt	r3, #20480	; 0x5000
c0009a40:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c0009a44:	e5832000 	str	r2, [r3]
c0009a48:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009a4c:	e3453000 	movt	r3, #20480	; 0x5000
c0009a50:	e5932000 	ldr	r2, [r3]
c0009a54:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009a58:	e3453000 	movt	r3, #20480	; 0x5000
c0009a5c:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
c0009a60:	e5832000 	str	r2, [r3]

	 //当SCL拉高，数据线SDA从拉高到低
	 //2. SCL拉高
	 I2C_SCL_H;
c0009a64:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009a68:	e3453000 	movt	r3, #20480	; 0x5000
c0009a6c:	e5932018 	ldr	r2, [r3, #24]
c0009a70:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009a74:	e3453000 	movt	r3, #20480	; 0x5000
c0009a78:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009a7c:	e5832018 	str	r2, [r3, #24]
	 delay_us();
c0009a80:	ebffff9c 	bl	c00098f8 <delay_us>
	 //3. SDA拉高
	 I2C_SDA_H;
c0009a84:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009a88:	e3453000 	movt	r3, #20480	; 0x5000
c0009a8c:	e5932018 	ldr	r2, [r3, #24]
c0009a90:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009a94:	e3453000 	movt	r3, #20480	; 0x5000
c0009a98:	e3822902 	orr	r2, r2, #32768	; 0x8000
c0009a9c:	e5832018 	str	r2, [r3, #24]
	 delay_us();
c0009aa0:	ebffff94 	bl	c00098f8 <delay_us>
	 //4.SDA拉低
	 I2C_SDA_L;
c0009aa4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009aa8:	e3453000 	movt	r3, #20480	; 0x5000
c0009aac:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c0009ab0:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ab4:	e3453000 	movt	r3, #20480	; 0x5000
c0009ab8:	e3822902 	orr	r2, r2, #32768	; 0x8000
c0009abc:	e5832028 	str	r2, [r3, #40]	; 0x28
	 //5.SCL拉低，总线处于占用状态
	 I2C_SCL_L;
c0009ac0:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ac4:	e3453000 	movt	r3, #20480	; 0x5000
c0009ac8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c0009acc:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ad0:	e3453000 	movt	r3, #20480	; 0x5000
c0009ad4:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009ad8:	e5832028 	str	r2, [r3, #40]	; 0x28

}
c0009adc:	e320f000 	nop	{0}
c0009ae0:	e8bd8800 	pop	{fp, pc}

c0009ae4 <i2c_stop>:
 * 函数参数：无
 * 函数返回值：无
 * */

void i2c_stop(void)
{
c0009ae4:	e92d4800 	push	{fp, lr}
c0009ae8:	e28db004 	add	fp, sp, #4
	 *    ---         -------
	 * SDA   X       /
	 *    --- -------
	 * */
	//1.设置SDA为输出模式   主机向数据线写数据
	SET_SDA_OUT;
c0009aec:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009af0:	e3453000 	movt	r3, #20480	; 0x5000
c0009af4:	e5932000 	ldr	r2, [r3]
c0009af8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009afc:	e3453000 	movt	r3, #20480	; 0x5000
c0009b00:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c0009b04:	e5832000 	str	r2, [r3]
c0009b08:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b0c:	e3453000 	movt	r3, #20480	; 0x5000
c0009b10:	e5932000 	ldr	r2, [r3]
c0009b14:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b18:	e3453000 	movt	r3, #20480	; 0x5000
c0009b1c:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
c0009b20:	e5832000 	str	r2, [r3]

	//2.SCL拉低
	I2C_SCL_L;
c0009b24:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b28:	e3453000 	movt	r3, #20480	; 0x5000
c0009b2c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c0009b30:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b34:	e3453000 	movt	r3, #20480	; 0x5000
c0009b38:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009b3c:	e5832028 	str	r2, [r3, #40]	; 0x28
	delay_us();
c0009b40:	ebffff6c 	bl	c00098f8 <delay_us>

	//3.SDA拉低
	I2C_SDA_L;
c0009b44:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b48:	e3453000 	movt	r3, #20480	; 0x5000
c0009b4c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c0009b50:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b54:	e3453000 	movt	r3, #20480	; 0x5000
c0009b58:	e3822902 	orr	r2, r2, #32768	; 0x8000
c0009b5c:	e5832028 	str	r2, [r3, #40]	; 0x28
	delay_us();
c0009b60:	ebffff64 	bl	c00098f8 <delay_us>
	//4.SCL拉高
	I2C_SCL_H;
c0009b64:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b68:	e3453000 	movt	r3, #20480	; 0x5000
c0009b6c:	e5932018 	ldr	r2, [r3, #24]
c0009b70:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b74:	e3453000 	movt	r3, #20480	; 0x5000
c0009b78:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009b7c:	e5832018 	str	r2, [r3, #24]
	delay_us();
c0009b80:	ebffff5c 	bl	c00098f8 <delay_us>

	//5.SDA拉高
	I2C_SDA_H;
c0009b84:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b88:	e3453000 	movt	r3, #20480	; 0x5000
c0009b8c:	e5932018 	ldr	r2, [r3, #24]
c0009b90:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b94:	e3453000 	movt	r3, #20480	; 0x5000
c0009b98:	e3822902 	orr	r2, r2, #32768	; 0x8000
c0009b9c:	e5832018 	str	r2, [r3, #24]
	delay_us();
c0009ba0:	ebffff54 	bl	c00098f8 <delay_us>

}
c0009ba4:	e320f000 	nop	{0}
c0009ba8:	e8bd8800 	pop	{fp, pc}

c0009bac <i2c_write_byte>:
 * 函数参数：dat : 等待发送的字节数据
 * 函数返回值： 无
 * */

void i2c_write_byte(unsigned char dat)
{
c0009bac:	e92d4800 	push	{fp, lr}
c0009bb0:	e28db004 	add	fp, sp, #4
c0009bb4:	e24dd008 	sub	sp, sp, #8
c0009bb8:	e1a03000 	mov	r3, r0
c0009bbc:	e54b300c 	strb	r3, [fp, #-12]
	 *
	 *      先发送高位在发送低位 
	 * */
	
	//1.设置SDA为输出模式
	SET_SDA_OUT;
c0009bc0:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009bc4:	e3453000 	movt	r3, #20480	; 0x5000
c0009bc8:	e5932000 	ldr	r2, [r3]
c0009bcc:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009bd0:	e3453000 	movt	r3, #20480	; 0x5000
c0009bd4:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c0009bd8:	e5832000 	str	r2, [r3]
c0009bdc:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009be0:	e3453000 	movt	r3, #20480	; 0x5000
c0009be4:	e5932000 	ldr	r2, [r3]
c0009be8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009bec:	e3453000 	movt	r3, #20480	; 0x5000
c0009bf0:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
c0009bf4:	e5832000 	str	r2, [r3]
	//for循环  串行传输，只能一位一位发送
	//内容: SCL拉低   先发送高位，再发送低位  左移
	//取出最高位
	unsigned int i;
	for(i = 0;i<8;i++)
c0009bf8:	e3a03000 	mov	r3, #0
c0009bfc:	e50b3008 	str	r3, [fp, #-8]
c0009c00:	ea000029 	b	c0009cac <i2c_write_byte+0x100>
	{
		//2. SCL拉低，向数据线写入数据
		I2C_SCL_L;
c0009c04:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c08:	e3453000 	movt	r3, #20480	; 0x5000
c0009c0c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c0009c10:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c14:	e3453000 	movt	r3, #20480	; 0x5000
c0009c18:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009c1c:	e5832028 	str	r2, [r3, #40]	; 0x28
		delay_us();
c0009c20:	ebffff34 	bl	c00098f8 <delay_us>
		if(dat&0x80) //3. 先发送高位，再发送低位
c0009c24:	e15b30dc 	ldrsb	r3, [fp, #-12]
c0009c28:	e3530000 	cmp	r3, #0
c0009c2c:	aa000007 	bge	c0009c50 <i2c_write_byte+0xa4>
		{
			I2C_SDA_H;//4. 向数据线写入高电平
c0009c30:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c34:	e3453000 	movt	r3, #20480	; 0x5000
c0009c38:	e5932018 	ldr	r2, [r3, #24]
c0009c3c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c40:	e3453000 	movt	r3, #20480	; 0x5000
c0009c44:	e3822902 	orr	r2, r2, #32768	; 0x8000
c0009c48:	e5832018 	str	r2, [r3, #24]
c0009c4c:	ea000006 	b	c0009c6c <i2c_write_byte+0xc0>
		} else
		{
			I2C_SDA_L;//5. 向数据线写入低电平
c0009c50:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c54:	e3453000 	movt	r3, #20480	; 0x5000
c0009c58:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c0009c5c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c60:	e3453000 	movt	r3, #20480	; 0x5000
c0009c64:	e3822902 	orr	r2, r2, #32768	; 0x8000
c0009c68:	e5832028 	str	r2, [r3, #40]	; 0x28
		}
		delay_us();
c0009c6c:	ebffff21 	bl	c00098f8 <delay_us>
		//6. SCL拉高，接收器从数据线读取数据
		I2C_SCL_H;
c0009c70:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c74:	e3453000 	movt	r3, #20480	; 0x5000
c0009c78:	e5932018 	ldr	r2, [r3, #24]
c0009c7c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c80:	e3453000 	movt	r3, #20480	; 0x5000
c0009c84:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009c88:	e5832018 	str	r2, [r3, #24]
		delay_us();
c0009c8c:	ebffff19 	bl	c00098f8 <delay_us>
		delay_us();
c0009c90:	ebffff18 	bl	c00098f8 <delay_us>
		dat<<=1;
c0009c94:	e55b300c 	ldrb	r3, [fp, #-12]
c0009c98:	e1a03083 	lsl	r3, r3, #1
c0009c9c:	e54b300c 	strb	r3, [fp, #-12]
	for(i = 0;i<8;i++)
c0009ca0:	e51b3008 	ldr	r3, [fp, #-8]
c0009ca4:	e2833001 	add	r3, r3, #1
c0009ca8:	e50b3008 	str	r3, [fp, #-8]
c0009cac:	e51b3008 	ldr	r3, [fp, #-8]
c0009cb0:	e3530007 	cmp	r3, #7
c0009cb4:	9affffd2 	bls	c0009c04 <i2c_write_byte+0x58>
	}
	

}
c0009cb8:	e320f000 	nop	{0}
c0009cbc:	e24bd004 	sub	sp, fp, #4
c0009cc0:	e8bd8800 	pop	{fp, pc}

c0009cc4 <i2c_read_byte>:
 * 函数参数： 0 ： 应答信号   1 ： 非应答信号
 * 函数返回值：读到的有效数据
 *
 * */
unsigned char i2c_read_byte(unsigned char ack)
{
c0009cc4:	e92d4800 	push	{fp, lr}
c0009cc8:	e28db004 	add	fp, sp, #4
c0009ccc:	e24dd00c 	sub	sp, sp, #12
c0009cd0:	e1a03000 	mov	r3, r0
c0009cd4:	e54b3010 	strb	r3, [fp, #-16]
	 *      先接收高位， 在接收低位 
	 * */
	
	unsigned int i;
	//1.设置SDA数据线为输入模式
	SET_SDA_IN;
c0009cd8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009cdc:	e3453000 	movt	r3, #20480	; 0x5000
c0009ce0:	e5932000 	ldr	r2, [r3]
c0009ce4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ce8:	e3453000 	movt	r3, #20480	; 0x5000
c0009cec:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c0009cf0:	e5832000 	str	r2, [r3]
	unsigned char data;
	//for循环内容: SCL拉高 读取数据 如何将读到的8位数据进行返回
	for(i=0;i<8;i++)
c0009cf4:	e3a03000 	mov	r3, #0
c0009cf8:	e50b3008 	str	r3, [fp, #-8]
c0009cfc:	ea000020 	b	c0009d84 <i2c_read_byte+0xc0>
	{
		I2C_SCL_L; //将SCL拉低，保证从机向数据线上写入数据完成
c0009d00:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009d04:	e3453000 	movt	r3, #20480	; 0x5000
c0009d08:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c0009d0c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009d10:	e3453000 	movt	r3, #20480	; 0x5000
c0009d14:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009d18:	e5832028 	str	r2, [r3, #40]	; 0x28
		delay_us();
c0009d1c:	ebfffef5 	bl	c00098f8 <delay_us>
		delay_us();
c0009d20:	ebfffef4 	bl	c00098f8 <delay_us>
		//拉高SCL  主机可以向从机读取数据
		I2C_SCL_H;
c0009d24:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009d28:	e3453000 	movt	r3, #20480	; 0x5000
c0009d2c:	e5932018 	ldr	r2, [r3, #24]
c0009d30:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009d34:	e3453000 	movt	r3, #20480	; 0x5000
c0009d38:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009d3c:	e5832018 	str	r2, [r3, #24]
		delay_us();
c0009d40:	ebfffeec 	bl	c00098f8 <delay_us>
		data<<=1; //将data左移
c0009d44:	e55b3009 	ldrb	r3, [fp, #-9]
c0009d48:	e1a03083 	lsl	r3, r3, #1
c0009d4c:	e54b3009 	strb	r3, [fp, #-9]
		if(I2C_SDA_READ) //从数据线上读取数据
c0009d50:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009d54:	e3453000 	movt	r3, #20480	; 0x5000
c0009d58:	e5933010 	ldr	r3, [r3, #16]
c0009d5c:	e2033902 	and	r3, r3, #32768	; 0x8000
c0009d60:	e3530000 	cmp	r3, #0
c0009d64:	0a000002 	beq	c0009d74 <i2c_read_byte+0xb0>
		{
			data |=1;
c0009d68:	e55b3009 	ldrb	r3, [fp, #-9]
c0009d6c:	e3833001 	orr	r3, r3, #1
c0009d70:	e54b3009 	strb	r3, [fp, #-9]
		} else
		{
			data|=0;
		}
		delay_us();
c0009d74:	ebfffedf 	bl	c00098f8 <delay_us>
	for(i=0;i<8;i++)
c0009d78:	e51b3008 	ldr	r3, [fp, #-8]
c0009d7c:	e2833001 	add	r3, r3, #1
c0009d80:	e50b3008 	str	r3, [fp, #-8]
c0009d84:	e51b3008 	ldr	r3, [fp, #-8]
c0009d88:	e3530007 	cmp	r3, #7
c0009d8c:	9affffdb 	bls	c0009d00 <i2c_read_byte+0x3c>
	}
		//判断应答信号   应答: 0   非应答: 1
		if(!ack)
c0009d90:	e55b3010 	ldrb	r3, [fp, #-16]
c0009d94:	e3530000 	cmp	r3, #0
c0009d98:	1a000001 	bne	c0009da4 <i2c_read_byte+0xe0>
		{
			i2c_ack(); //主机给从机返回应答信号
c0009d9c:	eb000039 	bl	c0009e88 <i2c_ack>
c0009da0:	ea000000 	b	c0009da8 <i2c_read_byte+0xe4>
		} else
		{
			i2c_nack(); //主机给从机返回非应答信号
c0009da4:	eb000069 	bl	c0009f50 <i2c_nack>
		}

	return data;
c0009da8:	e55b3009 	ldrb	r3, [fp, #-9]
}
c0009dac:	e1a00003 	mov	r0, r3
c0009db0:	e24bd004 	sub	sp, fp, #4
c0009db4:	e8bd8800 	pop	{fp, pc}

c0009db8 <i2c_wait_ack>:
 * 函数返回值：
 *					0：接收到的应答信号
 *                  1：接收到的非应答信号
 * */
unsigned char i2c_wait_ack(void)
{
c0009db8:	e92d4800 	push	{fp, lr}
c0009dbc:	e28db004 	add	fp, sp, #4
	 *         总   线写    上的数据
	 *         线   数据
	 * */	
	
	//1.SCL拉低 
	I2C_SCL_L;
c0009dc0:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009dc4:	e3453000 	movt	r3, #20480	; 0x5000
c0009dc8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c0009dcc:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009dd0:	e3453000 	movt	r3, #20480	; 0x5000
c0009dd4:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009dd8:	e5832028 	str	r2, [r3, #40]	; 0x28
	delay_us();
c0009ddc:	ebfffec5 	bl	c00098f8 <delay_us>
	//2.SDA拉高，释放总线   主机释放总线给从机
	I2C_SDA_H;
c0009de0:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009de4:	e3453000 	movt	r3, #20480	; 0x5000
c0009de8:	e5932018 	ldr	r2, [r3, #24]
c0009dec:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009df0:	e3453000 	movt	r3, #20480	; 0x5000
c0009df4:	e3822902 	orr	r2, r2, #32768	; 0x8000
c0009df8:	e5832018 	str	r2, [r3, #24]
	delay_us();
c0009dfc:	ebfffebd 	bl	c00098f8 <delay_us>
	//3.设置数据线为输入模式
	SET_SDA_IN;
c0009e00:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009e04:	e3453000 	movt	r3, #20480	; 0x5000
c0009e08:	e5932000 	ldr	r2, [r3]
c0009e0c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009e10:	e3453000 	movt	r3, #20480	; 0x5000
c0009e14:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c0009e18:	e5832000 	str	r2, [r3]
	delay_us();
c0009e1c:	ebfffeb5 	bl	c00098f8 <delay_us>
	I2C_SCL_H; //4. SCL拉高，总线数据保持温度
c0009e20:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009e24:	e3453000 	movt	r3, #20480	; 0x5000
c0009e28:	e5932018 	ldr	r2, [r3, #24]
c0009e2c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009e30:	e3453000 	movt	r3, #20480	; 0x5000
c0009e34:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009e38:	e5832018 	str	r2, [r3, #24]
	delay_us();
c0009e3c:	ebfffead 	bl	c00098f8 <delay_us>
	if(I2C_SDA_READ)
c0009e40:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009e44:	e3453000 	movt	r3, #20480	; 0x5000
c0009e48:	e5933010 	ldr	r3, [r3, #16]
c0009e4c:	e2033902 	and	r3, r3, #32768	; 0x8000
c0009e50:	e3530000 	cmp	r3, #0
c0009e54:	0a000001 	beq	c0009e60 <i2c_wait_ack+0xa8>
	{
		return 1; //5.返回非应答信号
c0009e58:	e3a03001 	mov	r3, #1
c0009e5c:	ea000007 	b	c0009e80 <i2c_wait_ack+0xc8>
	}
	I2C_SCL_L; //7.SCL拉低，总线处于占用状态
c0009e60:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009e64:	e3453000 	movt	r3, #20480	; 0x5000
c0009e68:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c0009e6c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009e70:	e3453000 	movt	r3, #20480	; 0x5000
c0009e74:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009e78:	e5832028 	str	r2, [r3, #40]	; 0x28
	return 0; //6. 返回应答信号
c0009e7c:	e3a03000 	mov	r3, #0


	//主机读取数据线上的数据
} 
c0009e80:	e1a00003 	mov	r0, r3
c0009e84:	e8bd8800 	pop	{fp, pc}

c0009e88 <i2c_ack>:
 * 函数功能： 主机作为接收器时，给发送器发送应答信号
 * 函数参数：无
 * 函数返回值：无
 * */
void i2c_ack(void)
{
c0009e88:	e92d4800 	push	{fp, lr}
c0009e8c:	e28db004 	add	fp, sp, #4
	 * SDA   X 
	 *    --- -------------
	 *
	*/
	//1. 设置SDA为输出模式
	SET_SDA_OUT;
c0009e90:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009e94:	e3453000 	movt	r3, #20480	; 0x5000
c0009e98:	e5932000 	ldr	r2, [r3]
c0009e9c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ea0:	e3453000 	movt	r3, #20480	; 0x5000
c0009ea4:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c0009ea8:	e5832000 	str	r2, [r3]
c0009eac:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009eb0:	e3453000 	movt	r3, #20480	; 0x5000
c0009eb4:	e5932000 	ldr	r2, [r3]
c0009eb8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ebc:	e3453000 	movt	r3, #20480	; 0x5000
c0009ec0:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
c0009ec4:	e5832000 	str	r2, [r3]

	//2.SCL拉低
	I2C_SCL_L;
c0009ec8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ecc:	e3453000 	movt	r3, #20480	; 0x5000
c0009ed0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c0009ed4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ed8:	e3453000 	movt	r3, #20480	; 0x5000
c0009edc:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009ee0:	e5832028 	str	r2, [r3, #40]	; 0x28
	delay_us();
c0009ee4:	ebfffe83 	bl	c00098f8 <delay_us>

	 //3.SDA拉低
	 I2C_SDA_L;
c0009ee8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009eec:	e3453000 	movt	r3, #20480	; 0x5000
c0009ef0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c0009ef4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ef8:	e3453000 	movt	r3, #20480	; 0x5000
c0009efc:	e3822902 	orr	r2, r2, #32768	; 0x8000
c0009f00:	e5832028 	str	r2, [r3, #40]	; 0x28
	 delay_us();
c0009f04:	ebfffe7b 	bl	c00098f8 <delay_us>

	 //4. SCL拉高
	 I2C_SCL_H;
c0009f08:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009f0c:	e3453000 	movt	r3, #20480	; 0x5000
c0009f10:	e5932018 	ldr	r2, [r3, #24]
c0009f14:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009f18:	e3453000 	movt	r3, #20480	; 0x5000
c0009f1c:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009f20:	e5832018 	str	r2, [r3, #24]
	 delay_us();
c0009f24:	ebfffe73 	bl	c00098f8 <delay_us>
	 delay_us();
c0009f28:	ebfffe72 	bl	c00098f8 <delay_us>

	 //5.SCL拉低，总线处于占用状态
	 I2C_SCL_L;
c0009f2c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009f30:	e3453000 	movt	r3, #20480	; 0x5000
c0009f34:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c0009f38:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009f3c:	e3453000 	movt	r3, #20480	; 0x5000
c0009f40:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009f44:	e5832028 	str	r2, [r3, #40]	; 0x28
}
c0009f48:	e320f000 	nop	{0}
c0009f4c:	e8bd8800 	pop	{fp, pc}

c0009f50 <i2c_nack>:
 * 函数功能： 主机作为接收器时，给发送器发送非应答信号
 * 函数参数：无
 * 函数返回值：无
 * */
void i2c_nack(void)
{
c0009f50:	e92d4800 	push	{fp, lr}
c0009f54:	e28db004 	add	fp, sp, #4
	 *    --- ---------------
	 * SDA   X 
	 *    --- 
	 * */
	//1. 设置SDA为输出模式
	SET_SDA_OUT;
c0009f58:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009f5c:	e3453000 	movt	r3, #20480	; 0x5000
c0009f60:	e5932000 	ldr	r2, [r3]
c0009f64:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009f68:	e3453000 	movt	r3, #20480	; 0x5000
c0009f6c:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c0009f70:	e5832000 	str	r2, [r3]
c0009f74:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009f78:	e3453000 	movt	r3, #20480	; 0x5000
c0009f7c:	e5932000 	ldr	r2, [r3]
c0009f80:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009f84:	e3453000 	movt	r3, #20480	; 0x5000
c0009f88:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
c0009f8c:	e5832000 	str	r2, [r3]

	//2.SCL拉低
	I2C_SCL_L;
c0009f90:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009f94:	e3453000 	movt	r3, #20480	; 0x5000
c0009f98:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c0009f9c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009fa0:	e3453000 	movt	r3, #20480	; 0x5000
c0009fa4:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009fa8:	e5832028 	str	r2, [r3, #40]	; 0x28
	delay_us();
c0009fac:	ebfffe51 	bl	c00098f8 <delay_us>

	 //3.SDA拉高
	 I2C_SDA_H;
c0009fb0:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009fb4:	e3453000 	movt	r3, #20480	; 0x5000
c0009fb8:	e5932018 	ldr	r2, [r3, #24]
c0009fbc:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009fc0:	e3453000 	movt	r3, #20480	; 0x5000
c0009fc4:	e3822902 	orr	r2, r2, #32768	; 0x8000
c0009fc8:	e5832018 	str	r2, [r3, #24]
	 delay_us();
c0009fcc:	ebfffe49 	bl	c00098f8 <delay_us>

	 //4. SCL拉高
	 I2C_SCL_H;
c0009fd0:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009fd4:	e3453000 	movt	r3, #20480	; 0x5000
c0009fd8:	e5932018 	ldr	r2, [r3, #24]
c0009fdc:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009fe0:	e3453000 	movt	r3, #20480	; 0x5000
c0009fe4:	e3822901 	orr	r2, r2, #16384	; 0x4000
c0009fe8:	e5832018 	str	r2, [r3, #24]
	 delay_us();
c0009fec:	ebfffe41 	bl	c00098f8 <delay_us>
	 delay_us();
c0009ff0:	ebfffe40 	bl	c00098f8 <delay_us>

	 //5.SCL拉低，总线处于占用状态
	 I2C_SCL_L;	
c0009ff4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ff8:	e3453000 	movt	r3, #20480	; 0x5000
c0009ffc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a000:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a004:	e3453000 	movt	r3, #20480	; 0x5000
c000a008:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a00c:	e5832028 	str	r2, [r3, #40]	; 0x28
}
c000a010:	e320f000 	nop	{0}
c000a014:	e8bd8800 	pop	{fp, pc}

c000a018 <delay_ms>:
#include "iic.h"
#include "si7006.h"
extern void printf(const char *fmt, ...);
void delay_ms(int ms)
{
c000a018:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c000a01c:	e28db000 	add	fp, sp, #0
c000a020:	e24dd00c 	sub	sp, sp, #12
c000a024:	e50b000c 	str	r0, [fp, #-12]
	int i,j;
	for(i = 0; i < ms;i++)
c000a028:	e3a03000 	mov	r3, #0
c000a02c:	e50b3004 	str	r3, [fp, #-4]
c000a030:	ea00000c 	b	c000a068 <delay_ms+0x50>
		for (j = 0; j < 1800; j++);
c000a034:	e3a03000 	mov	r3, #0
c000a038:	e50b3008 	str	r3, [fp, #-8]
c000a03c:	ea000002 	b	c000a04c <delay_ms+0x34>
c000a040:	e51b3008 	ldr	r3, [fp, #-8]
c000a044:	e2833001 	add	r3, r3, #1
c000a048:	e50b3008 	str	r3, [fp, #-8]
c000a04c:	e51b3008 	ldr	r3, [fp, #-8]
c000a050:	e3002707 	movw	r2, #1799	; 0x707
c000a054:	e1530002 	cmp	r3, r2
c000a058:	dafffff8 	ble	c000a040 <delay_ms+0x28>
	for(i = 0; i < ms;i++)
c000a05c:	e51b3004 	ldr	r3, [fp, #-4]
c000a060:	e2833001 	add	r3, r3, #1
c000a064:	e50b3004 	str	r3, [fp, #-4]
c000a068:	e51b2004 	ldr	r2, [fp, #-4]
c000a06c:	e51b300c 	ldr	r3, [fp, #-12]
c000a070:	e1520003 	cmp	r2, r3
c000a074:	baffffee 	blt	c000a034 <delay_ms+0x1c>
}
c000a078:	e320f000 	nop	{0}
c000a07c:	e28bd000 	add	sp, fp, #0
c000a080:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c000a084:	e12fff1e 	bx	lr

c000a088 <main>:




int main()
{
c000a088:	e92d4800 	push	{fp, lr}
c000a08c:	e28db004 	add	fp, sp, #4
c000a090:	e24dd004 	sub	sp, sp, #4
	unsigned short hum;
	short temp;
	si7006_init();
c000a094:	ebfffd9b 	bl	c0009708 <si7006_init>
	while(1)
	{
		hum = si7006_read_hum_data(SI7006_SLAVE,0xE5);
c000a098:	e3a010e5 	mov	r1, #229	; 0xe5
c000a09c:	e3a00040 	mov	r0, #64	; 0x40
c000a0a0:	ebfffda8 	bl	c0009748 <si7006_read_hum_data>
c000a0a4:	e1a03000 	mov	r3, r0
c000a0a8:	e14b30b6 	strh	r3, [fp, #-6]
		temp = si7006_read_temp_data(SI7006_SLAVE,0xE0);
c000a0ac:	e3a010e0 	mov	r1, #224	; 0xe0
c000a0b0:	e3a00040 	mov	r0, #64	; 0x40
c000a0b4:	ebfffdd9 	bl	c0009820 <si7006_read_temp_data>
c000a0b8:	e1a03000 	mov	r3, r0
c000a0bc:	e14b30b8 	strh	r3, [fp, #-8]
		printf("hum = %d\n",125*hum/65536-6);
c000a0c0:	e15b20b6 	ldrh	r2, [fp, #-6]
c000a0c4:	e1a03002 	mov	r3, r2
c000a0c8:	e1a03283 	lsl	r3, r3, #5
c000a0cc:	e0433002 	sub	r3, r3, r2
c000a0d0:	e1a03103 	lsl	r3, r3, #2
c000a0d4:	e0833002 	add	r3, r3, r2
c000a0d8:	e2832cff 	add	r2, r3, #65280	; 0xff00
c000a0dc:	e28220ff 	add	r2, r2, #255	; 0xff
c000a0e0:	e3530000 	cmp	r3, #0
c000a0e4:	b1a03002 	movlt	r3, r2
c000a0e8:	a1a03003 	movge	r3, r3
c000a0ec:	e1a03843 	asr	r3, r3, #16
c000a0f0:	e2433006 	sub	r3, r3, #6
c000a0f4:	e1a01003 	mov	r1, r3
c000a0f8:	e30a0198 	movw	r0, #41368	; 0xa198
c000a0fc:	e34c0000 	movt	r0, #49152	; 0xc000
c000a100:	ebfffcb0 	bl	c00093c8 <printf>
		printf("tem = %d\n",175*temp/65536-47);
c000a104:	e15b30f8 	ldrsh	r3, [fp, #-8]
c000a108:	e3a020af 	mov	r2, #175	; 0xaf
c000a10c:	e0030392 	mul	r3, r2, r3
c000a110:	e2832cff 	add	r2, r3, #65280	; 0xff00
c000a114:	e28220ff 	add	r2, r2, #255	; 0xff
c000a118:	e3530000 	cmp	r3, #0
c000a11c:	b1a03002 	movlt	r3, r2
c000a120:	a1a03003 	movge	r3, r3
c000a124:	e1a03843 	asr	r3, r3, #16
c000a128:	e243302f 	sub	r3, r3, #47	; 0x2f
c000a12c:	e1a01003 	mov	r1, r3
c000a130:	e30a01a4 	movw	r0, #41380	; 0xa1a4
c000a134:	e34c0000 	movt	r0, #49152	; 0xc000
c000a138:	ebfffca2 	bl	c00093c8 <printf>
		hum = si7006_read_hum_data(SI7006_SLAVE,0xE5);
c000a13c:	eaffffd5 	b	c000a098 <main+0x10>

Disassembly of section .rodata:

c000a140 <.LC0>:
c000a140:	33323130 	teqcc	r2, #48, 2
c000a144:	37363534 			; <UNDEFINED> instruction: 0x37363534
c000a148:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
c000a14c:	66656463 	strbtvs	r6, [r5], -r3, ror #8
c000a150:	6a696867 	bvs	c1a642f4 <__bss_end__+0x1a59840>
c000a154:	6e6d6c6b 	cdpvs	12, 6, cr6, cr13, cr11, {3}
c000a158:	7271706f 	rsbsvc	r7, r1, #111	; 0x6f
c000a15c:	76757473 			; <UNDEFINED> instruction: 0x76757473
c000a160:	7a797877 	bvc	c1e68344 <__bss_end__+0x1e5d890>
c000a164:	00000000 	andeq	r0, r0, r0

c000a168 <.LC1>:
c000a168:	33323130 	teqcc	r2, #48, 2
c000a16c:	37363534 			; <UNDEFINED> instruction: 0x37363534
c000a170:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
c000a174:	46454443 	strbmi	r4, [r5], -r3, asr #8
c000a178:	4a494847 	bmi	c125c29c <__bss_end__+0x12517e8>
c000a17c:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
c000a180:	5251504f 	subspl	r5, r1, #79	; 0x4f
c000a184:	56555453 			; <UNDEFINED> instruction: 0x56555453
c000a188:	5a595857 	bpl	c16602ec <__bss_end__+0x1655838>
c000a18c:	00000000 	andeq	r0, r0, r0

c000a190 <.LC2>:
c000a190:	4c554e3c 	mrrcmi	14, 3, r4, r5, cr12
c000a194:	00003e4c 	andeq	r3, r0, ip, asr #28

c000a198 <.LC0>:
c000a198:	206d7568 	rsbcs	r7, sp, r8, ror #10
c000a19c:	6425203d 	strtvs	r2, [r5], #-61	; 0xffffffc3
c000a1a0:	0000000a 	andeq	r0, r0, sl

c000a1a4 <.LC1>:
c000a1a4:	206d6574 	rsbcs	r6, sp, r4, ror r5
c000a1a8:	6425203d 	strtvs	r2, [r5], #-61	; 0xffffffc3
c000a1ac:	Address 0xc000a1ac is out of bounds.


Disassembly of section .data:

c000a1b0 <stack>:
	...

c000a9b0 <_ctype>:
c000a9b0:	08080808 	stmdaeq	r8, {r3, fp}
c000a9b4:	08080808 	stmdaeq	r8, {r3, fp}
c000a9b8:	28282808 	stmdacs	r8!, {r3, fp, sp}
c000a9bc:	08082828 	stmdaeq	r8, {r3, r5, fp, sp}
c000a9c0:	08080808 	stmdaeq	r8, {r3, fp}
c000a9c4:	08080808 	stmdaeq	r8, {r3, fp}
c000a9c8:	08080808 	stmdaeq	r8, {r3, fp}
c000a9cc:	08080808 	stmdaeq	r8, {r3, fp}
c000a9d0:	101010a0 	andsne	r1, r0, r0, lsr #1
c000a9d4:	10101010 	andsne	r1, r0, r0, lsl r0
c000a9d8:	10101010 	andsne	r1, r0, r0, lsl r0
c000a9dc:	10101010 	andsne	r1, r0, r0, lsl r0
c000a9e0:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
c000a9e4:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
c000a9e8:	10100404 	andsne	r0, r0, r4, lsl #8
c000a9ec:	10101010 	andsne	r1, r0, r0, lsl r0
c000a9f0:	41414110 	cmpmi	r1, r0, lsl r1
c000a9f4:	01414141 	cmpeq	r1, r1, asr #2
c000a9f8:	01010101 	tsteq	r1, r1, lsl #2
c000a9fc:	01010101 	tsteq	r1, r1, lsl #2
c000aa00:	01010101 	tsteq	r1, r1, lsl #2
c000aa04:	01010101 	tsteq	r1, r1, lsl #2
c000aa08:	10010101 	andne	r0, r1, r1, lsl #2
c000aa0c:	10101010 	andsne	r1, r0, r0, lsl r0
c000aa10:	42424210 	submi	r4, r2, #16, 4
c000aa14:	02424242 	subeq	r4, r2, #536870916	; 0x20000004
c000aa18:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000aa1c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000aa20:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000aa24:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000aa28:	10020202 	andne	r0, r2, r2, lsl #4
c000aa2c:	08101010 	ldmdaeq	r0, {r4, ip}
	...
c000aa50:	101010a0 	andsne	r1, r0, r0, lsr #1
c000aa54:	10101010 	andsne	r1, r0, r0, lsl r0
c000aa58:	10101010 	andsne	r1, r0, r0, lsl r0
c000aa5c:	10101010 	andsne	r1, r0, r0, lsl r0
c000aa60:	10101010 	andsne	r1, r0, r0, lsl r0
c000aa64:	10101010 	andsne	r1, r0, r0, lsl r0
c000aa68:	10101010 	andsne	r1, r0, r0, lsl r0
c000aa6c:	10101010 	andsne	r1, r0, r0, lsl r0
c000aa70:	01010101 	tsteq	r1, r1, lsl #2
c000aa74:	01010101 	tsteq	r1, r1, lsl #2
c000aa78:	01010101 	tsteq	r1, r1, lsl #2
c000aa7c:	01010101 	tsteq	r1, r1, lsl #2
c000aa80:	01010101 	tsteq	r1, r1, lsl #2
c000aa84:	10010101 	andne	r0, r1, r1, lsl #2
c000aa88:	01010101 	tsteq	r1, r1, lsl #2
c000aa8c:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
c000aa90:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000aa94:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000aa98:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000aa9c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000aaa0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000aaa4:	10020202 	andne	r0, r2, r2, lsl #4
c000aaa8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000aaac:	02020202 	andeq	r0, r2, #536870912	; 0x20000000

Disassembly of section .bss:

c000aab0 <i>:
c000aab0:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002041 	andeq	r2, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000016 	andeq	r0, r0, r6, lsl r0
  10:	412d3705 			; <UNDEFINED> instruction: 0x412d3705
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	09010841 	stmdbeq	r1, {r0, r6, fp}
  1c:	0c030a02 			; <UNDEFINED> instruction: 0x0c030a02
  20:	Address 0x00000020 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_start-0xbef372dc>
   4:	694c2820 	stmdbvs	ip, {r5, fp, sp}^
   8:	6f72616e 	svcvs	0x0072616e
   c:	43434720 	movtmi	r4, #14112	; 0x3720
  10:	352e3720 	strcc	r3, [lr, #-1824]!	; 0xfffff8e0
  14:	3130322d 	teqcc	r0, sp, lsr #4
  18:	32312e39 	eorscc	r2, r1, #912	; 0x390
  1c:	2e372029 	cdpcs	0, 3, cr2, cr7, cr9, {1}
  20:	00302e35 	eorseq	r2, r0, r5, lsr lr

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000093 	muleq	r0, r3, r0
   4:	00240002 	eoreq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	73010000 	movwvc	r0, #4096	; 0x1000
  1c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  20:	74730000 	ldrbtvc	r0, [r3], #-0
  24:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
  28:	00010053 	andeq	r0, r1, r3, asr r0
  2c:	05000000 	streq	r0, [r0, #-0]
  30:	00800002 	addeq	r0, r0, r2
  34:	011b03c0 	tsteq	fp, r0, asr #7
  38:	2f2f2f2f 	svccs	0x002f2f2f
  3c:	032f2f2f 			; <UNDEFINED> instruction: 0x032f2f2f
  40:	2f2ff215 	svccs	0x002ff215
  44:	2f312f2f 	svccs	0x00312f2f
  48:	2f312f2f 	svccs	0x00312f2f
  4c:	2f2f2f2f 	svccs	0x002f2f2f
  50:	2f2f312f 	svccs	0x002f312f
  54:	2f2f2f2f 	svccs	0x002f2f2f
  58:	2f2f312f 	svccs	0x002f312f
  5c:	2f2f2f31 	svccs	0x002f2f31
  60:	332f2f2f 			; <UNDEFINED> instruction: 0x332f2f2f
  64:	2f302f31 	svccs	0x00302f31
  68:	2f2f302f 	svccs	0x002f302f
  6c:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
  70:	2f302f2f 	svccs	0x00302f2f
  74:	302f2f32 	eorcc	r2, pc, r2, lsr pc	; <UNPREDICTABLE>
  78:	312f2f2f 			; <UNDEFINED> instruction: 0x312f2f2f
  7c:	f6f6f6de 			; <UNDEFINED> instruction: 0xf6f6f6de
  80:	2f2ff7f6 	svccs	0x002ff7f6
  84:	8903a32f 	stmdbhi	r3, {r0, r1, r2, r3, r5, r8, r9, sp, pc}
  88:	c8034a7f 	stmdagt	r3, {r0, r1, r2, r3, r4, r5, r6, r9, fp, lr}
  8c:	032f2e00 			; <UNDEFINED> instruction: 0x032f2e00
  90:	02022e09 	andeq	r2, r2, #9, 28	; 0x90
  94:	6c010100 	stfvss	f0, [r1], {-0}
  98:	02000000 	andeq	r0, r0, #0
  9c:	00002c00 	andeq	r2, r0, r0, lsl #24
  a0:	fb010200 	blx	408aa <_start-0xbffc7756>
  a4:	01000d0e 	tsteq	r0, lr, lsl #26
  a8:	00010101 	andeq	r0, r1, r1, lsl #2
  ac:	00010000 	andeq	r0, r1, r0
  b0:	6f630100 	svcvs	0x00630100
  b4:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
  b8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
  bc:	755f0000 	ldrbvc	r0, [pc, #-0]	; c4 <_start-0xc0007f3c>
  c0:	73646f6d 	cmnvc	r4, #436	; 0x1b4
  c4:	532e3369 			; <UNDEFINED> instruction: 0x532e3369
  c8:	00000100 	andeq	r0, r0, r0, lsl #2
  cc:	02050000 	andeq	r0, r5, #0
  d0:	c0008218 	andgt	r8, r0, r8, lsl r2
  d4:	2f011203 	svccs	0x00011203
  d8:	342f2f2f 	strtcc	r2, [pc], #-3887	; e0 <_start-0xc0007f20>
  dc:	2f2f2f2f 	svccs	0x002f2f2f
  e0:	2f2f2f32 	svccs	0x002f2f32
  e4:	2f2f332f 	svccs	0x002f332f
  e8:	2f2f2f2f 	svccs	0x002f2f2f
  ec:	2f2f2f2f 	svccs	0x002f2f2f
  f0:	2f2f2f2f 	svccs	0x002f2f2f
  f4:	2f352f2f 	svccs	0x00352f2f
  f8:	2f2f2f2f 	svccs	0x002f2f2f
  fc:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
 100:	02022f30 	andeq	r2, r2, #48, 30	; 0xc0
 104:	65010100 	strvs	r0, [r1, #-256]	; 0xffffff00
 108:	02000000 	andeq	r0, r0, #0
 10c:	00002c00 	andeq	r2, r0, r0, lsl #24
 110:	fb010200 	blx	4091a <_start-0xbffc76e6>
 114:	01000d0e 	tsteq	r0, lr, lsl #26
 118:	00010101 	andeq	r0, r1, r1, lsl #2
 11c:	00010000 	andeq	r0, r1, r0
 120:	6f630100 	svcvs	0x00630100
 124:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
 128:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 12c:	755f0000 	ldrbvc	r0, [pc, #-0]	; 134 <_start-0xc0007ecc>
 130:	73766964 	cmnvc	r6, #100, 18	; 0x190000
 134:	532e3369 			; <UNDEFINED> instruction: 0x532e3369
 138:	00000100 	andeq	r0, r0, r0, lsl #2
 13c:	02050000 	andeq	r0, r5, #0
 140:	c00082c8 	andgt	r8, r0, r8, asr #5
 144:	2f011103 	svccs	0x00011103
 148:	2f2f2f2f 	svccs	0x002f2f2f
 14c:	2f2f2f34 	svccs	0x002f2f34
 150:	2f2f322f 	svccs	0x002f322f
 154:	2f342f2f 	svccs	0x00342f2f
 158:	2f2f2f2f 	svccs	0x002f2f2f
 15c:	2f2f2f2f 	svccs	0x002f2f2f
 160:	2f2f2f2f 	svccs	0x002f2f2f
 164:	2f302f2f 	svccs	0x00302f2f
 168:	022f3030 	eoreq	r3, pc, #48	; 0x30
 16c:	01010002 	tsteq	r1, r2
 170:	0000022e 	andeq	r0, r0, lr, lsr #4
 174:	00520002 	subseq	r0, r2, r2
 178:	01020000 	mrseq	r0, (UNDEF: 2)
 17c:	000d0efb 	strdeq	r0, [sp], -fp
 180:	01010101 	tsteq	r1, r1, lsl #2
 184:	01000000 	mrseq	r0, (UNDEF: 0)
 188:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 18c:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; d8 <_start-0xc0007f28>
 190:	2f6e6f6d 	svccs	0x006e6f6d
 194:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 198:	00656475 	rsbeq	r6, r5, r5, ror r4
 19c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1a0:	732f6e6f 			; <UNDEFINED> instruction: 0x732f6e6f
 1a4:	00006372 	andeq	r6, r0, r2, ror r3
 1a8:	70797463 	rsbsvc	r7, r9, r3, ror #8
 1ac:	00682e65 	rsbeq	r2, r8, r5, ror #28
 1b0:	70000001 	andvc	r0, r0, r1
 1b4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 1b8:	00632e66 	rsbeq	r2, r3, r6, ror #28
 1bc:	73000002 	movwvc	r0, #2
 1c0:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
 1c4:	00682e67 	rsbeq	r2, r8, r7, ror #28
 1c8:	00000001 	andeq	r0, r0, r1
 1cc:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
 1d0:	03c00083 	biceq	r0, r0, #131	; 0x83
 1d4:	9f0100c4 	svcls	0x000100c4
 1d8:	042f67d7 	strteq	r6, [pc], #-2007	; 1e0 <_start-0xc0007e20>
 1dc:	7fbe0302 	svcvc	0x00be0302
 1e0:	834cbb82 	movthi	fp, #52098	; 0xcb82
 1e4:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 1e8:	06820601 	streq	r0, [r2], r1, lsl #12
 1ec:	684b3d08 	stmdavs	fp, {r3, r8, sl, fp, ip, sp}^
 1f0:	4c674d67 	stclmi	13, cr4, [r7], #-412	; 0xfffffe64
 1f4:	0063bb30 	rsbeq	fp, r3, r0, lsr fp
 1f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 1fc:	02002008 	andeq	r2, r0, #8
 200:	20080204 	andcs	r0, r8, r4, lsl #4
 204:	03040200 	movweq	r0, #16896	; 0x4200
 208:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
 20c:	21080605 	tstcs	r8, r5, lsl #12
 210:	06040200 	streq	r0, [r4], -r0, lsl #4
 214:	0200d606 	andeq	sp, r0, #6291456	; 0x600000
 218:	65060904 	strvs	r0, [r6, #-2308]	; 0xfffff6fc
 21c:	2f6767a3 	svccs	0x006767a3
 220:	0883bb69 	stmeq	r3, {r0, r3, r5, r6, r8, r9, fp, ip, sp, pc}
 224:	24039f21 	strcs	r9, [r3], #-3873	; 0xfffff0df
 228:	2f4c8366 	svccs	0x004c8366
 22c:	0200c708 	andeq	ip, r0, #8, 14	; 0x200000
 230:	9e060104 	adflss	f0, f6, f4
 234:	032fa006 			; <UNDEFINED> instruction: 0x032fa006
 238:	69d88220 	ldmibvs	r8, {r5, r9, pc}^
 23c:	67836783 	strvs	r6, [r3, r3, lsl #15]
 240:	01040200 	mrseq	r0, R12_usr
 244:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 248:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 24c:	00820601 	addeq	r0, r2, r1, lsl #12
 250:	4a020402 	bmi	81260 <_start-0xbff86da0>
 254:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 258:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 25c:	002f0604 	eoreq	r0, pc, r4, lsl #12
 260:	4b040402 	blmi	101270 <_start-0xbff06d90>
 264:	674b6783 	strbvs	r6, [fp, -r3, lsl #15]
 268:	834b8383 	movthi	r8, #45955	; 0xb383
 26c:	83694b83 	cmnhi	r9, #134144	; 0x20c00
 270:	68678367 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, pc}^
 274:	83f4674b 	mvnshi	r6, #19660800	; 0x12c0000
 278:	69102e02 	ldmdbvs	r0, {r1, r9, sl, fp, sp}
 27c:	2f83834b 	svccs	0x0083834b
 280:	9f67a09d 	svcls	0x0067a09d
 284:	67bb6783 	ldrvs	r6, [fp, r3, lsl #15]!
 288:	2f83bd9f 	svccs	0x0083bd9f
 28c:	9d2fa09d 	stcls	0, cr10, [pc, #-628]!	; 20 <_start-0xc0007fe0>
 290:	a0f12fbc 	ldrhtge	r2, [r1], #252	; 0xfc
 294:	00a09d2f 	adceq	r9, r0, pc, lsr #26
 298:	2f010402 	svccs	0x00010402
 29c:	0200a16b 	andeq	sl, r0, #-1073741798	; 0xc000001a
 2a0:	66060404 	strvs	r0, [r6], -r4, lsl #8
 2a4:	01040200 	mrseq	r0, R12_usr
 2a8:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 2ac:	84069e03 	strhi	r9, [r6], #-3587	; 0xfffff1fd
 2b0:	12038467 	andne	r8, r3, #1728053248	; 0x67000000
 2b4:	bb8367ba 	bllt	fe0da1a4 <__bss_end__+0x3e0cf6f0>
 2b8:	02674c32 	rsbeq	r4, r7, #12800	; 0x3200
 2bc:	8383132e 	orrhi	r1, r3, #-1207959552	; 0xb8000000
 2c0:	4b868383 	blmi	fe1a10d4 <__bss_end__+0x3e196620>
 2c4:	01040200 	mrseq	r0, R12_usr
 2c8:	83068206 	movwhi	r8, #25094	; 0x6206
 2cc:	9f68839f 	svcls	0x0068839f
 2d0:	4b6b6767 	blmi	1ada074 <_start-0xbe52df8c>
 2d4:	02006783 	andeq	r6, r0, #34340864	; 0x20c0000
 2d8:	82060104 	andhi	r0, r6, #4, 2
 2dc:	839f8306 	orrshi	r8, pc, #402653184	; 0x18000000
 2e0:	4e67a068 	cdpmi	0, 6, cr10, cr7, cr8, {3}
 2e4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2e8:	00820601 	addeq	r0, r2, r1, lsl #12
 2ec:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 2f0:	03040200 	movweq	r0, #16896	; 0x4200
 2f4:	02008306 	andeq	r8, r0, #402653184	; 0x18000000
 2f8:	4b490304 	blmi	1240f10 <_start-0xbedc70f0>
 2fc:	01040200 	mrseq	r0, R12_usr
 300:	02008206 	andeq	r8, r0, #1610612736	; 0x60000000
 304:	83060204 	movwhi	r0, #25092	; 0x6204
 308:	02040200 	andeq	r0, r4, #0, 4
 30c:	00674c49 	rsbeq	r4, r7, r9, asr #24
 310:	06010402 	streq	r0, [r1], -r2, lsl #8
 314:	4b9f0666 	blmi	fe7c1cb4 <__bss_end__+0x3e7b7200>
 318:	024c6a68 	subeq	r6, ip, #104, 20	; 0x68000
 31c:	831401b4 	tsthi	r4, #180, 2	; 0x2d
 320:	08bc9d2f 	ldmeq	ip!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, pc}
 324:	bc9d2f21 	ldclt	15, cr2, [sp], {33}	; 0x21
 328:	68679f31 	stmdavs	r7!, {r0, r4, r5, r8, r9, sl, fp, ip, pc}^
 32c:	9d2f83bc 	stcls	3, cr8, [pc, #-752]!	; 44 <_start-0xc0007fbc>
 330:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 334:	02006703 	andeq	r6, r0, #786432	; 0xc0000
 338:	00f10304 	rscseq	r0, r1, r4, lsl #6
 33c:	06010402 	streq	r0, [r1], -r2, lsl #8
 340:	2f840666 	svccs	0x00840666
 344:	6731bc9d 			; <UNDEFINED> instruction: 0x6731bc9d
 348:	0881694b 	stmeq	r1, {r0, r1, r3, r6, r8, fp, sp, lr}
 34c:	9f67323f 	svcls	0x0067323f
 350:	a09f2ba3 	addsge	r2, pc, r3, lsr #23
 354:	4b329f31 	blmi	ca8020 <_start-0xbf35ffe0>
 358:	324b6831 	subcc	r6, fp, #3211264	; 0x310000
 35c:	839f3168 	orrshi	r3, pc, #104, 2
 360:	03672dbd 	cmneq	r7, #12096	; 0x2f40
 364:	0f032e78 	svceq	0x00032e78
 368:	00bb672e 	adcseq	r6, fp, lr, lsr #14
 36c:	06010402 	streq	r0, [r1], -r2, lsl #8
 370:	bb670666 	bllt	19c1d10 <_start-0xbe6462f0>
 374:	bb67bb67 	bllt	19ef118 <_start-0xbe618ee8>
 378:	bc838383 	stclt	3, cr8, [r3], {131}	; 0x83
 37c:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 380:	7ee20302 	cdpvc	3, 14, cr0, cr2, cr2, {0}
 384:	02003c08 	andeq	r3, r0, #8, 24	; 0x800
 388:	66060104 	strvs	r0, [r6], -r4, lsl #2
 38c:	01a00306 	lsleq	r0, r6, #6
 390:	69676782 	stmdbvs	r7!, {r1, r7, r8, r9, sl, sp, lr}^
 394:	2fbc4ba2 	svccs	0x00bc4ba2
 398:	a04f85a1 	subge	r8, pc, r1, lsr #11
 39c:	000a0267 	andeq	r0, sl, r7, ror #4
 3a0:	00a60101 	adceq	r0, r6, r1, lsl #2
 3a4:	00020000 	andeq	r0, r2, r0
 3a8:	00000063 	andeq	r0, r0, r3, rrx
 3ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 3b0:	0101000d 	tsteq	r1, sp
 3b4:	00000101 	andeq	r0, r0, r1, lsl #2
 3b8:	00000100 	andeq	r0, r0, r0, lsl #2
 3bc:	6d6f6301 	stclvs	3, cr6, [pc, #-4]!	; 3c0 <_start-0xc0007c40>
 3c0:	2f6e6f6d 	svccs	0x006e6f6d
 3c4:	00637273 	rsbeq	r7, r3, r3, ror r2
 3c8:	6f632f2e 	svcvs	0x00632f2e
 3cc:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
 3d0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 3d4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 3d8:	61750000 	cmnvs	r5, r0
 3dc:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
 3e0:	00000100 	andeq	r0, r0, r0, lsl #2
 3e4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 3e8:	31706d32 	cmncc	r0, r2, lsr sp
 3ec:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 3f0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 3f4:	00020068 	andeq	r0, r2, r8, rrx
 3f8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 3fc:	706d3233 	rsbvc	r3, sp, r3, lsr r2
 400:	5f787831 	svcpl	0x00787831
 404:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 408:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 40c:	00000000 	andeq	r0, r0, r0
 410:	94140205 	ldrls	r0, [r4], #-517	; 0xfffffdfb
 414:	4c17c000 	ldcmi	0, cr12, [r7], {-0}
 418:	d8d7d7d7 	ldmle	r7, {r0, r1, r2, r4, r6, r7, r8, r9, sl, ip, lr, pc}^
 41c:	d8d7d7d7 	ldmle	r7, {r0, r1, r2, r4, r6, r7, r8, r9, sl, ip, lr, pc}^
 420:	d7d8d8d7 			; <UNDEFINED> instruction: 0xd7d8d8d7
 424:	d7d8d884 	ldrble	sp, [r8, r4, lsl #17]
 428:	009f85d8 			; <UNDEFINED> instruction: 0x009f85d8
 42c:	06010402 	streq	r0, [r1], -r2, lsl #8
 430:	83bb062e 			; <UNDEFINED> instruction: 0x83bb062e
 434:	83684b67 	cmnhi	r8, #105472	; 0x19c00
 438:	6984b92f 	stmibvs	r4, {r0, r1, r2, r3, r5, r8, fp, ip, sp, pc}
 43c:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
 440:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 444:	022f83bb 	eoreq	r8, pc, #-335544318	; 0xec000002
 448:	01010008 	tsteq	r1, r8
 44c:	00000037 	andeq	r0, r0, r7, lsr r0
 450:	00230002 	eoreq	r0, r3, r2
 454:	01020000 	mrseq	r0, (UNDEF: 2)
 458:	000d0efb 	strdeq	r0, [sp], -fp
 45c:	01010101 	tsteq	r1, r1, lsl #2
 460:	01000000 	mrseq	r0, (UNDEF: 0)
 464:	73010000 	movwvc	r0, #4096	; 0x1000
 468:	00006372 	andeq	r6, r0, r2, ror r3
 46c:	695f6f64 	ldmdbvs	pc, {r2, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 470:	632e7172 			; <UNDEFINED> instruction: 0x632e7172
 474:	00000100 	andeq	r0, r0, r0, lsl #2
 478:	02050000 	andeq	r0, r5, #0
 47c:	c00096f0 	strdgt	r9, [r0], -r0
 480:	08024b15 	stmdaeq	r2, {r0, r2, r4, r8, r9, fp, lr}
 484:	68010100 	stmdavs	r1, {r8}
 488:	02000000 	andeq	r0, r0, #0
 48c:	00002300 	andeq	r2, r0, r0, lsl #6
 490:	fb010200 	blx	40c9a <_start-0xbffc7366>
 494:	01000d0e 	tsteq	r0, lr, lsl #26
 498:	00010101 	andeq	r0, r1, r1, lsl #2
 49c:	00010000 	andeq	r0, r1, r0
 4a0:	72730100 	rsbsvc	r0, r3, #0, 2
 4a4:	73000063 	movwvc	r0, #99	; 0x63
 4a8:	30303769 	eorscc	r3, r0, r9, ror #14
 4ac:	00632e36 	rsbeq	r2, r3, r6, lsr lr
 4b0:	00000001 	andeq	r0, r0, r1
 4b4:	08020500 	stmdaeq	r2, {r8, sl}
 4b8:	03c00097 	biceq	r0, r0, #151	; 0x97
 4bc:	2f4b010a 	svccs	0x004b010a
 4c0:	4b2f4b2f 	blmi	bd3184 <_start-0xbf434e7c>
 4c4:	302f4b2f 	eorcc	r4, pc, pc, lsr #22
 4c8:	f54a0c03 			; <UNDEFINED> instruction: 0xf54a0c03
 4cc:	672f9f2f 	strvs	r9, [pc, -pc, lsr #30]!
 4d0:	2ff32f2f 	svccs	0x00f32f2f
 4d4:	2f83834b 	svccs	0x0083834b
 4d8:	2f9f674b 	svccs	0x009f674b
 4dc:	9f2ff569 	svcls	0x002ff569
 4e0:	2f2f672f 	svccs	0x002f672f
 4e4:	834b2ff3 	movthi	r2, #49139	; 0xbff3
 4e8:	674b2f83 	strbvs	r2, [fp, -r3, lsl #31]
 4ec:	06022f9f 			; <UNDEFINED> instruction: 0x06022f9f
 4f0:	2f010100 	svccs	0x00010100
 4f4:	02000001 	andeq	r0, r0, #1
 4f8:	00005a00 	andeq	r5, r0, r0, lsl #20
 4fc:	fb010200 	blx	40d06 <_start-0xbffc72fa>
 500:	01000d0e 	tsteq	r0, lr, lsl #26
 504:	00010101 	andeq	r0, r1, r1, lsl #2
 508:	00010000 	andeq	r0, r1, r0
 50c:	72730100 	rsbsvc	r0, r3, #0, 2
 510:	2f2e0063 	svccs	0x002e0063
 514:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 518:	692f6e6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}	; <UNPREDICTABLE>
 51c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 520:	00006564 	andeq	r6, r0, r4, ror #10
 524:	2e636969 	vnmulcs.f16	s13, s6, s19	; <UNPREDICTABLE>
 528:	00010063 	andeq	r0, r1, r3, rrx
 52c:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 530:	706d3233 	rsbvc	r3, sp, r3, lsr r2
 534:	5f787831 	svcpl	0x00787831
 538:	6f697067 	svcvs	0x00697067
 53c:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 540:	74730000 	ldrbtvc	r0, [r3], #-0
 544:	6d32336d 	ldcvs	3, cr3, [r2, #-436]!	; 0xfffffe4c
 548:	78783170 	ldmdavc	r8!, {r4, r5, r6, r8, ip, sp}^
 54c:	6363725f 	cmnvs	r3, #-268435451	; 0xf0000005
 550:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 554:	00000000 	andeq	r0, r0, r0
 558:	98f80205 	ldmls	r8!, {r0, r2, r9}^
 55c:	0a03c000 	beq	f0564 <_start-0xbff17a9c>
 560:	004b6701 	subeq	r6, fp, r1, lsl #14
 564:	06010402 	streq	r0, [r1], -r2, lsl #8
 568:	8a9f062e 	bhi	fe7c1e28 <__bss_end__+0x3e7b7374>
 56c:	d8d7a04c 	ldmle	r7, {r2, r3, r6, sp, pc}^
 570:	d7d8d8d8 			; <UNDEFINED> instruction: 0xd7d8d8d8
 574:	820b03d7 	andhi	r0, fp, #1543503875	; 0x5c000003
 578:	084a0b03 	stmdaeq	sl, {r0, r1, r8, r9, fp}^
 57c:	d730d7b0 			; <UNDEFINED> instruction: 0xd730d7b0
 580:	03d8d830 	bicseq	sp, r8, #48, 16	; 0x300000
 584:	0b034a0a 	bleq	d2db4 <_start-0xbff3524c>
 588:	d7af084a 	strle	r0, [pc, sl, asr #16]!
 58c:	d730d731 			; <UNDEFINED> instruction: 0xd730d731
 590:	0330d731 	teqeq	r0, #12845056	; 0xc40000
 594:	0f034a0a 	svceq	0x00034a0a
 598:	69b1089e 	ldmibvs	r1!, {r1, r2, r3, r4, r7, fp}
 59c:	f5682fd7 			; <UNDEFINED> instruction: 0xf5682fd7
 5a0:	02040200 	andeq	r0, r4, #0, 4
 5a4:	040200d8 	streq	r0, [r2], #-216	; 0xffffff28
 5a8:	02003002 	andeq	r3, r0, #2
 5ac:	00d70204 	sbcseq	r0, r7, r4, lsl #4
 5b0:	2f020402 	svccs	0x00020402
 5b4:	02040200 	andeq	r0, r4, #0, 4
 5b8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 5bc:	666f0302 	strbtvs	r0, [pc], -r2, lsl #6
 5c0:	01040200 	mrseq	r0, R12_usr
 5c4:	03066606 	movweq	r6, #26118	; 0x6606
 5c8:	0b036615 	bleq	d9e24 <_start-0xbff2e1dc>
 5cc:	9e100366 	cdpls	3, 1, cr0, cr0, cr6, {3}
 5d0:	2fd768d9 	svccs	0x00d768d9
 5d4:	672fd730 			; <UNDEFINED> instruction: 0x672fd730
 5d8:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 5dc:	02006b02 	andeq	r6, r0, #2048	; 0x800
 5e0:	70030204 	andvc	r0, r3, r4, lsl #4
 5e4:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 5e8:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 5ec:	68661303 	stmdavs	r6!, {r0, r1, r8, r9, ip}^
 5f0:	032f314d 			; <UNDEFINED> instruction: 0x032f314d
 5f4:	1103660a 	tstne	r3, sl, lsl #12
 5f8:	d730d74a 	ldrle	sp, [r0, -sl, asr #14]!
 5fc:	d72fd730 			; <UNDEFINED> instruction: 0xd72fd730
 600:	d74cbc2f 	strble	fp, [ip, -pc, lsr #24]
 604:	0a035232 	beq	d4ed4 <_start-0xbff3312c>
 608:	d7af084a 	strle	r0, [pc, sl, asr #16]!
 60c:	d731d731 			; <UNDEFINED> instruction: 0xd731d731
 610:	52d7312f 	sbcspl	r3, r7, #-1073741813	; 0xc000000b
 614:	084a0903 	stmdaeq	sl, {r0, r1, r8, fp}^
 618:	d731d7af 	ldrle	sp, [r1, -pc, lsr #15]!
 61c:	312fd731 			; <UNDEFINED> instruction: 0x312fd731
 620:	000402d7 	ldrdeq	r0, [r4], -r7
 624:	00690101 	rsbeq	r0, r9, r1, lsl #2
 628:	00020000 	andeq	r0, r2, r0
 62c:	0000001d 	andeq	r0, r0, sp, lsl r0
 630:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 634:	0101000d 	tsteq	r1, sp
 638:	00000101 	andeq	r0, r0, r1, lsl #2
 63c:	00000100 	andeq	r0, r0, r0, lsl #2
 640:	616d0001 	cmnvs	sp, r1
 644:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 648:	00000000 	andeq	r0, r0, r0
 64c:	02050000 	andeq	r0, r5, #0
 650:	c000a018 	andgt	sl, r0, r8, lsl r0
 654:	00678416 	rsbeq	r8, r7, r6, lsl r4
 658:	06030402 	streq	r0, [r3], -r2, lsl #8
 65c:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 660:	02006601 	andeq	r6, r0, #1048576	; 0x100000
 664:	81060204 	tsthi	r6, r4, lsl #4
 668:	01040200 	mrseq	r0, R12_usr
 66c:	84066606 	strhi	r6, [r6], #-1542	; 0xfffff9fa
 670:	02006988 	andeq	r6, r0, #136, 18	; 0x220000
 674:	00310104 	eorseq	r0, r1, r4, lsl #2
 678:	9f010402 	svcls	0x00010402
 67c:	01040200 	mrseq	r0, R12_usr
 680:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 684:	13220201 			; <UNDEFINED> instruction: 0x13220201
 688:	01040200 	mrseq	r0, R12_usr
 68c:	0202a908 	andeq	sl, r2, #8, 18	; 0x20000
 690:	Address 0x00000690 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000062 	andeq	r0, r0, r2, rrx
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000000 	andeq	r0, r0, r0
      10:	c0008000 	andgt	r8, r0, r0
      14:	c0008218 	andgt	r8, r0, r8, lsl r2
      18:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
      1c:	74732f74 	ldrbtvc	r2, [r3], #-3956	; 0xfffff08c
      20:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
      24:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
      28:	2f656d6f 	svccs	0x00656d6f
      2c:	756e696c 	strbvc	r6, [lr, #-2412]!	; 0xfffff694
      30:	61662f78 	smcvs	25336	; 0x62f8
      34:	67697372 			; <UNDEFINED> instruction: 0x67697372
      38:	412f7468 			; <UNDEFINED> instruction: 0x412f7468
      3c:	442f4d52 	strtmi	r4, [pc], #-3410	; 44 <_start-0xc0007fbc>
      40:	31323243 	teqcc	r2, r3, asr #4
      44:	642f3131 	strtvs	r3, [pc], #-305	; 4c <_start-0xc0007fb4>
      48:	39307961 	ldmdbcc	r0!, {r0, r5, r6, r8, fp, ip, sp, lr}
      4c:	2d32302f 	ldccs	0, cr3, [r2, #-188]!	; 0xffffff44
      50:	2d633269 	sfmcs	f3, 2, [r3, #-420]!	; 0xfffffe5c
      54:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
      58:	53412055 	movtpl	r2, #4181	; 0x1055
      5c:	322e3220 	eorcc	r3, lr, #32, 4
      60:	00322e38 	eorseq	r2, r2, r8, lsr lr
      64:	006a8001 	rsbeq	r8, sl, r1
      68:	00020000 	andeq	r0, r2, r0
      6c:	00000014 	andeq	r0, r0, r4, lsl r0
      70:	00970104 	addseq	r0, r7, r4, lsl #2
      74:	82180000 	andshi	r0, r8, #0
      78:	82c8c000 	sbchi	ip, r8, #0
      7c:	6f63c000 	svcvs	0x0063c000
      80:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
      84:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
      88:	6d755f2f 	ldclvs	15, cr5, [r5, #-188]!	; 0xffffff44
      8c:	6973646f 	ldmdbvs	r3!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
      90:	00532e33 	subseq	r2, r3, r3, lsr lr
      94:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffe0 <__bss_end__+0x3fff552c>
      98:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
      9c:	2f78756e 	svccs	0x0078756e
      a0:	73726166 	cmnvc	r2, #-2147483623	; 0x80000019
      a4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      a8:	4d52412f 	ldfmie	f4, [r2, #-188]	; 0xffffff44
      ac:	3243442f 	subcc	r4, r3, #788529152	; 0x2f000000
      b0:	31313132 	teqcc	r1, r2, lsr r1
      b4:	7961642f 	stmdbvc	r1!, {r0, r1, r2, r3, r5, sl, sp, lr}^
      b8:	302f3930 	eorcc	r3, pc, r0, lsr r9	; <UNPREDICTABLE>
      bc:	32692d32 	rsbcc	r2, r9, #3200	; 0xc80
      c0:	00632d63 	rsbeq	r2, r3, r3, ror #26
      c4:	20554e47 	subscs	r4, r5, r7, asr #28
      c8:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      cc:	2e38322e 	cdpcs	2, 3, cr3, cr8, cr14, {1}
      d0:	80010032 	andhi	r0, r1, r2, lsr r0
      d4:	0000006a 	andeq	r0, r0, sl, rrx
      d8:	00280002 	eoreq	r0, r8, r2
      dc:	01040000 	mrseq	r0, (UNDEF: 4)
      e0:	00000107 	andeq	r0, r0, r7, lsl #2
      e4:	c00082c8 	andgt	r8, r0, r8, asr #5
      e8:	c000835c 	andgt	r8, r0, ip, asr r3
      ec:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
      f0:	732f6e6f 			; <UNDEFINED> instruction: 0x732f6e6f
      f4:	5f2f6372 	svcpl	0x002f6372
      f8:	76696475 			; <UNDEFINED> instruction: 0x76696475
      fc:	2e336973 			; <UNDEFINED> instruction: 0x2e336973
     100:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
     104:	2f656d6f 	svccs	0x00656d6f
     108:	756e696c 	strbvc	r6, [lr, #-2412]!	; 0xfffff694
     10c:	61662f78 	smcvs	25336	; 0x62f8
     110:	67697372 			; <UNDEFINED> instruction: 0x67697372
     114:	412f7468 			; <UNDEFINED> instruction: 0x412f7468
     118:	442f4d52 	strtmi	r4, [pc], #-3410	; 120 <_start-0xc0007ee0>
     11c:	31323243 	teqcc	r2, r3, asr #4
     120:	642f3131 	strtvs	r3, [pc], #-305	; 128 <_start-0xc0007ed8>
     124:	39307961 	ldmdbcc	r0!, {r0, r5, r6, r8, fp, ip, sp, lr}
     128:	2d32302f 	ldccs	0, cr3, [r2, #-188]!	; 0xffffff44
     12c:	2d633269 	sfmcs	f3, 2, [r3, #-420]!	; 0xfffffe5c
     130:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
     134:	53412055 	movtpl	r2, #4181	; 0x1055
     138:	322e3220 	eorcc	r3, lr, #32, 4
     13c:	00322e38 	eorseq	r2, r2, r8, lsr lr
     140:	047e8001 	ldrbteq	r8, [lr], #-1
     144:	00040000 	andeq	r0, r4, r0
     148:	0000003c 	andeq	r0, r0, ip, lsr r0
     14c:	00520104 	subseq	r0, r2, r4, lsl #2
     150:	110c0000 	mrsne	r0, (UNDEF: 12)
     154:	5f000001 	svcpl	0x00000001
     158:	5c000001 	stcpl	0, cr0, [r0], {1}
     15c:	b8c00083 	stmialt	r0, {r0, r1, r7}^
     160:	70000010 	andvc	r0, r0, r0, lsl r0
     164:	02000001 	andeq	r0, r0, #1
     168:	00000039 	andeq	r0, r0, r9, lsr r0
     16c:	00302803 	eorseq	r2, r0, r3, lsl #16
     170:	04030000 	streq	r0, [r3], #-0
     174:	00000007 	andeq	r0, r0, r7
     178:	00004002 	andeq	r4, r0, r2
     17c:	25660300 	strbcs	r0, [r6, #-768]!	; 0xfffffd00
     180:	04000000 	streq	r0, [r0], #-0
     184:	00000058 	andeq	r0, r0, r8, asr r0
     188:	00000051 	andeq	r0, r0, r1, asr r0
     18c:	00005105 	andeq	r5, r0, r5, lsl #2
     190:	0600ff00 	streq	pc, [r0], -r0, lsl #30
     194:	00f10704 	rscseq	r0, r1, r4, lsl #14
     198:	01060000 	mrseq	r0, (UNDEF: 6)
     19c:	0000de08 	andeq	sp, r0, r8, lsl #28
     1a0:	018f0700 	orreq	r0, pc, r0, lsl #14
     1a4:	11010000 	mrsne	r0, (UNDEF: 1)
     1a8:	00000041 	andeq	r0, r0, r1, asr #32
     1ac:	a9b00305 	ldmibge	r0!, {r0, r2, r8, r9}
     1b0:	d008c000 	andle	ip, r8, r0
     1b4:	02000001 	andeq	r0, r0, #1
     1b8:	93c8017d 	bicls	r0, r8, #1073741855	; 0x4000001f
     1bc:	004cc000 	subeq	ip, ip, r0
     1c0:	9c010000 	stcls	0, cr0, [r1], {-0}
     1c4:	000000b6 	strheq	r0, [r0], -r6
     1c8:	746d6609 	strbtvc	r6, [sp], #-1545	; 0xfffff9f7
     1cc:	017d0200 	cmneq	sp, r0, lsl #4
     1d0:	000000b6 	strheq	r0, [r0], -r6
     1d4:	0a709102 	beq	1c245e4 <_start-0xbe3e3a1c>
     1d8:	0001ae0b 	andeq	sl, r1, fp, lsl #28
     1dc:	017f0200 	cmneq	pc, r0, lsl #4
     1e0:	00000036 	andeq	r0, r0, r6, lsr r0
     1e4:	0b649102 	bleq	19245f4 <_start-0xbe6e3a0c>
     1e8:	00000196 	muleq	r0, r6, r1
     1ec:	c8018002 	stmdagt	r1, {r1, pc}
     1f0:	03000000 	movweq	r0, #0
     1f4:	007f8091 			; <UNDEFINED> instruction: 0x007f8091
     1f8:	00c3040c 	sbceq	r0, r3, ip, lsl #8
     1fc:	01060000 	mrseq	r0, (UNDEF: 6)
     200:	0000e708 	andeq	lr, r0, r8, lsl #14
     204:	00bc0d00 	adcseq	r0, ip, r0, lsl #26
     208:	bc040000 	stclt	0, cr0, [r4], {-0}
     20c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     210:	05000000 	streq	r0, [r0, #-0]
     214:	00000051 	andeq	r0, r0, r1, asr r0
     218:	cf0e0063 	svcgt	0x000e0063
     21c:	02000001 	andeq	r0, r0, #1
     220:	012e0172 			; <UNDEFINED> instruction: 0x012e0172
     224:	937c0000 	cmnls	ip, #0
     228:	004cc000 	subeq	ip, ip, r0
     22c:	9c010000 	stcls	0, cr0, [r1], {-0}
     230:	0000012e 	andeq	r0, r0, lr, lsr #2
     234:	66756209 	ldrbtvs	r6, [r5], -r9, lsl #4
     238:	01720200 	cmneq	r2, r0, lsl #4
     23c:	00000135 	andeq	r0, r0, r5, lsr r1
     240:	09609102 	stmdbeq	r0!, {r1, r8, ip, pc}^
     244:	00746d66 	rsbseq	r6, r4, r6, ror #26
     248:	b6017202 	strlt	r7, [r1], -r2, lsl #4
     24c:	02000000 	andeq	r0, r0, #0
     250:	0b0a7491 	bleq	29d49c <_start-0xbfd6ab64>
     254:	000001ae 	andeq	r0, r0, lr, lsr #3
     258:	36017402 	strcc	r7, [r1], -r2, lsl #8
     25c:	02000000 	andeq	r0, r0, #0
     260:	690f6491 	stmdbvs	pc, {r0, r4, r7, sl, sp, lr}	; <UNPREDICTABLE>
     264:	01750200 	cmneq	r5, r0, lsl #4
     268:	0000012e 	andeq	r0, r0, lr, lsr #2
     26c:	00689102 	rsbeq	r9, r8, r2, lsl #2
     270:	69050410 	stmdbvs	r5, {r4, sl}
     274:	0c00746e 	cfstrseq	mvf7, [r0], {110}	; 0x6e
     278:	0000bc04 	andeq	fp, r0, r4, lsl #24
     27c:	01ce1100 	biceq	r1, lr, r0, lsl #2
     280:	bb020000 	bllt	80288 <_start-0xbff87d78>
     284:	0000012e 	andeq	r0, r0, lr, lsr #2
     288:	c0008ab4 			; <UNDEFINED> instruction: 0xc0008ab4
     28c:	000008c8 	andeq	r0, r0, r8, asr #17
     290:	02479c01 	subeq	r9, r7, #256	; 0x100
     294:	62120000 	andsvs	r0, r2, #0
     298:	02006675 	andeq	r6, r0, #122683392	; 0x7500000
     29c:	000135bb 			; <UNDEFINED> instruction: 0x000135bb
     2a0:	44910200 	ldrmi	r0, [r1], #512	; 0x200
     2a4:	746d6612 	strbtvc	r6, [sp], #-1554	; 0xfffff9ee
     2a8:	b6bb0200 	ldrtlt	r0, [fp], r0, lsl #4
     2ac:	02000000 	andeq	r0, r0, #0
     2b0:	ae134091 	mrcge	0, 0, r4, cr3, cr1, {4}
     2b4:	02000001 	andeq	r0, r0, #1
     2b8:	000036bb 			; <UNDEFINED> instruction: 0x000036bb
     2bc:	bc910300 	ldclt	3, cr0, [r1], {0}
     2c0:	656c147f 	strbvs	r1, [ip, #-1151]!	; 0xfffffb81
     2c4:	bd02006e 	stclt	0, cr0, [r2, #-440]	; 0xfffffe48
     2c8:	0000012e 	andeq	r0, r0, lr, lsr #2
     2cc:	14509102 	ldrbne	r9, [r0], #-258	; 0xfffffefe
     2d0:	006d756e 	rsbeq	r7, sp, lr, ror #10
     2d4:	0247c102 	subeq	ip, r7, #-2147483648	; 0x80000000
     2d8:	91020000 	mrsls	r0, (UNDEF: 2)
     2dc:	00691474 	rsbeq	r1, r9, r4, ror r4
     2e0:	012ec302 			; <UNDEFINED> instruction: 0x012ec302
     2e4:	91020000 	mrsls	r0, (UNDEF: 2)
     2e8:	00d91570 	sbcseq	r1, r9, r0, ror r5
     2ec:	c3020000 	movwgt	r0, #8192	; 0x2000
     2f0:	0000012e 	andeq	r0, r0, lr, lsr #2
     2f4:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
     2f8:	00727473 	rsbseq	r7, r2, r3, ror r4
     2fc:	0135c402 	teqeq	r5, r2, lsl #8
     300:	91020000 	mrsls	r0, (UNDEF: 2)
     304:	00731468 	rsbseq	r1, r3, r8, ror #8
     308:	00b6c502 	adcseq	ip, r6, r2, lsl #10
     30c:	91020000 	mrsls	r0, (UNDEF: 2)
     310:	01251564 			; <UNDEFINED> instruction: 0x01251564
     314:	c7020000 	strgt	r0, [r2, -r0]
     318:	0000012e 	andeq	r0, r0, lr, lsr #2
     31c:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
     320:	000001a2 	andeq	r0, r0, r2, lsr #3
     324:	012ec902 			; <UNDEFINED> instruction: 0x012ec902
     328:	91020000 	mrsls	r0, (UNDEF: 2)
     32c:	0048155c 	subeq	r1, r8, ip, asr r5
     330:	ca020000 	bgt	80338 <_start-0xbff87cc8>
     334:	0000012e 	andeq	r0, r0, lr, lsr #2
     338:	15589102 	ldrbne	r9, [r8, #-258]	; 0xfffffefe
     33c:	00000130 	andeq	r0, r0, r0, lsr r1
     340:	012ecc02 			; <UNDEFINED> instruction: 0x012ecc02
     344:	91020000 	mrsls	r0, (UNDEF: 2)
     348:	01501654 	cmpeq	r0, r4, asr r6
     34c:	d6020000 	strle	r0, [r2], -r0
     350:	c0008b0c 	andgt	r8, r0, ip, lsl #22
     354:	00912417 	addseq	r2, r1, r7, lsl r4
     358:	000028c0 	andeq	r2, r0, r0, asr #17
     35c:	00022e00 	andeq	r2, r2, r0, lsl #28
     360:	70690f00 	rsbvc	r0, r9, r0, lsl #30
     364:	01340200 	teqeq	r4, r0, lsl #4
     368:	0000024e 	andeq	r0, r0, lr, asr #4
     36c:	00489102 	subeq	r9, r8, r2, lsl #2
     370:	00915018 	addseq	r5, r1, r8, lsl r0
     374:	000028c0 	andeq	r2, r0, r0, asr #17
     378:	70690f00 	rsbvc	r0, r9, r0, lsl #30
     37c:	01370200 	teqeq	r7, r0, lsl #4
     380:	0000025b 	andeq	r0, r0, fp, asr r2
     384:	004c9102 	subeq	r9, ip, r2, lsl #2
     388:	07040600 	streq	r0, [r4, -r0, lsl #12]
     38c:	000000ec 	andeq	r0, r0, ip, ror #1
     390:	0254040c 	subseq	r0, r4, #12, 8	; 0xc000000
     394:	04060000 	streq	r0, [r6], #-0
     398:	0001ba05 	andeq	fp, r1, r5, lsl #20
     39c:	2e040c00 	cdpcs	12, 0, cr0, cr4, cr0, {0}
     3a0:	19000001 	stmdbne	r0, {r0}
     3a4:	00000157 	andeq	r0, r0, r7, asr r1
     3a8:	0051b302 	subseq	fp, r1, r2, lsl #6
     3ac:	8a480000 	bhi	12003b4 <_start-0xbee07c4c>
     3b0:	006cc000 	rsbeq	ip, ip, r0
     3b4:	9c010000 	stcls	0, cr0, [r1], {-0}
     3b8:	000002a2 	andeq	r0, r0, r2, lsr #5
     3bc:	02007312 	andeq	r7, r0, #1207959552	; 0x48000000
     3c0:	0000b6b3 			; <UNDEFINED> instruction: 0x0000b6b3
     3c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     3c8:	00002913 	andeq	r2, r0, r3, lsl r9
     3cc:	51b30200 			; <UNDEFINED> instruction: 0x51b30200
     3d0:	02000000 	andeq	r0, r0, #0
     3d4:	73147091 	tstvc	r4, #145	; 0x91
     3d8:	b5020063 	strlt	r0, [r2, #-99]	; 0xffffff9d
     3dc:	000000b6 	strheq	r0, [r0], -r6
     3e0:	00789102 	rsbseq	r9, r8, r2, lsl #2
     3e4:	0001b31a 	andeq	fp, r1, sl, lsl r3
     3e8:	356e0200 	strbcc	r0, [lr, #-512]!	; 0xfffffe00
     3ec:	64000001 	strvs	r0, [r0], #-1
     3f0:	e4c00086 	strb	r0, [r0], #134	; 0x86
     3f4:	01000003 	tsteq	r0, r3
     3f8:	00036f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
     3fc:	74731200 	ldrbtvc	r1, [r3], #-512	; 0xfffffe00
     400:	6e020072 	mcrvs	0, 0, r0, cr2, cr2, {3}
     404:	00000135 	andeq	r0, r0, r5, lsr r1
     408:	7f9c9103 	svcvc	0x009c9103
     40c:	6d756e12 	ldclvs	14, cr6, [r5, #-72]!	; 0xffffffb8
     410:	546e0200 	strbtpl	r0, [lr], #-512	; 0xfffffe00
     414:	03000002 	movweq	r0, #2
     418:	137f9891 	cmnne	pc, #9502720	; 0x910000
     41c:	000000d9 	ldrdeq	r0, [r0], -r9
     420:	00516e02 	subseq	r6, r1, r2, lsl #28
     424:	91030000 	mrsls	r0, (UNDEF: 3)
     428:	2b137f94 	blcs	4e0280 <_start-0xbfb27d80>
     42c:	02000001 	andeq	r0, r0, #1
     430:	00012e6e 	andeq	r2, r1, lr, ror #28
     434:	90910300 	addsls	r0, r1, r0, lsl #6
     438:	0048137f 	subeq	r1, r8, pc, ror r3
     43c:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
     440:	0000012e 	andeq	r0, r0, lr, lsr #2
     444:	13009102 	movwne	r9, #258	; 0x102
     448:	00000191 	muleq	r0, r1, r1
     44c:	012e6e02 			; <UNDEFINED> instruction: 0x012e6e02
     450:	91020000 	mrsls	r0, (UNDEF: 2)
     454:	00631404 	rsbeq	r1, r3, r4, lsl #8
     458:	00bc7102 	adcseq	r7, ip, r2, lsl #2
     45c:	91020000 	mrsls	r0, (UNDEF: 2)
     460:	01c3156b 	biceq	r1, r3, fp, ror #10
     464:	71020000 	mrsvc	r0, (UNDEF: 2)
     468:	000000bc 	strheq	r0, [r0], -ip
     46c:	14779102 	ldrbtne	r9, [r7], #-258	; 0xfffffefe
     470:	00706d74 	rsbseq	r6, r0, r4, ror sp
     474:	036f7102 	cmneq	pc, #-2147483648	; 0x80000000
     478:	91030000 	mrsls	r0, (UNDEF: 3)
     47c:	00157fa0 	andseq	r7, r5, r0, lsr #31
     480:	02000000 	andeq	r0, r0, #0
     484:	0000b672 	andeq	fp, r0, r2, ror r6
     488:	70910200 	addsvc	r0, r1, r0, lsl #4
     48c:	02006914 	andeq	r6, r0, #20, 18	; 0x50000
     490:	00012e73 	andeq	r2, r1, r3, ror lr
     494:	6c910200 	lfmvs	f0, 4, [r1], {0}
     498:	00882018 	addeq	r2, r8, r8, lsl r0
     49c:	000034c0 	andeq	r3, r0, r0, asr #9
     4a0:	01c81500 	biceq	r1, r8, r0, lsl #10
     4a4:	95020000 	strls	r0, [r2, #-0]
     4a8:	0000012e 	andeq	r0, r0, lr, lsr #2
     4ac:	00649102 	rsbeq	r9, r4, r2, lsl #2
     4b0:	00bc0400 	adcseq	r0, ip, r0, lsl #8
     4b4:	037f0000 	cmneq	pc, #0
     4b8:	51050000 	mrspl	r0, (UNDEF: 5)
     4bc:	41000000 	mrsmi	r0, (UNDEF: 0)
     4c0:	00191b00 	andseq	r1, r9, r0, lsl #22
     4c4:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
     4c8:	0000012e 	andeq	r0, r0, lr, lsr #2
     4cc:	c00085d0 	ldrdgt	r8, [r0], -r0
     4d0:	00000094 	muleq	r0, r4, r0
     4d4:	03b19c01 			; <UNDEFINED> instruction: 0x03b19c01
     4d8:	73120000 	tstvc	r2, #0
     4dc:	b1490200 	mrslt	r0, (UNDEF: 105)
     4e0:	02000003 	andeq	r0, r0, #3
     4e4:	69147491 	ldmdbvs	r4, {r0, r4, r7, sl, ip, sp, lr}
     4e8:	2e4b0200 	cdpcs	2, 4, cr0, cr11, cr0, {0}
     4ec:	02000001 	andeq	r0, r0, #1
     4f0:	0c007891 	stceq	8, cr7, [r0], {145}	; 0x91
     4f4:	0000b604 	andeq	fp, r0, r4, lsl #12
     4f8:	01031100 	mrseq	r1, (UNDEF: 19)
     4fc:	21020000 	mrscs	r0, (UNDEF: 2)
     500:	00000254 	andeq	r0, r0, r4, asr r2
     504:	c0008564 	andgt	r8, r0, r4, ror #10
     508:	0000006c 	andeq	r0, r0, ip, rrx
     50c:	03fa9c01 	mvnseq	r9, #256	; 0x100
     510:	63120000 	tstvs	r2, #0
     514:	21020070 	tstcs	r2, r0, ror r0
     518:	000000b6 	strheq	r0, [r0], -r6
     51c:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
     520:	000000fe 	strdeq	r0, [r0], -lr
     524:	03fa2102 	mvnseq	r2, #-2147483648	; 0x80000000
     528:	91020000 	mrsls	r0, (UNDEF: 2)
     52c:	00d91370 	sbcseq	r1, r9, r0, ror r3
     530:	21020000 	mrscs	r0, (UNDEF: 2)
     534:	00000051 	andeq	r0, r0, r1, asr r0
     538:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     53c:	0135040c 	teqeq	r5, ip, lsl #8
     540:	3a110000 	bcc	440548 <_start-0xbfbc7ab8>
     544:	02000001 	andeq	r0, r0, #1
     548:	00024706 	andeq	r4, r2, r6, lsl #14
     54c:	0083ac00 	addeq	sl, r3, r0, lsl #24
     550:	0001b8c0 	andeq	fp, r1, r0, asr #17
     554:	5f9c0100 	svcpl	0x009c0100
     558:	12000004 	andne	r0, r0, #4
     55c:	02007063 	andeq	r7, r0, #99	; 0x63
     560:	0000b606 	andeq	fp, r0, r6, lsl #12
     564:	6c910200 	lfmvs	f0, 4, [r1], {0}
     568:	0000fe13 	andeq	pc, r0, r3, lsl lr	; <UNPREDICTABLE>
     56c:	fa060200 	blx	180d74 <_start-0xbfe8728c>
     570:	02000003 	andeq	r0, r0, #3
     574:	d9136891 	ldmdble	r3, {r0, r4, r7, fp, sp, lr}
     578:	02000000 	andeq	r0, r0, #0
     57c:	00005106 	andeq	r5, r0, r6, lsl #2
     580:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     584:	00014915 	andeq	r4, r1, r5, lsl r9
     588:	47080200 	strmi	r0, [r8, -r0, lsl #4]
     58c:	02000002 	andeq	r0, r0, #2
     590:	23157491 	tstcs	r5, #-1862270976	; 0x91000000
     594:	02000000 	andeq	r0, r0, #0
     598:	00024708 	andeq	r4, r2, r8, lsl #14
     59c:	70910200 	addsvc	r0, r1, r0, lsl #4
     5a0:	002f1c00 	eoreq	r1, pc, r0, lsl #24
     5a4:	44010000 	strmi	r0, [r1], #-0
     5a8:	00000058 	andeq	r0, r0, r8, asr r0
     5ac:	c000835c 	andgt	r8, r0, ip, asr r3
     5b0:	00000050 	andeq	r0, r0, r0, asr r0
     5b4:	63129c01 	tstvs	r2, #256	; 0x100
     5b8:	58440100 	stmdapl	r4, {r8}^
     5bc:	02000000 	andeq	r0, r0, #0
     5c0:	00007891 	muleq	r0, r1, r8
     5c4:	00000214 	andeq	r0, r0, r4, lsl r2
     5c8:	01f80004 	mvnseq	r0, r4
     5cc:	01040000 	mrseq	r0, (UNDEF: 4)
     5d0:	00000052 	andeq	r0, r0, r2, asr r0
     5d4:	0002610c 	andeq	r6, r2, ip, lsl #2
     5d8:	00015f00 	andeq	r5, r1, r0, lsl #30
     5dc:	00941400 	addseq	r1, r4, r0, lsl #8
     5e0:	0002dcc0 	andeq	sp, r2, r0, asr #25
     5e4:	0003a200 	andeq	sl, r3, r0, lsl #4
     5e8:	02340200 	eorseq	r0, r4, #0, 4
     5ec:	0000ca04 	andeq	ip, r0, r4, lsl #20
     5f0:	02070300 	andeq	r0, r7, #0, 6
     5f4:	05020000 	streq	r0, [r2, #-0]
     5f8:	000000d1 	ldrdeq	r0, [r0], -r1
     5fc:	02440300 	subeq	r0, r4, #0, 6
     600:	06020000 	streq	r0, [r2], -r0
     604:	000000d1 	ldrdeq	r0, [r0], -r1
     608:	020d0304 	andeq	r0, sp, #4, 6	; 0x10000000
     60c:	07020000 	streq	r0, [r2, -r0]
     610:	000000d1 	ldrdeq	r0, [r0], -r1
     614:	02010308 	andeq	r0, r1, #8, 6	; 0x20000000
     618:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     61c:	000000d1 	ldrdeq	r0, [r0], -r1
     620:	4449040c 	strbmi	r0, [r9], #-1036	; 0xfffffbf4
     624:	09020052 	stmdbeq	r2, {r1, r4, r6}
     628:	000000d1 	ldrdeq	r0, [r0], -r1
     62c:	444f0410 	strbmi	r0, [pc], #-1040	; 634 <_start-0xc00079cc>
     630:	0a020052 	beq	80780 <_start-0xbff87880>
     634:	000000d1 	ldrdeq	r0, [r0], -r1
     638:	01fc0314 	mvnseq	r0, r4, lsl r3
     63c:	0b020000 	bleq	80644 <_start-0xbff879bc>
     640:	000000d1 	ldrdeq	r0, [r0], -r1
     644:	02380318 	eorseq	r0, r8, #24, 6	; 0x60000000
     648:	0c020000 	stceq	0, cr0, [r2], {-0}
     64c:	000000d1 	ldrdeq	r0, [r0], -r1
     650:	024b031c 	subeq	r0, fp, #28, 6	; 0x70000000
     654:	0d020000 	stceq	0, cr0, [r2, #-0]
     658:	000000d1 	ldrdeq	r0, [r0], -r1
     65c:	025c0320 	subseq	r0, ip, #32, 6	; 0x80000000
     660:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     664:	000000d1 	ldrdeq	r0, [r0], -r1
     668:	52420424 	subpl	r0, r2, #36, 8	; 0x24000000
     66c:	0f020052 	svceq	0x00020052
     670:	000000d1 	ldrdeq	r0, [r0], -r1
     674:	65720428 	ldrbvs	r0, [r2, #-1064]!	; 0xfffffbd8
     678:	10020073 	andne	r0, r2, r3, ror r0
     67c:	000000d1 	ldrdeq	r0, [r0], -r1
     680:	01e3032c 	mvneq	r0, ip, lsr #6
     684:	11020000 	mrsne	r0, (UNDEF: 2)
     688:	000000d1 	ldrdeq	r0, [r0], -r1
     68c:	04050030 	streq	r0, [r5], #-48	; 0xffffffd0
     690:	0000f107 	andeq	pc, r0, r7, lsl #2
     694:	00ca0600 	sbceq	r0, sl, r0, lsl #12
     698:	31070000 	mrscc	r0, (UNDEF: 7)
     69c:	02000002 	andeq	r0, r0, #2
     6a0:	00002513 	andeq	r2, r0, r3, lsl r5
     6a4:	03300200 	teqeq	r0, #0, 4
     6a8:	00017a04 	andeq	r7, r1, r4, lsl #20
     6ac:	52430400 	subpl	r0, r3, #0, 8
     6b0:	05030031 	streq	r0, [r3, #-49]	; 0xffffffcf
     6b4:	000000d1 	ldrdeq	r0, [r0], -r1
     6b8:	52430400 	subpl	r0, r3, #0, 8
     6bc:	06030032 			; <UNDEFINED> instruction: 0x06030032
     6c0:	000000d1 	ldrdeq	r0, [r0], -r1
     6c4:	52430404 	subpl	r0, r3, #4, 8	; 0x4000000
     6c8:	07030033 	smladxeq	r3, r3, r0, r0
     6cc:	000000d1 	ldrdeq	r0, [r0], -r1
     6d0:	52420408 	subpl	r0, r2, #8, 8	; 0x8000000
     6d4:	08030052 	stmdaeq	r3, {r1, r4, r6}
     6d8:	000000d1 	ldrdeq	r0, [r0], -r1
     6dc:	0215030c 	andseq	r0, r5, #12, 6	; 0x30000000
     6e0:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     6e4:	000000d1 	ldrdeq	r0, [r0], -r1
     6e8:	01f70310 	mvnseq	r0, r0, lsl r3
     6ec:	0a030000 	beq	c06f4 <_start-0xbff4790c>
     6f0:	000000d1 	ldrdeq	r0, [r0], -r1
     6f4:	51520414 	cmppl	r2, r4, lsl r4
     6f8:	0b030052 	bleq	c0848 <_start-0xbff477b8>
     6fc:	000000d1 	ldrdeq	r0, [r0], -r1
     700:	53490418 	movtpl	r0, #37912	; 0x9418
     704:	0c030052 	stceq	0, cr0, [r3], {82}	; 0x52
     708:	000000d1 	ldrdeq	r0, [r0], -r1
     70c:	4349041c 	movtmi	r0, #37916	; 0x941c
     710:	0d030052 	stceq	0, cr0, [r3, #-328]	; 0xfffffeb8
     714:	000000d1 	ldrdeq	r0, [r0], -r1
     718:	44520420 	ldrbmi	r0, [r2], #-1056	; 0xfffffbe0
     71c:	0e030052 	mcreq	0, 0, r0, cr3, cr2, {2}
     720:	000000d1 	ldrdeq	r0, [r0], -r1
     724:	44540424 	ldrbmi	r0, [r4], #-1060	; 0xfffffbdc
     728:	0f030052 	svceq	0x00030052
     72c:	000000d1 	ldrdeq	r0, [r0], -r1
     730:	021a0328 	andseq	r0, sl, #40, 6	; 0xa0000000
     734:	10030000 	andne	r0, r3, r0
     738:	000000d1 	ldrdeq	r0, [r0], -r1
     73c:	3d07002c 	stccc	0, cr0, [r7, #-176]	; 0xffffff50
     740:	03000002 	movweq	r0, #2
     744:	0000e111 	andeq	lr, r0, r1, lsl r1
     748:	02500800 	subseq	r0, r0, #0, 16
     74c:	30010000 	andcc	r0, r1, r0
     750:	000001ac 	andeq	r0, r0, ip, lsr #3
     754:	c00096a4 	andgt	r9, r0, r4, lsr #13
     758:	0000004c 	andeq	r0, r0, ip, asr #32
     75c:	01ac9c01 			; <UNDEFINED> instruction: 0x01ac9c01
     760:	63090000 	movwvs	r0, #36864	; 0x9000
     764:	32010068 	andcc	r0, r1, #104	; 0x68
     768:	000001ac 	andeq	r0, r0, ip, lsr #3
     76c:	007b9102 	rsbseq	r9, fp, r2, lsl #2
     770:	e7080105 	str	r0, [r8, -r5, lsl #2]
     774:	0a000000 	beq	77c <_start-0xc0007884>
     778:	000001ac 	andeq	r0, r0, ip, lsr #3
     77c:	0001eb0b 	andeq	lr, r1, fp, lsl #22
     780:	5c2a0100 	stfpls	f0, [sl], #-0
     784:	48c00096 	stmiami	r0, {r1, r2, r4, r7}^
     788:	01000000 	mrseq	r0, (UNDEF: 0)
     78c:	0001dc9c 	muleq	r1, ip, ip
     790:	02200c00 	eoreq	r0, r0, #0, 24
     794:	2a010000 	bcs	4079c <_start-0xbffc7864>
     798:	000001dc 	ldrdeq	r0, [r0], -ip
     79c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     7a0:	01b3040d 			; <UNDEFINED> instruction: 0x01b3040d
     7a4:	d70b0000 	strle	r0, [fp, -r0]
     7a8:	01000001 	tsteq	r0, r1
     7ac:	0095fc23 	addseq	pc, r5, r3, lsr #24
     7b0:	000060c0 	andeq	r6, r0, r0, asr #1
     7b4:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     7b8:	0c000002 	stceq	0, cr0, [r0], {2}
     7bc:	000002c0 	andeq	r0, r0, r0, asr #5
     7c0:	01b32301 			; <UNDEFINED> instruction: 0x01b32301
     7c4:	91020000 	mrsls	r0, (UNDEF: 2)
     7c8:	250e0074 	strcs	r0, [lr, #-116]	; 0xffffff8c
     7cc:	01000002 	tsteq	r0, r2
     7d0:	00941405 	addseq	r1, r4, r5, lsl #8
     7d4:	0001e8c0 	andeq	lr, r1, r0, asr #17
     7d8:	009c0100 	addseq	r0, ip, r0, lsl #2
     7dc:	00000049 	andeq	r0, r0, r9, asr #32
     7e0:	02d00004 	sbcseq	r0, r0, #4
     7e4:	01040000 	mrseq	r0, (UNDEF: 4)
     7e8:	00000052 	andeq	r0, r0, r2, asr r0
     7ec:	00027a0c 	andeq	r7, r2, ip, lsl #20
     7f0:	00015f00 	andeq	r5, r1, r0, lsl #30
     7f4:	0096f000 	addseq	pc, r6, r0
     7f8:	000018c0 	andeq	r1, r0, r0, asr #17
     7fc:	00044c00 	andeq	r4, r4, r0, lsl #24
     800:	00690200 	rsbeq	r0, r9, r0, lsl #4
     804:	00340201 	eorseq	r0, r4, r1, lsl #4
     808:	03050000 	movweq	r0, #20480	; 0x5000
     80c:	c000aab0 			; <UNDEFINED> instruction: 0xc000aab0
     810:	f1070403 			; <UNDEFINED> instruction: 0xf1070403
     814:	04000000 	streq	r0, [r0], #-0
     818:	00000273 	andeq	r0, r0, r3, ror r2
     81c:	96f00301 	ldrbtls	r0, [r0], r1, lsl #6
     820:	0018c000 	andseq	ip, r8, r0
     824:	9c010000 	stcls	0, cr0, [r1], {-0}
     828:	00010f00 	andeq	r0, r1, r0, lsl #30
     82c:	18000400 	stmdane	r0, {sl}
     830:	04000003 	streq	r0, [r0], #-3
     834:	00005201 	andeq	r5, r0, r1, lsl #4
     838:	02e60c00 	rsceq	r0, r6, #0, 24
     83c:	015f0000 	cmpeq	pc, r0
     840:	97080000 	strls	r0, [r8, -r0]
     844:	01f0c000 	mvnseq	ip, r0
     848:	04870000 	streq	r0, [r7], #0
     84c:	04020000 	streq	r0, [r2], #-0
     850:	0000f107 	andeq	pc, r0, r7, lsl #2
     854:	02d00300 	sbcseq	r0, r0, #0, 6
     858:	37010000 	strcc	r0, [r1, -r0]
     85c:	0000008c 	andeq	r0, r0, ip, lsl #1
     860:	c0009820 	andgt	r9, r0, r0, lsr #16
     864:	000000d8 	ldrdeq	r0, [r0], -r8
     868:	008c9c01 	addeq	r9, ip, r1, lsl #24
     86c:	c5040000 	strgt	r0, [r4, #-0]
     870:	01000002 	tsteq	r0, r2
     874:	00009337 	andeq	r9, r0, r7, lsr r3
     878:	70910200 	addsvc	r0, r1, r0, lsl #4
     87c:	0002f304 	andeq	pc, r2, r4, lsl #6
     880:	93370100 	teqls	r7, #0, 2
     884:	02000000 	andeq	r0, r0, #0
     888:	64056c91 	strvs	r6, [r5], #-3217	; 0xfffff36f
     88c:	01007461 	tsteq	r0, r1, ror #8
     890:	00008c39 	andeq	r8, r0, r9, lsr ip
     894:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     898:	0002fc06 	andeq	pc, r2, r6, lsl #24
     89c:	933a0100 	teqls	sl, #0, 2
     8a0:	02000000 	andeq	r0, r0, #0
     8a4:	02067791 	andeq	r7, r6, #38010880	; 0x2440000
     8a8:	01000003 	tsteq	r0, r3
     8ac:	0000933a 	andeq	r9, r0, sl, lsr r3
     8b0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     8b4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     8b8:	000002a6 	andeq	r0, r0, r6, lsr #5
     8bc:	de080102 	adflee	f0, f0, f2
     8c0:	03000000 	movweq	r0, #0
     8c4:	000002b0 			; <UNDEFINED> instruction: 0x000002b0
     8c8:	00fa2101 	rscseq	r2, sl, r1, lsl #2
     8cc:	97480000 	strbls	r0, [r8, -r0]
     8d0:	00d8c000 	sbcseq	ip, r8, r0
     8d4:	9c010000 	stcls	0, cr0, [r1], {-0}
     8d8:	000000fa 	strdeq	r0, [r0], -sl
     8dc:	0002c504 	andeq	ip, r2, r4, lsl #10
     8e0:	93210100 			; <UNDEFINED> instruction: 0x93210100
     8e4:	02000000 	andeq	r0, r0, #0
     8e8:	f3047091 	vqadd.u8	d7, d20, d1
     8ec:	01000002 	tsteq	r0, r2
     8f0:	00009321 	andeq	r9, r0, r1, lsr #6
     8f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
     8f8:	74616405 	strbtvc	r6, [r1], #-1029	; 0xfffffbfb
     8fc:	fa230100 	blx	8c0d04 <_start-0xbf7472fc>
     900:	02000000 	andeq	r0, r0, #0
     904:	fc067491 	stc2	4, cr7, [r6], {145}	; 0x91
     908:	01000002 	tsteq	r0, r2
     90c:	00009324 	andeq	r9, r0, r4, lsr #6
     910:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     914:	00030206 	andeq	r0, r3, r6, lsl #4
     918:	93240100 			; <UNDEFINED> instruction: 0x93240100
     91c:	02000000 	andeq	r0, r0, #0
     920:	02007691 	andeq	r7, r0, #152043520	; 0x9100000
     924:	02930702 	addseq	r0, r3, #524288	; 0x80000
     928:	87070000 	strhi	r0, [r7, -r0]
     92c:	01000002 	tsteq	r0, r2
     930:	0097080a 	addseq	r0, r7, sl, lsl #16
     934:	000040c0 	andeq	r4, r0, r0, asr #1
     938:	009c0100 	addseq	r0, ip, r0, lsl #2
     93c:	00000fda 	ldrdeq	r0, [r0], -sl
     940:	03980004 	orrseq	r0, r8, #4
     944:	01040000 	mrseq	r0, (UNDEF: 4)
     948:	00000052 	andeq	r0, r0, r2, asr r0
     94c:	000a830c 	andeq	r8, sl, ip, lsl #6
     950:	00015f00 	andeq	r5, r1, r0, lsl #30
     954:	0098f800 	addseq	pc, r8, r0, lsl #16
     958:	000720c0 	andeq	r2, r7, r0, asr #1
     95c:	0004f300 	andeq	pc, r4, r0, lsl #6
     960:	02340200 	eorseq	r0, r4, #0, 4
     964:	0000ca04 	andeq	ip, r0, r4, lsl #20
     968:	02070300 	andeq	r0, r7, #0, 6
     96c:	05020000 	streq	r0, [r2, #-0]
     970:	000000d1 	ldrdeq	r0, [r0], -r1
     974:	02440300 	subeq	r0, r4, #0, 6
     978:	06020000 	streq	r0, [r2], -r0
     97c:	000000d1 	ldrdeq	r0, [r0], -r1
     980:	020d0304 	andeq	r0, sp, #4, 6	; 0x10000000
     984:	07020000 	streq	r0, [r2, -r0]
     988:	000000d1 	ldrdeq	r0, [r0], -r1
     98c:	02010308 	andeq	r0, r1, #8, 6	; 0x20000000
     990:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     994:	000000d1 	ldrdeq	r0, [r0], -r1
     998:	4449040c 	strbmi	r0, [r9], #-1036	; 0xfffffbf4
     99c:	09020052 	stmdbeq	r2, {r1, r4, r6}
     9a0:	000000d1 	ldrdeq	r0, [r0], -r1
     9a4:	444f0410 	strbmi	r0, [pc], #-1040	; 9ac <_start-0xc0007654>
     9a8:	0a020052 	beq	80af8 <_start-0xbff87508>
     9ac:	000000d1 	ldrdeq	r0, [r0], -r1
     9b0:	01fc0314 	mvnseq	r0, r4, lsl r3
     9b4:	0b020000 	bleq	809bc <_start-0xbff87644>
     9b8:	000000d1 	ldrdeq	r0, [r0], -r1
     9bc:	02380318 	eorseq	r0, r8, #24, 6	; 0x60000000
     9c0:	0c020000 	stceq	0, cr0, [r2], {-0}
     9c4:	000000d1 	ldrdeq	r0, [r0], -r1
     9c8:	024b031c 	subeq	r0, fp, #28, 6	; 0x70000000
     9cc:	0d020000 	stceq	0, cr0, [r2, #-0]
     9d0:	000000d1 	ldrdeq	r0, [r0], -r1
     9d4:	025c0320 	subseq	r0, ip, #32, 6	; 0x80000000
     9d8:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     9dc:	000000d1 	ldrdeq	r0, [r0], -r1
     9e0:	52420424 	subpl	r0, r2, #36, 8	; 0x24000000
     9e4:	0f020052 	svceq	0x00020052
     9e8:	000000d1 	ldrdeq	r0, [r0], -r1
     9ec:	65720428 	ldrbvs	r0, [r2, #-1064]!	; 0xfffffbd8
     9f0:	10020073 	andne	r0, r2, r3, ror r0
     9f4:	000000d1 	ldrdeq	r0, [r0], -r1
     9f8:	01e3032c 	mvneq	r0, ip, lsr #6
     9fc:	11020000 	mrsne	r0, (UNDEF: 2)
     a00:	000000d1 	ldrdeq	r0, [r0], -r1
     a04:	04050030 	streq	r0, [r5], #-48	; 0xffffffd0
     a08:	0000f107 	andeq	pc, r0, r7, lsl #2
     a0c:	00ca0600 	sbceq	r0, sl, r0, lsl #12
     a10:	31070000 	mrscc	r0, (UNDEF: 7)
     a14:	02000002 	andeq	r0, r0, #2
     a18:	00002513 	andeq	r2, r0, r3, lsl r5
     a1c:	10000800 	andne	r0, r0, r0, lsl #16
     a20:	0d930403 	cfldrseq	mvf0, [r3, #12]
     a24:	52030000 	andpl	r0, r3, #0
     a28:	0300000e 	movweq	r0, #14
     a2c:	0000d105 	andeq	sp, r0, r5, lsl #2
     a30:	12030000 	andne	r0, r3, #0
     a34:	03000005 	movweq	r0, #5
     a38:	000da306 	andeq	sl, sp, r6, lsl #6
     a3c:	ce030400 	cfcpysgt	mvf0, mvf3
     a40:	03000005 	movweq	r0, #5
     a44:	0000d107 	andeq	sp, r0, r7, lsl #2
     a48:	d6030c00 	strle	r0, [r3], -r0, lsl #24
     a4c:	03000008 	movweq	r0, #8
     a50:	0000d108 	andeq	sp, r0, r8, lsl #2
     a54:	17031000 	strne	r1, [r3, -r0]
     a58:	03000005 	movweq	r0, #5
     a5c:	000db809 	andeq	fp, sp, r9, lsl #16
     a60:	70031400 	andvc	r1, r3, r0, lsl #8
     a64:	03000007 	movweq	r0, #7
     a68:	0000d10a 	andeq	sp, r0, sl, lsl #2
     a6c:	12031800 	andne	r1, r3, #0, 16
     a70:	0300000d 	movweq	r0, #13
     a74:	0000d10b 	andeq	sp, r0, fp, lsl #2
     a78:	48031c00 	stmdami	r3, {sl, fp, ip}
     a7c:	03000007 	movweq	r0, #7
     a80:	0000d10c 	andeq	sp, r0, ip, lsl #2
     a84:	13032000 	movwne	r2, #12288	; 0x3000
     a88:	0300000e 	movweq	r0, #14
     a8c:	0000d10d 	andeq	sp, r0, sp, lsl #2
     a90:	dc032400 	cfstrsle	mvf2, [r3], {-0}
     a94:	03000009 	movweq	r0, #9
     a98:	0000d10e 	andeq	sp, r0, lr, lsl #2
     a9c:	71032800 	tstvc	r3, r0, lsl #16
     aa0:	0300000a 	movweq	r0, #10
     aa4:	0000d10f 	andeq	sp, r0, pc, lsl #2
     aa8:	58032c00 	stmdapl	r3, {sl, fp, sp}
     aac:	03000003 	movweq	r0, #3
     ab0:	0000d110 	andeq	sp, r0, r0, lsl r1
     ab4:	1c033000 	stcne	0, cr3, [r3], {-0}
     ab8:	03000005 	movweq	r0, #5
     abc:	000da311 	andeq	sl, sp, r1, lsl r3
     ac0:	aa033400 	bge	cdac8 <_start-0xbff3a538>
     ac4:	03000003 	movweq	r0, #3
     ac8:	0000d112 	andeq	sp, r0, r2, lsl r1
     acc:	67033c00 	strvs	r3, [r3, -r0, lsl #24]
     ad0:	0300000b 	movweq	r0, #11
     ad4:	0000d113 	andeq	sp, r0, r3, lsl r1
     ad8:	1b034000 	blne	d0ae0 <_start-0xbff37520>
     adc:	03000009 	movweq	r0, #9
     ae0:	0000d114 	andeq	sp, r0, r4, lsl r1
     ae4:	d3034400 	movwle	r4, #13312	; 0x3400
     ae8:	0300000b 	movweq	r0, #11
     aec:	0000d115 	andeq	sp, r0, r5, lsl r1
     af0:	21034800 	tstcs	r3, r0, lsl #16
     af4:	03000005 	movweq	r0, #5
     af8:	000dcd16 	andeq	ip, sp, r6, lsl sp
     afc:	2d034c00 	stccs	12, cr4, [r3, #-0]
     b00:	0300000e 	movweq	r0, #14
     b04:	0000d117 	andeq	sp, r0, r7, lsl r1
     b08:	43038000 	movwmi	r8, #12288	; 0x3000
     b0c:	03000008 	movweq	r0, #8
     b10:	0000d118 	andeq	sp, r0, r8, lsl r1
     b14:	4d038400 	cfstrsmi	mvf8, [r3, #-0]
     b18:	03000008 	movweq	r0, #8
     b1c:	0000d119 	andeq	sp, r0, r9, lsl r1
     b20:	08038800 	stmdaeq	r3, {fp, pc}
     b24:	03000005 	movweq	r0, #5
     b28:	0000d11a 	andeq	sp, r0, sl, lsl r1
     b2c:	c8038c00 	stmdagt	r3, {sl, fp, pc}
     b30:	03000006 	movweq	r0, #6
     b34:	0000d11b 	andeq	sp, r0, fp, lsl r1
     b38:	cc039000 	stcgt	0, cr9, [r3], {-0}
     b3c:	0300000b 	movweq	r0, #11
     b40:	0000d11c 	andeq	sp, r0, ip, lsl r1
     b44:	66039400 	strvs	r9, [r3], -r0, lsl #8
     b48:	03000004 	movweq	r0, #4
     b4c:	0000d11d 	andeq	sp, r0, sp, lsl r1
     b50:	e6039800 	str	r9, [r3], -r0, lsl #16
     b54:	03000009 	movweq	r0, #9
     b58:	0000d11e 	andeq	sp, r0, lr, lsl r1
     b5c:	73039c00 	movwvc	r9, #15360	; 0x3c00
     b60:	03000006 	movweq	r0, #6
     b64:	0000d11f 	andeq	sp, r0, pc, lsl r1
     b68:	b203a000 	andlt	sl, r3, #0
     b6c:	0300000e 	movweq	r0, #14
     b70:	0000d120 	andeq	sp, r0, r0, lsr #2
     b74:	2603a400 	strcs	sl, [r3], -r0, lsl #8
     b78:	03000005 	movweq	r0, #5
     b7c:	000de221 	andeq	lr, sp, r1, lsr #4
     b80:	ef03a800 	svc	0x0003a800
     b84:	0300000d 	movweq	r0, #13
     b88:	0000d122 	andeq	sp, r0, r2, lsr #2
     b8c:	8a03c000 	bhi	f0b94 <_start-0xbff1746c>
     b90:	03000004 	movweq	r0, #4
     b94:	0000d123 	andeq	sp, r0, r3, lsr #2
     b98:	3c03c400 	cfstrscc	mvf12, [r3], {-0}
     b9c:	03000004 	movweq	r0, #4
     ba0:	0000d124 	andeq	sp, r0, r4, lsr #2
     ba4:	d903c800 	stmdble	r3, {fp, lr, pc}
     ba8:	0300000d 	movweq	r0, #13
     bac:	0000d125 	andeq	sp, r0, r5, lsr #2
     bb0:	8d03cc00 	stchi	12, cr12, [r3, #-0]
     bb4:	0300000a 	movweq	r0, #10
     bb8:	0000d126 	andeq	sp, r0, r6, lsr #2
     bbc:	2303d000 	movwcs	sp, #12288	; 0x3000
     bc0:	03000009 	movweq	r0, #9
     bc4:	0000d127 	andeq	sp, r0, r7, lsr #2
     bc8:	7a03d400 	bvc	f5bd0 <_start-0xbff12430>
     bcc:	0300000a 	movweq	r0, #10
     bd0:	0000d128 	andeq	sp, r0, r8, lsr #2
     bd4:	2b03d800 	blcs	f6bdc <_start-0xbff11424>
     bd8:	03000005 	movweq	r0, #5
     bdc:	000df729 	andeq	pc, sp, r9, lsr #14
     be0:	a009dc00 	andge	sp, r9, r0, lsl #24
     be4:	03000003 	movweq	r0, #3
     be8:	0000d12a 	andeq	sp, r0, sl, lsr #2
     bec:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     bf0:	00000a27 	andeq	r0, r0, r7, lsr #20
     bf4:	00d12b03 	sbcseq	r2, r1, r3, lsl #22
     bf8:	01040000 	mrseq	r0, (UNDEF: 4)
     bfc:	000d1a09 	andeq	r1, sp, r9, lsl #20
     c00:	d12c0300 			; <UNDEFINED> instruction: 0xd12c0300
     c04:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     c08:	0b530901 	bleq	14c3014 <_start-0xbeb44fec>
     c0c:	2d030000 	stccs	0, cr0, [r3, #-0]
     c10:	000000d1 	ldrdeq	r0, [r0], -r1
     c14:	de09010c 	adflee	f0, f1, #4.0
     c18:	0300000a 	movweq	r0, #10
     c1c:	0000d12e 	andeq	sp, r0, lr, lsr #2
     c20:	09011000 	stmdbeq	r1, {ip}
     c24:	00000c3e 	andeq	r0, r0, lr, lsr ip
     c28:	00d12f03 	sbcseq	r2, r1, r3, lsl #30
     c2c:	01140000 	tsteq	r4, r0
     c30:	00053009 	andeq	r3, r5, r9
     c34:	0c300300 	ldceq	3, cr0, [r0], #-0
     c38:	1800000e 	stmdane	r0, {r1, r2, r3}
     c3c:	0dc80901 	vstreq.16	s1, [r8, #2]	; <UNPREDICTABLE>
     c40:	31030000 	mrscc	r0, (UNDEF: 3)
     c44:	000000d1 	ldrdeq	r0, [r0], -r1
     c48:	cd090140 	stfgts	f0, [r9, #-256]	; 0xffffff00
     c4c:	03000009 	movweq	r0, #9
     c50:	0000d132 	andeq	sp, r0, r2, lsr r1
     c54:	09014400 	stmdbeq	r1, {sl, lr}
     c58:	00000535 	andeq	r0, r0, r5, lsr r5
     c5c:	0e213303 	cdpeq	3, 2, cr3, cr1, cr3, {0}
     c60:	01480000 	mrseq	r0, (UNDEF: 72)
     c64:	000e8e09 	andeq	r8, lr, r9, lsl #28
     c68:	d1340300 	teqle	r4, r0, lsl #6
     c6c:	80000000 	andhi	r0, r0, r0
     c70:	04fc0901 	ldrbteq	r0, [ip], #2305	; 0x901
     c74:	35030000 	strcc	r0, [r3, #-0]
     c78:	000000d1 	ldrdeq	r0, [r0], -r1
     c7c:	e9090184 	stmdb	r9, {r2, r7, r8}
     c80:	0300000a 	movweq	r0, #10
     c84:	0000d136 	andeq	sp, r0, r6, lsr r1
     c88:	09018800 	stmdbeq	r1, {fp, pc}
     c8c:	00000dcd 	andeq	r0, r0, sp, asr #27
     c90:	00d13703 	sbcseq	r3, r1, r3, lsl #14
     c94:	018c0000 	orreq	r0, ip, r0
     c98:	00079209 	andeq	r9, r7, r9, lsl #4
     c9c:	d1380300 	teqle	r8, r0, lsl #6
     ca0:	90000000 	andls	r0, r0, r0
     ca4:	047e0901 	ldrbteq	r0, [lr], #-2305	; 0xfffff6ff
     ca8:	39030000 	stmdbcc	r3, {}	; <UNPREDICTABLE>
     cac:	000000d1 	ldrdeq	r0, [r0], -r1
     cb0:	d2090194 	andle	r0, r9, #148, 2	; 0x25
     cb4:	0300000a 	movweq	r0, #10
     cb8:	0000d13a 	andeq	sp, r0, sl, lsr r1
     cbc:	09019800 	stmdbeq	r1, {fp, ip, pc}
     cc0:	00000867 	andeq	r0, r0, r7, ror #16
     cc4:	00d13b03 	sbcseq	r3, r1, r3, lsl #22
     cc8:	019c0000 	orrseq	r0, ip, r0
     ccc:	0004b409 	andeq	fp, r4, r9, lsl #8
     cd0:	d13c0300 	teqle	ip, r0, lsl #6
     cd4:	a0000000 	andge	r0, r0, r0
     cd8:	08650901 	stmdaeq	r5!, {r0, r8, fp}^
     cdc:	3d030000 	stccc	0, cr0, [r3, #-0]
     ce0:	000000d1 	ldrdeq	r0, [r0], -r1
     ce4:	3a0901a4 	bcc	24137c <_start-0xbfdc6c84>
     ce8:	03000005 	movweq	r0, #5
     cec:	000e363e 	andeq	r3, lr, lr, lsr r6
     cf0:	0901a800 	stmdbeq	r1, {fp, sp, pc}
     cf4:	00000646 	andeq	r0, r0, r6, asr #12
     cf8:	00d13f03 	sbcseq	r3, r1, r3, lsl #30
     cfc:	02000000 	andeq	r0, r0, #0
     d00:	00094c09 	andeq	r4, r9, r9, lsl #24
     d04:	d1400300 	mrsle	r0, SPSR_irq
     d08:	04000000 	streq	r0, [r0], #-0
     d0c:	0cd10902 			; <UNDEFINED> instruction: 0x0cd10902
     d10:	41030000 	mrsmi	r0, (UNDEF: 3)
     d14:	000000d1 	ldrdeq	r0, [r0], -r1
     d18:	e6090208 	str	r0, [r9], -r8, lsl #4
     d1c:	03000003 	movweq	r0, #3
     d20:	0000d142 	andeq	sp, r0, r2, asr #2
     d24:	09020c00 	stmdbeq	r2, {sl, fp}
     d28:	00000336 	andeq	r0, r0, r6, lsr r3
     d2c:	00d14303 	sbcseq	r4, r1, r3, lsl #6
     d30:	02100000 	andseq	r0, r0, #0
     d34:	000d3c09 	andeq	r3, sp, r9, lsl #24
     d38:	d1440300 	mrsle	r0, SPSR_abt
     d3c:	14000000 	strne	r0, [r0], #-0
     d40:	04480902 	strbeq	r0, [r8], #-2306	; 0xfffff6fe
     d44:	45030000 	strmi	r0, [r3, #-0]
     d48:	000000d1 	ldrdeq	r0, [r0], -r1
     d4c:	11090218 	tstne	r9, r8, lsl r2
     d50:	03000007 	movweq	r0, #7
     d54:	0000d146 	andeq	sp, r0, r6, asr #2
     d58:	09021c00 	stmdbeq	r2, {sl, fp, ip}
     d5c:	00000bae 	andeq	r0, r0, lr, lsr #23
     d60:	00d14703 	sbcseq	r4, r1, r3, lsl #14
     d64:	02200000 	eoreq	r0, r0, #0
     d68:	00030809 	andeq	r0, r3, r9, lsl #16
     d6c:	d1480300 	mrsle	r0, (UNDEF: 120)
     d70:	24000000 	strcs	r0, [r0], #-0
     d74:	06540902 	ldrbeq	r0, [r4], -r2, lsl #18
     d78:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
     d7c:	00000e36 	andeq	r0, r0, r6, lsr lr
     d80:	70090228 	andvc	r0, r9, r8, lsr #4
     d84:	03000004 	movweq	r0, #4
     d88:	0000d14a 	andeq	sp, r0, sl, asr #2
     d8c:	09028000 	stmdbeq	r2, {pc}
     d90:	00000762 	andeq	r0, r0, r2, ror #14
     d94:	00d14b03 	sbcseq	r4, r1, r3, lsl #22
     d98:	02840000 	addeq	r0, r4, #0
     d9c:	000b1109 	andeq	r1, fp, r9, lsl #2
     da0:	d14c0300 	mrsle	r0, SPSR_mon
     da4:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     da8:	0dfb0902 			; <UNDEFINED> instruction: 0x0dfb0902
     dac:	4d030000 	stcmi	0, cr0, [r3, #-0]
     db0:	000000d1 	ldrdeq	r0, [r0], -r1
     db4:	a009028c 	andge	r0, r9, ip, lsl #5
     db8:	03000008 	movweq	r0, #8
     dbc:	0000d14e 	andeq	sp, r0, lr, asr #2
     dc0:	09029000 	stmdbeq	r2, {ip, pc}
     dc4:	00000b90 	muleq	r0, r0, fp
     dc8:	00d14f03 	sbcseq	r4, r1, r3, lsl #30
     dcc:	02940000 	addseq	r0, r4, #0
     dd0:	000ee209 	andeq	lr, lr, r9, lsl #4
     dd4:	d1500300 	cmple	r0, r0, lsl #6
     dd8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     ddc:	055b0902 	ldrbeq	r0, [fp, #-2306]	; 0xfffff6fe
     de0:	51030000 	mrspl	r0, (UNDEF: 3)
     de4:	000000d1 	ldrdeq	r0, [r0], -r1
     de8:	6009029c 	mulvs	r9, ip, r2
     dec:	03000003 	movweq	r0, #3
     df0:	000e4b52 	andeq	r4, lr, r2, asr fp
     df4:	0902a000 	stmdbeq	r2, {sp, pc}
     df8:	00000d4a 	andeq	r0, r0, sl, asr #26
     dfc:	00d15303 	sbcseq	r5, r1, r3, lsl #6
     e00:	03000000 	movweq	r0, #0
     e04:	000d5a09 	andeq	r5, sp, r9, lsl #20
     e08:	d1540300 	cmple	r4, r0, lsl #6
     e0c:	04000000 	streq	r0, [r0], #-0
     e10:	0c870903 			; <UNDEFINED> instruction: 0x0c870903
     e14:	55030000 	strpl	r0, [r3, #-0]
     e18:	000000d1 	ldrdeq	r0, [r0], -r1
     e1c:	17090308 	strne	r0, [r9, -r8, lsl #6]
     e20:	0300000c 	movweq	r0, #12
     e24:	0000d156 	andeq	sp, r0, r6, asr r1
     e28:	09030c00 	stmdbeq	r3, {sl, fp}
     e2c:	00000a00 	andeq	r0, r0, r0, lsl #20
     e30:	00d15703 	sbcseq	r5, r1, r3, lsl #14
     e34:	03100000 	tsteq	r0, #0
     e38:	000cdf09 	andeq	sp, ip, r9, lsl #30
     e3c:	d1580300 	cmple	r8, r0, lsl #6
     e40:	14000000 	strne	r0, [r0], #-0
     e44:	0bf70903 	bleq	ffdc3258 <__bss_end__+0x3fdb87a4>
     e48:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
     e4c:	000000d1 	ldrdeq	r0, [r0], -r1
     e50:	bb090318 	bllt	241ab8 <_start-0xbfdc6548>
     e54:	0300000e 	movweq	r0, #14
     e58:	0000d15a 	andeq	sp, r0, sl, asr r1
     e5c:	09031c00 	stmdbeq	r3, {sl, fp, ip}
     e60:	0000058f 	andeq	r0, r0, pc, lsl #11
     e64:	00d15b03 	sbcseq	r5, r1, r3, lsl #22
     e68:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     e6c:	00088e09 	andeq	r8, r8, r9, lsl #28
     e70:	d15c0300 	cmple	ip, r0, lsl #6
     e74:	24000000 	strcs	r0, [r0], #-0
     e78:	03660903 	cmneq	r6, #49152	; 0xc000
     e7c:	5d030000 	stcpl	0, cr0, [r3, #-0]
     e80:	00000e36 	andeq	r0, r0, r6, lsr lr
     e84:	2f090328 	svccs	0x00090328
     e88:	03000009 	movweq	r0, #9
     e8c:	0000d15e 	andeq	sp, r0, lr, asr r1
     e90:	09038000 	stmdbeq	r3, {pc}
     e94:	00000c49 	andeq	r0, r0, r9, asr #24
     e98:	00d15f03 	sbcseq	r5, r1, r3, lsl #30
     e9c:	03840000 	orreq	r0, r4, #0
     ea0:	000b2d09 	andeq	r2, fp, r9, lsl #26
     ea4:	d1600300 	cmnle	r0, r0, lsl #6
     ea8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
     eac:	0e1d0903 	vnmlseq.f16	s0, s26, s6	; <UNPREDICTABLE>
     eb0:	61030000 	mrsvs	r0, (UNDEF: 3)
     eb4:	000000d1 	ldrdeq	r0, [r0], -r1
     eb8:	ec09038c 	stc	3, cr0, [r9], {140}	; 0x8c
     ebc:	03000004 	movweq	r0, #4
     ec0:	0000d162 	andeq	sp, r0, r2, ror #2
     ec4:	09039000 	stmdbeq	r3, {ip, pc}
     ec8:	000007aa 	andeq	r0, r0, sl, lsr #15
     ecc:	00d16303 	sbcseq	r6, r1, r3, lsl #6
     ed0:	03940000 	orrseq	r0, r4, #0
     ed4:	0006b209 	andeq	fp, r6, r9, lsl #4
     ed8:	d1640300 	cmnle	r4, r0, lsl #6
     edc:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
     ee0:	09bd0903 	ldmibeq	sp!, {r0, r1, r8, fp}
     ee4:	65030000 	strvs	r0, [r3, #-0]
     ee8:	000000d1 	ldrdeq	r0, [r0], -r1
     eec:	6c09039c 	stcvs	3, cr0, [r9], {156}	; 0x9c
     ef0:	03000003 	movweq	r0, #3
     ef4:	000e4b66 	andeq	r4, lr, r6, ror #22
     ef8:	0903a000 	stmdbeq	r3, {sp, pc}
     efc:	000003f4 	strdeq	r0, [r0], -r4
     f00:	00d16703 	sbcseq	r6, r1, r3, lsl #14
     f04:	04000000 	streq	r0, [r0], #-0
     f08:	0007f409 	andeq	pc, r7, r9, lsl #8
     f0c:	d1680300 	cmnle	r8, r0, lsl #6
     f10:	04000000 	streq	r0, [r0], #-0
     f14:	0ed90904 	vfnmseq.f16	s1, s18, s8	; <UNPREDICTABLE>
     f18:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
     f1c:	000000d1 	ldrdeq	r0, [r0], -r1
     f20:	0d090408 	cfstrseq	mvf0, [r9, #-32]	; 0xffffffe0
     f24:	03000009 	movweq	r0, #9
     f28:	0000d16a 	andeq	sp, r0, sl, ror #2
     f2c:	09040c00 	stmdbeq	r4, {sl, fp}
     f30:	00000c30 	andeq	r0, r0, r0, lsr ip
     f34:	00d16b03 	sbcseq	r6, r1, r3, lsl #22
     f38:	04100000 	ldreq	r0, [r0], #-0
     f3c:	000aa209 	andeq	sl, sl, r9, lsl #4
     f40:	d16c0300 	cmnle	ip, r0, lsl #6
     f44:	14000000 	strne	r0, [r0], #-0
     f48:	0c710904 			; <UNDEFINED> instruction: 0x0c710904
     f4c:	6d030000 	stcvs	0, cr0, [r3, #-0]
     f50:	000000d1 	ldrdeq	r0, [r0], -r1
     f54:	ba090418 	blt	241fbc <_start-0xbfdc6044>
     f58:	03000007 	movweq	r0, #7
     f5c:	0000d16e 	andeq	sp, r0, lr, ror #2
     f60:	09041c00 	stmdbeq	r4, {sl, fp, ip}
     f64:	00000cef 	andeq	r0, r0, pc, ror #25
     f68:	00d16f03 	sbcseq	r6, r1, r3, lsl #30
     f6c:	04200000 	strteq	r0, [r0], #-0
     f70:	00037209 	andeq	r7, r3, r9, lsl #4
     f74:	60700300 	rsbsvs	r0, r0, r0, lsl #6
     f78:	2400000e 	strcs	r0, [r0], #-14
     f7c:	06930904 	ldreq	r0, [r3], r4, lsl #18
     f80:	71030000 	mrsvc	r0, (UNDEF: 3)
     f84:	000000d1 	ldrdeq	r0, [r0], -r1
     f88:	04090800 	streq	r0, [r9], #-2048	; 0xfffff800
     f8c:	03000009 	movweq	r0, #9
     f90:	0000d172 	andeq	sp, r0, r2, ror r1
     f94:	09080400 	stmdbeq	r8, {sl}
     f98:	00000e57 	andeq	r0, r0, r7, asr lr
     f9c:	00d17303 	sbcseq	r7, r1, r3, lsl #6
     fa0:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     fa4:	0008df09 	andeq	sp, r8, r9, lsl #30
     fa8:	d1740300 	cmnle	r4, r0, lsl #6
     fac:	0c000000 	stceq	0, cr0, [r0], {-0}
     fb0:	03780908 	cmneq	r8, #8, 18	; 0x20000
     fb4:	75030000 	strvc	r0, [r3, #-0]
     fb8:	00000e75 	andeq	r0, r0, r5, ror lr
     fbc:	03090810 	movweq	r0, #38928	; 0x9810
     fc0:	0300000b 	movweq	r0, #11
     fc4:	0000d176 	andeq	sp, r0, r6, ror r1
     fc8:	09082000 	stmdbeq	r8, {sp}
     fcc:	0000063d 	andeq	r0, r0, sp, lsr r6
     fd0:	00d17703 	sbcseq	r7, r1, r3, lsl #14
     fd4:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
     fd8:	000e3409 	andeq	r3, lr, r9, lsl #8
     fdc:	d1780300 	cmnle	r8, r0, lsl #6
     fe0:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     fe4:	09680908 	stmdbeq	r8!, {r3, r8, fp}^
     fe8:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
     fec:	000000d1 	ldrdeq	r0, [r0], -r1
     ff0:	3d09082c 	stccc	8, cr0, [r9, #-176]	; 0xffffff50
     ff4:	0300000b 	movweq	r0, #11
     ff8:	0000d17a 	andeq	sp, r0, sl, ror r1
     ffc:	09083000 	stmdbeq	r8, {ip, sp}
    1000:	000004e3 	andeq	r0, r0, r3, ror #9
    1004:	00d17b03 	sbcseq	r7, r1, r3, lsl #22
    1008:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
    100c:	000cc809 	andeq	ip, ip, r9, lsl #16
    1010:	d17c0300 	cmnle	ip, r0, lsl #6
    1014:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1018:	08010908 	stmdaeq	r1, {r3, r8, fp}
    101c:	7d030000 	stcvc	0, cr0, [r3, #-0]
    1020:	000000d1 	ldrdeq	r0, [r0], -r1
    1024:	7e09083c 	mcrvc	8, 0, r0, cr9, cr12, {1}
    1028:	03000003 	movweq	r0, #3
    102c:	000e8a7e 	andeq	r8, lr, lr, ror sl
    1030:	09084000 	stmdbeq	r8, {lr}
    1034:	00000972 	andeq	r0, r0, r2, ror r9
    1038:	00d17f03 	sbcseq	r7, r1, r3, lsl #30
    103c:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
    1040:	000e4809 	andeq	r4, lr, r9, lsl #16
    1044:	d1800300 	orrle	r0, r0, r0, lsl #6
    1048:	84000000 	strhi	r0, [r0], #-0
    104c:	0b700908 	bleq	1c03474 <_start-0xbe404b8c>
    1050:	81030000 	mrshi	r0, (UNDEF: 3)
    1054:	000000d1 	ldrdeq	r0, [r0], -r1
    1058:	3e090888 	cdpcc	8, 0, cr0, cr9, cr8, {4}
    105c:	0300000e 	movweq	r0, #14
    1060:	0000d182 	andeq	sp, r0, r2, lsl #3
    1064:	09088c00 	stmdbeq	r8, {sl, fp, pc}
    1068:	00000a1e 	andeq	r0, r0, lr, lsl sl
    106c:	00d18303 	sbcseq	r8, r1, r3, lsl #6
    1070:	08900000 	ldmeq	r0, {}	; <UNPREDICTABLE>
    1074:	0009d509 	andeq	sp, r9, r9, lsl #10
    1078:	d1840300 	orrle	r0, r4, r0, lsl #6
    107c:	94000000 	strls	r0, [r0], #-0
    1080:	09f00908 	ldmibeq	r0!, {r3, r8, fp}^
    1084:	85030000 	strhi	r0, [r3, #-0]
    1088:	000000d1 	ldrdeq	r0, [r0], -r1
    108c:	7a090898 	bvc	2432f4 <_start-0xbfdc4d0c>
    1090:	0300000b 	movweq	r0, #11
    1094:	0000d186 	andeq	sp, r0, r6, lsl #3
    1098:	09089c00 	stmdbeq	r8, {sl, fp, ip, pc}
    109c:	00000987 	andeq	r0, r0, r7, lsl #19
    10a0:	00d18703 	sbcseq	r8, r1, r3, lsl #14
    10a4:	08a00000 	stmiaeq	r0!, {}	; <UNPREDICTABLE>
    10a8:	00056909 	andeq	r6, r5, r9, lsl #18
    10ac:	d1880300 	orrle	r0, r8, r0, lsl #6
    10b0:	a4000000 	strge	r0, [r0], #-0
    10b4:	03840908 	orreq	r0, r4, #8, 18	; 0x20000
    10b8:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    10bc:	00000de2 	andeq	r0, r0, r2, ror #27
    10c0:	1a0908a8 	bne	243368 <_start-0xbfdc4c98>
    10c4:	03000008 	movweq	r0, #8
    10c8:	0000d18a 	andeq	sp, r0, sl, lsl #3
    10cc:	0908c000 	stmdbeq	r8, {lr, pc}
    10d0:	000007e8 	andeq	r0, r0, r8, ror #15
    10d4:	00d18b03 	sbcseq	r8, r1, r3, lsl #22
    10d8:	08c40000 	stmiaeq	r4, {}^	; <UNPREDICTABLE>
    10dc:	0006e709 	andeq	lr, r6, r9, lsl #14
    10e0:	d18c0300 	orrle	r0, ip, r0, lsl #6
    10e4:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    10e8:	0d6a0908 			; <UNDEFINED> instruction: 0x0d6a0908
    10ec:	8d030000 	stchi	0, cr0, [r3, #-0]
    10f0:	000000d1 	ldrdeq	r0, [r0], -r1
    10f4:	3d0908cc 	stccc	8, cr0, [r9, #-816]	; 0xfffffcd0
    10f8:	03000007 	movweq	r0, #7
    10fc:	0000d18e 	andeq	sp, r0, lr, lsl #3
    1100:	0908d000 	stmdbeq	r8, {ip, lr, pc}
    1104:	00000de4 	andeq	r0, r0, r4, ror #27
    1108:	00d18f03 	sbcseq	r8, r1, r3, lsl #30
    110c:	08d40000 	ldmeq	r4, {}^	; <UNPREDICTABLE>
    1110:	000b5a09 	andeq	r5, fp, r9, lsl #20
    1114:	d1900300 	orrsle	r0, r0, r0, lsl #6
    1118:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    111c:	08c80908 	stmiaeq	r8, {r3, r8, fp}^
    1120:	91030000 	mrsls	r0, (UNDEF: 3)
    1124:	000000d1 	ldrdeq	r0, [r0], -r1
    1128:	ac0908dc 	stcge	8, cr0, [r9], {220}	; 0xdc
    112c:	0300000d 	movweq	r0, #13
    1130:	0000d192 	muleq	r0, r2, r1
    1134:	0908e000 	stmdbeq	r8, {sp, lr, pc}
    1138:	00000b84 	andeq	r0, r0, r4, lsl #23
    113c:	00d19303 	sbcseq	r9, r1, r3, lsl #6
    1140:	08e40000 	stmiaeq	r4!, {}^	; <UNPREDICTABLE>
    1144:	00068609 	andeq	r8, r6, r9, lsl #12
    1148:	d1940300 	orrsle	r0, r4, r0, lsl #6
    114c:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    1150:	093f0908 	ldmdbeq	pc!, {r3, r8, fp}	; <UNPREDICTABLE>
    1154:	95030000 	strls	r0, [r3, #-0]
    1158:	000000d1 	ldrdeq	r0, [r0], -r1
    115c:	a10908ec 	smlattge	r9, ip, r8, r0
    1160:	03000004 	movweq	r0, #4
    1164:	0000d196 	muleq	r0, r6, r1
    1168:	0908f000 	stmdbeq	r8, {ip, sp, lr, pc}
    116c:	00000d75 	andeq	r0, r0, r5, ror sp
    1170:	00d19703 	sbcseq	r9, r1, r3, lsl #14
    1174:	08f40000 	ldmeq	r4!, {}^	; <UNPREDICTABLE>
    1178:	0003d909 	andeq	sp, r3, r9, lsl #18
    117c:	d1980300 	orrsle	r0, r8, r0, lsl #6
    1180:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1184:	05a70908 	streq	r0, [r7, #2312]!	; 0x908
    1188:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    118c:	000000d1 	ldrdeq	r0, [r0], -r1
    1190:	930908fc 	movwls	r0, #39164	; 0x98fc
    1194:	0300000d 	movweq	r0, #13
    1198:	0000d19a 	muleq	r0, sl, r1
    119c:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    11a0:	00000ea8 	andeq	r0, r0, r8, lsr #29
    11a4:	00d19b03 	sbcseq	r9, r1, r3, lsl #22
    11a8:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    11ac:	0006c209 	andeq	ip, r6, r9, lsl #4
    11b0:	b89c0300 	ldmlt	ip, {r8, r9}
    11b4:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    11b8:	06db0909 	ldrbeq	r0, [fp], r9, lsl #18
    11bc:	9d030000 	stcls	0, cr0, [r3, #-0]
    11c0:	000000d1 	ldrdeq	r0, [r0], -r1
    11c4:	8a09090c 	bhi	2435fc <_start-0xbfdc4a04>
    11c8:	03000003 	movweq	r0, #3
    11cc:	000db89e 	muleq	sp, lr, r8
    11d0:	09091000 	stmdbeq	r9, {ip}
    11d4:	00000bdd 	ldrdeq	r0, [r0], -sp
    11d8:	00d19f03 	sbcseq	r9, r1, r3, lsl #30
    11dc:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    11e0:	000a9809 	andeq	r9, sl, r9, lsl #16
    11e4:	d1a00300 	lslle	r0, r0, #6
    11e8:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    11ec:	0e090909 	vmlaeq.f16	s0, s18, s18	; <UNPREDICTABLE>
    11f0:	a1030000 	mrsge	r0, (UNDEF: 3)
    11f4:	000000d1 	ldrdeq	r0, [r0], -r1
    11f8:	7809091c 	stmdavc	r9, {r2, r3, r4, r8, fp}
    11fc:	03000007 	movweq	r0, #7
    1200:	0000d1a2 	andeq	sp, r0, r2, lsr #3
    1204:	09092000 	stmdbeq	r9, {sp}
    1208:	000008be 			; <UNDEFINED> instruction: 0x000008be
    120c:	00d1a303 	sbcseq	sl, r1, r3, lsl #6
    1210:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    1214:	000aaa09 	andeq	sl, sl, r9, lsl #20
    1218:	d1a40300 			; <UNDEFINED> instruction: 0xd1a40300
    121c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    1220:	05720909 	ldrbeq	r0, [r2, #-2313]!	; 0xfffff6f7
    1224:	a5030000 	strge	r0, [r3, #-0]
    1228:	000000d1 	ldrdeq	r0, [r0], -r1
    122c:	e909092c 	stmdb	r9, {r2, r3, r5, r8, fp}
    1230:	0300000b 	movweq	r0, #11
    1234:	0000d1a6 	andeq	sp, r0, r6, lsr #3
    1238:	09093000 	stmdbeq	r9, {ip, sp}
    123c:	00000421 	andeq	r0, r0, r1, lsr #8
    1240:	00d1a703 	sbcseq	sl, r1, r3, lsl #14
    1244:	09340000 	ldmdbeq	r4!, {}	; <UNPREDICTABLE>
    1248:	00049509 	andeq	r9, r4, r9, lsl #10
    124c:	9fa80300 	svcls	0x00a80300
    1250:	3800000e 	stmdacc	r0, {r1, r2, r3}
    1254:	09a10909 	stmibeq	r1!, {r0, r3, r8, fp}
    1258:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    125c:	000000d1 	ldrdeq	r0, [r0], -r1
    1260:	bc090980 			; <UNDEFINED> instruction: 0xbc090980
    1264:	0300000c 	movweq	r0, #12
    1268:	0000d1aa 	andeq	sp, r0, sl, lsr #3
    126c:	09098400 	stmdbeq	r9, {sl, pc}
    1270:	000005c2 	andeq	r0, r0, r2, asr #11
    1274:	00d1ab03 	sbcseq	sl, r1, r3, lsl #22
    1278:	09880000 	stmibeq	r8, {}	; <UNPREDICTABLE>
    127c:	0004d109 	andeq	sp, r4, r9, lsl #2
    1280:	d1ac0300 			; <UNDEFINED> instruction: 0xd1ac0300
    1284:	8c000000 	stchi	0, cr0, [r0], {-0}
    1288:	079e0909 	ldreq	r0, [lr, r9, lsl #18]
    128c:	ad030000 	stcge	0, cr0, [r3, #-0]
    1290:	000000d1 	ldrdeq	r0, [r0], -r1
    1294:	06090990 			; <UNDEFINED> instruction: 0x06090990
    1298:	0300000d 	movweq	r0, #13
    129c:	0000d1ae 	andeq	sp, r0, lr, lsr #3
    12a0:	09099400 	stmdbeq	r9, {sl, ip, pc}
    12a4:	00000631 	andeq	r0, r0, r1, lsr r6
    12a8:	00d1af03 	sbcseq	sl, r1, r3, lsl #30
    12ac:	09980000 	ldmibeq	r8, {}	; <UNPREDICTABLE>
    12b0:	000c6509 	andeq	r6, ip, r9, lsl #10
    12b4:	d1b00300 	lslsle	r0, r0, #6
    12b8:	9c000000 	stcls	0, cr0, [r0], {-0}
    12bc:	07c50909 	strbeq	r0, [r5, r9, lsl #18]
    12c0:	b1030000 	mrslt	r0, (UNDEF: 3)
    12c4:	000000d1 	ldrdeq	r0, [r0], -r1
    12c8:	730909a0 	movwvc	r0, #39328	; 0x99a0
    12cc:	03000008 	movweq	r0, #8
    12d0:	0000d1b2 			; <UNDEFINED> instruction: 0x0000d1b2
    12d4:	0909a400 	stmdbeq	r9, {sl, sp, pc}
    12d8:	00000c59 	andeq	r0, r0, r9, asr ip
    12dc:	00d1b303 	sbcseq	fp, r1, r3, lsl #6
    12e0:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
    12e4:	00053f09 	andeq	r3, r5, r9, lsl #30
    12e8:	d1b40300 			; <UNDEFINED> instruction: 0xd1b40300
    12ec:	ac000000 	stcge	0, cr0, [r0], {-0}
    12f0:	049b0909 	ldreq	r0, [fp], #2313	; 0x909
    12f4:	b5030000 	strlt	r0, [r3, #-0]
    12f8:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
    12fc:	570909b0 			; <UNDEFINED> instruction: 0x570909b0
    1300:	03000008 	movweq	r0, #8
    1304:	0000d1b6 			; <UNDEFINED> instruction: 0x0000d1b6
    1308:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    130c:	00000b45 	andeq	r0, r0, r5, asr #22
    1310:	00d1b703 	sbcseq	fp, r1, r3, lsl #14
    1314:	0a040000 	beq	10131c <_start-0xbff06ce4>
    1318:	00097909 	andeq	r7, r9, r9, lsl #18
    131c:	d1b80300 			; <UNDEFINED> instruction: 0xd1b80300
    1320:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1324:	0bbe090a 	bleq	fef83754 <__bss_end__+0x3ef78ca0>
    1328:	b9030000 	stmdblt	r3, {}	; <UNPREDICTABLE>
    132c:	000000d1 	ldrdeq	r0, [r0], -r1
    1330:	ae090a0c 	vmlage.f32	s0, s18, s24
    1334:	0300000c 	movweq	r0, #12
    1338:	0000d1ba 			; <UNDEFINED> instruction: 0x0000d1ba
    133c:	090a1000 	stmdbeq	sl, {ip}
    1340:	00000344 	andeq	r0, r0, r4, asr #6
    1344:	00d1bb03 	sbcseq	fp, r1, r3, lsl #22
    1348:	0a140000 	beq	501350 <_start-0xbfb06cb0>
    134c:	000c7909 	andeq	r7, ip, r9, lsl #18
    1350:	d1bc0300 			; <UNDEFINED> instruction: 0xd1bc0300
    1354:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1358:	0328090a 			; <UNDEFINED> instruction: 0x0328090a
    135c:	bd030000 	stclt	0, cr0, [r3, #-0]
    1360:	000000d1 	ldrdeq	r0, [r0], -r1
    1364:	10090a1c 	andne	r0, r9, ip, lsl sl
    1368:	0300000a 	movweq	r0, #10
    136c:	0000d1be 			; <UNDEFINED> instruction: 0x0000d1be
    1370:	090a2000 	stmdbeq	sl, {sp}
    1374:	00000cf8 	strdeq	r0, [r0], -r8
    1378:	00d1bf03 	sbcseq	fp, r1, r3, lsl #30
    137c:	0a240000 	beq	901384 <_start-0xbf706c7c>
    1380:	00072f09 	andeq	r2, r7, r9, lsl #30
    1384:	d1c00300 	bicle	r0, r0, r0, lsl #6
    1388:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    138c:	05e7090a 	strbeq	r0, [r7, #2314]!	; 0x90a
    1390:	c1030000 	mrsgt	r0, (UNDEF: 3)
    1394:	000000d1 	ldrdeq	r0, [r0], -r1
    1398:	d3090a2c 	movwle	r0, #39468	; 0x9a2c
    139c:	0300000e 	movweq	r0, #14
    13a0:	000da3c2 	andeq	sl, sp, r2, asr #7
    13a4:	090a3000 	stmdbeq	sl, {ip, sp}
    13a8:	000004c2 	andeq	r0, r0, r2, asr #9
    13ac:	00d1c303 	sbcseq	ip, r1, r3, lsl #6
    13b0:	0a380000 	beq	e013b8 <_start-0xbf206c48>
    13b4:	00078309 	andeq	r8, r7, r9, lsl #6
    13b8:	d1c40300 	bicle	r0, r4, r0, lsl #6
    13bc:	3c000000 	stccc	0, cr0, [r0], {-0}
    13c0:	04ae090a 	strteq	r0, [lr], #2314	; 0x90a
    13c4:	c5030000 	strgt	r0, [r3, #-0]
    13c8:	00000e8a 	andeq	r0, r0, sl, lsl #29
    13cc:	63090a40 	movwvs	r0, #39488	; 0x9a40
    13d0:	0300000a 	movweq	r0, #10
    13d4:	0000d1c6 	andeq	sp, r0, r6, asr #3
    13d8:	090a8000 	stmdbeq	sl, {pc}
    13dc:	00000d2e 	andeq	r0, r0, lr, lsr #26
    13e0:	00d1c703 	sbcseq	ip, r1, r3, lsl #14
    13e4:	0a840000 	beq	fe1013ec <__bss_end__+0x3e0f6938>
    13e8:	00042e09 	andeq	r2, r4, r9, lsl #28
    13ec:	d1c80300 	bicle	r0, r8, r0, lsl #6
    13f0:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    13f4:	0703090a 	streq	r0, [r3, -sl, lsl #18]
    13f8:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    13fc:	000000d1 	ldrdeq	r0, [r0], -r1
    1400:	b4090a8c 	strlt	r0, [r9], #-2700	; 0xfffff574
    1404:	0300000a 	movweq	r0, #10
    1408:	0000d1ca 	andeq	sp, r0, sl, asr #3
    140c:	090a9000 	stmdbeq	sl, {ip, pc}
    1410:	0000095a 	andeq	r0, r0, sl, asr r9
    1414:	00d1cb03 	sbcseq	ip, r1, r3, lsl #22
    1418:	0a940000 	beq	fe501420 <__bss_end__+0x3e4f696c>
    141c:	000b1f09 	andeq	r1, fp, r9, lsl #30
    1420:	d1cc0300 	bicle	r0, ip, r0, lsl #6
    1424:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    1428:	03cb090a 	biceq	r0, fp, #163840	; 0x28000
    142c:	cd030000 	stcgt	0, cr0, [r3, #-0]
    1430:	000000d1 	ldrdeq	r0, [r0], -r1
    1434:	35090a9c 	strcc	r0, [r9, #-2716]	; 0xfffff564
    1438:	03000008 	movweq	r0, #8
    143c:	0000d1ce 	andeq	sp, r0, lr, asr #3
    1440:	090aa000 	stmdbeq	sl, {sp, pc}
    1444:	00000af5 	strdeq	r0, [r0], -r5
    1448:	00d1cf03 	sbcseq	ip, r1, r3, lsl #30
    144c:	0aa40000 	beq	fe901454 <__bss_end__+0x3e8f69a0>
    1450:	000e9a09 	andeq	r9, lr, r9, lsl #20
    1454:	d1d00300 	bicsle	r0, r0, r0, lsl #6
    1458:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    145c:	0623090a 	strteq	r0, [r3], -sl, lsl #18
    1460:	d1030000 	mrsle	r0, (UNDEF: 3)
    1464:	000000d1 	ldrdeq	r0, [r0], -r1
    1468:	9e090aac 	vmlals.f32	s0, s19, s25
    146c:	0300000d 	movweq	r0, #13
    1470:	0000d1d2 	ldrdeq	sp, [r0], -r2
    1474:	090ab000 	stmdbeq	sl, {ip, sp, pc}
    1478:	00000615 	andeq	r0, r0, r5, lsl r6
    147c:	00d1d303 	sbcseq	sp, r1, r3, lsl #6
    1480:	0ab40000 	beq	fed01488 <__bss_end__+0x3ecf69d4>
    1484:	00082609 	andeq	r2, r8, r9, lsl #12
    1488:	d1d40300 	bicsle	r0, r4, r0, lsl #6
    148c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    1490:	0580090a 	streq	r0, [r0, #2314]	; 0x90a
    1494:	d5030000 	strle	r0, [r3, #-0]
    1498:	000000d1 	ldrdeq	r0, [r0], -r1
    149c:	fa090abc 	blx	243f94 <_start-0xbfdc406c>
    14a0:	03000009 	movweq	r0, #9
    14a4:	000e8ad6 	ldrdeq	r8, [lr], -r6
    14a8:	090ac000 	stmdbeq	sl, {lr, pc}
    14ac:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
    14b0:	00d1d703 	sbcseq	sp, r1, r3, lsl #14
    14b4:	0b000000 	bleq	14bc <_start-0xc0006b44>
    14b8:	000e5e09 	andeq	r5, lr, r9, lsl #28
    14bc:	d1d80300 	bicsle	r0, r8, r0, lsl #6
    14c0:	04000000 	streq	r0, [r0], #-0
    14c4:	0e6e090b 	vmuleq.f16	s1, s28, s22	; <UNPREDICTABLE>
    14c8:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    14cc:	000000d1 	ldrdeq	r0, [r0], -r1
    14d0:	91090b08 	tstls	r9, r8, lsl #22
    14d4:	03000009 	movweq	r0, #9
    14d8:	0000d1da 	ldrdeq	sp, [r0], -sl
    14dc:	090b0c00 	stmdbeq	fp, {sl, fp}
    14e0:	000008ae 	andeq	r0, r0, lr, lsr #17
    14e4:	00d1db03 	sbcseq	sp, r1, r3, lsl #22
    14e8:	0b100000 	bleq	4014f0 <_start-0xbfc06b10>
    14ec:	000b9e09 	andeq	r9, fp, r9, lsl #28
    14f0:	d1dc0300 	bicsle	r0, ip, r0, lsl #6
    14f4:	14000000 	strne	r0, [r0], #-0
    14f8:	0456090b 	ldrbeq	r0, [r6], #-2315	; 0xfffff6f5
    14fc:	dd030000 	stcle	0, cr0, [r3, #-0]
    1500:	000000d1 	ldrdeq	r0, [r0], -r1
    1504:	1f090b18 	svcne	0x00090b18
    1508:	03000007 	movweq	r0, #7
    150c:	0000d1de 	ldrdeq	sp, [r0], -lr
    1510:	090b1c00 	stmdbeq	fp, {sl, fp, ip}
    1514:	00000605 	andeq	r0, r0, r5, lsl #12
    1518:	00d1df03 	sbcseq	sp, r1, r3, lsl #30
    151c:	0b200000 	bleq	801524 <_start-0xbf806adc>
    1520:	00039009 	andeq	r9, r3, r9
    1524:	d1e00300 	mvnle	r0, r0, lsl #6
    1528:	24000000 	strcs	r0, [r0], #-0
    152c:	080a090b 	stmdaeq	sl, {r0, r1, r3, r8, fp}
    1530:	e1030000 	mrs	r0, (UNDEF: 3)
    1534:	000000d1 	ldrdeq	r0, [r0], -r1
    1538:	4b090b28 	blmi	2441e0 <_start-0xbfdc3e20>
    153c:	03000005 	movweq	r0, #5
    1540:	0000d1e2 	andeq	sp, r0, r2, ror #3
    1544:	090b2c00 	stmdbeq	fp, {sl, fp, sp}
    1548:	00000a43 	andeq	r0, r0, r3, asr #20
    154c:	00d1e303 	sbcseq	lr, r1, r3, lsl #6
    1550:	0b300000 	bleq	c01558 <_start-0xbf406aa8>
    1554:	00031809 	andeq	r1, r3, r9, lsl #16
    1558:	d1e40300 	mvnle	r0, r0, lsl #6
    155c:	34000000 	strcc	r0, [r0], #-0
    1560:	0410090b 	ldreq	r0, [r0], #-2315	; 0xfffff6f5
    1564:	e5030000 	str	r0, [r3, #-0]
    1568:	000000d1 	ldrdeq	r0, [r0], -r1
    156c:	f2090b38 	vpadd.i8	d0, d9, d24
    1570:	03000006 	movweq	r0, #6
    1574:	0000d1e6 	andeq	sp, r0, r6, ror #3
    1578:	090b3c00 	stmdbeq	fp, {sl, fp, ip, sp}
    157c:	000005a1 	andeq	r0, r0, r1, lsr #11
    1580:	0e8ae703 	cdpeq	7, 8, cr14, cr10, cr3, {0}
    1584:	0b400000 	bleq	100158c <_start-0xbf006a74>
    1588:	0003bb09 	andeq	fp, r3, r9, lsl #22
    158c:	d1e80300 	mvnle	r0, r0, lsl #6
    1590:	80000000 	andhi	r0, r0, r0
    1594:	0663090b 	strbteq	r0, [r3], -fp, lsl #18
    1598:	e9030000 	stmdb	r3, {}	; <UNPREDICTABLE>
    159c:	000000d1 	ldrdeq	r0, [r0], -r1
    15a0:	9c090b84 			; <UNDEFINED> instruction: 0x9c090b84
    15a4:	03000006 	movweq	r0, #6
    15a8:	0000d1ea 	andeq	sp, r0, sl, ror #3
    15ac:	090b8800 	stmdbeq	fp, {fp, pc}
    15b0:	00000c07 	andeq	r0, r0, r7, lsl #24
    15b4:	00d1eb03 	sbcseq	lr, r1, r3, lsl #22
    15b8:	0b8c0000 	bleq	fe3015c0 <__bss_end__+0x3e2f6b0c>
    15bc:	0008e709 	andeq	lr, r8, r9, lsl #14
    15c0:	d1ec0300 	mvnle	r0, r0, lsl #6
    15c4:	90000000 	andls	r0, r0, r0
    15c8:	0a53090b 	beq	14c39fc <_start-0xbeb44604>
    15cc:	ed030000 	stc	0, cr0, [r3, #-0]
    15d0:	000000d1 	ldrdeq	r0, [r0], -r1
    15d4:	33090b94 	movwcc	r0, #39828	; 0x9b94
    15d8:	0300000a 	movweq	r0, #10
    15dc:	0000d1ee 	andeq	sp, r0, lr, ror #3
    15e0:	090b9800 	stmdbeq	fp, {fp, ip, pc}
    15e4:	00000d83 	andeq	r0, r0, r3, lsl #27
    15e8:	00d1ef03 	sbcseq	lr, r1, r3, lsl #30
    15ec:	0b9c0000 	bleq	fe7015f4 <__bss_end__+0x3e6f6b40>
    15f0:	0009ad09 	andeq	sl, r9, r9, lsl #26
    15f4:	d1f00300 	mvnsle	r0, r0, lsl #6
    15f8:	a0000000 	andge	r0, r0, r0
    15fc:	0400090b 	streq	r0, [r0], #-2315	; 0xfffff6f5
    1600:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    1604:	000000d1 	ldrdeq	r0, [r0], -r1
    1608:	7e090ba4 	vmlavc.f64	d0, d25, d20
    160c:	0300000e 	movweq	r0, #14
    1610:	0000d1f2 	strdeq	sp, [r0], -r2
    1614:	090ba800 	stmdbeq	fp, {fp, sp, pc}
    1618:	000005d7 	ldrdeq	r0, [r0], -r7
    161c:	00d1f303 	sbcseq	pc, r1, r3, lsl #6
    1620:	0bac0000 	bleq	feb01628 <__bss_end__+0x3eaf6b74>
    1624:	0005f509 	andeq	pc, r5, r9, lsl #10
    1628:	d1f40300 	mvnsle	r0, r0, lsl #6
    162c:	b0000000 	andlt	r0, r0, r0
    1630:	0ac2090b 	beq	ff083a64 <__bss_end__+0x3f078fb0>
    1634:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    1638:	000000d1 	ldrdeq	r0, [r0], -r1
    163c:	b1090bb4 			; <UNDEFINED> instruction: 0xb1090bb4
    1640:	03000005 	movweq	r0, #5
    1644:	0000d1f6 	strdeq	sp, [r0], -r6
    1648:	090bb800 	stmdbeq	fp, {fp, ip, sp, pc}
    164c:	00000751 	andeq	r0, r0, r1, asr r7
    1650:	00d1f703 	sbcseq	pc, r1, r3, lsl #14
    1654:	0bbc0000 	bleq	fef0165c <__bss_end__+0x3eef6ba8>
    1658:	0007d109 	andeq	sp, r7, r9, lsl #2
    165c:	8af80300 	bhi	ffe02264 <__bss_end__+0x3fdf77b0>
    1660:	c000000e 	andgt	r0, r0, lr
    1664:	07d7090b 	ldrbeq	r0, [r7, fp, lsl #18]
    1668:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    166c:	000000d1 	ldrdeq	r0, [r0], -r1
    1670:	dd090c00 	stcle	12, cr0, [r9, #-0]
    1674:	03000004 	movweq	r0, #4
    1678:	000e75fa 	strdeq	r7, [lr], -sl
    167c:	090c0400 	stmdbeq	ip, {sl}
    1680:	00000d26 	andeq	r0, r0, r6, lsr #26
    1684:	00d1fb03 	sbcseq	pc, r1, r3, lsl #22
    1688:	0c140000 	ldceq	0, cr0, [r4], {-0}
    168c:	000ecb09 	andeq	ip, lr, r9, lsl #22
    1690:	d1fc0300 	mvnsle	r0, r0, lsl #6
    1694:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    1698:	0352090c 	cmpeq	r2, #12, 18	; 0x30000
    169c:	fd030000 	stc2	0, cr0, [r3, #-0]
    16a0:	00000ec9 	andeq	r0, r0, r9, asr #29
    16a4:	0c090c1c 	stceq	12, cr0, [r9], {28}
    16a8:	0300000b 	movweq	r0, #11
    16ac:	0000d1fe 	strdeq	sp, [r0], -lr
    16b0:	0a0ff400 	beq	3fe6b8 <_start-0xbfc09948>
    16b4:	00524449 	subseq	r4, r2, r9, asr #8
    16b8:	00d1ff03 	sbcseq	pc, r1, r3, lsl #30
    16bc:	0ff80000 	svceq	0x00f80000
    16c0:	0007e30b 	andeq	lr, r7, fp, lsl #6
    16c4:	01000300 	mrseq	r0, LR_irq
    16c8:	000000d1 	ldrdeq	r0, [r0], -r1
    16cc:	0c000ffc 	stceq	15, cr0, [r0], {252}	; 0xfc
    16d0:	000000d1 	ldrdeq	r0, [r0], -r1
    16d4:	00000da3 	andeq	r0, r0, r3, lsr #27
    16d8:	0000ca0d 	andeq	ip, r0, sp, lsl #20
    16dc:	06000100 	streq	r0, [r0], -r0, lsl #2
    16e0:	00000d93 	muleq	r0, r3, sp
    16e4:	0000d10c 	andeq	sp, r0, ip, lsl #2
    16e8:	000db800 	andeq	fp, sp, r0, lsl #16
    16ec:	00ca0d00 	sbceq	r0, sl, r0, lsl #26
    16f0:	00000000 	andeq	r0, r0, r0
    16f4:	000da806 	andeq	sl, sp, r6, lsl #16
    16f8:	00d10c00 	sbcseq	r0, r1, r0, lsl #24
    16fc:	0dcd0000 	stcleq	0, cr0, [sp]
    1700:	ca0d0000 	bgt	341708 <_start-0xbfcc68f8>
    1704:	0c000000 	stceq	0, cr0, [r0], {-0}
    1708:	0dbd0600 	ldceq	6, cr0, [sp]
    170c:	d10c0000 	mrsle	r0, (UNDEF: 12)
    1710:	e2000000 	and	r0, r0, #0
    1714:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    1718:	000000ca 	andeq	r0, r0, sl, asr #1
    171c:	d2060005 	andle	r0, r6, #5
    1720:	0c00000d 	stceq	0, cr0, [r0], {13}
    1724:	000000d1 	ldrdeq	r0, [r0], -r1
    1728:	00000df7 	strdeq	r0, [r0], -r7
    172c:	0000ca0d 	andeq	ip, r0, sp, lsl #20
    1730:	06000800 	streq	r0, [r0], -r0, lsl #16
    1734:	00000de7 	andeq	r0, r0, r7, ror #27
    1738:	0000d10c 	andeq	sp, r0, ip, lsl #2
    173c:	000e0c00 	andeq	r0, lr, r0, lsl #24
    1740:	00ca0d00 	sbceq	r0, sl, r0, lsl #26
    1744:	00090000 	andeq	r0, r9, r0
    1748:	000dfc06 	andeq	pc, sp, r6, lsl #24
    174c:	00d10c00 	sbcseq	r0, r1, r0, lsl #24
    1750:	0e210000 	cdpeq	0, 2, cr0, cr1, cr0, {0}
    1754:	ca0d0000 	bgt	34175c <_start-0xbfcc68a4>
    1758:	0d000000 	stceq	0, cr0, [r0, #-0]
    175c:	0e110600 	cfmsub32eq	mvax0, mvfx0, mvfx1, mvfx0
    1760:	d10c0000 	mrsle	r0, (UNDEF: 12)
    1764:	36000000 	strcc	r0, [r0], -r0
    1768:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    176c:	000000ca 	andeq	r0, r0, sl, asr #1
    1770:	26060015 			; <UNDEFINED> instruction: 0x26060015
    1774:	0c00000e 	stceq	0, cr0, [r0], {14}
    1778:	000000d1 	ldrdeq	r0, [r0], -r1
    177c:	00000e4b 	andeq	r0, r0, fp, asr #28
    1780:	0000ca0d 	andeq	ip, r0, sp, lsl #20
    1784:	06001700 	streq	r1, [r0], -r0, lsl #14
    1788:	00000e3b 	andeq	r0, r0, fp, lsr lr
    178c:	0000d10c 	andeq	sp, r0, ip, lsl #2
    1790:	000e6000 	andeq	r6, lr, r0
    1794:	00ca0d00 	sbceq	r0, sl, r0, lsl #26
    1798:	00f60000 	rscseq	r0, r6, r0
    179c:	000e5006 	andeq	r5, lr, r6
    17a0:	00d10c00 	sbcseq	r0, r1, r0, lsl #24
    17a4:	0e750000 	cdpeq	0, 7, cr0, cr5, cr0, {0}
    17a8:	ca0d0000 	bgt	3417b0 <_start-0xbfcc6850>
    17ac:	03000000 	movweq	r0, #0
    17b0:	0e650600 	cdpeq	6, 6, cr0, cr5, cr0, {0}
    17b4:	d10c0000 	mrsle	r0, (UNDEF: 12)
    17b8:	8a000000 	bhi	17c0 <_start-0xc0006840>
    17bc:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    17c0:	000000ca 	andeq	r0, r0, sl, asr #1
    17c4:	7a06000f 	bvc	181808 <_start-0xbfe867f8>
    17c8:	0c00000e 	stceq	0, cr0, [r0], {14}
    17cc:	000000d1 	ldrdeq	r0, [r0], -r1
    17d0:	00000e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    17d4:	0000ca0d 	andeq	ip, r0, sp, lsl #20
    17d8:	06001100 	streq	r1, [r0], -r0, lsl #2
    17dc:	00000e8f 	andeq	r0, r0, pc, lsl #29
    17e0:	0000d10c 	andeq	sp, r0, ip, lsl #2
    17e4:	000eb400 	andeq	fp, lr, r0, lsl #8
    17e8:	00ca0d00 	sbceq	r0, sl, r0, lsl #26
    17ec:	00130000 	andseq	r0, r3, r0
    17f0:	000ea406 	andeq	sl, lr, r6, lsl #8
    17f4:	00d10c00 	sbcseq	r0, r1, r0, lsl #24
    17f8:	0ec90000 	cdpeq	0, 12, cr0, cr9, cr0, {0}
    17fc:	ca0d0000 	bgt	341804 <_start-0xbfcc67fc>
    1800:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    1804:	0eb90600 	cdpeq	6, 11, cr0, cr9, cr0, {0}
    1808:	ac0e0000 	stcge	0, cr0, [lr], {-0}
    180c:	03000006 	movweq	r0, #6
    1810:	00e10101 	rsceq	r0, r1, r1, lsl #2
    1814:	5a0f0000 	bpl	3c181c <_start-0xbfc467e4>
    1818:	01000006 	tsteq	r0, r6
    181c:	9f500134 	svcls	0x00500134
    1820:	00c8c000 	sbceq	ip, r8, r0
    1824:	9c010000 	stcls	0, cr0, [r1], {-0}
    1828:	0003b30f 	andeq	fp, r3, pc, lsl #6
    182c:	01110100 	tsteq	r1, r0, lsl #2
    1830:	c0009e88 	andgt	r9, r0, r8, lsl #29
    1834:	000000c8 	andeq	r0, r0, r8, asr #1
    1838:	f7109c01 			; <UNDEFINED> instruction: 0xf7109c01
    183c:	01000008 	tsteq	r0, r8
    1840:	000f13e5 	andeq	r1, pc, r5, ror #7
    1844:	009db800 	addseq	fp, sp, r0, lsl #16
    1848:	0000d0c0 	andeq	sp, r0, r0, asr #1
    184c:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    1850:	00de0801 	sbcseq	r0, lr, r1, lsl #16
    1854:	a0110000 	andsge	r0, r1, r0
    1858:	0100000c 	tsteq	r0, ip
    185c:	000f13ac 	andeq	r1, pc, ip, lsr #7
    1860:	009cc400 	addseq	ip, ip, r0, lsl #8
    1864:	0000f4c0 	andeq	pc, r0, r0, asr #9
    1868:	5c9c0100 	ldfpls	f0, [ip], {0}
    186c:	1200000f 	andne	r0, r0, #15
    1870:	006b6361 	rsbeq	r6, fp, r1, ror #6
    1874:	0f13ac01 	svceq	0x0013ac01
    1878:	91020000 	mrsls	r0, (UNDEF: 2)
    187c:	0069136c 	rsbeq	r1, r9, ip, ror #6
    1880:	00cabb01 	sbceq	fp, sl, r1, lsl #22
    1884:	91020000 	mrsls	r0, (UNDEF: 2)
    1888:	02c01474 	sbceq	r1, r0, #116, 8	; 0x74000000
    188c:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    1890:	00000f13 	andeq	r0, r0, r3, lsl pc
    1894:	00739102 	rsbseq	r9, r3, r2, lsl #2
    1898:	00087f15 	andeq	r7, r8, r5, lsl pc
    189c:	ac780100 	ldfgee	f0, [r8], #-0
    18a0:	18c0009b 	stmiane	r0, {r0, r1, r3, r4, r7}^
    18a4:	01000001 	tsteq	r0, r1
    18a8:	000f8c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    18ac:	61641200 	cmnvs	r4, r0, lsl #4
    18b0:	78010074 	stmdavc	r1, {r2, r4, r5, r6}
    18b4:	00000f13 	andeq	r0, r0, r3, lsl pc
    18b8:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
    18bc:	8c010069 	stchi	0, cr0, [r1], {105}	; 0x69
    18c0:	000000ca 	andeq	r0, r0, sl, asr #1
    18c4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    18c8:	000c2716 	andeq	r2, ip, r6, lsl r7
    18cc:	e4520100 	ldrb	r0, [r2], #-256	; 0xffffff00
    18d0:	c8c0009a 	stmiagt	r0, {r1, r3, r4, r7}^
    18d4:	01000000 	mrseq	r0, (UNDEF: 0)
    18d8:	06d1169c 			; <UNDEFINED> instruction: 0x06d1169c
    18dc:	2f010000 	svccs	0x00010000
    18e0:	c0009a24 	andgt	r9, r0, r4, lsr #20
    18e4:	000000c0 	andeq	r0, r0, r0, asr #1
    18e8:	7d179c01 	ldcvc	12, cr9, [r7, #-4]
    18ec:	01000006 	tsteq	r0, r6
    18f0:	00993415 	addseq	r3, r9, r5, lsl r4
    18f4:	0000f0c0 	andeq	pc, r0, r0, asr #1
    18f8:	189c0100 	ldmne	ip, {r8}
    18fc:	00000c97 	muleq	r0, r7, ip
    1900:	98f80a01 	ldmls	r8!, {r0, r9, fp}^
    1904:	003cc000 	eorseq	ip, ip, r0
    1908:	9c010000 	stcls	0, cr0, [r1], {-0}
    190c:	01006913 	tsteq	r0, r3, lsl r9
    1910:	0000ca0c 	andeq	ip, r0, ip, lsl #20
    1914:	78910200 	ldmvc	r1, {r9}
    1918:	00ab0000 	adceq	r0, fp, r0
    191c:	00040000 	andeq	r0, r4, r0
    1920:	0000052c 	andeq	r0, r0, ip, lsr #10
    1924:	00520104 	subseq	r0, r2, r4, lsl #2
    1928:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
    192c:	5f00000e 	svcpl	0x0000000e
    1930:	18000001 	stmdane	r0, {r0}
    1934:	28c000a0 	stmiacs	r0, {r5, r7}^
    1938:	26000001 	strcs	r0, [r0], -r1
    193c:	02000006 	andeq	r0, r0, #6
    1940:	00f10704 	rscseq	r0, r1, r4, lsl #14
    1944:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    1948:	0100000e 	tsteq	r0, lr
    194c:	0000620e 	andeq	r6, r0, lr, lsl #4
    1950:	00a08800 	adceq	r8, r0, r0, lsl #16
    1954:	0000b8c0 	andeq	fp, r0, r0, asr #17
    1958:	629c0100 	addsvs	r0, ip, #0, 2
    195c:	04000000 	streq	r0, [r0], #-0
    1960:	006d7568 	rsbeq	r7, sp, r8, ror #10
    1964:	00691001 	rsbeq	r1, r9, r1
    1968:	91020000 	mrsls	r0, (UNDEF: 2)
    196c:	0efc0576 	mrceq	5, 7, r0, cr12, cr6, {3}
    1970:	11010000 	mrsne	r0, (UNDEF: 1)
    1974:	00000070 	andeq	r0, r0, r0, ror r0
    1978:	00749102 	rsbseq	r9, r4, r2, lsl #2
    197c:	69050406 	stmdbvs	r5, {r1, r2, sl}
    1980:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1984:	02930702 	addseq	r0, r3, #524288	; 0x80000
    1988:	02020000 	andeq	r0, r2, #0
    198c:	0002a605 	andeq	sl, r2, r5, lsl #12
    1990:	0f010700 	svceq	0x00010700
    1994:	04010000 	streq	r0, [r1], #-0
    1998:	c000a018 	andgt	sl, r0, r8, lsl r0
    199c:	00000070 	andeq	r0, r0, r0, ror r0
    19a0:	6d089c01 	stcvs	12, cr9, [r8, #-4]
    19a4:	04010073 	streq	r0, [r1], #-115	; 0xffffff8d
    19a8:	00000062 	andeq	r0, r0, r2, rrx
    19ac:	04709102 	ldrbteq	r9, [r0], #-258	; 0xfffffefe
    19b0:	06010069 	streq	r0, [r1], -r9, rrx
    19b4:	00000062 	andeq	r0, r0, r2, rrx
    19b8:	04789102 	ldrbteq	r9, [r8], #-258	; 0xfffffefe
    19bc:	0601006a 	streq	r0, [r1], -sl, rrx
    19c0:	00000062 	andeq	r0, r0, r2, rrx
    19c4:	00749102 	rsbseq	r9, r4, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	10001101 	andne	r1, r0, r1, lsl #2
   4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
   8:	1b080301 	blne	200c14 <_start-0xbfe073ec>
   c:	13082508 	movwne	r2, #34056	; 0x8508
  10:	00000005 	andeq	r0, r0, r5
  14:	10001101 	andne	r1, r0, r1, lsl #2
  18:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
  1c:	1b080301 	blne	200c28 <_start-0xbfe073d8>
  20:	13082508 	movwne	r2, #34056	; 0x8508
  24:	00000005 	andeq	r0, r0, r5
  28:	10001101 	andne	r1, r0, r1, lsl #2
  2c:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
  30:	1b080301 	blne	200c3c <_start-0xbfe073c4>
  34:	13082508 	movwne	r2, #34056	; 0x8508
  38:	00000005 	andeq	r0, r0, r5
  3c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  40:	030b130e 	movweq	r1, #45838	; 0xb30e
  44:	110e1b0e 	tstne	lr, lr, lsl #22
  48:	10061201 	andne	r1, r6, r1, lsl #4
  4c:	02000017 	andeq	r0, r0, #23
  50:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <_start-0xbf1452bc>
  58:	00001349 	andeq	r1, r0, r9, asr #6
  5c:	0b000f03 	bleq	3c70 <_start-0xc0004390>
  60:	000e030b 	andeq	r0, lr, fp, lsl #6
  64:	01010400 	tsteq	r1, r0, lsl #8
  68:	13011349 	movwne	r1, #4937	; 0x1349
  6c:	21050000 	mrscs	r0, (UNDEF: 5)
  70:	2f134900 	svccs	0x00134900
  74:	0600000b 	streq	r0, [r0], -fp
  78:	0b0b0024 	bleq	2c0110 <_start-0xbfd47ef0>
  7c:	0e030b3e 	vmoveq.16	d3[0], r0
  80:	34070000 	strcc	r0, [r7], #-0
  84:	3a0e0300 	bcc	380c8c <_start-0xbfc87374>
  88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  8c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  90:	08000018 	stmdaeq	r0, {r3, r4}
  94:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  98:	0b3a0e03 	bleq	e838ac <_start-0xbf184754>
  9c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  a4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  a8:	00130119 	andseq	r0, r3, r9, lsl r1
  ac:	00050900 	andeq	r0, r5, r0, lsl #18
  b0:	0b3a0803 	bleq	e820c4 <_start-0xbf185f3c>
  b4:	1349053b 	movtne	r0, #38203	; 0x953b
  b8:	00001802 	andeq	r1, r0, r2, lsl #16
  bc:	0000180a 	andeq	r1, r0, sl, lsl #16
  c0:	00340b00 	eorseq	r0, r4, r0, lsl #22
  c4:	0b3a0e03 	bleq	e838d8 <_start-0xbf184728>
  c8:	1349053b 	movtne	r0, #38203	; 0x953b
  cc:	00001802 	andeq	r1, r0, r2, lsl #16
  d0:	0b000f0c 	bleq	3d08 <_start-0xc00042f8>
  d4:	0013490b 	andseq	r4, r3, fp, lsl #18
  d8:	00260d00 	eoreq	r0, r6, r0, lsl #26
  dc:	00001349 	andeq	r1, r0, r9, asr #6
  e0:	3f012e0e 	svccc	0x00012e0e
  e4:	3a0e0319 	bcc	380d50 <_start-0xbfc872b0>
  e8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  ec:	11134919 	tstne	r3, r9, lsl r9
  f0:	40061201 	andmi	r1, r6, r1, lsl #4
  f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f8:	00001301 	andeq	r1, r0, r1, lsl #6
  fc:	0300340f 	movweq	r3, #1039	; 0x40f
 100:	3b0b3a08 	blcc	2ce928 <_start-0xbfd396d8>
 104:	02134905 	andseq	r4, r3, #81920	; 0x14000
 108:	10000018 	andne	r0, r0, r8, lsl r0
 10c:	0b0b0024 	bleq	2c01a4 <_start-0xbfd47e5c>
 110:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 114:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 118:	03193f01 	tsteq	r9, #1, 30
 11c:	3b0b3a0e 	blcc	2ce95c <_start-0xbfd396a4>
 120:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 124:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 128:	96184006 	ldrls	r4, [r8], -r6
 12c:	13011942 	movwne	r1, #6466	; 0x1942
 130:	05120000 	ldreq	r0, [r2, #-0]
 134:	3a080300 	bcc	200d3c <_start-0xbfe072c4>
 138:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 13c:	00180213 	andseq	r0, r8, r3, lsl r2
 140:	00051300 	andeq	r1, r5, r0, lsl #6
 144:	0b3a0e03 	bleq	e83958 <_start-0xbf1846a8>
 148:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 14c:	00001802 	andeq	r1, r0, r2, lsl #16
 150:	03003414 	movweq	r3, #1044	; 0x414
 154:	3b0b3a08 	blcc	2ce97c <_start-0xbfd39684>
 158:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 15c:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 164:	0b3b0b3a 	bleq	ec2e54 <_start-0xbf1451ac>
 168:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 16c:	0a160000 	beq	580174 <_start-0xbfa87e8c>
 170:	3a0e0300 	bcc	380d78 <_start-0xbfc87288>
 174:	110b3b0b 	tstne	fp, fp, lsl #22
 178:	17000001 	strne	r0, [r0, -r1]
 17c:	0111010b 	tsteq	r1, fp, lsl #2
 180:	13010612 	movwne	r0, #5650	; 0x1612
 184:	0b180000 	bleq	60018c <_start-0xbfa07e74>
 188:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 18c:	19000006 	stmdbne	r0, {r1, r2}
 190:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 194:	0b3a0e03 	bleq	e839a8 <_start-0xbf184658>
 198:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 19c:	01111349 	tsteq	r1, r9, asr #6
 1a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1a8:	1a000013 	bne	1fc <_start-0xc0007e04>
 1ac:	0e03012e 	adfeqsp	f0, f3, #0.5
 1b0:	0b3b0b3a 	bleq	ec2ea0 <_start-0xbf145160>
 1b4:	13491927 	movtne	r1, #39207	; 0x9927
 1b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1c0:	00130119 	andseq	r0, r3, r9, lsl r1
 1c4:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 1c8:	0b3a0e03 	bleq	e839dc <_start-0xbf184624>
 1cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1d0:	01111349 	tsteq	r1, r9, asr #6
 1d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1d8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1dc:	1c000013 	stcne	0, cr0, [r0], {19}
 1e0:	0e03012e 	adfeqsp	f0, f3, #0.5
 1e4:	0b3b0b3a 	bleq	ec2ed4 <_start-0xbf14512c>
 1e8:	13491927 	movtne	r1, #39207	; 0x9927
 1ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1f4:	00000019 	andeq	r0, r0, r9, lsl r0
 1f8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1fc:	030b130e 	movweq	r1, #45838	; 0xb30e
 200:	110e1b0e 	tstne	lr, lr, lsl #22
 204:	10061201 	andne	r1, r6, r1, lsl #4
 208:	02000017 	andeq	r0, r0, #23
 20c:	0b0b0113 	bleq	2c0660 <_start-0xbfd479a0>
 210:	0b3b0b3a 	bleq	ec2f00 <_start-0xbf145100>
 214:	00001301 	andeq	r1, r0, r1, lsl #6
 218:	03000d03 	movweq	r0, #3331	; 0xd03
 21c:	3b0b3a0e 	blcc	2cea5c <_start-0xbfd395a4>
 220:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 224:	0400000b 	streq	r0, [r0], #-11
 228:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 22c:	0b3b0b3a 	bleq	ec2f1c <_start-0xbf1450e4>
 230:	0b381349 	bleq	e04f5c <_start-0xbf2030a4>
 234:	24050000 	strcs	r0, [r5], #-0
 238:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 23c:	000e030b 	andeq	r0, lr, fp, lsl #6
 240:	00350600 	eorseq	r0, r5, r0, lsl #12
 244:	00001349 	andeq	r1, r0, r9, asr #6
 248:	03001607 	movweq	r1, #1543	; 0x607
 24c:	3b0b3a0e 	blcc	2cea8c <_start-0xbfd39574>
 250:	0013490b 	andseq	r4, r3, fp, lsl #18
 254:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 258:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 25c:	0b3b0b3a 	bleq	ec2f4c <_start-0xbf1450b4>
 260:	13491927 	movtne	r1, #39207	; 0x9927
 264:	06120111 			; <UNDEFINED> instruction: 0x06120111
 268:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 26c:	00130119 	andseq	r0, r3, r9, lsl r1
 270:	00340900 	eorseq	r0, r4, r0, lsl #18
 274:	0b3a0803 	bleq	e82288 <_start-0xbf185d78>
 278:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 27c:	00001802 	andeq	r1, r0, r2, lsl #16
 280:	4900260a 	stmdbmi	r0, {r1, r3, r9, sl, sp}
 284:	0b000013 	bleq	2d8 <_start-0xc0007d28>
 288:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 28c:	0b3a0e03 	bleq	e83aa0 <_start-0xbf184560>
 290:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 294:	06120111 			; <UNDEFINED> instruction: 0x06120111
 298:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 29c:	00130119 	andseq	r0, r3, r9, lsl r1
 2a0:	00050c00 	andeq	r0, r5, r0, lsl #24
 2a4:	0b3a0e03 	bleq	e83ab8 <_start-0xbf184548>
 2a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2ac:	00001802 	andeq	r1, r0, r2, lsl #16
 2b0:	0b000f0d 	bleq	3eec <_start-0xc0004114>
 2b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 2b8:	002e0e00 	eoreq	r0, lr, r0, lsl #28
 2bc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2c0:	0b3b0b3a 	bleq	ec2fb0 <_start-0xbf145050>
 2c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2cc:	00000019 	andeq	r0, r0, r9, lsl r0
 2d0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 2d4:	030b130e 	movweq	r1, #45838	; 0xb30e
 2d8:	110e1b0e 	tstne	lr, lr, lsl #22
 2dc:	10061201 	andne	r1, r6, r1, lsl #4
 2e0:	02000017 	andeq	r0, r0, #23
 2e4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 2e8:	0b3b0b3a 	bleq	ec2fd8 <_start-0xbf145028>
 2ec:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 2f0:	00001802 	andeq	r1, r0, r2, lsl #16
 2f4:	0b002403 	bleq	9308 <_start-0xbfffecf8>
 2f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2fc:	0400000e 	streq	r0, [r0], #-14
 300:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 304:	0b3a0e03 	bleq	e83b18 <_start-0xbf1844e8>
 308:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 30c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 310:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 314:	00000019 	andeq	r0, r0, r9, lsl r0
 318:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 31c:	030b130e 	movweq	r1, #45838	; 0xb30e
 320:	110e1b0e 	tstne	lr, lr, lsl #22
 324:	10061201 	andne	r1, r6, r1, lsl #4
 328:	02000017 	andeq	r0, r0, #23
 32c:	0b0b0024 	bleq	2c03c4 <_start-0xbfd47c3c>
 330:	0e030b3e 	vmoveq.16	d3[0], r0
 334:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 338:	03193f01 	tsteq	r9, #1, 30
 33c:	3b0b3a0e 	blcc	2ceb7c <_start-0xbfd39484>
 340:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 344:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 348:	96184006 	ldrls	r4, [r8], -r6
 34c:	13011942 	movwne	r1, #6466	; 0x1942
 350:	05040000 	streq	r0, [r4, #-0]
 354:	3a0e0300 	bcc	380f5c <_start-0xbfc870a4>
 358:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 35c:	00180213 	andseq	r0, r8, r3, lsl r2
 360:	00340500 	eorseq	r0, r4, r0, lsl #10
 364:	0b3a0803 	bleq	e82378 <_start-0xbf185c88>
 368:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 36c:	00001802 	andeq	r1, r0, r2, lsl #16
 370:	03003406 	movweq	r3, #1030	; 0x406
 374:	3b0b3a0e 	blcc	2cebb4 <_start-0xbfd3944c>
 378:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 37c:	07000018 	smladeq	r0, r8, r0, r0
 380:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 384:	0b3a0e03 	bleq	e83b98 <_start-0xbf184468>
 388:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 38c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 390:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 394:	00000019 	andeq	r0, r0, r9, lsl r0
 398:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 39c:	030b130e 	movweq	r1, #45838	; 0xb30e
 3a0:	110e1b0e 	tstne	lr, lr, lsl #22
 3a4:	10061201 	andne	r1, r6, r1, lsl #4
 3a8:	02000017 	andeq	r0, r0, #23
 3ac:	0b0b0113 	bleq	2c0800 <_start-0xbfd47800>
 3b0:	0b3b0b3a 	bleq	ec30a0 <_start-0xbf144f60>
 3b4:	00001301 	andeq	r1, r0, r1, lsl #6
 3b8:	03000d03 	movweq	r0, #3331	; 0xd03
 3bc:	3b0b3a0e 	blcc	2cebfc <_start-0xbfd39404>
 3c0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 3c4:	0400000b 	streq	r0, [r0], #-11
 3c8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 3cc:	0b3b0b3a 	bleq	ec30bc <_start-0xbf144f44>
 3d0:	0b381349 	bleq	e050fc <_start-0xbf202f04>
 3d4:	24050000 	strcs	r0, [r5], #-0
 3d8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 3dc:	000e030b 	andeq	r0, lr, fp, lsl #6
 3e0:	00350600 	eorseq	r0, r5, r0, lsl #12
 3e4:	00001349 	andeq	r1, r0, r9, asr #6
 3e8:	03001607 	movweq	r1, #1543	; 0x607
 3ec:	3b0b3a0e 	blcc	2cec2c <_start-0xbfd393d4>
 3f0:	0013490b 	andseq	r4, r3, fp, lsl #18
 3f4:	01130800 	tsteq	r3, r0, lsl #16
 3f8:	0b3a050b 	bleq	e8182c <_start-0xbf1867d4>
 3fc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 400:	0d090000 	stceq	0, cr0, [r9, #-0]
 404:	3a0e0300 	bcc	38100c <_start-0xbfc86ff4>
 408:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 40c:	00053813 	andeq	r3, r5, r3, lsl r8
 410:	000d0a00 	andeq	r0, sp, r0, lsl #20
 414:	0b3a0803 	bleq	e82428 <_start-0xbf185bd8>
 418:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 41c:	00000538 	andeq	r0, r0, r8, lsr r5
 420:	03000d0b 	movweq	r0, #3339	; 0xd0b
 424:	3b0b3a0e 	blcc	2cec64 <_start-0xbfd3939c>
 428:	38134905 	ldmdacc	r3, {r0, r2, r8, fp, lr}
 42c:	0c000005 	stceq	0, cr0, [r0], {5}
 430:	13490101 	movtne	r0, #37121	; 0x9101
 434:	00001301 	andeq	r1, r0, r1, lsl #6
 438:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
 43c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 440:	00160e00 	andseq	r0, r6, r0, lsl #28
 444:	0b3a0e03 	bleq	e83c58 <_start-0xbf1843a8>
 448:	1349053b 	movtne	r0, #38203	; 0x953b
 44c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 450:	03193f00 	tsteq	r9, #0, 30
 454:	3b0b3a0e 	blcc	2cec94 <_start-0xbfd3936c>
 458:	11192705 	tstne	r9, r5, lsl #14
 45c:	40061201 	andmi	r1, r6, r1, lsl #4
 460:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 464:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 468:	03193f00 	tsteq	r9, #0, 30
 46c:	3b0b3a0e 	blcc	2cecac <_start-0xbfd39354>
 470:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 474:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 478:	96184006 	ldrls	r4, [r8], -r6
 47c:	00001942 	andeq	r1, r0, r2, asr #18
 480:	3f012e11 	svccc	0x00012e11
 484:	3a0e0319 	bcc	3810f0 <_start-0xbfc86f10>
 488:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 48c:	11134919 	tstne	r3, r9, lsl r9
 490:	40061201 	andmi	r1, r6, r1, lsl #4
 494:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 498:	00001301 	andeq	r1, r0, r1, lsl #6
 49c:	03000512 	movweq	r0, #1298	; 0x512
 4a0:	3b0b3a08 	blcc	2cecc8 <_start-0xbfd39338>
 4a4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 4a8:	13000018 	movwne	r0, #24
 4ac:	08030034 	stmdaeq	r3, {r2, r4, r5}
 4b0:	0b3b0b3a 	bleq	ec31a0 <_start-0xbf144e60>
 4b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4b8:	34140000 	ldrcc	r0, [r4], #-0
 4bc:	3a0e0300 	bcc	3810c4 <_start-0xbfc86f3c>
 4c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4c4:	00180213 	andseq	r0, r8, r3, lsl r2
 4c8:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 4cc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4d0:	0b3b0b3a 	bleq	ec31c0 <_start-0xbf144e40>
 4d4:	01111927 	tsteq	r1, r7, lsr #18
 4d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4dc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 4e0:	16000013 			; <UNDEFINED> instruction: 0x16000013
 4e4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 4e8:	0b3a0e03 	bleq	e83cfc <_start-0xbf184304>
 4ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 4f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 4f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 4f8:	17000019 	smladne	r0, r9, r0, r0
 4fc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 500:	0b3a0e03 	bleq	e83d14 <_start-0xbf1842ec>
 504:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 508:	06120111 			; <UNDEFINED> instruction: 0x06120111
 50c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 510:	18000019 	stmdane	r0, {r0, r3, r4}
 514:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 518:	0b3a0e03 	bleq	e83d2c <_start-0xbf1842d4>
 51c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 520:	06120111 			; <UNDEFINED> instruction: 0x06120111
 524:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 528:	00000019 	andeq	r0, r0, r9, lsl r0
 52c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 530:	030b130e 	movweq	r1, #45838	; 0xb30e
 534:	110e1b0e 	tstne	lr, lr, lsl #22
 538:	10061201 	andne	r1, r6, r1, lsl #4
 53c:	02000017 	andeq	r0, r0, #23
 540:	0b0b0024 	bleq	2c05d8 <_start-0xbfd47a28>
 544:	0e030b3e 	vmoveq.16	d3[0], r0
 548:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
 54c:	03193f01 	tsteq	r9, #1, 30
 550:	3b0b3a0e 	blcc	2ced90 <_start-0xbfd39270>
 554:	1113490b 	tstne	r3, fp, lsl #18
 558:	40061201 	andmi	r1, r6, r1, lsl #4
 55c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 560:	00001301 	andeq	r1, r0, r1, lsl #6
 564:	03003404 	movweq	r3, #1028	; 0x404
 568:	3b0b3a08 	blcc	2ced90 <_start-0xbfd39270>
 56c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 570:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
 574:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 578:	0b3b0b3a 	bleq	ec3268 <_start-0xbf144d98>
 57c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 580:	24060000 	strcs	r0, [r6], #-0
 584:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 588:	0008030b 	andeq	r0, r8, fp, lsl #6
 58c:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
 590:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 594:	0b3b0b3a 	bleq	ec3284 <_start-0xbf144d7c>
 598:	01111927 	tsteq	r1, r7, lsr #18
 59c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5a0:	00194297 	mulseq	r9, r7, r2
 5a4:	00050800 	andeq	r0, r5, r0, lsl #16
 5a8:	0b3a0803 	bleq	e825bc <_start-0xbf185a44>
 5ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5b0:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	c0008000 	andgt	r8, r0, r0
  14:	00000218 	andeq	r0, r0, r8, lsl r2
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00660002 	rsbeq	r0, r6, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	c0008218 	andgt	r8, r0, r8, lsl r2
  34:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00d40002 	sbcseq	r0, r4, r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	c00082c8 	andgt	r8, r0, r8, asr #5
  54:	00000094 	muleq	r0, r4, r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	01420002 	cmpeq	r2, r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	c000835c 	andgt	r8, r0, ip, asr r3
  74:	000010b8 	strheq	r1, [r0], -r8
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	05c40002 	strbeq	r0, [r4, #2]
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	c0009414 	andgt	r9, r0, r4, lsl r4
  94:	000002dc 	ldrdeq	r0, [r0], -ip
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	07dc0002 	ldrbeq	r0, [ip, r2]
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	c00096f0 	strdgt	r9, [r0], -r0
  b4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	08290002 	stmdaeq	r9!, {r1}
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	c0009708 	andgt	r9, r0, r8, lsl #14
  d4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	093c0002 	ldmdbeq	ip!, {r1}
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	c00098f8 	strdgt	r9, [r0], -r8
  f4:	00000720 	andeq	r0, r0, r0, lsr #14
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	191a0002 	ldmdbne	sl, {r1}
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	c000a018 	andgt	sl, r0, r8, lsl r0
 114:	00000128 	andeq	r0, r0, r8, lsr #2
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	5f007374 	svcpl	0x00007374
   8:	6975625f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sp, lr}^
   c:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
  10:	5f61765f 	svcpl	0x0061765f
  14:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
  18:	696b7300 	stmdbvs	fp!, {r8, r9, ip, sp, lr}^
  1c:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
  20:	7600696f 	strvc	r6, [r0], -pc, ror #18
  24:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
  28:	756f6300 	strbvc	r6, [pc, #-768]!	; fffffd30 <__bss_end__+0x3fff527c>
  2c:	5f00746e 	svcpl	0x0000746e
  30:	756f745f 	strbvc	r7, [pc, #-1119]!	; fffffbd9 <__bss_end__+0x3fff5125>
  34:	72657070 	rsbvc	r7, r5, #112	; 0x70
  38:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
  3c:	5f63756e 	svcpl	0x0063756e
  40:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
  44:	00747369 	rsbseq	r7, r4, r9, ror #6
  48:	63657270 	cmnvs	r5, #112, 4
  4c:	6f697369 	svcvs	0x00697369
  50:	4e47006e 	cdpmi	0, 4, cr0, cr7, cr14, {3}
  54:	31432055 	qdaddcc	r2, r5, r3
  58:	2e372031 	mrccs	0, 1, r2, cr7, cr1, {1}
  5c:	20302e35 	eorscs	r2, r0, r5, lsr lr
  60:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  64:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
  68:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  6c:	73637061 	cmnvc	r3, #97	; 0x61
  70:	756e672d 	strbvc	r6, [lr, #-1837]!	; 0xfffff8d3
  74:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  78:	6e3d7570 	mrcvs	5, 1, r7, cr13, cr0, {3}
  7c:	206e6f65 	rsbcs	r6, lr, r5, ror #30
  80:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  84:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  88:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  8c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  90:	2d207066 	stccs	0, cr7, [r0, #-408]!	; 0xfffffe68
  94:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  98:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  9c:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
  a0:	6d2d2061 	stcvs	0, cr2, [sp, #-388]!	; 0xfffffe7c
  a4:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
  a8:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
  ac:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  b0:	2d203961 			; <UNDEFINED> instruction: 0x2d203961
  b4:	736c746d 	cmnvc	ip, #1828716544	; 0x6d000000
  b8:	6169642d 	cmnvs	r9, sp, lsr #8
  bc:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  c0:	756e673d 	strbvc	r6, [lr, #-1853]!	; 0xfffff8c3
  c4:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c8:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  cc:	6f6e662d 	svcvs	0x006e662d
  d0:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
  d4:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
  d8:	73616200 	cmnvc	r1, #0, 4
  dc:	6e750065 	cdpvs	0, 7, cr0, cr5, cr5, {3}
  e0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  e4:	63206465 			; <UNDEFINED> instruction: 0x63206465
  e8:	00726168 	rsbseq	r6, r2, r8, ror #2
  ec:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  f0:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  f4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  f8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  fc:	6e650074 	mcrvs	0, 3, r0, cr5, cr4, {3}
 100:	73007064 	movwvc	r7, #100	; 0x64
 104:	6c706d69 	ldclvs	13, cr6, [r0], #-420	; 0xfffffe5c
 108:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
 10c:	6c6f7472 	cfstrdvs	mvd7, [pc], #-456	; ffffff4c <__bss_end__+0x3fff5498>
 110:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 118 <_start-0xc0007ee8>
 114:	2f6e6f6d 	svccs	0x006e6f6d
 118:	2f637273 	svccs	0x00637273
 11c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 120:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
 124:	616c6600 	cmnvs	ip, r0, lsl #12
 128:	73007367 	movwvc	r7, #871	; 0x367
 12c:	00657a69 	rsbeq	r7, r5, r9, ror #20
 130:	6c617571 	cfstr64vs	mvdx7, [r1], #-452	; 0xfffffe3c
 134:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
 138:	69730072 	ldmdbvs	r3!, {r1, r4, r5, r6}^
 13c:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
 140:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 144:	6c756f74 	ldclvs	15, cr6, [r5], #-464	; 0xfffffe30
 148:	73657200 	cmnvc	r5, #0, 4
 14c:	00746c75 	rsbseq	r6, r4, r5, ror ip
 150:	65706572 	ldrbvs	r6, [r0, #-1394]!	; 0xfffffa8e
 154:	73007461 	movwvc	r7, #1121	; 0x461
 158:	6c6e7274 	sfmvs	f7, 2, [lr], #-464	; 0xfffffe30
 15c:	2f006e65 	svccs	0x00006e65
 160:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
 164:	6e696c2f 	cdpvs	12, 6, cr6, cr9, cr15, {1}
 168:	662f7875 			; <UNDEFINED> instruction: 0x662f7875
 16c:	69737261 	ldmdbvs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 170:	2f746867 	svccs	0x00746867
 174:	2f4d5241 	svccs	0x004d5241
 178:	32324344 	eorscc	r4, r2, #68, 6	; 0x10000001
 17c:	2f313131 	svccs	0x00313131
 180:	30796164 	rsbscc	r6, r9, r4, ror #2
 184:	32302f39 	eorscc	r2, r0, #57, 30	; 0xe4
 188:	6332692d 	teqvs	r2, #737280	; 0xb4000
 18c:	5f00632d 	svcpl	0x0000632d
 190:	70797463 	rsbsvc	r7, r9, r3, ror #8
 194:	72700065 	rsbsvc	r0, r0, #101	; 0x65
 198:	62746e69 	rsbsvs	r6, r4, #1680	; 0x690
 19c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 1a0:	69660072 	stmdbvs	r6!, {r1, r4, r5, r6}^
 1a4:	5f646c65 	svcpl	0x00646c65
 1a8:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 1ac:	72610068 	rsbvc	r0, r1, #104	; 0x68
 1b0:	6e007367 	cdpvs	3, 0, cr7, cr0, cr7, {3}
 1b4:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
 1b8:	6f6c0072 	svcvs	0x006c0072
 1bc:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 1c0:	7300746e 	movwvc	r7, #1134	; 0x46e
 1c4:	006e6769 	rsbeq	r6, lr, r9, ror #14
 1c8:	65725f5f 	ldrbvs	r5, [r2, #-3935]!	; 0xfffff0a1
 1cc:	73760073 	cmnvc	r6, #115	; 0x73
 1d0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 1d4:	5f006674 	svcpl	0x00006674
 1d8:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 1dc:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xfffff08c
 1e0:	53006374 	movwpl	r6, #884	; 0x374
 1e4:	46434345 	strbmi	r4, [r3], -r5, asr #6
 1e8:	5f005247 	svcpl	0x00005247
 1ec:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 1f0:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xfffff08c
 1f4:	52007374 	andpl	r7, r0, #116, 6	; 0xd0000001
 1f8:	00524f54 	subseq	r4, r2, r4, asr pc
 1fc:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
 200:	50555000 	subspl	r5, r5, r0
 204:	4d005244 	sfmmi	f5, 4, [r0, #-272]	; 0xfffffef0
 208:	5245444f 	subpl	r4, r5, #1325400064	; 0x4f000000
 20c:	50534f00 	subspl	r4, r3, r0, lsl #30
 210:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
 214:	50544700 	subspl	r4, r4, r0, lsl #14
 218:	52500052 	subspl	r0, r0, #82	; 0x52
 21c:	00435345 	subeq	r5, r3, r5, asr #6
 220:	72747370 	rsbsvc	r7, r4, #112, 6	; 0xc0000001
 224:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff32c <__bss_end__+0x3fff4878>
 228:	5f747261 	svcpl	0x00747261
 22c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 230:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 234:	00745f6f 	rsbseq	r5, r4, pc, ror #30
 238:	524b434c 	subpl	r4, fp, #76, 6	; 0x30000001
 23c:	72617500 	rsbvc	r7, r1, #0, 10
 240:	00745f74 	rsbseq	r5, r4, r4, ror pc
 244:	5059544f 	subspl	r5, r9, pc, asr #8
 248:	41005245 	tstmi	r0, r5, asr #4
 24c:	004c5246 	subeq	r5, ip, r6, asr #4
 250:	61755f5f 	cmnvs	r5, pc, asr pc
 254:	675f7472 			; <UNDEFINED> instruction: 0x675f7472
 258:	00637465 	rsbeq	r7, r3, r5, ror #8
 25c:	48524641 	ldmdami	r2, {r0, r6, r9, sl, lr}^
 260:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 268 <_start-0xc0007d98>
 264:	2f6e6f6d 	svccs	0x006e6f6d
 268:	2f637273 	svccs	0x00637273
 26c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 270:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 274:	72695f6f 	rsbvc	r5, r9, #444	; 0x1bc
 278:	72730071 	rsbsvc	r0, r3, #113	; 0x71
 27c:	6f642f63 	svcvs	0x00642f63
 280:	7172695f 	cmnvc	r2, pc, asr r9
 284:	7300632e 	movwvc	r6, #814	; 0x32e
 288:	30303769 	eorscc	r3, r0, r9, ror #14
 28c:	6e695f36 	mcrvs	15, 3, r5, cr9, cr6, {1}
 290:	73007469 	movwvc	r7, #1129	; 0x469
 294:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 298:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 29c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 2a0:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 2a4:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
 2a8:	2074726f 	rsbscs	r7, r4, pc, ror #4
 2ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
 2b0:	30376973 	eorscc	r6, r7, r3, ror r9
 2b4:	725f3630 	subsvc	r3, pc, #48, 12	; 0x3000000
 2b8:	5f646165 	svcpl	0x00646165
 2bc:	5f6d7568 	svcpl	0x006d7568
 2c0:	61746164 	cmnvs	r4, r4, ror #2
 2c4:	616c7300 	cmnvs	ip, r0, lsl #6
 2c8:	615f6576 	cmpvs	pc, r6, ror r5	; <UNPREDICTABLE>
 2cc:	00726464 	rsbseq	r6, r2, r4, ror #8
 2d0:	30376973 	eorscc	r6, r7, r3, ror r9
 2d4:	725f3630 	subsvc	r3, pc, #48, 12	; 0x3000000
 2d8:	5f646165 	svcpl	0x00646165
 2dc:	706d6574 	rsbvc	r6, sp, r4, ror r5
 2e0:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 2e4:	72730061 	rsbsvc	r0, r3, #97	; 0x61
 2e8:	69732f63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 2ec:	36303037 			; <UNDEFINED> instruction: 0x36303037
 2f0:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
 2f4:	615f6765 	cmpvs	pc, r5, ror #14
 2f8:	00726464 	rsbseq	r6, r2, r4, ror #8
 2fc:	5f746164 	svcpl	0x00746164
 300:	61640068 	cmnvs	r4, r8, rrx
 304:	006c5f74 	rsbeq	r5, ip, r4, ror pc
 308:	545f504d 	ldrbpl	r5, [pc], #-77	; 310 <_start-0xc0007cf0>
 30c:	4248415a 	submi	r4, r8, #-2147483626	; 0x80000016
 310:	434e4536 	movtmi	r4, #58678	; 0xe536
 314:	0052524c 	subseq	r5, r2, ip, asr #4
 318:	415f504d 	cmpmi	pc, sp, asr #32
 31c:	4c4d4958 	mcrrmi	9, 5, r4, sp, cr8	; <UNPREDICTABLE>
 320:	434e4550 	movtmi	r4, #58704	; 0xe550
 324:	0052524c 	subseq	r5, r2, ip, asr #4
 328:	415f504d 	cmpmi	pc, sp, asr #32
 32c:	45324248 	ldrmi	r4, [r2, #-584]!	; 0xfffffdb8
 330:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 334:	504d0052 	subpl	r0, sp, r2, asr r0
 338:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 33c:	534e4535 	movtpl	r4, #58677	; 0xe535
 340:	00525445 	subseq	r5, r2, r5, asr #8
 344:	415f504d 	cmpmi	pc, sp, asr #32
 348:	45334250 	ldrmi	r4, [r3, #-592]!	; 0xfffffdb0
 34c:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 350:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0xffffffae
 354:	00383273 	eorseq	r3, r8, r3, ror r2
 358:	44495841 	strbmi	r5, [r9], #-2113	; 0xfffff7bf
 35c:	00525649 	subseq	r5, r2, r9, asr #12
 360:	31736572 	cmncc	r3, r2, ror r5
 364:	65720031 	ldrbvs	r0, [r2, #-49]!	; 0xffffffcf
 368:	00323173 	eorseq	r3, r2, r3, ror r1
 36c:	31736572 	cmncc	r3, r2, ror r5
 370:	65720033 	ldrbvs	r0, [r2, #-51]!	; 0xffffffcd
 374:	00343173 	eorseq	r3, r4, r3, ror r1
 378:	31736572 	cmncc	r3, r2, ror r5
 37c:	65720035 	ldrbvs	r0, [r2, #-53]!	; 0xffffffcb
 380:	00363173 	eorseq	r3, r6, r3, ror r1
 384:	31736572 	cmncc	r3, r2, ror r5
 388:	65720037 	ldrbvs	r0, [r2, #-55]!	; 0xffffffc9
 38c:	00393173 	eorseq	r3, r9, r3, ror r1
 390:	415f504d 	cmpmi	pc, sp, asr #32
 394:	4c334248 	lfmmi	f4, 4, [r3], #-288	; 0xfffffee0
 398:	434e4550 	movtmi	r4, #58704	; 0xe550
 39c:	0052524c 	subseq	r5, r2, ip, asr #4
 3a0:	425f504d 	subsmi	r5, pc, #77	; 0x4d
 3a4:	43544f4f 	cmpmi	r4, #316	; 0x13c
 3a8:	50410052 	subpl	r0, r1, r2, asr r0
 3ac:	49443442 	stmdbmi	r4, {r1, r6, sl, ip, sp}^
 3b0:	69005256 	stmdbvs	r0, {r1, r2, r4, r6, r9, ip, lr}
 3b4:	615f6332 	cmpvs	pc, r2, lsr r3	; <UNPREDICTABLE>
 3b8:	4d006b63 	vstrmi	d6, [r0, #-396]	; 0xfffffe74
 3bc:	50415f43 	subpl	r5, r1, r3, asr #30
 3c0:	504c3142 	subpl	r3, ip, r2, asr #2
 3c4:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 3c8:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 3cc:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 3d0:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
 3d4:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 3d8:	4d445300 	stclmi	3, cr5, [r4, #-0]
 3dc:	4333434d 	teqmi	r3, #872415233	; 0x34000001
 3e0:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 3e4:	504d0052 	subpl	r0, sp, r2, asr r0
 3e8:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 3ec:	434e4535 	movtmi	r4, #58677	; 0xe535
 3f0:	0052524c 	subseq	r5, r2, ip, asr #4
 3f4:	525f5242 	subspl	r5, pc, #536870916	; 0x20000004
 3f8:	43535453 	cmpmi	r3, #1392508928	; 0x53000000
 3fc:	0052524c 	subseq	r5, r2, ip, asr #4
 400:	415f434d 	cmpmi	pc, sp, asr #6
 404:	4c334248 	lfmmi	f4, 4, [r3], #-288	; 0xfffffee0
 408:	434e4550 	movtmi	r4, #58704	; 0xe550
 40c:	0052524c 	subseq	r5, r2, ip, asr #4
 410:	4d5f504d 	ldclmi	0, cr5, [pc, #-308]	; 2e4 <_start-0xc0007d1c>
 414:	4248414c 	submi	r4, r8, #76, 2
 418:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 41c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 420:	54504c00 	ldrbpl	r4, [r0], #-3072	; 0xfffff400
 424:	43314d49 	teqmi	r1, #4672	; 0x1240
 428:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 42c:	434d0052 	movtmi	r0, #53330	; 0xd052
 430:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 434:	534e4532 	movtpl	r4, #58674	; 0xe532
 438:	00525445 	subseq	r5, r2, r5, asr #8
 43c:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
 440:	534b4331 	movtpl	r4, #45873	; 0xb331
 444:	00524c45 	subseq	r4, r2, r5, asr #24
 448:	415f504d 	cmpmi	pc, sp, asr #32
 44c:	45364248 	ldrmi	r4, [r6, #-584]!	; 0xfffffdb8
 450:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 454:	504d0052 	subpl	r0, sp, r2, asr r0
 458:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 45c:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
 460:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 464:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 468:	4643324c 	strbmi	r3, [r3], -ip, asr #4
 46c:	00315247 	eorseq	r5, r1, r7, asr #4
 470:	415f434d 	cmpmi	pc, sp, asr #6
 474:	45344250 	ldrmi	r4, [r4, #-592]!	; 0xfffffdb0
 478:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 47c:	48410052 	stmdami	r1, {r1, r4, r6}^
 480:	53523542 	cmppl	r2, #276824064	; 0x10800000
 484:	524c4354 	subpl	r4, ip, #84, 6	; 0x50000001
 488:	50530052 	subspl	r0, r3, r2, asr r0
 48c:	4b433649 	blmi	10cddb8 <_start-0xbef3a248>
 490:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 494:	73657200 	cmnvc	r5, #0, 4
 498:	72003032 	andvc	r3, r0, #50	; 0x32
 49c:	31327365 	teqcc	r2, r5, ror #6
 4a0:	52415500 	subpl	r5, r1, #0, 10
 4a4:	43383754 	teqmi	r8, #84, 14	; 0x1500000
 4a8:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 4ac:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0xffffffae
 4b0:	00333273 	eorseq	r3, r3, r3, ror r2
 4b4:	48415a54 	stmdami	r1, {r2, r4, r6, r9, fp, ip, lr}^
 4b8:	53523642 	cmppl	r2, #69206016	; 0x4200000
 4bc:	4c455354 	mcrrmi	3, 5, r5, r5, cr4
 4c0:	504d0052 	subpl	r0, sp, r2, asr r0
 4c4:	414c4d5f 	cmpmi	ip, pc, asr sp
 4c8:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
 4cc:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 4d0:	42504100 	subsmi	r4, r0, #0, 2
 4d4:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
 4d8:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 4dc:	73657200 	cmnvc	r5, #0, 4
 4e0:	41003732 	tstmi	r0, r2, lsr r7
 4e4:	44314250 	ldrtmi	r4, [r1], #-592	; 0xfffffdb0
 4e8:	00525649 	subseq	r5, r2, r9, asr #12
 4ec:	415f434d 	cmpmi	pc, sp, asr #6
 4f0:	4c354248 	lfmmi	f4, 4, [r5], #-288	; 0xfffffee0
 4f4:	534e4550 	movtpl	r4, #58704	; 0xe550
 4f8:	00525445 	subseq	r5, r2, r5, asr #8
 4fc:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 500:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 504:	0052524c 	subseq	r5, r2, ip, asr #4
 508:	314c4c50 	cmpcc	ip, r0, asr ip
 50c:	43415246 	movtmi	r5, #4678	; 0x1246
 510:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0xffffffae
 514:	72003173 	andvc	r3, r0, #-1073741796	; 0xc000001c
 518:	00327365 	eorseq	r7, r2, r5, ror #6
 51c:	33736572 	cmncc	r3, #478150656	; 0x1c800000
 520:	73657200 	cmnvc	r5, #0, 4
 524:	65720034 	ldrbvs	r0, [r2, #-52]!	; 0xffffffcc
 528:	72003573 	andvc	r3, r0, #482344960	; 0x1cc00000
 52c:	00367365 	eorseq	r7, r6, r5, ror #6
 530:	37736572 			; <UNDEFINED> instruction: 0x37736572
 534:	73657200 	cmnvc	r5, #0, 4
 538:	65720038 	ldrbvs	r0, [r2, #-56]!	; 0xffffffc8
 53c:	41003973 	tstmi	r0, r3, ror r9
 540:	52344248 	eorspl	r4, r4, #72, 4	; 0x80000004
 544:	4c435453 	cfstrdmi	mvd5, [r3], {83}	; 0x53
 548:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 54c:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 550:	504c3442 	subpl	r3, ip, r2, asr #8
 554:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 558:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 55c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 560:	4e453642 	cdpmi	6, 4, cr3, cr5, cr2, {2}
 564:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 568:	4c4c5000 	marmi	acc0, r5, ip
 56c:	47534334 	smmlarmi	r3, r4, r3, r4
 570:	504c0052 	subpl	r0, ip, r2, asr r0
 574:	344d4954 	strbcc	r4, [sp], #-2388	; 0xfffff6ac
 578:	534b4335 	movtpl	r4, #45877	; 0xb335
 57c:	00524c45 	subseq	r4, r2, r5, asr #24
 580:	4d5f434d 	ldclmi	3, cr4, [pc, #-308]	; 454 <_start-0xc0007bac>
 584:	4248414c 	submi	r4, r8, #76, 2
 588:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 58c:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 590:	5a545f50 	bpl	15182d8 <_start-0xbeaefd28>
 594:	36424841 	strbcc	r4, [r2], -r1, asr #16
 598:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 59c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 5a0:	73657200 	cmnvc	r5, #0, 4
 5a4:	45003532 	strmi	r3, [r0, #-1330]	; 0xffffface
 5a8:	4b434854 	blmi	10d2700 <_start-0xbef35900>
 5ac:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 5b0:	5f434d00 	svcpl	0x00434d00
 5b4:	48414c4d 	stmdami	r1, {r0, r2, r3, r6, sl, fp, lr}^
 5b8:	45504c42 	ldrbmi	r4, [r0, #-3138]	; 0xfffff3be
 5bc:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 5c0:	50410052 	subpl	r0, r1, r2, asr r0
 5c4:	53523242 	cmppl	r2, #536870916	; 0x20000004
 5c8:	54455354 	strbpl	r5, [r5], #-852	; 0xfffffcac
 5cc:	434f0052 	movtmi	r0, #61522	; 0xf052
 5d0:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 5d4:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 5d8:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 5dc:	504c3442 	subpl	r3, ip, r2, asr #8
 5e0:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 5e4:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 5e8:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 5ec:	4e453442 	cdpmi	4, 4, cr3, cr5, cr2, {2}
 5f0:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 5f4:	5f434d00 	svcpl	0x00434d00
 5f8:	4d495841 	stclmi	8, cr5, [r9, #-260]	; 0xfffffefc
 5fc:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 600:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 604:	5f504d00 	svcpl	0x00504d00
 608:	33424841 	movtcc	r4, #10305	; 0x2841
 60c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 610:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 614:	5f434d00 	svcpl	0x00434d00
 618:	4d495841 	stclmi	8, cr5, [r9, #-260]	; 0xfffffefc
 61c:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 620:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 624:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 628:	4e453442 	cdpmi	4, 4, cr3, cr5, cr2, {2}
 62c:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 630:	42484100 	submi	r4, r8, #0, 2
 634:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
 638:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 63c:	4b435200 	blmi	10d4e44 <_start-0xbef331bc>
 640:	4c455334 	mcrrmi	3, 3, r5, r5, cr4
 644:	504d0052 	subpl	r0, sp, r2, asr r0
 648:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 64c:	534e4534 	movtpl	r4, #58676	; 0xe534
 650:	00525445 	subseq	r5, r2, r5, asr #8
 654:	31736572 	cmncc	r3, r2, ror r5
 658:	32690030 	rsbcc	r0, r9, #48	; 0x30
 65c:	616e5f63 	cmnvs	lr, r3, ror #30
 660:	4d006b63 	vstrmi	d6, [r0, #-396]	; 0xfffffe74
 664:	50415f43 	subpl	r5, r1, r3, asr #30
 668:	504c3142 	subpl	r3, ip, r2, asr #2
 66c:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 670:	50005252 	andpl	r5, r0, r2, asr r2
 674:	46324c4c 	ldrtmi	r4, [r2], -ip, asr #24
 678:	52434152 	subpl	r4, r3, #-2147483628	; 0x80000014
 67c:	63326900 	teqvs	r2, #0, 18
 680:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 684:	41550074 	cmpmi	r5, r4, ror r0
 688:	34325452 	ldrtcc	r5, [r2], #-1106	; 0xfffffbae
 68c:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 690:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 694:	43314f43 	teqmi	r1, #268	; 0x10c
 698:	00524746 	subseq	r4, r2, r6, asr #14
 69c:	415f434d 	cmpmi	pc, sp, asr #6
 6a0:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
 6a4:	534e4550 	movtpl	r4, #58704	; 0xe550
 6a8:	00525445 	subseq	r5, r2, r5, asr #8
 6ac:	5f636372 	svcpl	0x00636372
 6b0:	434d0074 	movtmi	r0, #53364	; 0xd074
 6b4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 6b8:	45504c36 	ldrbmi	r4, [r0, #-3126]	; 0xfffff3ca
 6bc:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 6c0:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0xffffffae
 6c4:	00383173 	eorseq	r3, r8, r3, ror r1
 6c8:	314c4c50 	cmpcc	ip, r0, asr ip
 6cc:	52475343 	subpl	r5, r7, #201326593	; 0xc000001
 6d0:	63326900 	teqvs	r2, #0, 18
 6d4:	6174735f 	cmnvs	r4, pc, asr r3
 6d8:	46007472 			; <UNDEFINED> instruction: 0x46007472
 6dc:	4e414344 	cdpmi	3, 4, cr4, cr1, cr4, {2}
 6e0:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 6e4:	5300524c 	movwpl	r5, #588	; 0x24c
 6e8:	43314941 	teqmi	r1, #1064960	; 0x104000
 6ec:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 6f0:	504d0052 	subpl	r0, sp, r2, asr r0
 6f4:	414c4d5f 	cmpmi	ip, pc, asr sp
 6f8:	504c4248 	subpl	r4, ip, r8, asr #4
 6fc:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 700:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 704:	50415f43 	subpl	r5, r1, r3, asr #30
 708:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
 70c:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 710:	5f504d00 	svcpl	0x00504d00
 714:	36424841 	strbcc	r4, [r2], -r1, asr #16
 718:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 71c:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 720:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 724:	504c3242 	subpl	r3, ip, r2, asr #4
 728:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 72c:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 730:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 734:	4e453442 	cdpmi	4, 4, cr3, cr5, cr2, {2}
 738:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 73c:	49415300 	stmdbmi	r1, {r8, r9, ip, lr}^
 740:	534b4333 	movtpl	r4, #45875	; 0xb333
 744:	00524c45 	subseq	r4, r2, r5, asr #24
 748:	4b43504d 	blmi	10d4884 <_start-0xbef3377c>
 74c:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 750:	5f434d00 	svcpl	0x00434d00
 754:	48414c4d 	stmdami	r1, {r0, r2, r3, r6, sl, fp, lr}^
 758:	45504c42 	ldrbmi	r4, [r0, #-3138]	; 0xfffff3be
 75c:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 760:	434d0052 	movtmi	r0, #53330	; 0xd052
 764:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 768:	434e4534 	movtmi	r4, #58676	; 0xe534
 76c:	0052524c 	subseq	r5, r2, ip, asr #4
 770:	43495348 	movtmi	r5, #37704	; 0x9348
 774:	00524746 	subseq	r4, r2, r6, asr #14
 778:	32474e52 	subcc	r4, r7, #1312	; 0x520
 77c:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 780:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 784:	4c4d5f50 	mcrrmi	15, 5, r5, sp, cr0
 788:	45424841 	strbmi	r4, [r2, #-2113]	; 0xfffff7bf
 78c:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 790:	48410052 	stmdami	r1, {r1, r4, r6}^
 794:	53523542 	cmppl	r2, #276824064	; 0x10800000
 798:	54455354 	strbpl	r5, [r5], #-852	; 0xfffffcac
 79c:	50410052 	subpl	r0, r1, r2, asr r0
 7a0:	53523342 	cmppl	r2, #134217729	; 0x8000001
 7a4:	54455354 	strbpl	r5, [r5], #-852	; 0xfffffcac
 7a8:	434d0052 	movtmi	r0, #53330	; 0xd052
 7ac:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 7b0:	45504c35 	ldrbmi	r4, [r0, #-3125]	; 0xfffff3cb
 7b4:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 7b8:	57500052 			; <UNDEFINED> instruction: 0x57500052
 7bc:	44504c52 	ldrbmi	r4, [r0], #-3154	; 0xfffff3ae
 7c0:	5243594c 	subpl	r5, r3, #76, 18	; 0x130000
 7c4:	42484100 	submi	r4, r8, #0, 2
 7c8:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
 7cc:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 7d0:	73657200 	cmnvc	r5, #0, 4
 7d4:	4d003632 	stcmi	6, cr3, [r0, #-200]	; 0xffffff38
 7d8:	53525f43 	cmppl	r2, #268	; 0x10c
 7dc:	4c435354 	mcrrmi	3, 5, r5, r3, cr4
 7e0:	53005252 	movwpl	r5, #594	; 0x252
 7e4:	00524449 	subseq	r4, r2, r9, asr #8
 7e8:	33433249 	movtcc	r3, #12873	; 0x3249
 7ec:	534b4335 	movtpl	r4, #45877	; 0xb335
 7f0:	00524c45 	subseq	r4, r2, r5, asr #24
 7f4:	475f504d 	ldrbmi	r5, [pc, -sp, asr #32]
 7f8:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 7fc:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 800:	42504100 	subsmi	r4, r0, #0, 2
 804:	56494433 			; <UNDEFINED> instruction: 0x56494433
 808:	504d0052 	subpl	r0, sp, r2, asr r0
 80c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 810:	45504c34 	ldrbmi	r4, [r0, #-3124]	; 0xfffff3cc
 814:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 818:	32490052 	subcc	r0, r9, #82	; 0x52
 81c:	43323143 	teqmi	r2, #-1073741808	; 0xc0000010
 820:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 824:	434d0052 	movtmi	r0, #53330	; 0xd052
 828:	414c4d5f 	cmpmi	ip, pc, asr sp
 82c:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
 830:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 834:	5f434d00 	svcpl	0x00434d00
 838:	33424841 	movtcc	r4, #10305	; 0x2841
 83c:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 840:	50005254 	andpl	r5, r0, r4, asr r2
 844:	43314c4c 	teqmi	r1, #76, 24	; 0x4c00
 848:	31524746 	cmpcc	r2, r6, asr #14
 84c:	4c4c5000 	marmi	acc0, r5, ip
 850:	47464331 	smlaldxmi	r4, r6, r1, r3
 854:	4d003252 	sfmmi	f3, 4, [r0, #-328]	; 0xfffffeb8
 858:	50415f50 	subpl	r5, r1, r0, asr pc
 85c:	4e453142 	dvfmism	f3, f5, f2
 860:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 864:	415a5400 	cmpmi	sl, r0, lsl #8
 868:	52364248 	eorspl	r4, r6, #72, 4	; 0x80000004
 86c:	4c435453 	cfstrdmi	mvd5, [r3], {83}	; 0x53
 870:	41005252 	tstmi	r0, r2, asr r2
 874:	52334248 	eorspl	r4, r3, #72, 4	; 0x80000004
 878:	4c435453 	cfstrdmi	mvd5, [r3], {83}	; 0x53
 87c:	69005252 	stmdbvs	r0, {r1, r4, r6, r9, ip, lr}
 880:	775f6332 	smmlarvc	pc, r2, r3, r6	; <UNPREDICTABLE>
 884:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 888:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
 88c:	504d0065 	subpl	r0, sp, r5, rrx
 890:	415a545f 	cmpmi	sl, pc, asr r4
 894:	4c364248 	lfmmi	f4, 4, [r6], #-288	; 0xfffffee0
 898:	434e4550 	movtmi	r4, #58704	; 0xe550
 89c:	0052524c 	subseq	r5, r2, ip, asr #4
 8a0:	415f434d 	cmpmi	pc, sp, asr #6
 8a4:	45354248 	ldrmi	r4, [r5, #-584]!	; 0xfffffdb8
 8a8:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 8ac:	504d0052 	subpl	r0, sp, r2, asr r0
 8b0:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 8b4:	45504c33 	ldrbmi	r4, [r0, #-3123]	; 0xfffff3cd
 8b8:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 8bc:	53440052 	movtpl	r0, #16466	; 0x4052
 8c0:	534b4349 	movtpl	r4, #45897	; 0xb349
 8c4:	00524c45 	subseq	r4, r2, r5, asr #24
 8c8:	32495053 	subcc	r5, r9, #83	; 0x53
 8cc:	43333253 	teqmi	r3, #805306373	; 0x30000005
 8d0:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 8d4:	434f0052 	movtmi	r0, #61522	; 0xf052
 8d8:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 8dc:	44005252 	strmi	r5, [r0], #-594	; 0xfffffdae
 8e0:	46434742 	strbmi	r4, [r3], -r2, asr #14
 8e4:	4d005247 	sfmmi	f5, 4, [r0, #-284]	; 0xfffffee4
 8e8:	50415f43 	subpl	r5, r1, r3, asr #30
 8ec:	504c3342 	subpl	r3, ip, r2, asr #6
 8f0:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 8f4:	69005254 	stmdbvs	r0, {r2, r4, r6, r9, ip, lr}
 8f8:	775f6332 	smmlarvc	pc, r2, r3, r6	; <UNPREDICTABLE>
 8fc:	5f746961 	svcpl	0x00746961
 900:	006b6361 	rsbeq	r6, fp, r1, ror #6
 904:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
 908:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 90c:	5f504d00 	svcpl	0x00504d00
 910:	47445749 	strbmi	r5, [r4, -r9, asr #14]
 914:	45535a46 	ldrbmi	r5, [r3, #-2630]	; 0xfffff5ba
 918:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
 91c:	49444354 	stmdbmi	r4, {r2, r4, r6, r8, r9, lr}^
 920:	53005256 	movwpl	r5, #598	; 0x256
 924:	4e454754 	mcrmi	7, 2, r4, cr5, cr4, {2}
 928:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 92c:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 930:	50415f43 	subpl	r5, r1, r3, asr #30
 934:	504c3442 	subpl	r3, ip, r2, asr #8
 938:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 93c:	55005254 	strpl	r5, [r0, #-596]	; 0xfffffdac
 940:	33545241 	cmpcc	r4, #268435460	; 0x10000004
 944:	534b4335 	movtpl	r4, #45877	; 0xb335
 948:	00524c45 	subseq	r4, r2, r5, asr #24
 94c:	415f504d 	cmpmi	pc, sp, asr #32
 950:	45344250 	ldrmi	r4, [r4, #-592]!	; 0xfffffdb0
 954:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 958:	434d0052 	movtmi	r0, #53330	; 0xd052
 95c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 960:	434e4533 	movtmi	r4, #58675	; 0xe533
 964:	0052524c 	subseq	r5, r2, ip, asr #4
 968:	474d4954 	smlsldmi	r4, sp, r4, r9
 96c:	45525032 	ldrbmi	r5, [r2, #-50]	; 0xffffffce
 970:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 974:	5243334c 	subpl	r3, r3, #76, 6	; 0x30000001
 978:	5f504d00 	svcpl	0x00504d00
 97c:	32425041 	subcc	r5, r2, #65	; 0x41
 980:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 984:	50005254 	andpl	r5, r0, r4, asr r2
 988:	46344c4c 	ldrtmi	r4, [r4], -ip, asr #24
 98c:	52434152 	subpl	r4, r3, #-2147483628	; 0x80000014
 990:	5f504d00 	svcpl	0x00504d00
 994:	32425041 	subcc	r5, r2, #65	; 0x41
 998:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 99c:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 9a0:	42504100 	subsmi	r4, r0, #0, 2
 9a4:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
 9a8:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 9ac:	5f434d00 	svcpl	0x00434d00
 9b0:	33424841 	movtcc	r4, #10305	; 0x2841
 9b4:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 9b8:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 9bc:	5f434d00 	svcpl	0x00434d00
 9c0:	36424841 	strbcc	r4, [r2], -r1, asr #16
 9c4:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 9c8:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 9cc:	4c445200 	sfmmi	f5, 2, [r4], {-0}
 9d0:	52434953 	subpl	r4, r3, #1359872	; 0x14c000
 9d4:	4c4c5000 	marmi	acc0, r5, ip
 9d8:	00524334 	subseq	r4, r2, r4, lsr r3
 9dc:	314b4350 	cmpcc	fp, r0, asr r3
 9e0:	4c455332 	mcrrmi	3, 3, r5, r5, cr2
 9e4:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 9e8:	4643324c 	strbmi	r3, [r3], -ip, asr #4
 9ec:	00325247 	eorseq	r5, r2, r7, asr #4
 9f0:	344c4c50 	strbcc	r4, [ip], #-3152	; 0xfffff3b0
 9f4:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 9f8:	65720031 	ldrbvs	r0, [r2, #-49]!	; 0xffffffcf
 9fc:	00343273 	eorseq	r3, r4, r3, ror r2
 a00:	415f504d 	cmpmi	pc, sp, asr #32
 a04:	4c354248 	lfmmi	f4, 4, [r5], #-288	; 0xfffffee0
 a08:	534e4550 	movtpl	r4, #58704	; 0xe550
 a0c:	00525445 	subseq	r5, r2, r5, asr #8
 a10:	415f504d 	cmpmi	pc, sp, asr #32
 a14:	45334248 	ldrmi	r4, [r3, #-584]!	; 0xfffffdb8
 a18:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 a1c:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 a20:	5343334c 	movtpl	r3, #13132	; 0x334c
 a24:	4d005247 	sfmmi	f5, 4, [r0, #-284]	; 0xfffffee4
 a28:	52535f50 	subspl	r5, r3, #80, 30	; 0x140
 a2c:	45535145 	ldrbmi	r5, [r3, #-325]	; 0xfffffebb
 a30:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 a34:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 a38:	504c3242 	subpl	r3, ip, r2, asr #4
 a3c:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 a40:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 a44:	58415f50 	stmdapl	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 a48:	504c4d49 	subpl	r4, ip, r9, asr #26
 a4c:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 a50:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 a54:	50415f43 	subpl	r5, r1, r3, asr #30
 a58:	504c3342 	subpl	r3, ip, r2, asr #6
 a5c:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 a60:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 a64:	50415f43 	subpl	r5, r1, r3, asr #30
 a68:	4e453142 	dvfmism	f3, f5, f2
 a6c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 a70:	43504d00 	cmpmi	r0, #0, 26
 a74:	5649444b 	strbpl	r4, [r9], -fp, asr #8
 a78:	44440052 	strbmi	r0, [r4], #-82	; 0xffffffae
 a7c:	46544952 			; <UNDEFINED> instruction: 0x46544952
 a80:	73005243 	movwvc	r5, #579	; 0x243
 a84:	692f6372 	stmdbvs	pc!, {r1, r4, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
 a88:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
 a8c:	45504300 	ldrbmi	r4, [r0, #-768]	; 0xfffffd00
 a90:	534b4352 	movtpl	r4, #45906	; 0xb352
 a94:	00524c45 	subseq	r4, r2, r5, asr #24
 a98:	43434543 	movtmi	r4, #13635	; 0x3543
 a9c:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 aa0:	504d0052 	subpl	r0, sp, r2, asr r0
 aa4:	4549435f 	strbmi	r4, [r9, #-863]	; 0xfffffca1
 aa8:	44410052 	strbmi	r0, [r1], #-82	; 0xffffffae
 aac:	534b4343 	movtpl	r4, #45891	; 0xb343
 ab0:	00524c45 	subseq	r4, r2, r5, asr #24
 ab4:	415f434d 	cmpmi	pc, sp, asr #6
 ab8:	45334250 	ldrmi	r4, [r3, #-592]!	; 0xfffffdb0
 abc:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 ac0:	434d0052 	movtmi	r0, #53330	; 0xd052
 ac4:	4958415f 	ldmdbmi	r8, {r0, r1, r2, r3, r4, r6, r8, lr}^
 ac8:	45504c4d 	ldrbmi	r4, [r0, #-3149]	; 0xfffff3b3
 acc:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 ad0:	48410052 	stmdami	r1, {r1, r4, r6}^
 ad4:	53523642 	cmppl	r2, #69206016	; 0x4200000
 ad8:	54455354 	strbpl	r5, [r5], #-852	; 0xfffffcac
 adc:	504d0052 	subpl	r0, sp, r2, asr r0
 ae0:	5250415f 	subspl	r4, r0, #-1073741801	; 0xc0000017
 ae4:	52435453 	subpl	r5, r3, #1392508928	; 0x53000000
 ae8:	42504100 	subsmi	r4, r0, #0, 2
 aec:	54535235 	ldrbpl	r5, [r3], #-565	; 0xfffffdcb
 af0:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 af4:	5f434d00 	svcpl	0x00434d00
 af8:	33424841 	movtcc	r4, #10305	; 0x2841
 afc:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 b00:	52005252 	andpl	r5, r0, #536870917	; 0x20000005
 b04:	53334b43 	teqpl	r3, #68608	; 0x10c00
 b08:	00524c45 	subseq	r4, r2, r5, asr #24
 b0c:	52524556 	subspl	r4, r2, #360710144	; 0x15800000
 b10:	5f434d00 	svcpl	0x00434d00
 b14:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 b18:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 b1c:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 b20:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 b24:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
 b28:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 b2c:	5f434d00 	svcpl	0x00434d00
 b30:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 b34:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 b38:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 b3c:	55434d00 	strbpl	r4, [r3, #-3328]	; 0xfffff300
 b40:	52564944 	subspl	r4, r6, #68, 18	; 0x110000
 b44:	5f504d00 	svcpl	0x00504d00
 b48:	31425041 	cmpcc	r2, r1, asr #32
 b4c:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 b50:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 b54:	43475f50 	movtmi	r5, #32592	; 0x7f50
 b58:	50530052 	subspl	r0, r3, r2, asr r0
 b5c:	31533249 	cmpcc	r3, r9, asr #4
 b60:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 b64:	4100524c 	tstmi	r0, ip, asr #4
 b68:	44354250 	ldrtmi	r4, [r5], #-592	; 0xfffffdb0
 b6c:	00525649 	subseq	r5, r2, r9, asr #12
 b70:	334c4c50 	movtcc	r4, #52304	; 0xcc50
 b74:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 b78:	4c500032 	mrrcmi	0, 3, r0, r0, cr2	; <UNPREDICTABLE>
 b7c:	4643344c 	strbmi	r3, [r3], -ip, asr #8
 b80:	00325247 	eorseq	r5, r2, r7, asr #4
 b84:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
 b88:	534b4336 	movtpl	r4, #45878	; 0xb336
 b8c:	00524c45 	subseq	r4, r2, r5, asr #24
 b90:	415f434d 	cmpmi	pc, sp, asr #6
 b94:	45354248 	ldrmi	r4, [r5, #-584]!	; 0xfffffdb8
 b98:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 b9c:	504d0052 	subpl	r0, sp, r2, asr r0
 ba0:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 ba4:	45504c33 	ldrbmi	r4, [r0, #-3123]	; 0xfffff3cd
 ba8:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 bac:	504d0052 	subpl	r0, sp, r2, asr r0
 bb0:	415a545f 	cmpmi	sl, pc, asr r4
 bb4:	45364248 	ldrmi	r4, [r6, #-584]!	; 0xfffffdb8
 bb8:	4c45534e 	mcrrmi	3, 4, r5, r5, cr14
 bbc:	504d0052 	subpl	r0, sp, r2, asr r0
 bc0:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 bc4:	434e4532 	movtmi	r4, #58674	; 0xe532
 bc8:	0052524c 	subseq	r5, r2, ip, asr #4
 bcc:	324c4c50 	subcc	r4, ip, #80, 24	; 0x5000
 bd0:	4d005243 	sfmmi	f5, 4, [r0, #-268]	; 0xfffffef4
 bd4:	4b435353 	blmi	10d5928 <_start-0xbef326d8>
 bd8:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 bdc:	44505300 	ldrbmi	r5, [r0], #-768	; 0xfffffd00
 be0:	4b434649 	blmi	10d250c <_start-0xbef35af4>
 be4:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 be8:	54504c00 	ldrbpl	r4, [r0], #-3072	; 0xfffff400
 bec:	33324d49 	teqcc	r2, #4672	; 0x1240
 bf0:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 bf4:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 bf8:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 bfc:	504c3642 	subpl	r3, ip, r2, asr #12
 c00:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 c04:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 c08:	50415f43 	subpl	r5, r1, r3, asr #30
 c0c:	504c3242 	subpl	r3, ip, r2, asr #4
 c10:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 c14:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 c18:	50415f50 	subpl	r5, r1, r0, asr pc
 c1c:	504c3542 	subpl	r3, ip, r2, asr #10
 c20:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 c24:	69005252 	stmdbvs	r0, {r1, r4, r6, r9, ip, lr}
 c28:	735f6332 	cmpvc	pc, #-939524096	; 0xc8000000
 c2c:	00706f74 	rsbseq	r6, r0, r4, ror pc
 c30:	495f504d 	ldmdbmi	pc, {r0, r2, r3, r6, ip, lr}^	; <UNPREDICTABLE>
 c34:	46474457 			; <UNDEFINED> instruction: 0x46474457
 c38:	524c435a 	subpl	r4, ip, #1744830465	; 0x68000001
 c3c:	504d0052 	subpl	r0, sp, r2, asr r0
 c40:	5250415f 	subspl	r4, r0, #-1073741801	; 0xc0000017
 c44:	52535453 	subspl	r5, r3, #1392508928	; 0x53000000
 c48:	5f434d00 	svcpl	0x00434d00
 c4c:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 c50:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 c54:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 c58:	42484100 	submi	r4, r8, #0, 2
 c5c:	54535234 	ldrbpl	r5, [r3], #-564	; 0xfffffdcc
 c60:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 c64:	42484100 	submi	r4, r8, #0, 2
 c68:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
 c6c:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 c70:	5f504d00 	svcpl	0x00504d00
 c74:	52464943 	subpl	r4, r6, #1097728	; 0x10c000
 c78:	5f504d00 	svcpl	0x00504d00
 c7c:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 c80:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 c84:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 c88:	50415f50 	subpl	r5, r1, r0, asr pc
 c8c:	504c3542 	subpl	r3, ip, r2, asr #10
 c90:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 c94:	64005254 	strvs	r5, [r0], #-596	; 0xfffffdac
 c98:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 c9c:	0073755f 	rsbseq	r7, r3, pc, asr r5
 ca0:	5f633269 	svcpl	0x00633269
 ca4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 ca8:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
 cac:	504d0065 	subpl	r0, sp, r5, rrx
 cb0:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 cb4:	534e4533 	movtpl	r4, #58675	; 0xe533
 cb8:	00525445 	subseq	r5, r2, r5, asr #8
 cbc:	31425041 	cmpcc	r2, r1, asr #32
 cc0:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 cc4:	0052524c 	subseq	r5, r2, ip, asr #4
 cc8:	32425041 	subcc	r5, r2, #65	; 0x41
 ccc:	52564944 	subspl	r4, r6, #68, 18	; 0x110000
 cd0:	5f504d00 	svcpl	0x00504d00
 cd4:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 cd8:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 cdc:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 ce0:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 ce4:	504c3542 	subpl	r3, ip, r2, asr #10
 ce8:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 cec:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 cf0:	53525f50 	cmppl	r2, #80, 30	; 0x140
 cf4:	00535354 	subseq	r5, r3, r4, asr r3
 cf8:	415f504d 	cmpmi	pc, sp, asr #32
 cfc:	45334248 	ldrmi	r4, [r3, #-584]!	; 0xfffffdb8
 d00:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 d04:	50410052 	subpl	r0, r1, r2, asr r0
 d08:	53523342 	cmppl	r2, #134217729	; 0x8000001
 d0c:	524c4354 	subpl	r4, ip, #84, 6	; 0x50000001
 d10:	53430052 	movtpl	r0, #12370	; 0x3052
 d14:	47464349 	strbmi	r4, [r6, -r9, asr #6]
 d18:	504d0052 	subpl	r0, sp, r2, asr r0
 d1c:	4552535f 	ldrbmi	r5, [r2, #-863]	; 0xfffffca1
 d20:	524c4351 	subpl	r4, ip, #1140850689	; 0x44000001
 d24:	434d0052 	movtmi	r0, #53330	; 0xd052
 d28:	4549435f 	strbmi	r4, [r9, #-863]	; 0xfffffca1
 d2c:	434d0052 	movtmi	r0, #53330	; 0xd052
 d30:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 d34:	434e4531 	movtmi	r4, #58673	; 0xe531
 d38:	0052524c 	subseq	r5, r2, ip, asr #4
 d3c:	415f504d 	cmpmi	pc, sp, asr #32
 d40:	45354248 	ldrmi	r4, [r5, #-584]!	; 0xfffffdb8
 d44:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 d48:	504d0052 	subpl	r0, sp, r2, asr r0
 d4c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 d50:	45504c34 	ldrbmi	r4, [r0, #-3124]	; 0xfffff3cc
 d54:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 d58:	504d0052 	subpl	r0, sp, r2, asr r0
 d5c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 d60:	45504c34 	ldrbmi	r4, [r0, #-3124]	; 0xfffff3cc
 d64:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 d68:	41530052 	cmpmi	r3, r2, asr r0
 d6c:	4b433249 	blmi	10cd698 <_start-0xbef3a968>
 d70:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 d74:	4d445300 	stclmi	3, cr5, [r4, #-0]
 d78:	3231434d 	eorscc	r4, r1, #872415233	; 0x34000001
 d7c:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 d80:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 d84:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 d88:	504c3242 	subpl	r3, ip, r2, asr #4
 d8c:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 d90:	51005252 	tstpl	r0, r2, asr r2
 d94:	43495053 	movtmi	r5, #36947	; 0x9053
 d98:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 d9c:	434d0052 	movtmi	r0, #53330	; 0xd052
 da0:	4958415f 	ldmdbmi	r8, {r0, r1, r2, r3, r4, r6, r8, lr}^
 da4:	534e454d 	movtpl	r4, #58701	; 0xe54d
 da8:	00525445 	subseq	r5, r2, r5, asr #8
 dac:	34495053 	strbcc	r5, [r9], #-83	; 0xffffffad
 db0:	534b4335 	movtpl	r4, #45877	; 0xb335
 db4:	00524c45 	subseq	r4, r2, r5, asr #24
 db8:	415f504d 	cmpmi	pc, sp, asr #32
 dbc:	4c314250 	lfmmi	f4, 4, [r1], #-320	; 0xfffffec0
 dc0:	534e4550 	movtpl	r4, #58704	; 0xe550
 dc4:	00525445 	subseq	r5, r2, r5, asr #8
 dc8:	52434442 	subpl	r4, r3, #1107296256	; 0x42000000
 dcc:	42504100 	subsmi	r4, r0, #0, 2
 dd0:	54535235 	ldrbpl	r5, [r3], #-565	; 0xfffffdcb
 dd4:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 dd8:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
 ddc:	534b4331 	movtpl	r4, #45873	; 0xb331
 de0:	00524c45 	subseq	r4, r2, r5, asr #24
 de4:	34494153 	strbcc	r4, [r9], #-339	; 0xfffffead
 de8:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 dec:	4900524c 	stmdbmi	r0, {r2, r3, r6, r9, ip, lr}
 df0:	36344332 			; <UNDEFINED> instruction: 0x36344332
 df4:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 df8:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 dfc:	50415f43 	subpl	r5, r1, r3, asr #30
 e00:	4e453542 	cdpmi	5, 4, cr3, cr5, cr2, {2}
 e04:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 e08:	42535500 	subsmi	r5, r3, #0, 10
 e0c:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 e10:	4100524c 	tstmi	r0, ip, asr #4
 e14:	4b435353 	blmi	10d5b68 <_start-0xbef32498>
 e18:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 e1c:	5f434d00 	svcpl	0x00434d00
 e20:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 e24:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 e28:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 e2c:	4c4c5000 	marmi	acc0, r5, ip
 e30:	00524331 	subseq	r4, r2, r1, lsr r3
 e34:	474d4954 	smlsldmi	r4, sp, r4, r9
 e38:	45525031 	ldrbmi	r5, [r2, #-49]	; 0xffffffcf
 e3c:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 e40:	5246334c 	subpl	r3, r6, #76, 6	; 0x30000001
 e44:	00524341 	subseq	r4, r2, r1, asr #6
 e48:	334c4c50 	movtcc	r4, #52304	; 0xcc50
 e4c:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 e50:	5a540031 	bpl	1500f1c <_start-0xbeb070e4>
 e54:	4f005243 	svcmi	0x00005243
 e58:	59445243 	stmdbpl	r4, {r0, r1, r6, r9, ip, lr}^
 e5c:	504d0052 	subpl	r0, sp, r2, asr r0
 e60:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 e64:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
 e68:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 e6c:	504d0052 	subpl	r0, sp, r2, asr r0
 e70:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 e74:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
 e78:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 e7c:	434d0052 	movtmi	r0, #53330	; 0xd052
 e80:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 e84:	45504c34 	ldrbmi	r4, [r0, #-3124]	; 0xfffff3cc
 e88:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 e8c:	50410052 	subpl	r0, r1, r2, asr r0
 e90:	53523442 	cmppl	r2, #1107296256	; 0x42000000
 e94:	54455354 	strbpl	r5, [r5], #-852	; 0xfffffcac
 e98:	434d0052 	movtmi	r0, #53330	; 0xd052
 e9c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 ea0:	534e4534 	movtpl	r4, #58676	; 0xe534
 ea4:	00525445 	subseq	r5, r2, r5, asr #8
 ea8:	43434d46 	movtmi	r4, #15686	; 0x3d46
 eac:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 eb0:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 eb4:	5343324c 	movtpl	r3, #12876	; 0x324c
 eb8:	4d005247 	sfmmi	f5, 4, [r0, #-284]	; 0xfffffee4
 ebc:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 ec0:	504c3642 	subpl	r3, ip, r2, asr #12
 ec4:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 ec8:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 ecc:	49435f43 	stmdbmi	r3, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 ed0:	72005246 	andvc	r5, r0, #1610612740	; 0x60000004
 ed4:	32327365 	eorscc	r7, r2, #-1811939327	; 0x94000001
 ed8:	5f504d00 	svcpl	0x00504d00
 edc:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 ee0:	434d0052 	movtmi	r0, #53330	; 0xd052
 ee4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 ee8:	534e4536 	movtpl	r4, #58678	; 0xe536
 eec:	00525445 	subseq	r5, r2, r5, asr #8
 ef0:	6e69616d 	powvsez	f6, f1, #5.0
 ef4:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 ef8:	006e6961 	rsbeq	r6, lr, r1, ror #18
 efc:	706d6574 	rsbvc	r6, sp, r4, ror r5
 f00:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 f04:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; e4a <_start-0xc00071b6>	; <UNPREDICTABLE>
 f08:	Address 0x00000f08 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	c000835c 	andgt	r8, r0, ip, asr r3
  1c:	00000050 	andeq	r0, r0, r0, asr r0
  20:	8b040e42 	blhi	103930 <_start-0xbff046d0>
  24:	0b0d4201 	bleq	350830 <_start-0xbfcb77d0>
  28:	420d0d60 	andmi	r0, sp, #96, 26	; 0x1800
  2c:	00000ecb 	andeq	r0, r0, fp, asr #29
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	c00083ac 	andgt	r8, r0, ip, lsr #7
  3c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  40:	8b080e42 	blhi	203950 <_start-0xbfe046b0>
  44:	42018e02 	andmi	r8, r1, #2, 28
  48:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
  4c:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	c0008564 	andgt	r8, r0, r4, ror #10
  5c:	0000006c 	andeq	r0, r0, ip, rrx
  60:	8b080e42 	blhi	203970 <_start-0xbfe04690>
  64:	42018e02 	andmi	r8, r1, #2, 28
  68:	70040b0c 	andvc	r0, r4, ip, lsl #22
  6c:	00080d0c 	andeq	r0, r8, ip, lsl #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	c00085d0 	ldrdgt	r8, [r0], -r0
  7c:	00000094 	muleq	r0, r4, r0
  80:	8b040e42 	blhi	103990 <_start-0xbff04670>
  84:	0b0d4201 	bleq	350890 <_start-0xbfcb7770>
  88:	0d0d4202 	sfmeq	f4, 4, [sp, #-8]
  8c:	000ecb42 	andeq	ip, lr, r2, asr #22
  90:	00000020 	andeq	r0, r0, r0, lsr #32
  94:	00000000 	andeq	r0, r0, r0
  98:	c0008664 	andgt	r8, r0, r4, ror #12
  9c:	000003e4 	andeq	r0, r0, r4, ror #7
  a0:	8b080e42 	blhi	2039b0 <_start-0xbfe04650>
  a4:	42018e02 	andmi	r8, r1, #2, 28
  a8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  ac:	0d0c01ec 	stfeqs	f0, [ip, #-944]	; 0xfffffc50
  b0:	00000008 	andeq	r0, r0, r8
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	c0008a48 	andgt	r8, r0, r8, asr #20
  c0:	0000006c 	andeq	r0, r0, ip, rrx
  c4:	8b040e42 	blhi	1039d4 <_start-0xbff0462c>
  c8:	0b0d4201 	bleq	3508d4 <_start-0xbfcb772c>
  cc:	420d0d6e 	andmi	r0, sp, #7040	; 0x1b80
  d0:	00000ecb 	andeq	r0, r0, fp, asr #29
  d4:	00000020 	andeq	r0, r0, r0, lsr #32
  d8:	00000000 	andeq	r0, r0, r0
  dc:	c0008ab4 			; <UNDEFINED> instruction: 0xc0008ab4
  e0:	000008c8 	andeq	r0, r0, r8, asr #17
  e4:	8b080e42 	blhi	2039f4 <_start-0xbfe0460c>
  e8:	42018e02 	andmi	r8, r1, #2, 28
  ec:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  f0:	0d0c045e 	cfstrseq	mvf0, [ip, #-376]	; 0xfffffe88
  f4:	00000008 	andeq	r0, r0, r8
  f8:	00000030 	andeq	r0, r0, r0, lsr r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	c000937c 	andgt	r9, r0, ip, ror r3
 104:	0000004c 	andeq	r0, r0, ip, asr #32
 108:	810c0e42 	tsthi	ip, r2, asr #28
 10c:	83028203 	movwhi	r8, #8707	; 0x2203
 110:	140e4201 	strne	r4, [lr], #-513	; 0xfffffdff
 114:	048e058b 	streq	r0, [lr], #1419	; 0x58b
 118:	100b0c42 	andne	r0, fp, r2, asr #24
 11c:	140d0c5a 	strne	r0, [sp], #-3162	; 0xfffff3a6
 120:	0ecbce42 	cdpeq	14, 12, cr12, cr11, cr2, {2}
 124:	c2c3420c 	sbcgt	r4, r3, #12, 4	; 0xc0000000
 128:	00000ec1 	andeq	r0, r0, r1, asr #29
 12c:	00000034 	andeq	r0, r0, r4, lsr r0
 130:	00000000 	andeq	r0, r0, r0
 134:	c00093c8 	andgt	r9, r0, r8, asr #7
 138:	0000004c 	andeq	r0, r0, ip, asr #32
 13c:	80100e42 	andshi	r0, r0, r2, asr #28
 140:	82038104 	andhi	r8, r3, #4, 2
 144:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 148:	068b180e 	streq	r1, [fp], lr, lsl #16
 14c:	0c42058e 	cfstr64eq	mvdx0, [r2], {142}	; 0x8e
 150:	0c5a140b 	cfldrdeq	mvd1, [sl], {11}
 154:	ce42180d 	cdpgt	8, 4, cr1, cr2, cr13, {0}
 158:	42100ecb 	andsmi	r0, r0, #3248	; 0xcb0
 15c:	c0c1c2c3 	sbcgt	ip, r1, r3, asr #5
 160:	0000000e 	andeq	r0, r0, lr
 164:	0000000c 	andeq	r0, r0, ip
 168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 16c:	7c020001 	stcvc	0, cr0, [r2], {1}
 170:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000164 	andeq	r0, r0, r4, ror #2
 17c:	c0009414 	andgt	r9, r0, r4, lsl r4
 180:	000001e8 	andeq	r0, r0, r8, ror #3
 184:	8b040e42 	blhi	103a94 <_start-0xbff0456c>
 188:	0b0d4201 	bleq	350994 <_start-0xbfcb766c>
 18c:	0d0dec02 	stceq	12, cr14, [sp, #-8]
 190:	000ecb42 	andeq	ip, lr, r2, asr #22
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000164 	andeq	r0, r0, r4, ror #2
 19c:	c00095fc 	strdgt	r9, [r0], -ip
 1a0:	00000060 	andeq	r0, r0, r0, rrx
 1a4:	8b080e42 	blhi	203ab4 <_start-0xbfe0454c>
 1a8:	42018e02 	andmi	r8, r1, #2, 28
 1ac:	6a040b0c 	bvs	102de4 <_start-0xbff0521c>
 1b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000164 	andeq	r0, r0, r4, ror #2
 1bc:	c000965c 	andgt	r9, r0, ip, asr r6
 1c0:	00000048 	andeq	r0, r0, r8, asr #32
 1c4:	8b080e42 	blhi	203ad4 <_start-0xbfe0452c>
 1c8:	42018e02 	andmi	r8, r1, #2, 28
 1cc:	5e040b0c 	vmlapl.f64	d0, d4, d12
 1d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000164 	andeq	r0, r0, r4, ror #2
 1dc:	c00096a4 	andgt	r9, r0, r4, lsr #13
 1e0:	0000004c 	andeq	r0, r0, ip, asr #32
 1e4:	8b040e42 	blhi	103af4 <_start-0xbff0450c>
 1e8:	0b0d4201 	bleq	3509f4 <_start-0xbfcb760c>
 1ec:	420d0d5e 	andmi	r0, sp, #6016	; 0x1780
 1f0:	00000ecb 	andeq	r0, r0, fp, asr #29
 1f4:	0000000c 	andeq	r0, r0, ip
 1f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 200:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
 208:	000001f4 	strdeq	r0, [r0], -r4
 20c:	c00096f0 	strdgt	r9, [r0], -r0
 210:	00000018 	andeq	r0, r0, r8, lsl r0
 214:	8b040e42 	blhi	103b24 <_start-0xbff044dc>
 218:	0b0d4201 	bleq	350a24 <_start-0xbfcb75dc>
 21c:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
 220:	00000ecb 	andeq	r0, r0, fp, asr #29
 224:	0000000c 	andeq	r0, r0, ip
 228:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 22c:	7c020001 	stcvc	0, cr0, [r2], {1}
 230:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 234:	00000018 	andeq	r0, r0, r8, lsl r0
 238:	00000224 	andeq	r0, r0, r4, lsr #4
 23c:	c0009708 	andgt	r9, r0, r8, lsl #14
 240:	00000040 	andeq	r0, r0, r0, asr #32
 244:	8b080e42 	blhi	203b54 <_start-0xbfe044ac>
 248:	42018e02 	andmi	r8, r1, #2, 28
 24c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	00000224 	andeq	r0, r0, r4, lsr #4
 258:	c0009748 	andgt	r9, r0, r8, asr #14
 25c:	000000d8 	ldrdeq	r0, [r0], -r8
 260:	8b080e42 	blhi	203b70 <_start-0xbfe04490>
 264:	42018e02 	andmi	r8, r1, #2, 28
 268:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 26c:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
 270:	0000001c 	andeq	r0, r0, ip, lsl r0
 274:	00000224 	andeq	r0, r0, r4, lsr #4
 278:	c0009820 	andgt	r9, r0, r0, lsr #16
 27c:	000000d8 	ldrdeq	r0, [r0], -r8
 280:	8b080e42 	blhi	203b90 <_start-0xbfe04470>
 284:	42018e02 	andmi	r8, r1, #2, 28
 288:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 28c:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
 290:	0000000c 	andeq	r0, r0, ip
 294:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 298:	7c020001 	stcvc	0, cr0, [r2], {1}
 29c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a4:	00000290 	muleq	r0, r0, r2
 2a8:	c00098f8 	strdgt	r9, [r0], -r8
 2ac:	0000003c 	andeq	r0, r0, ip, lsr r0
 2b0:	8b040e42 	blhi	103bc0 <_start-0xbff04440>
 2b4:	0b0d4201 	bleq	350ac0 <_start-0xbfcb7540>
 2b8:	420d0d56 	andmi	r0, sp, #5504	; 0x1580
 2bc:	00000ecb 	andeq	r0, r0, fp, asr #29
 2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c4:	00000290 	muleq	r0, r0, r2
 2c8:	c0009934 	andgt	r9, r0, r4, lsr r9
 2cc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2d0:	8b040e42 	blhi	103be0 <_start-0xbff04420>
 2d4:	0b0d4201 	bleq	350ae0 <_start-0xbfcb7520>
 2d8:	0d0d7002 	stceq	0, cr7, [sp, #-8]
 2dc:	000ecb42 	andeq	ip, lr, r2, asr #22
 2e0:	00000018 	andeq	r0, r0, r8, lsl r0
 2e4:	00000290 	muleq	r0, r0, r2
 2e8:	c0009a24 	andgt	r9, r0, r4, lsr #20
 2ec:	000000c0 	andeq	r0, r0, r0, asr #1
 2f0:	8b080e42 	blhi	203c00 <_start-0xbfe04400>
 2f4:	42018e02 	andmi	r8, r1, #2, 28
 2f8:	00040b0c 	andeq	r0, r4, ip, lsl #22
 2fc:	00000018 	andeq	r0, r0, r8, lsl r0
 300:	00000290 	muleq	r0, r0, r2
 304:	c0009ae4 	andgt	r9, r0, r4, ror #21
 308:	000000c8 	andeq	r0, r0, r8, asr #1
 30c:	8b080e42 	blhi	203c1c <_start-0xbfe043e4>
 310:	42018e02 	andmi	r8, r1, #2, 28
 314:	00040b0c 	andeq	r0, r4, ip, lsl #22
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	00000290 	muleq	r0, r0, r2
 320:	c0009bac 	andgt	r9, r0, ip, lsr #23
 324:	00000118 	andeq	r0, r0, r8, lsl r1
 328:	8b080e42 	blhi	203c38 <_start-0xbfe043c8>
 32c:	42018e02 	andmi	r8, r1, #2, 28
 330:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 334:	080d0c86 	stmdaeq	sp, {r1, r2, r7, sl, fp}
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	00000290 	muleq	r0, r0, r2
 340:	c0009cc4 	andgt	r9, r0, r4, asr #25
 344:	000000f4 	strdeq	r0, [r0], -r4
 348:	8b080e42 	blhi	203c58 <_start-0xbfe043a8>
 34c:	42018e02 	andmi	r8, r1, #2, 28
 350:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 354:	080d0c74 	stmdaeq	sp, {r2, r4, r5, r6, sl, fp}
 358:	00000018 	andeq	r0, r0, r8, lsl r0
 35c:	00000290 	muleq	r0, r0, r2
 360:	c0009db8 			; <UNDEFINED> instruction: 0xc0009db8
 364:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 368:	8b080e42 	blhi	203c78 <_start-0xbfe04388>
 36c:	42018e02 	andmi	r8, r1, #2, 28
 370:	00040b0c 	andeq	r0, r4, ip, lsl #22
 374:	00000018 	andeq	r0, r0, r8, lsl r0
 378:	00000290 	muleq	r0, r0, r2
 37c:	c0009e88 	andgt	r9, r0, r8, lsl #29
 380:	000000c8 	andeq	r0, r0, r8, asr #1
 384:	8b080e42 	blhi	203c94 <_start-0xbfe0436c>
 388:	42018e02 	andmi	r8, r1, #2, 28
 38c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 390:	00000018 	andeq	r0, r0, r8, lsl r0
 394:	00000290 	muleq	r0, r0, r2
 398:	c0009f50 	andgt	r9, r0, r0, asr pc
 39c:	000000c8 	andeq	r0, r0, r8, asr #1
 3a0:	8b080e42 	blhi	203cb0 <_start-0xbfe04350>
 3a4:	42018e02 	andmi	r8, r1, #2, 28
 3a8:	00040b0c 	andeq	r0, r4, ip, lsl #22
 3ac:	0000000c 	andeq	r0, r0, ip
 3b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3b4:	7c020001 	stcvc	0, cr0, [r2], {1}
 3b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	000003ac 	andeq	r0, r0, ip, lsr #7
 3c4:	c000a018 	andgt	sl, r0, r8, lsl r0
 3c8:	00000070 	andeq	r0, r0, r0, ror r0
 3cc:	8b040e42 	blhi	103cdc <_start-0xbff04324>
 3d0:	0b0d4201 	bleq	350bdc <_start-0xbfcb7424>
 3d4:	420d0d70 	andmi	r0, sp, #112, 26	; 0x1c00
 3d8:	00000ecb 	andeq	r0, r0, fp, asr #29
 3dc:	00000018 	andeq	r0, r0, r8, lsl r0
 3e0:	000003ac 	andeq	r0, r0, ip, lsr #7
 3e4:	c000a088 	andgt	sl, r0, r8, lsl #1
 3e8:	000000b8 	strheq	r0, [r0], -r8
 3ec:	8b080e42 	blhi	203cfc <_start-0xbfe04304>
 3f0:	42018e02 	andmi	r8, r1, #2, 28
 3f4:	00040b0c 	andeq	r0, r4, ip, lsl #22
