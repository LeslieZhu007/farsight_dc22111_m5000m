
interface.elf:     file format elf32-littlearm


Disassembly of section .text:

c0008000 <_start>:
.text

	.global	_start
_start:
@ 异常向量表
	b reset
c0008000:	ea00000d 	b	c000803c <reset>
	ldr pc, _undefined_instruction
c0008004:	e59ff014 	ldr	pc, [pc, #20]	; c0008020 <_undefined_instruction>
	ldr pc, _software_interrupt
c0008008:	e59ff014 	ldr	pc, [pc, #20]	; c0008024 <_software_interrupt>
	ldr pc, _prefetch_abort
c000800c:	e59ff014 	ldr	pc, [pc, #20]	; c0008028 <_prefetch_abort>
	ldr pc, _data_abort
c0008010:	e59ff014 	ldr	pc, [pc, #20]	; c000802c <_data_abort>
	ldr pc, _not_used
c0008014:	e59ff014 	ldr	pc, [pc, #20]	; c0008030 <_not_used>
	ldr pc, _irq
c0008018:	e59ff014 	ldr	pc, [pc, #20]	; c0008034 <_irq>
	ldr pc, _fiq
c000801c:	e59ff014 	ldr	pc, [pc, #20]	; c0008038 <_fiq>

c0008020 <_undefined_instruction>:
c0008020:	c0008140 	andgt	r8, r0, r0, asr #2

c0008024 <_software_interrupt>:
c0008024:	c0008160 	andgt	r8, r0, r0, ror #2

c0008028 <_prefetch_abort>:
c0008028:	c0008180 	andgt	r8, r0, r0, lsl #3

c000802c <_data_abort>:
c000802c:	c00081a0 	andgt	r8, r0, r0, lsr #3

c0008030 <_not_used>:
c0008030:	c00081c0 	andgt	r8, r0, r0, asr #3

c0008034 <_irq>:
c0008034:	c00081e0 	andgt	r8, r0, r0, ror #3

c0008038 <_fiq>:
c0008038:	c0008200 	andgt	r8, r0, r0, lsl #4

c000803c <reset>:

 /* The actual reset code */
reset:
	@ 重新映射异常向量表的入口地址
	/* Set Vector Base Address Register */
	mrc p15, 0, r0, c1, c0, 0
c000803c:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic r0, #(1<<13)
c0008040:	e3c00a02 	bic	r0, r0, #8192	; 0x2000
	mcr p15, 0, r0, c1, c0, 0
c0008044:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	ldr	r0,=0xc0008000
c0008048:	e59f01b8 	ldr	r0, [pc, #440]	; c0008208 <stacktop+0x4>
	mcr	p15,0,r0,c12,c0,0		@ Vector Base Address Register
c000804c:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}

	/* Set the cpu to svc32 mode */
	mrs r0, cpsr
c0008050:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #0x1f
c0008054:	e3c0001f 	bic	r0, r0, #31
	orr r0, r0, #0xd3
c0008058:	e38000d3 	orr	r0, r0, #211	; 0xd3
	msr cpsr, r0
c000805c:	e129f000 	msr	CPSR_fc, r0

	/* Enable NEON/VFP unit */
	mrc p15, #0, r1, c1, c0, #2
c0008060:	ee111f50 	mrc	15, 0, r1, cr1, cr0, {2}
	orr r1, r1, #(0xf << 20)
c0008064:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
	mcr p15, #0, r1, c1, c0, #2
c0008068:	ee011f50 	mcr	15, 0, r1, cr1, cr0, {2}
	mov r1, #0
c000806c:	e3a01000 	mov	r1, #0
	mcr p15, #0, r1, c7, c5, #4
c0008070:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
	mov r0, #0x40000000
c0008074:	e3a00101 	mov	r0, #1073741824	; 0x40000000
	fmxr fpexc, r0
c0008078:	eee80a10 	vmsr	fpexc, r0

	/* Cache init */
	mrc	p15, 0, r0, c0, c0, 0
c000807c:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
	and	r1, r0, #0x00f00000
c0008080:	e200160f 	and	r1, r0, #15728640	; 0xf00000
	and	r2, r0, #0x0000000f
c0008084:	e200200f 	and	r2, r0, #15
	orr r2, r2, r1, lsr #20-4
c0008088:	e1822821 	orr	r2, r2, r1, lsr #16
	cmp r2, #0x30
c000808c:	e3520030 	cmp	r2, #48	; 0x30
	mrceq p15, 0, r0, c1, c0, 1
c0008090:	0e110f30 	mrceq	15, 0, r0, cr1, cr0, {1}
	orreq r0, r0, #0x6
c0008094:	03800006 	orreq	r0, r0, #6
	mcreq p15, 0, r0, c1, c0, 1
c0008098:	0e010f30 	mcreq	15, 0, r0, cr1, cr0, {1}

	/* Invalidate L1 I/D */
	mov r0, #0
c000809c:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c8, c7, 0
c00080a0:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
	mcr	p15, 0, r0, c7, c5, 0
c00080a4:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}

	/* Disable mmu stuff and caches */
	mrc p15, 0, r0, c1, c0, 0
c00080a8:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic r0, r0, #0x00002000
c00080ac:	e3c00a02 	bic	r0, r0, #8192	; 0x2000
	bic r0, r0, #0x00000007
c00080b0:	e3c00007 	bic	r0, r0, #7
	orr r0, r0, #0x00001000
c00080b4:	e3800a01 	orr	r0, r0, #4096	; 0x1000
	orr r0, r0, #0x00000002
c00080b8:	e3800002 	orr	r0, r0, #2
	orr r0, r0, #0x00000800
c00080bc:	e3800b02 	orr	r0, r0, #2048	; 0x800
	mcr p15, 0, r0, c1, c0, 0
c00080c0:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

c00080c4 <init_stack>:

	/* Initialize stacks */
	@ 初始化各种模式下的占空间
init_stack:
	ldr	r0, stacktop        /*get stack top pointer*/
c00080c4:	e59f0138 	ldr	r0, [pc, #312]	; c0008204 <stacktop>

	/********svc mode stack********/
	mov	sp, r0
c00080c8:	e1a0d000 	mov	sp, r0
	sub	r0, #128*4          /*512 byte  for irq mode of stack*/
c00080cc:	e2400c02 	sub	r0, r0, #512	; 0x200
	/********irq mode stack********/
	msr	cpsr, #0xd2
c00080d0:	e329f0d2 	msr	CPSR_fc, #210	; 0xd2
	mov	sp, r0
c00080d4:	e1a0d000 	mov	sp, r0
	sub	r0, #128*4          /*512 byte  for fiq mode of stack*/
c00080d8:	e2400c02 	sub	r0, r0, #512	; 0x200
	/********fiq mode stack********/
	msr	cpsr, #0xd1
c00080dc:	e329f0d1 	msr	CPSR_fc, #209	; 0xd1
	mov	sp, r0
c00080e0:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080e4:	e2400000 	sub	r0, r0, #0
	/********abort mode stack******/
	msr	cpsr, #0xd7
c00080e8:	e329f0d7 	msr	CPSR_fc, #215	; 0xd7
	mov	sp, r0
c00080ec:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080f0:	e2400000 	sub	r0, r0, #0
	/********undefine mode stack**/
	msr	cpsr, #0xdb
c00080f4:	e329f0db 	msr	CPSR_fc, #219	; 0xdb
	mov	sp, r0
c00080f8:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080fc:	e2400000 	sub	r0, r0, #0
    /***sys mode and usr mode stack***/
	msr	cpsr, #0x10
c0008100:	e329f010 	msr	CPSR_fc, #16
	mov	sp, r0             /*1024 byte  for user mode of stack*/
c0008104:	e1a0d000 	mov	sp, r0

    /******clear bss section********/
	@ 清除BSS段
	ldr	r0, =__bss_start	/* this is auto-relocated! */
c0008108:	e59f00fc 	ldr	r0, [pc, #252]	; c000820c <stacktop+0x8>
	ldr	r1, =__bss_end__	/* this is auto-relocated! */
c000810c:	e59f10fc 	ldr	r1, [pc, #252]	; c0008210 <stacktop+0xc>
	mov	r2, #0x00000000		/* prepare zero to clear BSS */
c0008110:	e3a02000 	mov	r2, #0

c0008114 <clbss_l>:

clbss_l: cmp r0, r1			/* while not at end of BSS */
c0008114:	e1500001 	cmp	r0, r1
	strlo r2, [r0]			/* clear 32-bit BSS word */
c0008118:	35802000 	strcc	r2, [r0]
	addlo r0, r0, #4		/* move to next */
c000811c:	32800004 	addcc	r0, r0, #4
	blo	clbss_l
c0008120:	3afffffb 	bcc	c0008114 <clbss_l>

	/* Call _main */
	ldr pc, =main     @ 汇编调用C  跳转到main.c文件的main函数中
c0008124:	e59ff0e8 	ldr	pc, [pc, #232]	; c0008214 <stacktop+0x10>
c0008128:	e320f000 	nop	{0}
c000812c:	e320f000 	nop	{0}
c0008130:	e320f000 	nop	{0}
c0008134:	e320f000 	nop	{0}
c0008138:	e320f000 	nop	{0}
c000813c:	e320f000 	nop	{0}

c0008140 <undefined_instruction>:
/*
 * Exception handlers
 */
	.align 5  // 2的5次方，=32bit 也就是4字节对其
undefined_instruction:
	b	.
c0008140:	eafffffe 	b	c0008140 <undefined_instruction>
c0008144:	e320f000 	nop	{0}
c0008148:	e320f000 	nop	{0}
c000814c:	e320f000 	nop	{0}
c0008150:	e320f000 	nop	{0}
c0008154:	e320f000 	nop	{0}
c0008158:	e320f000 	nop	{0}
c000815c:	e320f000 	nop	{0}

c0008160 <software_interrupt>:

	.align 5
software_interrupt:
	b	.
c0008160:	eafffffe 	b	c0008160 <software_interrupt>
c0008164:	e320f000 	nop	{0}
c0008168:	e320f000 	nop	{0}
c000816c:	e320f000 	nop	{0}
c0008170:	e320f000 	nop	{0}
c0008174:	e320f000 	nop	{0}
c0008178:	e320f000 	nop	{0}
c000817c:	e320f000 	nop	{0}

c0008180 <prefetch_abort>:

	.align 5
prefetch_abort:
	b	.
c0008180:	eafffffe 	b	c0008180 <prefetch_abort>
c0008184:	e320f000 	nop	{0}
c0008188:	e320f000 	nop	{0}
c000818c:	e320f000 	nop	{0}
c0008190:	e320f000 	nop	{0}
c0008194:	e320f000 	nop	{0}
c0008198:	e320f000 	nop	{0}
c000819c:	e320f000 	nop	{0}

c00081a0 <data_abort>:

	.align 5
data_abort:
	b	.
c00081a0:	eafffffe 	b	c00081a0 <data_abort>
c00081a4:	e320f000 	nop	{0}
c00081a8:	e320f000 	nop	{0}
c00081ac:	e320f000 	nop	{0}
c00081b0:	e320f000 	nop	{0}
c00081b4:	e320f000 	nop	{0}
c00081b8:	e320f000 	nop	{0}
c00081bc:	e320f000 	nop	{0}

c00081c0 <not_used>:

	.align 5
not_used:
	b	.
c00081c0:	eafffffe 	b	c00081c0 <not_used>
c00081c4:	e320f000 	nop	{0}
c00081c8:	e320f000 	nop	{0}
c00081cc:	e320f000 	nop	{0}
c00081d0:	e320f000 	nop	{0}
c00081d4:	e320f000 	nop	{0}
c00081d8:	e320f000 	nop	{0}
c00081dc:	e320f000 	nop	{0}

c00081e0 <irq>:

	.align 5
	.global irq
irq:
	sub  lr, lr, #4
c00081e0:	e24ee004 	sub	lr, lr, #4
	stmfd sp!, {r0-r12, lr}
c00081e4:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	bl do_irq
c00081e8:	eb000540 	bl	c00096f0 <do_irq>
	ldmfd sp!, {r0-r12, pc}^
c00081ec:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
c00081f0:	e320f000 	nop	{0}
c00081f4:	e320f000 	nop	{0}
c00081f8:	e320f000 	nop	{0}
c00081fc:	e320f000 	nop	{0}

c0008200 <fiq>:

	.align 5
	.global fiq
fiq:
	b .
c0008200:	eafffffe 	b	c0008200 <fiq>

c0008204 <stacktop>:
c0008204:	c000af4c 	andgt	sl, r0, ip, asr #30
	ldr	r0,=0xc0008000
c0008208:	c0008000 	andgt	r8, r0, r0
	ldr	r0, =__bss_start	/* this is auto-relocated! */
c000820c:	c000b04c 	andgt	fp, r0, ip, asr #32
	ldr	r1, =__bss_end__	/* this is auto-relocated! */
c0008210:	c000b050 	andgt	fp, r0, r0, asr r0
	ldr pc, =main     @ 汇编调用C  跳转到main.c文件的main函数中
c0008214:	c000a6e4 	andgt	sl, r0, r4, ror #13

c0008218 <__umodsi3>:
	.text
	.globl	 __umodsi3
	.type  __umodsi3       ,function
	.align 0
 __umodsi3      :
	cmp	divisor, #0
c0008218:	e3510000 	cmp	r1, #0
	beq	Ldiv0
c000821c:	0a000026 	beq	c00082bc <Ldiv0>
	mov	curbit, #1
c0008220:	e3a03001 	mov	r3, #1
	cmp	dividend, divisor
c0008224:	e1500001 	cmp	r0, r1
	movcc	pc, lr
c0008228:	31a0f00e 	movcc	pc, lr

c000822c <Loop1>:
Loop1:
	@ Unless the divisor is very big, shift it up in multiples of
	@ four bits, since this is the amount of unwinding in the main
	@ division loop.  Continue shifting until the divisor is
	@ larger than the dividend.
	cmp	divisor, #0x10000000
c000822c:	e3510201 	cmp	r1, #268435456	; 0x10000000
	cmpcc	divisor, dividend
c0008230:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #4
c0008234:	31a01201 	lslcc	r1, r1, #4
	movcc	curbit, curbit, lsl #4
c0008238:	31a03203 	lslcc	r3, r3, #4
	bcc	Loop1
c000823c:	3afffffa 	bcc	c000822c <Loop1>

c0008240 <Lbignum>:
Lbignum:
	@ For very big divisors, we must shift it a bit at a time, or
	@ we will be in danger of overflowing.
	cmp	divisor, #0x80000000
c0008240:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
	cmpcc	divisor, dividend
c0008244:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #1
c0008248:	31a01081 	lslcc	r1, r1, #1
	movcc	curbit, curbit, lsl #1
c000824c:	31a03083 	lslcc	r3, r3, #1
	bcc	Lbignum
c0008250:	3afffffa 	bcc	c0008240 <Lbignum>

c0008254 <Loop3>:
Loop3:
	@ Test for possible subtractions.  On the final pass, this may
	@ subtract too much from the dividend, so keep track of which
	@ subtractions are done, we can fix them up afterwards...
	mov	overdone, #0
c0008254:	e3a02000 	mov	r2, #0
	cmp	dividend, divisor
c0008258:	e1500001 	cmp	r0, r1
	subcs	dividend, dividend, divisor
c000825c:	20400001 	subcs	r0, r0, r1
	cmp	dividend, divisor, lsr #1
c0008260:	e15000a1 	cmp	r0, r1, lsr #1
	subcs	dividend, dividend, divisor, lsr #1
c0008264:	204000a1 	subcs	r0, r0, r1, lsr #1
	orrcs	overdone, overdone, curbit, ror #1
c0008268:	218220e3 	orrcs	r2, r2, r3, ror #1
	cmp	dividend, divisor, lsr #2
c000826c:	e1500121 	cmp	r0, r1, lsr #2
	subcs	dividend, dividend, divisor, lsr #2
c0008270:	20400121 	subcs	r0, r0, r1, lsr #2
	orrcs	overdone, overdone, curbit, ror #2
c0008274:	21822163 	orrcs	r2, r2, r3, ror #2
	cmp	dividend, divisor, lsr #3
c0008278:	e15001a1 	cmp	r0, r1, lsr #3
	subcs	dividend, dividend, divisor, lsr #3
c000827c:	204001a1 	subcs	r0, r0, r1, lsr #3
	orrcs	overdone, overdone, curbit, ror #3
c0008280:	218221e3 	orrcs	r2, r2, r3, ror #3
	mov	ip, curbit
c0008284:	e1a0c003 	mov	ip, r3
	cmp	dividend, #0			@ Early termination?
c0008288:	e3500000 	cmp	r0, #0
	movnes	curbit, curbit, lsr #4		@ No, any more bits to do?
c000828c:	11b03223 	lsrsne	r3, r3, #4
	movne	divisor, divisor, lsr #4
c0008290:	11a01221 	lsrne	r1, r1, #4
	bne	Loop3
c0008294:	1affffee 	bne	c0008254 <Loop3>
	@ the top three bits of "overdone".  Exactly which were not needed
	@ are governed by the position of the bit, stored in ip.
	@ If we terminated early, because dividend became zero,
	@ then none of the below will match, since the bit in ip will not be
	@ in the bottom nibble.
	ands	overdone, overdone, #0xe0000000
c0008298:	e212220e 	ands	r2, r2, #-536870912	; 0xe0000000
	moveq	pc, lr				@ No fixups needed
c000829c:	01a0f00e 	moveq	pc, lr
	tst	overdone, ip, ror #3
c00082a0:	e11201ec 	tst	r2, ip, ror #3
	addne	dividend, dividend, divisor, lsr #3
c00082a4:	108001a1 	addne	r0, r0, r1, lsr #3
	tst	overdone, ip, ror #2
c00082a8:	e112016c 	tst	r2, ip, ror #2
	addne	dividend, dividend, divisor, lsr #2
c00082ac:	10800121 	addne	r0, r0, r1, lsr #2
	tst	overdone, ip, ror #1
c00082b0:	e11200ec 	tst	r2, ip, ror #1
	addne	dividend, dividend, divisor, lsr #1
c00082b4:	108000a1 	addne	r0, r0, r1, lsr #1
	mov	pc, lr
c00082b8:	e1a0f00e 	mov	pc, lr

c00082bc <Ldiv0>:
Ldiv0:
	str	lr, [sp, #-4]!
c00082bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
@	bl	 __div0       (PLT)
	mov	r0, #0			@ about as wrong as it could be
c00082c0:	e3a00000 	mov	r0, #0
	ldmia	sp!, {pc}
c00082c4:	e8bd8000 	ldmfd	sp!, {pc}

c00082c8 <__udivsi3>:
	.text
	.globl	 __udivsi3
	.type  __udivsi3       ,function
	.align	0
 __udivsi3      :
	cmp	divisor, #0
c00082c8:	e3510000 	cmp	r1, #0
	beq	Ldiv0
c00082cc:	0a00001f 	beq	c0008350 <Ldiv0>
	mov	curbit, #1
c00082d0:	e3a03001 	mov	r3, #1
	mov	result, #0
c00082d4:	e3a02000 	mov	r2, #0
	cmp	dividend, divisor
c00082d8:	e1500001 	cmp	r0, r1
	bcc	Lgot_result
c00082dc:	3a000019 	bcc	c0008348 <Lgot_result>

c00082e0 <Loop1>:
Loop1:
	@ Unless the divisor is very big, shift it up in multiples of
	@ four bits, since this is the amount of unwinding in the main
	@ division loop.  Continue shifting until the divisor is
	@ larger than the dividend.
	cmp	divisor, #0x10000000
c00082e0:	e3510201 	cmp	r1, #268435456	; 0x10000000
	cmpcc	divisor, dividend
c00082e4:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #4
c00082e8:	31a01201 	lslcc	r1, r1, #4
	movcc	curbit, curbit, lsl #4
c00082ec:	31a03203 	lslcc	r3, r3, #4
	bcc	Loop1
c00082f0:	3afffffa 	bcc	c00082e0 <Loop1>

c00082f4 <Lbignum>:
Lbignum:
	@ For very big divisors, we must shift it a bit at a time, or
	@ we will be in danger of overflowing.
	cmp	divisor, #0x80000000
c00082f4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
	cmpcc	divisor, dividend
c00082f8:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #1
c00082fc:	31a01081 	lslcc	r1, r1, #1
	movcc	curbit, curbit, lsl #1
c0008300:	31a03083 	lslcc	r3, r3, #1
	bcc	Lbignum
c0008304:	3afffffa 	bcc	c00082f4 <Lbignum>

c0008308 <Loop3>:
Loop3:
	@ Test for possible subtractions, and note which bits
	@ are done in the result.  On the final pass, this may subtract
	@ too much from the dividend, but the result will be ok, since the
	@ "bit" will have been shifted out at the bottom.
	cmp	dividend, divisor
c0008308:	e1500001 	cmp	r0, r1
	subcs	dividend, dividend, divisor
c000830c:	20400001 	subcs	r0, r0, r1
	orrcs	result, result, curbit
c0008310:	21822003 	orrcs	r2, r2, r3
	cmp	dividend, divisor, lsr #1
c0008314:	e15000a1 	cmp	r0, r1, lsr #1
	subcs	dividend, dividend, divisor, lsr #1
c0008318:	204000a1 	subcs	r0, r0, r1, lsr #1
	orrcs	result, result, curbit, lsr #1
c000831c:	218220a3 	orrcs	r2, r2, r3, lsr #1
	cmp	dividend, divisor, lsr #2
c0008320:	e1500121 	cmp	r0, r1, lsr #2
	subcs	dividend, dividend, divisor, lsr #2
c0008324:	20400121 	subcs	r0, r0, r1, lsr #2
	orrcs	result, result, curbit, lsr #2
c0008328:	21822123 	orrcs	r2, r2, r3, lsr #2
	cmp	dividend, divisor, lsr #3
c000832c:	e15001a1 	cmp	r0, r1, lsr #3
	subcs	dividend, dividend, divisor, lsr #3
c0008330:	204001a1 	subcs	r0, r0, r1, lsr #3
	orrcs	result, result, curbit, lsr #3
c0008334:	218221a3 	orrcs	r2, r2, r3, lsr #3
	cmp	dividend, #0			@ Early termination?
c0008338:	e3500000 	cmp	r0, #0
	movnes	curbit, curbit, lsr #4		@ No, any more bits to do?
c000833c:	11b03223 	lsrsne	r3, r3, #4
	movne	divisor, divisor, lsr #4
c0008340:	11a01221 	lsrne	r1, r1, #4
	bne	Loop3
c0008344:	1affffef 	bne	c0008308 <Loop3>

c0008348 <Lgot_result>:
Lgot_result:
	mov	r0, result
c0008348:	e1a00002 	mov	r0, r2
	mov	pc, lr
c000834c:	e1a0f00e 	mov	pc, lr

c0008350 <Ldiv0>:
Ldiv0:
	str	lr, [sp, #-4]!
c0008350:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	@bl	 __div0       (PLT)
	mov	r0, #0			@ about as wrong as it could be
c0008354:	e3a00000 	mov	r0, #0
	ldmia	sp!, {pc}
c0008358:	e8bd8000 	ldmfd	sp!, {pc}

c000835c <__toupper>:
		c -= 'A'-'a';
	return c;
}

static inline unsigned char __toupper(unsigned char c)
{
c000835c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0008360:	e28db000 	add	fp, sp, #0
c0008364:	e24dd004 	sub	sp, sp, #4
c0008368:	e1a03000 	mov	r3, r0
c000836c:	e54b3004 	strb	r3, [fp, #-4]
	if (islower(c))
c0008370:	e55b2004 	ldrb	r2, [fp, #-4]
c0008374:	e30a3f4c 	movw	r3, #44876	; 0xaf4c
c0008378:	e34c3000 	movt	r3, #49152	; 0xc000
c000837c:	e7d33002 	ldrb	r3, [r3, r2]
c0008380:	e2033002 	and	r3, r3, #2
c0008384:	e3530000 	cmp	r3, #0
c0008388:	0a000002 	beq	c0008398 <__toupper+0x3c>
		c -= 'a'-'A';
c000838c:	e55b3004 	ldrb	r3, [fp, #-4]
c0008390:	e2433020 	sub	r3, r3, #32
c0008394:	e54b3004 	strb	r3, [fp, #-4]
	return c;
c0008398:	e55b3004 	ldrb	r3, [fp, #-4]
}
c000839c:	e1a00003 	mov	r0, r3
c00083a0:	e28bd000 	add	sp, fp, #0
c00083a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00083a8:	e12fff1e 	bx	lr

c00083ac <simple_strtoul>:
#include <ctype.h>
#include "uart.h"
#define size_t unsigned int

unsigned long simple_strtoul(const char *cp,char **endp,unsigned int base)
{
c00083ac:	e92d4800 	push	{fp, lr}
c00083b0:	e28db004 	add	fp, sp, #4
c00083b4:	e24dd014 	sub	sp, sp, #20
c00083b8:	e50b0010 	str	r0, [fp, #-16]
c00083bc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c00083c0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
	unsigned long result = 0,value;
c00083c4:	e3a03000 	mov	r3, #0
c00083c8:	e50b3008 	str	r3, [fp, #-8]

	if (*cp == '0') {
c00083cc:	e51b3010 	ldr	r3, [fp, #-16]
c00083d0:	e5d33000 	ldrb	r3, [r3]
c00083d4:	e3530030 	cmp	r3, #48	; 0x30
c00083d8:	1a00001a 	bne	c0008448 <simple_strtoul+0x9c>
		cp++;
c00083dc:	e51b3010 	ldr	r3, [fp, #-16]
c00083e0:	e2833001 	add	r3, r3, #1
c00083e4:	e50b3010 	str	r3, [fp, #-16]
		if ((*cp == 'x') && isxdigit(cp[1])) {
c00083e8:	e51b3010 	ldr	r3, [fp, #-16]
c00083ec:	e5d33000 	ldrb	r3, [r3]
c00083f0:	e3530078 	cmp	r3, #120	; 0x78
c00083f4:	1a00000e 	bne	c0008434 <simple_strtoul+0x88>
c00083f8:	e51b3010 	ldr	r3, [fp, #-16]
c00083fc:	e2833001 	add	r3, r3, #1
c0008400:	e5d33000 	ldrb	r3, [r3]
c0008404:	e1a02003 	mov	r2, r3
c0008408:	e30a3f4c 	movw	r3, #44876	; 0xaf4c
c000840c:	e34c3000 	movt	r3, #49152	; 0xc000
c0008410:	e7d33002 	ldrb	r3, [r3, r2]
c0008414:	e2033044 	and	r3, r3, #68	; 0x44
c0008418:	e3530000 	cmp	r3, #0
c000841c:	0a000004 	beq	c0008434 <simple_strtoul+0x88>
			base = 16;
c0008420:	e3a03010 	mov	r3, #16
c0008424:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			cp++;
c0008428:	e51b3010 	ldr	r3, [fp, #-16]
c000842c:	e2833001 	add	r3, r3, #1
c0008430:	e50b3010 	str	r3, [fp, #-16]
		}
		if (!base) {
c0008434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008438:	e3530000 	cmp	r3, #0
c000843c:	1a000001 	bne	c0008448 <simple_strtoul+0x9c>
			base = 8;
c0008440:	e3a03008 	mov	r3, #8
c0008444:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		}
	}
	if (!base) {
c0008448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c000844c:	e3530000 	cmp	r3, #0
c0008450:	1a00000b 	bne	c0008484 <simple_strtoul+0xd8>
		base = 10;
c0008454:	e3a0300a 	mov	r3, #10
c0008458:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	}
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c000845c:	ea000008 	b	c0008484 <simple_strtoul+0xd8>
	    ? toupper(*cp) : *cp)-'A'+10) < base) {
		result = result*base + value;
c0008460:	e51b3008 	ldr	r3, [fp, #-8]
c0008464:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
c0008468:	e0030392 	mul	r3, r2, r3
c000846c:	e51b200c 	ldr	r2, [fp, #-12]
c0008470:	e0823003 	add	r3, r2, r3
c0008474:	e50b3008 	str	r3, [fp, #-8]
		cp++;
c0008478:	e51b3010 	ldr	r3, [fp, #-16]
c000847c:	e2833001 	add	r3, r3, #1
c0008480:	e50b3010 	str	r3, [fp, #-16]
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c0008484:	e51b3010 	ldr	r3, [fp, #-16]
c0008488:	e5d33000 	ldrb	r3, [r3]
c000848c:	e1a02003 	mov	r2, r3
c0008490:	e30a3f4c 	movw	r3, #44876	; 0xaf4c
c0008494:	e34c3000 	movt	r3, #49152	; 0xc000
c0008498:	e7d33002 	ldrb	r3, [r3, r2]
c000849c:	e2033044 	and	r3, r3, #68	; 0x44
c00084a0:	e3530000 	cmp	r3, #0
c00084a4:	0a000024 	beq	c000853c <simple_strtoul+0x190>
c00084a8:	e51b3010 	ldr	r3, [fp, #-16]
c00084ac:	e5d33000 	ldrb	r3, [r3]
c00084b0:	e1a02003 	mov	r2, r3
c00084b4:	e30a3f4c 	movw	r3, #44876	; 0xaf4c
c00084b8:	e34c3000 	movt	r3, #49152	; 0xc000
c00084bc:	e7d33002 	ldrb	r3, [r3, r2]
c00084c0:	e2033004 	and	r3, r3, #4
c00084c4:	e3530000 	cmp	r3, #0
c00084c8:	0a000003 	beq	c00084dc <simple_strtoul+0x130>
c00084cc:	e51b3010 	ldr	r3, [fp, #-16]
c00084d0:	e5d33000 	ldrb	r3, [r3]
c00084d4:	e2433030 	sub	r3, r3, #48	; 0x30
c00084d8:	ea000012 	b	c0008528 <simple_strtoul+0x17c>
c00084dc:	e51b3010 	ldr	r3, [fp, #-16]
c00084e0:	e5d33000 	ldrb	r3, [r3]
c00084e4:	e1a02003 	mov	r2, r3
c00084e8:	e30a3f4c 	movw	r3, #44876	; 0xaf4c
c00084ec:	e34c3000 	movt	r3, #49152	; 0xc000
c00084f0:	e7d33002 	ldrb	r3, [r3, r2]
c00084f4:	e2033002 	and	r3, r3, #2
c00084f8:	e3530000 	cmp	r3, #0
c00084fc:	0a000006 	beq	c000851c <simple_strtoul+0x170>
	    ? toupper(*cp) : *cp)-'A'+10) < base) {
c0008500:	e51b3010 	ldr	r3, [fp, #-16]
c0008504:	e5d33000 	ldrb	r3, [r3]
c0008508:	e1a00003 	mov	r0, r3
c000850c:	ebffff92 	bl	c000835c <__toupper>
c0008510:	e1a03000 	mov	r3, r0
c0008514:	e2433037 	sub	r3, r3, #55	; 0x37
c0008518:	ea000002 	b	c0008528 <simple_strtoul+0x17c>
c000851c:	e51b3010 	ldr	r3, [fp, #-16]
c0008520:	e5d33000 	ldrb	r3, [r3]
c0008524:	e2433037 	sub	r3, r3, #55	; 0x37
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c0008528:	e50b300c 	str	r3, [fp, #-12]
c000852c:	e51b200c 	ldr	r2, [fp, #-12]
c0008530:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008534:	e1520003 	cmp	r2, r3
c0008538:	3affffc8 	bcc	c0008460 <simple_strtoul+0xb4>
	}
	if (endp)
c000853c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008540:	e3530000 	cmp	r3, #0
c0008544:	0a000002 	beq	c0008554 <simple_strtoul+0x1a8>
		*endp = (char *)cp;
c0008548:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000854c:	e51b2010 	ldr	r2, [fp, #-16]
c0008550:	e5832000 	str	r2, [r3]
	return result;
c0008554:	e51b3008 	ldr	r3, [fp, #-8]
}
c0008558:	e1a00003 	mov	r0, r3
c000855c:	e24bd004 	sub	sp, fp, #4
c0008560:	e8bd8800 	pop	{fp, pc}

c0008564 <simple_strtol>:

long simple_strtol(const char *cp,char **endp,unsigned int base)
{
c0008564:	e92d4800 	push	{fp, lr}
c0008568:	e28db004 	add	fp, sp, #4
c000856c:	e24dd00c 	sub	sp, sp, #12
c0008570:	e50b0008 	str	r0, [fp, #-8]
c0008574:	e50b100c 	str	r1, [fp, #-12]
c0008578:	e50b2010 	str	r2, [fp, #-16]
	if(*cp=='-')
c000857c:	e51b3008 	ldr	r3, [fp, #-8]
c0008580:	e5d33000 	ldrb	r3, [r3]
c0008584:	e353002d 	cmp	r3, #45	; 0x2d
c0008588:	1a000008 	bne	c00085b0 <simple_strtol+0x4c>
		return -simple_strtoul(cp+1,endp,base);
c000858c:	e51b3008 	ldr	r3, [fp, #-8]
c0008590:	e2833001 	add	r3, r3, #1
c0008594:	e51b2010 	ldr	r2, [fp, #-16]
c0008598:	e51b100c 	ldr	r1, [fp, #-12]
c000859c:	e1a00003 	mov	r0, r3
c00085a0:	ebffff81 	bl	c00083ac <simple_strtoul>
c00085a4:	e1a03000 	mov	r3, r0
c00085a8:	e2633000 	rsb	r3, r3, #0
c00085ac:	ea000004 	b	c00085c4 <simple_strtol+0x60>
	return simple_strtoul(cp,endp,base);
c00085b0:	e51b2010 	ldr	r2, [fp, #-16]
c00085b4:	e51b100c 	ldr	r1, [fp, #-12]
c00085b8:	e51b0008 	ldr	r0, [fp, #-8]
c00085bc:	ebffff7a 	bl	c00083ac <simple_strtoul>
c00085c0:	e1a03000 	mov	r3, r0
}
c00085c4:	e1a00003 	mov	r0, r3
c00085c8:	e24bd004 	sub	sp, fp, #4
c00085cc:	e8bd8800 	pop	{fp, pc}

c00085d0 <skip_atoi>:

/* we use this so that we can do without the ctype library */
#define is_digit(c)	((c) >= '0' && (c) <= '9')

static int skip_atoi(const char **s)
{
c00085d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00085d4:	e28db000 	add	fp, sp, #0
c00085d8:	e24dd008 	sub	sp, sp, #8
c00085dc:	e50b0008 	str	r0, [fp, #-8]
	int i=0;
c00085e0:	e3a03000 	mov	r3, #0
c00085e4:	e50b3004 	str	r3, [fp, #-4]

	while (is_digit(**s))
c00085e8:	ea00000e 	b	c0008628 <skip_atoi+0x58>
		i = i*10 + *((*s)++) - '0';
c00085ec:	e51b2004 	ldr	r2, [fp, #-4]
c00085f0:	e1a03002 	mov	r3, r2
c00085f4:	e1a03103 	lsl	r3, r3, #2
c00085f8:	e0833002 	add	r3, r3, r2
c00085fc:	e1a03083 	lsl	r3, r3, #1
c0008600:	e1a00003 	mov	r0, r3
c0008604:	e51b3008 	ldr	r3, [fp, #-8]
c0008608:	e5933000 	ldr	r3, [r3]
c000860c:	e2831001 	add	r1, r3, #1
c0008610:	e51b2008 	ldr	r2, [fp, #-8]
c0008614:	e5821000 	str	r1, [r2]
c0008618:	e5d33000 	ldrb	r3, [r3]
c000861c:	e0803003 	add	r3, r0, r3
c0008620:	e2433030 	sub	r3, r3, #48	; 0x30
c0008624:	e50b3004 	str	r3, [fp, #-4]
	while (is_digit(**s))
c0008628:	e51b3008 	ldr	r3, [fp, #-8]
c000862c:	e5933000 	ldr	r3, [r3]
c0008630:	e5d33000 	ldrb	r3, [r3]
c0008634:	e353002f 	cmp	r3, #47	; 0x2f
c0008638:	9a000004 	bls	c0008650 <skip_atoi+0x80>
c000863c:	e51b3008 	ldr	r3, [fp, #-8]
c0008640:	e5933000 	ldr	r3, [r3]
c0008644:	e5d33000 	ldrb	r3, [r3]
c0008648:	e3530039 	cmp	r3, #57	; 0x39
c000864c:	9affffe6 	bls	c00085ec <skip_atoi+0x1c>
	return i;
c0008650:	e51b3004 	ldr	r3, [fp, #-4]
}
c0008654:	e1a00003 	mov	r0, r3
c0008658:	e28bd000 	add	sp, fp, #0
c000865c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0008660:	e12fff1e 	bx	lr

c0008664 <number>:
#ifdef CFG_64BIT_VSPRINTF
static char * number(char * str, long long num, unsigned int base, int size, int precision ,int type)
#else
static char * number(char * str, long num, unsigned int base, int size, int precision ,int type)
#endif
{
c0008664:	e92d4800 	push	{fp, lr}
c0008668:	e28db004 	add	fp, sp, #4
c000866c:	e24dd068 	sub	sp, sp, #104	; 0x68
c0008670:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
c0008674:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
c0008678:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
c000867c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	char c,sign,tmp[66];
	const char *digits="0123456789abcdefghijklmnopqrstuvwxyz";
c0008680:	e30a36f4 	movw	r3, #42740	; 0xa6f4
c0008684:	e34c3000 	movt	r3, #49152	; 0xc000
c0008688:	e50b300c 	str	r3, [fp, #-12]
	int i;

	if (type & LARGE)
c000868c:	e59b3008 	ldr	r3, [fp, #8]
c0008690:	e2033040 	and	r3, r3, #64	; 0x40
c0008694:	e3530000 	cmp	r3, #0
c0008698:	0a000002 	beq	c00086a8 <number+0x44>
		digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
c000869c:	e30a371c 	movw	r3, #42780	; 0xa71c
c00086a0:	e34c3000 	movt	r3, #49152	; 0xc000
c00086a4:	e50b300c 	str	r3, [fp, #-12]
	if (type & LEFT)
c00086a8:	e59b3008 	ldr	r3, [fp, #8]
c00086ac:	e2033010 	and	r3, r3, #16
c00086b0:	e3530000 	cmp	r3, #0
c00086b4:	0a000002 	beq	c00086c4 <number+0x60>
		type &= ~ZEROPAD;
c00086b8:	e59b3008 	ldr	r3, [fp, #8]
c00086bc:	e3c33001 	bic	r3, r3, #1
c00086c0:	e58b3008 	str	r3, [fp, #8]
	if (base < 2 || base > 36)
c00086c4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00086c8:	e3530001 	cmp	r3, #1
c00086cc:	9a000002 	bls	c00086dc <number+0x78>
c00086d0:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00086d4:	e3530024 	cmp	r3, #36	; 0x24
c00086d8:	9a000001 	bls	c00086e4 <number+0x80>
		return 0;
c00086dc:	e3a03000 	mov	r3, #0
c00086e0:	ea0000d5 	b	c0008a3c <number+0x3d8>
	c = (type & ZEROPAD) ? '0' : ' ';
c00086e4:	e59b3008 	ldr	r3, [fp, #8]
c00086e8:	e2033001 	and	r3, r3, #1
c00086ec:	e3530000 	cmp	r3, #0
c00086f0:	0a000001 	beq	c00086fc <number+0x98>
c00086f4:	e3a03030 	mov	r3, #48	; 0x30
c00086f8:	ea000000 	b	c0008700 <number+0x9c>
c00086fc:	e3a03020 	mov	r3, #32
c0008700:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	sign = 0;
c0008704:	e3a03000 	mov	r3, #0
c0008708:	e54b3005 	strb	r3, [fp, #-5]
	if (type & SIGN) {
c000870c:	e59b3008 	ldr	r3, [fp, #8]
c0008710:	e2033002 	and	r3, r3, #2
c0008714:	e3530000 	cmp	r3, #0
c0008718:	0a00001e 	beq	c0008798 <number+0x134>
		if (num < 0) {
c000871c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008720:	e3530000 	cmp	r3, #0
c0008724:	aa000008 	bge	c000874c <number+0xe8>
			sign = '-';
c0008728:	e3a0302d 	mov	r3, #45	; 0x2d
c000872c:	e54b3005 	strb	r3, [fp, #-5]
			num = -num;
c0008730:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008734:	e2633000 	rsb	r3, r3, #0
c0008738:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
			size--;
c000873c:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008740:	e2433001 	sub	r3, r3, #1
c0008744:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c0008748:	ea000012 	b	c0008798 <number+0x134>
		} else if (type & PLUS) {
c000874c:	e59b3008 	ldr	r3, [fp, #8]
c0008750:	e2033004 	and	r3, r3, #4
c0008754:	e3530000 	cmp	r3, #0
c0008758:	0a000005 	beq	c0008774 <number+0x110>
			sign = '+';
c000875c:	e3a0302b 	mov	r3, #43	; 0x2b
c0008760:	e54b3005 	strb	r3, [fp, #-5]
			size--;
c0008764:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008768:	e2433001 	sub	r3, r3, #1
c000876c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c0008770:	ea000008 	b	c0008798 <number+0x134>
		} else if (type & SPACE) {
c0008774:	e59b3008 	ldr	r3, [fp, #8]
c0008778:	e2033008 	and	r3, r3, #8
c000877c:	e3530000 	cmp	r3, #0
c0008780:	0a000004 	beq	c0008798 <number+0x134>
			sign = ' ';
c0008784:	e3a03020 	mov	r3, #32
c0008788:	e54b3005 	strb	r3, [fp, #-5]
			size--;
c000878c:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008790:	e2433001 	sub	r3, r3, #1
c0008794:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
		}
	}
	if (type & SPECIAL) {
c0008798:	e59b3008 	ldr	r3, [fp, #8]
c000879c:	e2033020 	and	r3, r3, #32
c00087a0:	e3530000 	cmp	r3, #0
c00087a4:	0a00000c 	beq	c00087dc <number+0x178>
		if (base == 16)
c00087a8:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00087ac:	e3530010 	cmp	r3, #16
c00087b0:	1a000003 	bne	c00087c4 <number+0x160>
			size -= 2;
c00087b4:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00087b8:	e2433002 	sub	r3, r3, #2
c00087bc:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c00087c0:	ea000005 	b	c00087dc <number+0x178>
		else if (base == 8)
c00087c4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00087c8:	e3530008 	cmp	r3, #8
c00087cc:	1a000002 	bne	c00087dc <number+0x178>
			size--;
c00087d0:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00087d4:	e2433001 	sub	r3, r3, #1
c00087d8:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	}
	i = 0;
c00087dc:	e3a03000 	mov	r3, #0
c00087e0:	e50b3010 	str	r3, [fp, #-16]
	if (num == 0)
c00087e4:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c00087e8:	e3530000 	cmp	r3, #0
c00087ec:	1a000022 	bne	c000887c <number+0x218>
		tmp[i++]='0';
c00087f0:	e51b3010 	ldr	r3, [fp, #-16]
c00087f4:	e2832001 	add	r2, r3, #1
c00087f8:	e50b2010 	str	r2, [fp, #-16]
c00087fc:	e24b2004 	sub	r2, fp, #4
c0008800:	e0823003 	add	r3, r2, r3
c0008804:	e3a02030 	mov	r2, #48	; 0x30
c0008808:	e5432058 	strb	r2, [r3, #-88]	; 0xffffffa8
c000880c:	ea00001d 	b	c0008888 <number+0x224>
	else while (num != 0)
	if (i > precision)
c0008810:	e51b2010 	ldr	r2, [fp, #-16]
c0008814:	e59b3004 	ldr	r3, [fp, #4]
c0008818:	e1520003 	cmp	r2, r3
c000881c:	da000016 	ble	c000887c <number+0x218>
		tmp[i++] = digits[do_div(num,base)];
c0008820:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008824:	e51b1068 	ldr	r1, [fp, #-104]	; 0xffffff98
c0008828:	e1a00003 	mov	r0, r3
c000882c:	ebfffe79 	bl	c0008218 <__umodsi3>
c0008830:	e1a03000 	mov	r3, r0
c0008834:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
c0008838:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c000883c:	e51b1068 	ldr	r1, [fp, #-104]	; 0xffffff98
c0008840:	e1a00003 	mov	r0, r3
c0008844:	ebfffe9f 	bl	c00082c8 <__udivsi3>
c0008848:	e1a03000 	mov	r3, r0
c000884c:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
c0008850:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008854:	e1a02003 	mov	r2, r3
c0008858:	e51b300c 	ldr	r3, [fp, #-12]
c000885c:	e0832002 	add	r2, r3, r2
c0008860:	e51b3010 	ldr	r3, [fp, #-16]
c0008864:	e2831001 	add	r1, r3, #1
c0008868:	e50b1010 	str	r1, [fp, #-16]
c000886c:	e5d22000 	ldrb	r2, [r2]
c0008870:	e24b1004 	sub	r1, fp, #4
c0008874:	e0813003 	add	r3, r1, r3
c0008878:	e5432058 	strb	r2, [r3, #-88]	; 0xffffffa8
	else while (num != 0)
c000887c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008880:	e3530000 	cmp	r3, #0
c0008884:	1affffe1 	bne	c0008810 <number+0x1ac>
	precision = i;
c0008888:	e51b3010 	ldr	r3, [fp, #-16]
c000888c:	e58b3004 	str	r3, [fp, #4]
	size -= precision;
c0008890:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
c0008894:	e59b3004 	ldr	r3, [fp, #4]
c0008898:	e0423003 	sub	r3, r2, r3
c000889c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	if (!(type&(ZEROPAD+LEFT)))
c00088a0:	e59b3008 	ldr	r3, [fp, #8]
c00088a4:	e2033011 	and	r3, r3, #17
c00088a8:	e3530000 	cmp	r3, #0
c00088ac:	1a00000a 	bne	c00088dc <number+0x278>
		while(size-->0)
c00088b0:	ea000004 	b	c00088c8 <number+0x264>
			*str++ = ' ';
c00088b4:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00088b8:	e2832001 	add	r2, r3, #1
c00088bc:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00088c0:	e3a02020 	mov	r2, #32
c00088c4:	e5c32000 	strb	r2, [r3]
		while(size-->0)
c00088c8:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00088cc:	e2432001 	sub	r2, r3, #1
c00088d0:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c00088d4:	e3530000 	cmp	r3, #0
c00088d8:	cafffff5 	bgt	c00088b4 <number+0x250>
	if (sign)
c00088dc:	e55b3005 	ldrb	r3, [fp, #-5]
c00088e0:	e3530000 	cmp	r3, #0
c00088e4:	0a000004 	beq	c00088fc <number+0x298>
		*str++ = sign;
c00088e8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00088ec:	e2832001 	add	r2, r3, #1
c00088f0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00088f4:	e55b2005 	ldrb	r2, [fp, #-5]
c00088f8:	e5c32000 	strb	r2, [r3]
	if (type & SPECIAL) {
c00088fc:	e59b3008 	ldr	r3, [fp, #8]
c0008900:	e2033020 	and	r3, r3, #32
c0008904:	e3530000 	cmp	r3, #0
c0008908:	0a000016 	beq	c0008968 <number+0x304>
		if (base==8)
c000890c:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c0008910:	e3530008 	cmp	r3, #8
c0008914:	1a000005 	bne	c0008930 <number+0x2cc>
			*str++ = '0';
c0008918:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c000891c:	e2832001 	add	r2, r3, #1
c0008920:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008924:	e3a02030 	mov	r2, #48	; 0x30
c0008928:	e5c32000 	strb	r2, [r3]
c000892c:	ea00000d 	b	c0008968 <number+0x304>
		else if (base==16) {
c0008930:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c0008934:	e3530010 	cmp	r3, #16
c0008938:	1a00000a 	bne	c0008968 <number+0x304>
			*str++ = '0';
c000893c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008940:	e2832001 	add	r2, r3, #1
c0008944:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008948:	e3a02030 	mov	r2, #48	; 0x30
c000894c:	e5c32000 	strb	r2, [r3]
			*str++ = digits[33];
c0008950:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008954:	e2832001 	add	r2, r3, #1
c0008958:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c000895c:	e51b200c 	ldr	r2, [fp, #-12]
c0008960:	e5d22021 	ldrb	r2, [r2, #33]	; 0x21
c0008964:	e5c32000 	strb	r2, [r3]
		}
	}
	if (!(type & LEFT))
c0008968:	e59b3008 	ldr	r3, [fp, #8]
c000896c:	e2033010 	and	r3, r3, #16
c0008970:	e3530000 	cmp	r3, #0
c0008974:	1a000010 	bne	c00089bc <number+0x358>
		while (size-- > 0)
c0008978:	ea000004 	b	c0008990 <number+0x32c>
			*str++ = c;
c000897c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008980:	e2832001 	add	r2, r3, #1
c0008984:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008988:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
c000898c:	e5c32000 	strb	r2, [r3]
		while (size-- > 0)
c0008990:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008994:	e2432001 	sub	r2, r3, #1
c0008998:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c000899c:	e3530000 	cmp	r3, #0
c00089a0:	cafffff5 	bgt	c000897c <number+0x318>
	while (i < precision--)
c00089a4:	ea000004 	b	c00089bc <number+0x358>
		*str++ = '0';
c00089a8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00089ac:	e2832001 	add	r2, r3, #1
c00089b0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00089b4:	e3a02030 	mov	r2, #48	; 0x30
c00089b8:	e5c32000 	strb	r2, [r3]
	while (i < precision--)
c00089bc:	e59b3004 	ldr	r3, [fp, #4]
c00089c0:	e2432001 	sub	r2, r3, #1
c00089c4:	e58b2004 	str	r2, [fp, #4]
c00089c8:	e51b2010 	ldr	r2, [fp, #-16]
c00089cc:	e1520003 	cmp	r2, r3
c00089d0:	bafffff4 	blt	c00089a8 <number+0x344>
	while (i-- > 0)
c00089d4:	ea000007 	b	c00089f8 <number+0x394>
		*str++ = tmp[i];
c00089d8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00089dc:	e2832001 	add	r2, r3, #1
c00089e0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00089e4:	e24b105c 	sub	r1, fp, #92	; 0x5c
c00089e8:	e51b2010 	ldr	r2, [fp, #-16]
c00089ec:	e0812002 	add	r2, r1, r2
c00089f0:	e5d22000 	ldrb	r2, [r2]
c00089f4:	e5c32000 	strb	r2, [r3]
	while (i-- > 0)
c00089f8:	e51b3010 	ldr	r3, [fp, #-16]
c00089fc:	e2432001 	sub	r2, r3, #1
c0008a00:	e50b2010 	str	r2, [fp, #-16]
c0008a04:	e3530000 	cmp	r3, #0
c0008a08:	cafffff2 	bgt	c00089d8 <number+0x374>
	while (size-- > 0)
c0008a0c:	ea000004 	b	c0008a24 <number+0x3c0>
		*str++ = ' ';
c0008a10:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008a14:	e2832001 	add	r2, r3, #1
c0008a18:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008a1c:	e3a02020 	mov	r2, #32
c0008a20:	e5c32000 	strb	r2, [r3]
	while (size-- > 0)
c0008a24:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008a28:	e2432001 	sub	r2, r3, #1
c0008a2c:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c0008a30:	e3530000 	cmp	r3, #0
c0008a34:	cafffff5 	bgt	c0008a10 <number+0x3ac>
	return str;
c0008a38:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
}
c0008a3c:	e1a00003 	mov	r0, r3
c0008a40:	e24bd004 	sub	sp, fp, #4
c0008a44:	e8bd8800 	pop	{fp, pc}

c0008a48 <strnlen>:

/* Forward decl. needed for IP address printing stuff... */
int sprintf(char * buf, const char *fmt, ...);
size_t strnlen(const char * s, size_t count)
{
c0008a48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0008a4c:	e28db000 	add	fp, sp, #0
c0008a50:	e24dd00c 	sub	sp, sp, #12
c0008a54:	e50b0008 	str	r0, [fp, #-8]
c0008a58:	e50b100c 	str	r1, [fp, #-12]
	const char *sc;

	for (sc = s; count-- && *sc != '\0'; ++sc)
c0008a5c:	e51b3008 	ldr	r3, [fp, #-8]
c0008a60:	e50b3004 	str	r3, [fp, #-4]
c0008a64:	ea000002 	b	c0008a74 <strnlen+0x2c>
c0008a68:	e51b3004 	ldr	r3, [fp, #-4]
c0008a6c:	e2833001 	add	r3, r3, #1
c0008a70:	e50b3004 	str	r3, [fp, #-4]
c0008a74:	e51b300c 	ldr	r3, [fp, #-12]
c0008a78:	e2432001 	sub	r2, r3, #1
c0008a7c:	e50b200c 	str	r2, [fp, #-12]
c0008a80:	e3530000 	cmp	r3, #0
c0008a84:	0a000003 	beq	c0008a98 <strnlen+0x50>
c0008a88:	e51b3004 	ldr	r3, [fp, #-4]
c0008a8c:	e5d33000 	ldrb	r3, [r3]
c0008a90:	e3530000 	cmp	r3, #0
c0008a94:	1afffff3 	bne	c0008a68 <strnlen+0x20>
		/* nothing */;
	return sc - s;
c0008a98:	e51b2004 	ldr	r2, [fp, #-4]
c0008a9c:	e51b3008 	ldr	r3, [fp, #-8]
c0008aa0:	e0423003 	sub	r3, r2, r3
}
c0008aa4:	e1a00003 	mov	r0, r3
c0008aa8:	e28bd000 	add	sp, fp, #0
c0008aac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0008ab0:	e12fff1e 	bx	lr

c0008ab4 <vsprintf>:
int vsprintf(char *buf, const char *fmt, va_list args)
{
c0008ab4:	e92d4800 	push	{fp, lr}
c0008ab8:	e28db004 	add	fp, sp, #4
c0008abc:	e24dd044 	sub	sp, sp, #68	; 0x44
c0008ac0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
c0008ac4:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
c0008ac8:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'q' for integer fields */

	for (str=buf ; *fmt ; ++fmt) {
c0008acc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c0008ad0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
c0008ad4:	ea00021b 	b	c0009348 <vsprintf+0x894>
		if (*fmt != '%') {
c0008ad8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008adc:	e5d33000 	ldrb	r3, [r3]
c0008ae0:	e3530025 	cmp	r3, #37	; 0x25
c0008ae4:	0a000006 	beq	c0008b04 <vsprintf+0x50>
			*str++ = *fmt;
c0008ae8:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
c0008aec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008af0:	e2831001 	add	r1, r3, #1
c0008af4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c0008af8:	e5d22000 	ldrb	r2, [r2]
c0008afc:	e5c32000 	strb	r2, [r3]
			continue;
c0008b00:	ea00020d 	b	c000933c <vsprintf+0x888>
		}

		/* process flags */
		flags = 0;
c0008b04:	e3a03000 	mov	r3, #0
c0008b08:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		repeat:
			++fmt;		/* this also skips first '%' */
c0008b0c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008b10:	e2833001 	add	r3, r3, #1
c0008b14:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			switch (*fmt) {
c0008b18:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008b1c:	e5d33000 	ldrb	r3, [r3]
c0008b20:	e2433020 	sub	r3, r3, #32
c0008b24:	e3530010 	cmp	r3, #16
c0008b28:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c0008b2c:	ea000024 	b	c0008bc4 <vsprintf+0x110>
c0008b30:	c0008b94 	mulgt	r0, r4, fp
c0008b34:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b38:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b3c:	c0008ba4 	andgt	r8, r0, r4, lsr #23
c0008b40:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b44:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b48:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b4c:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b50:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b54:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b58:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b5c:	c0008b84 	andgt	r8, r0, r4, lsl #23
c0008b60:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b64:	c0008b74 	andgt	r8, r0, r4, ror fp
c0008b68:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b6c:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b70:	c0008bb4 			; <UNDEFINED> instruction: 0xc0008bb4
				case '-': flags |= LEFT; goto repeat;
c0008b74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b78:	e3833010 	orr	r3, r3, #16
c0008b7c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008b80:	eaffffe1 	b	c0008b0c <vsprintf+0x58>
				case '+': flags |= PLUS; goto repeat;
c0008b84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b88:	e3833004 	orr	r3, r3, #4
c0008b8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008b90:	eaffffdd 	b	c0008b0c <vsprintf+0x58>
				case ' ': flags |= SPACE; goto repeat;
c0008b94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b98:	e3833008 	orr	r3, r3, #8
c0008b9c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008ba0:	eaffffd9 	b	c0008b0c <vsprintf+0x58>
				case '#': flags |= SPECIAL; goto repeat;
c0008ba4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008ba8:	e3833020 	orr	r3, r3, #32
c0008bac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008bb0:	eaffffd5 	b	c0008b0c <vsprintf+0x58>
				case '0': flags |= ZEROPAD; goto repeat;
c0008bb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008bb8:	e3833001 	orr	r3, r3, #1
c0008bbc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008bc0:	eaffffd1 	b	c0008b0c <vsprintf+0x58>
				}

		/* get field width */
		field_width = -1;
c0008bc4:	e3e03000 	mvn	r3, #0
c0008bc8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		if (is_digit(*fmt))
c0008bcc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008bd0:	e5d33000 	ldrb	r3, [r3]
c0008bd4:	e353002f 	cmp	r3, #47	; 0x2f
c0008bd8:	9a000008 	bls	c0008c00 <vsprintf+0x14c>
c0008bdc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008be0:	e5d33000 	ldrb	r3, [r3]
c0008be4:	e3530039 	cmp	r3, #57	; 0x39
c0008be8:	8a000004 	bhi	c0008c00 <vsprintf+0x14c>
			field_width = skip_atoi(&fmt);
c0008bec:	e24b303c 	sub	r3, fp, #60	; 0x3c
c0008bf0:	e1a00003 	mov	r0, r3
c0008bf4:	ebfffe75 	bl	c00085d0 <skip_atoi>
c0008bf8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
c0008bfc:	ea000014 	b	c0008c54 <vsprintf+0x1a0>
		else if (*fmt == '*') {
c0008c00:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c04:	e5d33000 	ldrb	r3, [r3]
c0008c08:	e353002a 	cmp	r3, #42	; 0x2a
c0008c0c:	1a000010 	bne	c0008c54 <vsprintf+0x1a0>
			++fmt;
c0008c10:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c14:	e2833001 	add	r3, r3, #1
c0008c18:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			/* it's the next argument */
			field_width = va_arg(args, int);
c0008c1c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008c20:	e2832004 	add	r2, r3, #4
c0008c24:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008c28:	e5933000 	ldr	r3, [r3]
c0008c2c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			if (field_width < 0) {
c0008c30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008c34:	e3530000 	cmp	r3, #0
c0008c38:	aa000005 	bge	c0008c54 <vsprintf+0x1a0>
				field_width = -field_width;
c0008c3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008c40:	e2633000 	rsb	r3, r3, #0
c0008c44:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
				flags |= LEFT;
c0008c48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008c4c:	e3833010 	orr	r3, r3, #16
c0008c50:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			}
		}

		/* get the precision */
		precision = -1;
c0008c54:	e3e03000 	mvn	r3, #0
c0008c58:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		if (*fmt == '.') {
c0008c5c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c60:	e5d33000 	ldrb	r3, [r3]
c0008c64:	e353002e 	cmp	r3, #46	; 0x2e
c0008c68:	1a000020 	bne	c0008cf0 <vsprintf+0x23c>
			++fmt;
c0008c6c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c70:	e2833001 	add	r3, r3, #1
c0008c74:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			if (is_digit(*fmt))
c0008c78:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c7c:	e5d33000 	ldrb	r3, [r3]
c0008c80:	e353002f 	cmp	r3, #47	; 0x2f
c0008c84:	9a000008 	bls	c0008cac <vsprintf+0x1f8>
c0008c88:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c8c:	e5d33000 	ldrb	r3, [r3]
c0008c90:	e3530039 	cmp	r3, #57	; 0x39
c0008c94:	8a000004 	bhi	c0008cac <vsprintf+0x1f8>
				precision = skip_atoi(&fmt);
c0008c98:	e24b303c 	sub	r3, fp, #60	; 0x3c
c0008c9c:	e1a00003 	mov	r0, r3
c0008ca0:	ebfffe4a 	bl	c00085d0 <skip_atoi>
c0008ca4:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
c0008ca8:	ea00000b 	b	c0008cdc <vsprintf+0x228>
			else if (*fmt == '*') {
c0008cac:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cb0:	e5d33000 	ldrb	r3, [r3]
c0008cb4:	e353002a 	cmp	r3, #42	; 0x2a
c0008cb8:	1a000007 	bne	c0008cdc <vsprintf+0x228>
				++fmt;
c0008cbc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cc0:	e2833001 	add	r3, r3, #1
c0008cc4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
				/* it's the next argument */
				precision = va_arg(args, int);
c0008cc8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008ccc:	e2832004 	add	r2, r3, #4
c0008cd0:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008cd4:	e5933000 	ldr	r3, [r3]
c0008cd8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
			}
			if (precision < 0)
c0008cdc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0008ce0:	e3530000 	cmp	r3, #0
c0008ce4:	aa000001 	bge	c0008cf0 <vsprintf+0x23c>
				precision = 0;
c0008ce8:	e3a03000 	mov	r3, #0
c0008cec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		}

		/* get the conversion qualifier */
		qualifier = -1;
c0008cf0:	e3e03000 	mvn	r3, #0
c0008cf4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
c0008cf8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cfc:	e5d33000 	ldrb	r3, [r3]
c0008d00:	e3530068 	cmp	r3, #104	; 0x68
c0008d04:	0a000017 	beq	c0008d68 <vsprintf+0x2b4>
c0008d08:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d0c:	e5d33000 	ldrb	r3, [r3]
c0008d10:	e353006c 	cmp	r3, #108	; 0x6c
c0008d14:	0a000013 	beq	c0008d68 <vsprintf+0x2b4>
c0008d18:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d1c:	e5d33000 	ldrb	r3, [r3]
c0008d20:	e353004c 	cmp	r3, #76	; 0x4c
c0008d24:	0a00000f 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d28:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d2c:	e5d33000 	ldrb	r3, [r3]
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
c0008d30:	e353005a 	cmp	r3, #90	; 0x5a
c0008d34:	0a00000b 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d38:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d3c:	e5d33000 	ldrb	r3, [r3]
c0008d40:	e353007a 	cmp	r3, #122	; 0x7a
c0008d44:	0a000007 	beq	c0008d68 <vsprintf+0x2b4>
c0008d48:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d4c:	e5d33000 	ldrb	r3, [r3]
c0008d50:	e3530074 	cmp	r3, #116	; 0x74
c0008d54:	0a000003 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'q' ) {
c0008d58:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d5c:	e5d33000 	ldrb	r3, [r3]
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d60:	e3530071 	cmp	r3, #113	; 0x71
c0008d64:	1a000012 	bne	c0008db4 <vsprintf+0x300>
			qualifier = *fmt;
c0008d68:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d6c:	e5d33000 	ldrb	r3, [r3]
c0008d70:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
			if (qualifier == 'l' && *(fmt+1) == 'l') {
c0008d74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0008d78:	e353006c 	cmp	r3, #108	; 0x6c
c0008d7c:	1a000009 	bne	c0008da8 <vsprintf+0x2f4>
c0008d80:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d84:	e2833001 	add	r3, r3, #1
c0008d88:	e5d33000 	ldrb	r3, [r3]
c0008d8c:	e353006c 	cmp	r3, #108	; 0x6c
c0008d90:	1a000004 	bne	c0008da8 <vsprintf+0x2f4>
				qualifier = 'q';
c0008d94:	e3a03071 	mov	r3, #113	; 0x71
c0008d98:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
				++fmt;
c0008d9c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008da0:	e2833001 	add	r3, r3, #1
c0008da4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			}
			++fmt;
c0008da8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008dac:	e2833001 	add	r3, r3, #1
c0008db0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
		}

		/* default base */
		base = 10;
c0008db4:	e3a0300a 	mov	r3, #10
c0008db8:	e50b3010 	str	r3, [fp, #-16]

		switch (*fmt) {
c0008dbc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008dc0:	e5d33000 	ldrb	r3, [r3]
c0008dc4:	e2433025 	sub	r3, r3, #37	; 0x25
c0008dc8:	e3530053 	cmp	r3, #83	; 0x53
c0008dcc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c0008dd0:	ea0000fc 	b	c00091c8 <vsprintf+0x714>
c0008dd4:	c000917c 	andgt	r9, r0, ip, ror r1
c0008dd8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ddc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008dec:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008dfc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e00:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e04:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e08:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e0c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e10:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e14:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e18:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e1c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e20:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e24:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e28:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e2c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e30:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e34:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e38:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e3c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e40:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e44:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e48:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e4c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e50:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e54:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e58:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e5c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e60:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e64:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e68:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e6c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e70:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e74:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e78:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e7c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e80:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e84:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e88:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e8c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e90:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e94:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e98:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e9c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ea0:	c00091a0 	andgt	r9, r0, r0, lsr #3
c0008ea4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ea8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eac:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ebc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ecc:	c0008f24 	andgt	r8, r0, r4, lsr #30
c0008ed0:	c00091b8 			; <UNDEFINED> instruction: 0xc00091b8
c0008ed4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ed8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008edc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ee0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ee4:	c00091b8 			; <UNDEFINED> instruction: 0xc00091b8
c0008ee8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eec:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef8:	c0009118 	andgt	r9, r0, r8, lsl r1
c0008efc:	c0009194 	mulgt	r0, r4, r1
c0008f00:	c00090bc 	strhgt	r9, [r0], -ip
c0008f04:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f08:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f0c:	c0008fbc 			; <UNDEFINED> instruction: 0xc0008fbc
c0008f10:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f14:	c0009218 	andgt	r9, r0, r8, lsl r2
c0008f18:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f1c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f20:	c00091ac 	andgt	r9, r0, ip, lsr #3
		case 'c':
			if (!(flags & LEFT))
c0008f24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008f28:	e2033010 	and	r3, r3, #16
c0008f2c:	e3530000 	cmp	r3, #0
c0008f30:	1a00000b 	bne	c0008f64 <vsprintf+0x4b0>
				while (--field_width > 0)
c0008f34:	ea000004 	b	c0008f4c <vsprintf+0x498>
					*str++ = ' ';
c0008f38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f3c:	e2832001 	add	r2, r3, #1
c0008f40:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f44:	e3a02020 	mov	r2, #32
c0008f48:	e5c32000 	strb	r2, [r3]
				while (--field_width > 0)
c0008f4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008f50:	e2433001 	sub	r3, r3, #1
c0008f54:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
c0008f58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008f5c:	e3530000 	cmp	r3, #0
c0008f60:	cafffff4 	bgt	c0008f38 <vsprintf+0x484>
			*str++ = (unsigned char) va_arg(args, int);
c0008f64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008f68:	e2832004 	add	r2, r3, #4
c0008f6c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008f70:	e5931000 	ldr	r1, [r3]
c0008f74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f78:	e2832001 	add	r2, r3, #1
c0008f7c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f80:	e6ef2071 	uxtb	r2, r1
c0008f84:	e5c32000 	strb	r2, [r3]
			while (--field_width > 0)
c0008f88:	ea000004 	b	c0008fa0 <vsprintf+0x4ec>
				*str++ = ' ';
c0008f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f90:	e2832001 	add	r2, r3, #1
c0008f94:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f98:	e3a02020 	mov	r2, #32
c0008f9c:	e5c32000 	strb	r2, [r3]
			while (--field_width > 0)
c0008fa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008fa4:	e2433001 	sub	r3, r3, #1
c0008fa8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
c0008fac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008fb0:	e3530000 	cmp	r3, #0
c0008fb4:	cafffff4 	bgt	c0008f8c <vsprintf+0x4d8>
			continue;
c0008fb8:	ea0000df 	b	c000933c <vsprintf+0x888>

		case 's':
			s = va_arg(args, char *);
c0008fbc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008fc0:	e2832004 	add	r2, r3, #4
c0008fc4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008fc8:	e5933000 	ldr	r3, [r3]
c0008fcc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			if (!s)
c0008fd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008fd4:	e3530000 	cmp	r3, #0
c0008fd8:	1a000002 	bne	c0008fe8 <vsprintf+0x534>
				s = "<NULL>";
c0008fdc:	e30a3744 	movw	r3, #42820	; 0xa744
c0008fe0:	e34c3000 	movt	r3, #49152	; 0xc000
c0008fe4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

			len = strnlen(s, precision);
c0008fe8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0008fec:	e1a01003 	mov	r1, r3
c0008ff0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
c0008ff4:	ebfffe93 	bl	c0008a48 <strnlen>
c0008ff8:	e1a03000 	mov	r3, r0
c0008ffc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

			if (!(flags & LEFT))
c0009000:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0009004:	e2033010 	and	r3, r3, #16
c0009008:	e3530000 	cmp	r3, #0
c000900c:	1a00000b 	bne	c0009040 <vsprintf+0x58c>
				while (len < field_width--)
c0009010:	ea000004 	b	c0009028 <vsprintf+0x574>
					*str++ = ' ';
c0009014:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009018:	e2832001 	add	r2, r3, #1
c000901c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009020:	e3a02020 	mov	r2, #32
c0009024:	e5c32000 	strb	r2, [r3]
				while (len < field_width--)
c0009028:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c000902c:	e2432001 	sub	r2, r3, #1
c0009030:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
c0009034:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
c0009038:	e1520003 	cmp	r2, r3
c000903c:	bafffff4 	blt	c0009014 <vsprintf+0x560>
			for (i = 0; i < len; ++i)
c0009040:	e3a03000 	mov	r3, #0
c0009044:	e50b300c 	str	r3, [fp, #-12]
c0009048:	ea00000a 	b	c0009078 <vsprintf+0x5c4>
				*str++ = *s++;
c000904c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
c0009050:	e2823001 	add	r3, r2, #1
c0009054:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
c0009058:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000905c:	e2831001 	add	r1, r3, #1
c0009060:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c0009064:	e5d22000 	ldrb	r2, [r2]
c0009068:	e5c32000 	strb	r2, [r3]
			for (i = 0; i < len; ++i)
c000906c:	e51b300c 	ldr	r3, [fp, #-12]
c0009070:	e2833001 	add	r3, r3, #1
c0009074:	e50b300c 	str	r3, [fp, #-12]
c0009078:	e51b200c 	ldr	r2, [fp, #-12]
c000907c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
c0009080:	e1520003 	cmp	r2, r3
c0009084:	bafffff0 	blt	c000904c <vsprintf+0x598>
			while (len < field_width--)
c0009088:	ea000004 	b	c00090a0 <vsprintf+0x5ec>
				*str++ = ' ';
c000908c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009090:	e2832001 	add	r2, r3, #1
c0009094:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009098:	e3a02020 	mov	r2, #32
c000909c:	e5c32000 	strb	r2, [r3]
			while (len < field_width--)
c00090a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c00090a4:	e2432001 	sub	r2, r3, #1
c00090a8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
c00090ac:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
c00090b0:	e1520003 	cmp	r2, r3
c00090b4:	bafffff4 	blt	c000908c <vsprintf+0x5d8>
			continue;
c00090b8:	ea00009f 	b	c000933c <vsprintf+0x888>

		case 'p':
			if (field_width == -1) {
c00090bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c00090c0:	e3730001 	cmn	r3, #1
c00090c4:	1a000004 	bne	c00090dc <vsprintf+0x628>
				field_width = 2*sizeof(void *);
c00090c8:	e3a03008 	mov	r3, #8
c00090cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
				flags |= ZEROPAD;
c00090d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00090d4:	e3833001 	orr	r3, r3, #1
c00090d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			}
			str = number(str,
				(unsigned long) va_arg(args, void *), 16,
c00090dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00090e0:	e2832004 	add	r2, r3, #4
c00090e4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00090e8:	e5933000 	ldr	r3, [r3]
			str = number(str,
c00090ec:	e1a01003 	mov	r1, r3
c00090f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00090f4:	e58d3004 	str	r3, [sp, #4]
c00090f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c00090fc:	e58d3000 	str	r3, [sp]
c0009100:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0009104:	e3a02010 	mov	r2, #16
c0009108:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
c000910c:	ebfffd54 	bl	c0008664 <number>
c0009110:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
				field_width, precision, flags);
			continue;
c0009114:	ea000088 	b	c000933c <vsprintf+0x888>


		case 'n':
			if (qualifier == 'l') {
c0009118:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c000911c:	e353006c 	cmp	r3, #108	; 0x6c
c0009120:	1a00000a 	bne	c0009150 <vsprintf+0x69c>
				long * ip = va_arg(args, long *);
c0009124:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009128:	e2832004 	add	r2, r3, #4
c000912c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009130:	e5933000 	ldr	r3, [r3]
c0009134:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
				*ip = (str - buf);
c0009138:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c000913c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c0009140:	e0422003 	sub	r2, r2, r3
c0009144:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
c0009148:	e5832000 	str	r2, [r3]
			} else {
				int * ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
c000914c:	ea00007a 	b	c000933c <vsprintf+0x888>
				int * ip = va_arg(args, int *);
c0009150:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009154:	e2832004 	add	r2, r3, #4
c0009158:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c000915c:	e5933000 	ldr	r3, [r3]
c0009160:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
				*ip = (str - buf);
c0009164:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c0009168:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c000916c:	e0422003 	sub	r2, r2, r3
c0009170:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
c0009174:	e5832000 	str	r2, [r3]
			continue;
c0009178:	ea00006f 	b	c000933c <vsprintf+0x888>

		case '%':
			*str++ = '%';
c000917c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009180:	e2832001 	add	r2, r3, #1
c0009184:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009188:	e3a02025 	mov	r2, #37	; 0x25
c000918c:	e5c32000 	strb	r2, [r3]
			continue;
c0009190:	ea000069 	b	c000933c <vsprintf+0x888>

		/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
c0009194:	e3a03008 	mov	r3, #8
c0009198:	e50b3010 	str	r3, [fp, #-16]
			break;
c000919c:	ea00001e 	b	c000921c <vsprintf+0x768>

		case 'X':
			flags |= LARGE;
c00091a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00091a4:	e3833040 	orr	r3, r3, #64	; 0x40
c00091a8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		case 'x':
			base = 16;
c00091ac:	e3a03010 	mov	r3, #16
c00091b0:	e50b3010 	str	r3, [fp, #-16]
			break;
c00091b4:	ea000018 	b	c000921c <vsprintf+0x768>

		case 'd':
		case 'i':
			flags |= SIGN;
c00091b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00091bc:	e3833002 	orr	r3, r3, #2
c00091c0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		case 'u':
			break;
c00091c4:	ea000013 	b	c0009218 <vsprintf+0x764>

		default:
			*str++ = '%';
c00091c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c00091cc:	e2832001 	add	r2, r3, #1
c00091d0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c00091d4:	e3a02025 	mov	r2, #37	; 0x25
c00091d8:	e5c32000 	strb	r2, [r3]
			if (*fmt)
c00091dc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c00091e0:	e5d33000 	ldrb	r3, [r3]
c00091e4:	e3530000 	cmp	r3, #0
c00091e8:	0a000006 	beq	c0009208 <vsprintf+0x754>
				*str++ = *fmt;
c00091ec:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
c00091f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c00091f4:	e2831001 	add	r1, r3, #1
c00091f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c00091fc:	e5d22000 	ldrb	r2, [r2]
c0009200:	e5c32000 	strb	r2, [r3]
			else
				--fmt;
			continue;
c0009204:	ea00004c 	b	c000933c <vsprintf+0x888>
				--fmt;
c0009208:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c000920c:	e2433001 	sub	r3, r3, #1
c0009210:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			continue;
c0009214:	ea000048 	b	c000933c <vsprintf+0x888>
			break;
c0009218:	e320f000 	nop	{0}
#ifdef CFG_64BIT_VSPRINTF
		if (qualifier == 'q')  /* "quad" for 64 bit variables */
			num = va_arg(args, unsigned long long);
		else
#endif
		if (qualifier == 'l') {
c000921c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009220:	e353006c 	cmp	r3, #108	; 0x6c
c0009224:	1a000005 	bne	c0009240 <vsprintf+0x78c>
			num = va_arg(args, unsigned long);
c0009228:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c000922c:	e2832004 	add	r2, r3, #4
c0009230:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009234:	e5933000 	ldr	r3, [r3]
c0009238:	e50b3008 	str	r3, [fp, #-8]
c000923c:	ea000034 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 'Z' || qualifier == 'z') {
c0009240:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009244:	e353005a 	cmp	r3, #90	; 0x5a
c0009248:	0a000002 	beq	c0009258 <vsprintf+0x7a4>
c000924c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009250:	e353007a 	cmp	r3, #122	; 0x7a
c0009254:	1a000005 	bne	c0009270 <vsprintf+0x7bc>
			num = va_arg(args, size_t);
c0009258:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c000925c:	e2832004 	add	r2, r3, #4
c0009260:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009264:	e5933000 	ldr	r3, [r3]
c0009268:	e50b3008 	str	r3, [fp, #-8]
c000926c:	ea000028 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 't') {
c0009270:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009274:	e3530074 	cmp	r3, #116	; 0x74
c0009278:	1a000005 	bne	c0009294 <vsprintf+0x7e0>
			num = va_arg(args, long);
c000927c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009280:	e2832004 	add	r2, r3, #4
c0009284:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009288:	e5933000 	ldr	r3, [r3]
c000928c:	e50b3008 	str	r3, [fp, #-8]
c0009290:	ea00001f 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 'h') {
c0009294:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009298:	e3530068 	cmp	r3, #104	; 0x68
c000929c:	1a00000d 	bne	c00092d8 <vsprintf+0x824>
			num = (unsigned short) va_arg(args, int);
c00092a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00092a4:	e2832004 	add	r2, r3, #4
c00092a8:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00092ac:	e5933000 	ldr	r3, [r3]
c00092b0:	e6ff3073 	uxth	r3, r3
c00092b4:	e50b3008 	str	r3, [fp, #-8]
			if (flags & SIGN)
c00092b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00092bc:	e2033002 	and	r3, r3, #2
c00092c0:	e3530000 	cmp	r3, #0
c00092c4:	0a000012 	beq	c0009314 <vsprintf+0x860>
				num = (short) num;
c00092c8:	e51b3008 	ldr	r3, [fp, #-8]
c00092cc:	e6bf3073 	sxth	r3, r3
c00092d0:	e50b3008 	str	r3, [fp, #-8]
c00092d4:	ea00000e 	b	c0009314 <vsprintf+0x860>
		} else if (flags & SIGN)
c00092d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00092dc:	e2033002 	and	r3, r3, #2
c00092e0:	e3530000 	cmp	r3, #0
c00092e4:	0a000005 	beq	c0009300 <vsprintf+0x84c>
			num = va_arg(args, int);
c00092e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00092ec:	e2832004 	add	r2, r3, #4
c00092f0:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00092f4:	e5933000 	ldr	r3, [r3]
c00092f8:	e50b3008 	str	r3, [fp, #-8]
c00092fc:	ea000004 	b	c0009314 <vsprintf+0x860>
		else
			num = va_arg(args, unsigned int);
c0009300:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009304:	e2832004 	add	r2, r3, #4
c0009308:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c000930c:	e5933000 	ldr	r3, [r3]
c0009310:	e50b3008 	str	r3, [fp, #-8]
		str = number(str, num, base, field_width, precision, flags);
c0009314:	e51b1008 	ldr	r1, [fp, #-8]
c0009318:	e51b2010 	ldr	r2, [fp, #-16]
c000931c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0009320:	e58d3004 	str	r3, [sp, #4]
c0009324:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0009328:	e58d3000 	str	r3, [sp]
c000932c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0009330:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
c0009334:	ebfffcca 	bl	c0008664 <number>
c0009338:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
	for (str=buf ; *fmt ; ++fmt) {
c000933c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0009340:	e2833001 	add	r3, r3, #1
c0009344:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
c0009348:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c000934c:	e5d33000 	ldrb	r3, [r3]
c0009350:	e3530000 	cmp	r3, #0
c0009354:	1afffddf 	bne	c0008ad8 <vsprintf+0x24>
	}
	*str = '\0';
c0009358:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000935c:	e3a02000 	mov	r2, #0
c0009360:	e5c32000 	strb	r2, [r3]
	return str-buf;
c0009364:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c0009368:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c000936c:	e0423003 	sub	r3, r2, r3
}
c0009370:	e1a00003 	mov	r0, r3
c0009374:	e24bd004 	sub	sp, fp, #4
c0009378:	e8bd8800 	pop	{fp, pc}

c000937c <sprintf>:

int sprintf(char * buf, const char *fmt, ...)
{
c000937c:	e92d000e 	push	{r1, r2, r3}
c0009380:	e92d4800 	push	{fp, lr}
c0009384:	e28db004 	add	fp, sp, #4
c0009388:	e24dd00c 	sub	sp, sp, #12
c000938c:	e50b0010 	str	r0, [fp, #-16]
	va_list args;
	int i;

	va_start(args, fmt);
c0009390:	e28b3008 	add	r3, fp, #8
c0009394:	e50b300c 	str	r3, [fp, #-12]
	i=vsprintf(buf,fmt,args);
c0009398:	e51b300c 	ldr	r3, [fp, #-12]
c000939c:	e1a02003 	mov	r2, r3
c00093a0:	e59b1004 	ldr	r1, [fp, #4]
c00093a4:	e51b0010 	ldr	r0, [fp, #-16]
c00093a8:	ebfffdc1 	bl	c0008ab4 <vsprintf>
c00093ac:	e50b0008 	str	r0, [fp, #-8]
	va_end(args);
	return i;
c00093b0:	e51b3008 	ldr	r3, [fp, #-8]
}
c00093b4:	e1a00003 	mov	r0, r3
c00093b8:	e24bd004 	sub	sp, fp, #4
c00093bc:	e8bd4800 	pop	{fp, lr}
c00093c0:	e28dd00c 	add	sp, sp, #12
c00093c4:	e12fff1e 	bx	lr

c00093c8 <printf>:

void printf (const char *fmt, ...)
{
c00093c8:	e92d000f 	push	{r0, r1, r2, r3}
c00093cc:	e92d4800 	push	{fp, lr}
c00093d0:	e28db004 	add	fp, sp, #4
c00093d4:	e24dd068 	sub	sp, sp, #104	; 0x68
	va_list args;
	char printbuffer[100];
	va_start (args, fmt);
c00093d8:	e28b3008 	add	r3, fp, #8
c00093dc:	e50b3008 	str	r3, [fp, #-8]

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	vsprintf (printbuffer, fmt, args);
c00093e0:	e51b2008 	ldr	r2, [fp, #-8]
c00093e4:	e24b306c 	sub	r3, fp, #108	; 0x6c
c00093e8:	e59b1004 	ldr	r1, [fp, #4]
c00093ec:	e1a00003 	mov	r0, r3
c00093f0:	ebfffdaf 	bl	c0008ab4 <vsprintf>
	va_end (args);
	__uart_puts (printbuffer);
c00093f4:	e24b306c 	sub	r3, fp, #108	; 0x6c
c00093f8:	e1a00003 	mov	r0, r3
c00093fc:	eb000096 	bl	c000965c <__uart_puts>
}
c0009400:	e320f000 	nop	{0}
c0009404:	e24bd004 	sub	sp, fp, #4
c0009408:	e8bd4800 	pop	{fp, lr}
c000940c:	e28dd010 	add	sp, sp, #16
c0009410:	e12fff1e 	bx	lr

c0009414 <__uart_init>:
#include "stm32mp1xx_gpio.h"
#include "stm32mp1xx_uart.h"
// UART4_TX : PG11  AF6
// UART4_RX : PB2   AF8
void __uart_init()
{
c0009414:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009418:	e28db000 	add	fp, sp, #0
   	// GPIOB2 设置为复用功能
   	GPIOB->MODER &= (~(0x3 << 4));
c000941c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009420:	e3453000 	movt	r3, #20480	; 0x5000
c0009424:	e5932000 	ldr	r2, [r3]
c0009428:	e3a03a03 	mov	r3, #12288	; 0x3000
c000942c:	e3453000 	movt	r3, #20480	; 0x5000
c0009430:	e3c22030 	bic	r2, r2, #48	; 0x30
c0009434:	e5832000 	str	r2, [r3]
   	GPIOB->MODER |= (0x2 << 4);
c0009438:	e3a03a03 	mov	r3, #12288	; 0x3000
c000943c:	e3453000 	movt	r3, #20480	; 0x5000
c0009440:	e5932000 	ldr	r2, [r3]
c0009444:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009448:	e3453000 	movt	r3, #20480	; 0x5000
c000944c:	e3822020 	orr	r2, r2, #32
c0009450:	e5832000 	str	r2, [r3]
	GPIOB->AFRL &= (~(0xF << 8));
c0009454:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009458:	e3453000 	movt	r3, #20480	; 0x5000
c000945c:	e5932020 	ldr	r2, [r3, #32]
c0009460:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009464:	e3453000 	movt	r3, #20480	; 0x5000
c0009468:	e3c22c0f 	bic	r2, r2, #3840	; 0xf00
c000946c:	e5832020 	str	r2, [r3, #32]
	GPIOB->AFRL |= (0x8 << 8);
c0009470:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009474:	e3453000 	movt	r3, #20480	; 0x5000
c0009478:	e5932020 	ldr	r2, [r3, #32]
c000947c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009480:	e3453000 	movt	r3, #20480	; 0x5000
c0009484:	e3822b02 	orr	r2, r2, #2048	; 0x800
c0009488:	e5832020 	str	r2, [r3, #32]
	// GPIOG11 设置为复用功能 
	GPIOG->MODER &= (~(0x3 << 22));
c000948c:	e3a03902 	mov	r3, #32768	; 0x8000
c0009490:	e3453000 	movt	r3, #20480	; 0x5000
c0009494:	e5932000 	ldr	r2, [r3]
c0009498:	e3a03902 	mov	r3, #32768	; 0x8000
c000949c:	e3453000 	movt	r3, #20480	; 0x5000
c00094a0:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
c00094a4:	e5832000 	str	r2, [r3]
	GPIOG->MODER |= (0x2 << 4);
c00094a8:	e3a03902 	mov	r3, #32768	; 0x8000
c00094ac:	e3453000 	movt	r3, #20480	; 0x5000
c00094b0:	e5932000 	ldr	r2, [r3]
c00094b4:	e3a03902 	mov	r3, #32768	; 0x8000
c00094b8:	e3453000 	movt	r3, #20480	; 0x5000
c00094bc:	e3822020 	orr	r2, r2, #32
c00094c0:	e5832000 	str	r2, [r3]
	GPIOG->AFRH &= (~(0xF << 12));
c00094c4:	e3a03902 	mov	r3, #32768	; 0x8000
c00094c8:	e3453000 	movt	r3, #20480	; 0x5000
c00094cc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00094d0:	e3a03902 	mov	r3, #32768	; 0x8000
c00094d4:	e3453000 	movt	r3, #20480	; 0x5000
c00094d8:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
c00094dc:	e5832024 	str	r2, [r3, #36]	; 0x24
	GPIOG->AFRH |= (0x6 << 12);
c00094e0:	e3a03902 	mov	r3, #32768	; 0x8000
c00094e4:	e3453000 	movt	r3, #20480	; 0x5000
c00094e8:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00094ec:	e3a03902 	mov	r3, #32768	; 0x8000
c00094f0:	e3453000 	movt	r3, #20480	; 0x5000
c00094f4:	e3822a06 	orr	r2, r2, #24576	; 0x6000
c00094f8:	e5832024 	str	r2, [r3, #36]	; 0x24
	// 设置数据长度为8位   USART_CR1  
	USART4->CR1 &= (~(0x1 << 28));
c00094fc:	e3a03000 	mov	r3, #0
c0009500:	e3443001 	movt	r3, #16385	; 0x4001
c0009504:	e5932000 	ldr	r2, [r3]
c0009508:	e3a03000 	mov	r3, #0
c000950c:	e3443001 	movt	r3, #16385	; 0x4001
c0009510:	e3c22201 	bic	r2, r2, #268435456	; 0x10000000
c0009514:	e5832000 	str	r2, [r3]
	USART4->CR1 &= (~(0x1 << 12));
c0009518:	e3a03000 	mov	r3, #0
c000951c:	e3443001 	movt	r3, #16385	; 0x4001
c0009520:	e5932000 	ldr	r2, [r3]
c0009524:	e3a03000 	mov	r3, #0
c0009528:	e3443001 	movt	r3, #16385	; 0x4001
c000952c:	e3c22a01 	bic	r2, r2, #4096	; 0x1000
c0009530:	e5832000 	str	r2, [r3]
	// 采样率为16位 
	USART4->CR1 &= (~(0x1 << 15));
c0009534:	e3a03000 	mov	r3, #0
c0009538:	e3443001 	movt	r3, #16385	; 0x4001
c000953c:	e5932000 	ldr	r2, [r3]
c0009540:	e3a03000 	mov	r3, #0
c0009544:	e3443001 	movt	r3, #16385	; 0x4001
c0009548:	e3c22902 	bic	r2, r2, #32768	; 0x8000
c000954c:	e5832000 	str	r2, [r3]
	// 设置波特率为115200bps 
	USART4->PRESC &= (~(0xF << 0));
c0009550:	e3a03000 	mov	r3, #0
c0009554:	e3443001 	movt	r3, #16385	; 0x4001
c0009558:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
c000955c:	e3a03000 	mov	r3, #0
c0009560:	e3443001 	movt	r3, #16385	; 0x4001
c0009564:	e3c2200f 	bic	r2, r2, #15
c0009568:	e583202c 	str	r2, [r3, #44]	; 0x2c
	USART4->BRR = 0xD0;
c000956c:	e3a03000 	mov	r3, #0
c0009570:	e3443001 	movt	r3, #16385	; 0x4001
c0009574:	e3a020d0 	mov	r2, #208	; 0xd0
c0009578:	e583200c 	str	r2, [r3, #12]
	// 停止位1位
	USART4->CR2 &= (~(0x3 << 12));
c000957c:	e3a03000 	mov	r3, #0
c0009580:	e3443001 	movt	r3, #16385	; 0x4001
c0009584:	e5932004 	ldr	r2, [r3, #4]
c0009588:	e3a03000 	mov	r3, #0
c000958c:	e3443001 	movt	r3, #16385	; 0x4001
c0009590:	e3c22a03 	bic	r2, r2, #12288	; 0x3000
c0009594:	e5832004 	str	r2, [r3, #4]
	// 使能USART串口 
	USART4->CR1 |= (0x1 << 0);
c0009598:	e3a03000 	mov	r3, #0
c000959c:	e3443001 	movt	r3, #16385	; 0x4001
c00095a0:	e5932000 	ldr	r2, [r3]
c00095a4:	e3a03000 	mov	r3, #0
c00095a8:	e3443001 	movt	r3, #16385	; 0x4001
c00095ac:	e3822001 	orr	r2, r2, #1
c00095b0:	e5832000 	str	r2, [r3]
	// 使能USART的发送或者接收功能 
	USART4->CR1 |= (0x1 << 3);
c00095b4:	e3a03000 	mov	r3, #0
c00095b8:	e3443001 	movt	r3, #16385	; 0x4001
c00095bc:	e5932000 	ldr	r2, [r3]
c00095c0:	e3a03000 	mov	r3, #0
c00095c4:	e3443001 	movt	r3, #16385	; 0x4001
c00095c8:	e3822008 	orr	r2, r2, #8
c00095cc:	e5832000 	str	r2, [r3]
	USART4->CR1 |= (0x1 << 2);
c00095d0:	e3a03000 	mov	r3, #0
c00095d4:	e3443001 	movt	r3, #16385	; 0x4001
c00095d8:	e5932000 	ldr	r2, [r3]
c00095dc:	e3a03000 	mov	r3, #0
c00095e0:	e3443001 	movt	r3, #16385	; 0x4001
c00095e4:	e3822004 	orr	r2, r2, #4
c00095e8:	e5832000 	str	r2, [r3]

}
c00095ec:	e320f000 	nop	{0}
c00095f0:	e28bd000 	add	sp, fp, #0
c00095f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00095f8:	e12fff1e 	bx	lr

c00095fc <__uart_putc>:

void __uart_putc(const char data)
{
c00095fc:	e92d4800 	push	{fp, lr}
c0009600:	e28db004 	add	fp, sp, #4
c0009604:	e24dd004 	sub	sp, sp, #4
c0009608:	e1a03000 	mov	r3, r0
c000960c:	e54b3008 	strb	r3, [fp, #-8]
	while (!(USART4->ISR & (0x1 << 7)));
c0009610:	e320f000 	nop	{0}
c0009614:	e3a03000 	mov	r3, #0
c0009618:	e3443001 	movt	r3, #16385	; 0x4001
c000961c:	e593301c 	ldr	r3, [r3, #28]
c0009620:	e2033080 	and	r3, r3, #128	; 0x80
c0009624:	e3530000 	cmp	r3, #0
c0009628:	0afffff9 	beq	c0009614 <__uart_putc+0x18>
	USART4->TDR = data;
c000962c:	e3a03000 	mov	r3, #0
c0009630:	e3443001 	movt	r3, #16385	; 0x4001
c0009634:	e55b2008 	ldrb	r2, [fp, #-8]
c0009638:	e5832028 	str	r2, [r3, #40]	; 0x28
	if (data == '\n')
c000963c:	e55b3008 	ldrb	r3, [fp, #-8]
c0009640:	e353000a 	cmp	r3, #10
c0009644:	1a000001 	bne	c0009650 <__uart_putc+0x54>
		__uart_putc('\r');
c0009648:	e3a0000d 	mov	r0, #13
c000964c:	ebffffea 	bl	c00095fc <__uart_putc>
}
c0009650:	e320f000 	nop	{0}
c0009654:	e24bd004 	sub	sp, fp, #4
c0009658:	e8bd8800 	pop	{fp, pc}

c000965c <__uart_puts>:
void __uart_puts(const  char  *pstr)
{
c000965c:	e92d4800 	push	{fp, lr}
c0009660:	e28db004 	add	fp, sp, #4
c0009664:	e24dd004 	sub	sp, sp, #4
c0009668:	e50b0008 	str	r0, [fp, #-8]
	while(*pstr != '\0')
c000966c:	ea000005 	b	c0009688 <__uart_puts+0x2c>
		__uart_putc(*pstr++);
c0009670:	e51b3008 	ldr	r3, [fp, #-8]
c0009674:	e2832001 	add	r2, r3, #1
c0009678:	e50b2008 	str	r2, [fp, #-8]
c000967c:	e5d33000 	ldrb	r3, [r3]
c0009680:	e1a00003 	mov	r0, r3
c0009684:	ebffffdc 	bl	c00095fc <__uart_putc>
	while(*pstr != '\0')
c0009688:	e51b3008 	ldr	r3, [fp, #-8]
c000968c:	e5d33000 	ldrb	r3, [r3]
c0009690:	e3530000 	cmp	r3, #0
c0009694:	1afffff5 	bne	c0009670 <__uart_puts+0x14>
}
c0009698:	e320f000 	nop	{0}
c000969c:	e24bd004 	sub	sp, fp, #4
c00096a0:	e8bd8800 	pop	{fp, pc}

c00096a4 <__uart_getc>:

char __uart_getc(void)
{
c00096a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00096a8:	e28db000 	add	fp, sp, #0
c00096ac:	e24dd004 	sub	sp, sp, #4
	char ch;
	while(!(USART4->ISR & (0x1 << 5)));
c00096b0:	e320f000 	nop	{0}
c00096b4:	e3a03000 	mov	r3, #0
c00096b8:	e3443001 	movt	r3, #16385	; 0x4001
c00096bc:	e593301c 	ldr	r3, [r3, #28]
c00096c0:	e2033020 	and	r3, r3, #32
c00096c4:	e3530000 	cmp	r3, #0
c00096c8:	0afffff9 	beq	c00096b4 <__uart_getc+0x10>
	ch = (char)USART4->RDR;
c00096cc:	e3a03000 	mov	r3, #0
c00096d0:	e3443001 	movt	r3, #16385	; 0x4001
c00096d4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
c00096d8:	e54b3001 	strb	r3, [fp, #-1]
	return ch;
c00096dc:	e55b3001 	ldrb	r3, [fp, #-1]
}
c00096e0:	e1a00003 	mov	r0, r3
c00096e4:	e28bd000 	add	sp, fp, #0
c00096e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00096ec:	e12fff1e 	bx	lr

c00096f0 <do_irq>:
extern void printf(const char *fmt, ...);
unsigned int i = 0;
void do_irq(void) 
{
c00096f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00096f4:	e28db000 	add	fp, sp, #0
}
c00096f8:	e320f000 	nop	{0}
c00096fc:	e28bd000 	add	sp, fp, #0
c0009700:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009704:	e12fff1e 	bx	lr

c0009708 <hal_beep_init>:
#include "pwm.h"


//蜂鸣器初始化 TIM4_CH1   PB6
void hal_beep_init()
{
c0009708:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c000970c:	e28db000 	add	fp, sp, #0
    //rcc章节初始化
    RCC->MP_APB1ENSETR |= (0x1<<2);
c0009710:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c0009714:	e5933a00 	ldr	r3, [r3, #2560]	; 0xa00
c0009718:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c000971c:	e3833004 	orr	r3, r3, #4
c0009720:	e5823a00 	str	r3, [r2, #2560]	; 0xa00
    //使能GPIOB组
    RCC->MP_AHB4ENSETR |= (0x1<<1);
c0009724:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c0009728:	e5933a28 	ldr	r3, [r3, #2600]	; 0xa28
c000972c:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c0009730:	e3833002 	orr	r3, r3, #2
c0009734:	e5823a28 	str	r3, [r2, #2600]	; 0xa28
    

    //gpio章节初始化
    GPIOB->MODER &= (~(0x3<<12)); //设置PB6引脚为复用功能  MODER[13:12] = 10
c0009738:	e3a03a03 	mov	r3, #12288	; 0x3000
c000973c:	e3453000 	movt	r3, #20480	; 0x5000
c0009740:	e5932000 	ldr	r2, [r3]
c0009744:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009748:	e3453000 	movt	r3, #20480	; 0x5000
c000974c:	e3c22a03 	bic	r2, r2, #12288	; 0x3000
c0009750:	e5832000 	str	r2, [r3]
    GPIOB->MODER |=  (0x2<<12);    //0x1<<13
c0009754:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009758:	e3453000 	movt	r3, #20480	; 0x5000
c000975c:	e5932000 	ldr	r2, [r3]
c0009760:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009764:	e3453000 	movt	r3, #20480	; 0x5000
c0009768:	e3822a02 	orr	r2, r2, #8192	; 0x2000
c000976c:	e5832000 	str	r2, [r3]

    GPIOB->AFRL &= (~(0xf<<24));  //设置PB6引脚复用功能为TIM4_CH1功能,AFRL[27:24] = 0010
c0009770:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009774:	e3453000 	movt	r3, #20480	; 0x5000
c0009778:	e5932020 	ldr	r2, [r3, #32]
c000977c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009780:	e3453000 	movt	r3, #20480	; 0x5000
c0009784:	e3c2240f 	bic	r2, r2, #251658240	; 0xf000000
c0009788:	e5832020 	str	r2, [r3, #32]
    GPIOB->AFRL |= (0x2<<24); //AF2 //0x1<<25
c000978c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009790:	e3453000 	movt	r3, #20480	; 0x5000
c0009794:	e5932020 	ldr	r2, [r3, #32]
c0009798:	e3a03a03 	mov	r3, #12288	; 0x3000
c000979c:	e3453000 	movt	r3, #20480	; 0x5000
c00097a0:	e3822402 	orr	r2, r2, #33554432	; 0x2000000
c00097a4:	e5832020 	str	r2, [r3, #32]

    //time4章节初始化
    //1. 设置预分频TIMx_PSC寄存器
    TIM4->PSC |= (209-1);
c00097a8:	e3a03a02 	mov	r3, #8192	; 0x2000
c00097ac:	e3443000 	movt	r3, #16384	; 0x4000
c00097b0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c00097b4:	e3a03a02 	mov	r3, #8192	; 0x2000
c00097b8:	e3443000 	movt	r3, #16384	; 0x4000
c00097bc:	e38220d0 	orr	r2, r2, #208	; 0xd0
c00097c0:	e5832028 	str	r2, [r3, #40]	; 0x28

    //2.设置PWM方波周期1/1000，频率=1000 ARR 1000
    TIM4->ARR |= 1000;
c00097c4:	e3a03a02 	mov	r3, #8192	; 0x2000
c00097c8:	e3443000 	movt	r3, #16384	; 0x4000
c00097cc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
c00097d0:	e3a03a02 	mov	r3, #8192	; 0x2000
c00097d4:	e3443000 	movt	r3, #16384	; 0x4000
c00097d8:	e3822ffa 	orr	r2, r2, #1000	; 0x3e8
c00097dc:	e583202c 	str	r2, [r3, #44]	; 0x2c

    //3.设置PWM方波占空比 CCR1 = 300
    TIM4->CCR1 |= 300;
c00097e0:	e3a03a02 	mov	r3, #8192	; 0x2000
c00097e4:	e3443000 	movt	r3, #16384	; 0x4000
c00097e8:	e5932034 	ldr	r2, [r3, #52]	; 0x34
c00097ec:	e3a03a02 	mov	r3, #8192	; 0x2000
c00097f0:	e3443000 	movt	r3, #16384	; 0x4000
c00097f4:	e3822f4b 	orr	r2, r2, #300	; 0x12c
c00097f8:	e5832034 	str	r2, [r3, #52]	; 0x34

    //4.设置TIM4_CH1通道输出PWM模式  CCMR1[16][6:4] = 0110
    TIM4->CCMR1 &=(~(0x1<<16));
c00097fc:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009800:	e3443000 	movt	r3, #16384	; 0x4000
c0009804:	e5932018 	ldr	r2, [r3, #24]
c0009808:	e3a03a02 	mov	r3, #8192	; 0x2000
c000980c:	e3443000 	movt	r3, #16384	; 0x4000
c0009810:	e3c22801 	bic	r2, r2, #65536	; 0x10000
c0009814:	e5832018 	str	r2, [r3, #24]
    TIM4->CCMR1 &=(~(0x7<<4));
c0009818:	e3a03a02 	mov	r3, #8192	; 0x2000
c000981c:	e3443000 	movt	r3, #16384	; 0x4000
c0009820:	e5932018 	ldr	r2, [r3, #24]
c0009824:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009828:	e3443000 	movt	r3, #16384	; 0x4000
c000982c:	e3c22070 	bic	r2, r2, #112	; 0x70
c0009830:	e5832018 	str	r2, [r3, #24]
    TIM4->CCMR1 |=(0x3<<5);
c0009834:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009838:	e3443000 	movt	r3, #16384	; 0x4000
c000983c:	e5932018 	ldr	r2, [r3, #24]
c0009840:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009844:	e3443000 	movt	r3, #16384	; 0x4000
c0009848:	e3822060 	orr	r2, r2, #96	; 0x60
c000984c:	e5832018 	str	r2, [r3, #24]

    //5.设置 TIM4_CH1通道比较和捕获寄存器预加载使能 CCMR1[3] = 1
    TIM4->CCMR1 |= (0x1<<3);
c0009850:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009854:	e3443000 	movt	r3, #16384	; 0x4000
c0009858:	e5932018 	ldr	r2, [r3, #24]
c000985c:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009860:	e3443000 	movt	r3, #16384	; 0x4000
c0009864:	e3822008 	orr	r2, r2, #8
c0009868:	e5832018 	str	r2, [r3, #24]

    //6. 设置 TIM4_CH1通道输出 CCMR1[1:0] = 00
    TIM4->CCMR1 &= (~(0x3<<0));
c000986c:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009870:	e3443000 	movt	r3, #16384	; 0x4000
c0009874:	e5932018 	ldr	r2, [r3, #24]
c0009878:	e3a03a02 	mov	r3, #8192	; 0x2000
c000987c:	e3443000 	movt	r3, #16384	; 0x4000
c0009880:	e3c22003 	bic	r2, r2, #3
c0009884:	e5832018 	str	r2, [r3, #24]

    //7. 设置TIM4_CH1 捕获/比较寄存器输出极性 CCER[3] = 1
    TIM4->CCER |= (0x1<<3);
c0009888:	e3a03a02 	mov	r3, #8192	; 0x2000
c000988c:	e3443000 	movt	r3, #16384	; 0x4000
c0009890:	e5932020 	ldr	r2, [r3, #32]
c0009894:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009898:	e3443000 	movt	r3, #16384	; 0x4000
c000989c:	e3822008 	orr	r2, r2, #8
c00098a0:	e5832020 	str	r2, [r3, #32]
    //8. 设置TIM4_CH1 通道捕获/比较寄存器为高电平 CCER[1] = 0
    TIM4->CCER &= (~(0x1<<1));
c00098a4:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098a8:	e3443000 	movt	r3, #16384	; 0x4000
c00098ac:	e5932020 	ldr	r2, [r3, #32]
c00098b0:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098b4:	e3443000 	movt	r3, #16384	; 0x4000
c00098b8:	e3c22002 	bic	r2, r2, #2
c00098bc:	e5832020 	str	r2, [r3, #32]

    //9. 设置TIM4_CH1 通道 捕获/比较寄存器输出使能 CCER[0] = 0
    TIM4->CCER |= (0x1<<0);
c00098c0:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098c4:	e3443000 	movt	r3, #16384	; 0x4000
c00098c8:	e5932020 	ldr	r2, [r3, #32]
c00098cc:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098d0:	e3443000 	movt	r3, #16384	; 0x4000
c00098d4:	e3822001 	orr	r2, r2, #1
c00098d8:	e5832020 	str	r2, [r3, #32]

    //10. 设置TIM4_CH1 通道自动重载计数器使能 CR1[7] = 1
    TIM4->CR1 |= (0x1<<7);
c00098dc:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098e0:	e3443000 	movt	r3, #16384	; 0x4000
c00098e4:	e5932000 	ldr	r2, [r3]
c00098e8:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098ec:	e3443000 	movt	r3, #16384	; 0x4000
c00098f0:	e3822080 	orr	r2, r2, #128	; 0x80
c00098f4:	e5832000 	str	r2, [r3]
    //11. 设置TIM4_CH1 通道边沿对齐模式 CR1[6:5] = 00
    TIM4->CR1 &= (~(0x3<<5));
c00098f8:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098fc:	e3443000 	movt	r3, #16384	; 0x4000
c0009900:	e5932000 	ldr	r2, [r3]
c0009904:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009908:	e3443000 	movt	r3, #16384	; 0x4000
c000990c:	e3c22060 	bic	r2, r2, #96	; 0x60
c0009910:	e5832000 	str	r2, [r3]
    //12. 设置TIM4_CH1 通道递减技术方式  CR1[4] = 1
    TIM4->CR1 |= (0x1<<4);
c0009914:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009918:	e3443000 	movt	r3, #16384	; 0x4000
c000991c:	e5932000 	ldr	r2, [r3]
c0009920:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009924:	e3443000 	movt	r3, #16384	; 0x4000
c0009928:	e3822010 	orr	r2, r2, #16
c000992c:	e5832000 	str	r2, [r3]
    //13. 设置TIM4_CH1 通道计数器使能 CR1[0] = 1
    TIM4->CR1 |= (0x1<<0);
c0009930:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009934:	e3443000 	movt	r3, #16384	; 0x4000
c0009938:	e5932000 	ldr	r2, [r3]
c000993c:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009940:	e3443000 	movt	r3, #16384	; 0x4000
c0009944:	e3822001 	orr	r2, r2, #1
c0009948:	e5832000 	str	r2, [r3]
    TIM4->ARR |= 1000;

    // TIMx_CCR1
    TIM4->CCR1 |= 300;
     */
}
c000994c:	e320f000 	nop	{0}
c0009950:	e28bd000 	add	sp, fp, #0
c0009954:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009958:	e12fff1e 	bx	lr

c000995c <hal_fan_init>:
 
//风扇初始化  TIM1_CH1 PE9
void hal_fan_init()
{
c000995c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009960:	e28db000 	add	fp, sp, #0
    //rcc章节初始化
    //使能GPIOE组
    RCC->MP_APB2ENSETR |= (0x1<<0);
c0009964:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c0009968:	e5933a08 	ldr	r3, [r3, #2568]	; 0xa08
c000996c:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c0009970:	e3833001 	orr	r3, r3, #1
c0009974:	e5823a08 	str	r3, [r2, #2568]	; 0xa08
    RCC->MP_AHB4ENSETR |= (0x1<<4);
c0009978:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c000997c:	e5933a28 	ldr	r3, [r3, #2600]	; 0xa28
c0009980:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c0009984:	e3833010 	orr	r3, r3, #16
c0009988:	e5823a28 	str	r3, [r2, #2600]	; 0xa28
    

    //gpio章节初始化
    GPIOE->MODER &= (~(0x3<<18));
c000998c:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009990:	e3453000 	movt	r3, #20480	; 0x5000
c0009994:	e5932000 	ldr	r2, [r3]
c0009998:	e3a03a06 	mov	r3, #24576	; 0x6000
c000999c:	e3453000 	movt	r3, #20480	; 0x5000
c00099a0:	e3c22703 	bic	r2, r2, #786432	; 0xc0000
c00099a4:	e5832000 	str	r2, [r3]
    GPIOE->MODER |=  (0x2<<18);
c00099a8:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099ac:	e3453000 	movt	r3, #20480	; 0x5000
c00099b0:	e5932000 	ldr	r2, [r3]
c00099b4:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099b8:	e3453000 	movt	r3, #20480	; 0x5000
c00099bc:	e3822702 	orr	r2, r2, #524288	; 0x80000
c00099c0:	e5832000 	str	r2, [r3]

    GPIOE->AFRH &= (~(0xf<<4));
c00099c4:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099c8:	e3453000 	movt	r3, #20480	; 0x5000
c00099cc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00099d0:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099d4:	e3453000 	movt	r3, #20480	; 0x5000
c00099d8:	e3c220f0 	bic	r2, r2, #240	; 0xf0
c00099dc:	e5832024 	str	r2, [r3, #36]	; 0x24
    GPIOE->AFRH |= (0x1<<4); //AF1
c00099e0:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099e4:	e3453000 	movt	r3, #20480	; 0x5000
c00099e8:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00099ec:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099f0:	e3453000 	movt	r3, #20480	; 0x5000
c00099f4:	e3822010 	orr	r2, r2, #16
c00099f8:	e5832024 	str	r2, [r3, #36]	; 0x24

    //time1章节初始化
    
    //TIMx_CR1
    //设置自动重载计数器使能  
    TIM1->CR1 |= (0x1<<7); 
c00099fc:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009a00:	e5933000 	ldr	r3, [r3]
c0009a04:	e3a02311 	mov	r2, #1140850688	; 0x44000000
c0009a08:	e3833080 	orr	r3, r3, #128	; 0x80
c0009a0c:	e5823000 	str	r3, [r2]
    //设置边沿对齐模式
    TIM1->CR1 &= (~(0x3<<5));
c0009a10:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009a14:	e5933000 	ldr	r3, [r3]
c0009a18:	e3a02311 	mov	r2, #1140850688	; 0x44000000
c0009a1c:	e3c33060 	bic	r3, r3, #96	; 0x60
c0009a20:	e5823000 	str	r3, [r2]
    //设置递减计数方式


    TIM1->CR1 |= (0x1<<4);
c0009a24:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009a28:	e5933000 	ldr	r3, [r3]
c0009a2c:	e3a02311 	mov	r2, #1140850688	; 0x44000000
c0009a30:	e3833010 	orr	r3, r3, #16
c0009a34:	e5823000 	str	r3, [r2]
    //设置计数器使能
    TIM1->CR1 |= (0x1<<0);
c0009a38:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009a3c:	e5933000 	ldr	r3, [r3]
c0009a40:	e3a02311 	mov	r2, #1140850688	; 0x44000000
c0009a44:	e3833001 	orr	r3, r3, #1
c0009a48:	e5823000 	str	r3, [r2]

     //TIMx_CCER
     // 设置捕获/比较寄存输出极性
     TIM1->CCER |= (0x1<<3);
c0009a4c:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009a50:	e5933020 	ldr	r3, [r3, #32]
c0009a54:	e3a02311 	mov	r2, #1140850688	; 0x44000000
c0009a58:	e3833008 	orr	r3, r3, #8
c0009a5c:	e5823020 	str	r3, [r2, #32]
        //设置捕获/比较寄存输出极性，起始状态为高电平
     TIM1->CCER &= (~(0x1<<1));
c0009a60:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009a64:	e5933020 	ldr	r3, [r3, #32]
c0009a68:	e3a02311 	mov	r2, #1140850688	; 0x44000000
c0009a6c:	e3c33002 	bic	r3, r3, #2
c0009a70:	e5823020 	str	r3, [r2, #32]
     //设置捕获/比较寄存输出使能
     TIM1->CCER |= (0x1<<0);
c0009a74:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009a78:	e5933020 	ldr	r3, [r3, #32]
c0009a7c:	e3a02311 	mov	r2, #1140850688	; 0x44000000
c0009a80:	e3833001 	orr	r3, r3, #1
c0009a84:	e5823020 	str	r3, [r2, #32]


    //TIMx_CCMR1
    //设置输出模式为PWM模式
    TIM1->CCMR1 &= (~(0x1<<16));
c0009a88:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009a8c:	e5933018 	ldr	r3, [r3, #24]
c0009a90:	e3a02311 	mov	r2, #1140850688	; 0x44000000
c0009a94:	e3c33801 	bic	r3, r3, #65536	; 0x10000
c0009a98:	e5823018 	str	r3, [r2, #24]
    TIM1->CCMR1 &= (~(0x7<<4));
c0009a9c:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009aa0:	e5933018 	ldr	r3, [r3, #24]
c0009aa4:	e3a02311 	mov	r2, #1140850688	; 0x44000000
c0009aa8:	e3c33070 	bic	r3, r3, #112	; 0x70
c0009aac:	e5823018 	str	r3, [r2, #24]
    //TIM1->CCMR1 |= (~(0x6<<4));
    TIM1->CCMR1 |= (0x6<<4);
c0009ab0:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009ab4:	e5933018 	ldr	r3, [r3, #24]
c0009ab8:	e3a02311 	mov	r2, #1140850688	; 0x44000000
c0009abc:	e3833060 	orr	r3, r3, #96	; 0x60
c0009ac0:	e5823018 	str	r3, [r2, #24]
    TIM1->CCMR1 |= (0x1<<3);
c0009ac4:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009ac8:	e5933018 	ldr	r3, [r3, #24]
c0009acc:	e3a02311 	mov	r2, #1140850688	; 0x44000000
c0009ad0:	e3833008 	orr	r3, r3, #8
c0009ad4:	e5823018 	str	r3, [r2, #24]
    TIM1->CCMR1 &= (~(0x3<<0));
c0009ad8:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009adc:	e5933018 	ldr	r3, [r3, #24]
c0009ae0:	e3a02311 	mov	r2, #1140850688	; 0x44000000
c0009ae4:	e3c33003 	bic	r3, r3, #3
c0009ae8:	e5823018 	str	r3, [r2, #24]

   
      //设置TIMx_PSC寄存器
    TIM1->PSC = (209-1);
c0009aec:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009af0:	e3a020d0 	mov	r2, #208	; 0xd0
c0009af4:	e5832028 	str	r2, [r3, #40]	; 0x28

     //TIMx_ARR寄存器
    TIM1->ARR = 1000;
c0009af8:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009afc:	e3a02ffa 	mov	r2, #1000	; 0x3e8
c0009b00:	e583202c 	str	r2, [r3, #44]	; 0x2c

    // TIMx_CCR1
    TIM1->CCR1 =   1000;
c0009b04:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009b08:	e3a02ffa 	mov	r2, #1000	; 0x3e8
c0009b0c:	e5832034 	str	r2, [r3, #52]	; 0x34

    TIM1->BDTR |= (0x1<<15);
c0009b10:	e3a03311 	mov	r3, #1140850688	; 0x44000000
c0009b14:	e5933044 	ldr	r3, [r3, #68]	; 0x44
c0009b18:	e3a02311 	mov	r2, #1140850688	; 0x44000000
c0009b1c:	e3833902 	orr	r3, r3, #32768	; 0x8000
c0009b20:	e5823044 	str	r3, [r2, #68]	; 0x44


    

}
c0009b24:	e320f000 	nop	{0}
c0009b28:	e28bd000 	add	sp, fp, #0
c0009b2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009b30:	e12fff1e 	bx	lr

c0009b34 <hal_motor_init>:

//马达初始化 TIM16_CH1 PF6
//TIM16的技术方式只有一种 UP的方式
void hal_motor_init()
{
c0009b34:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009b38:	e28db000 	add	fp, sp, #0
    //rcc章节初始化
    //使能GPIOF组
    RCC->MP_APB2ENSETR |= (0x1<<3);
c0009b3c:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c0009b40:	e5933a08 	ldr	r3, [r3, #2568]	; 0xa08
c0009b44:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c0009b48:	e3833008 	orr	r3, r3, #8
c0009b4c:	e5823a08 	str	r3, [r2, #2568]	; 0xa08
    RCC->MP_AHB4ENSETR |= (0x1<<5);
c0009b50:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c0009b54:	e5933a28 	ldr	r3, [r3, #2600]	; 0xa28
c0009b58:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c0009b5c:	e3833020 	orr	r3, r3, #32
c0009b60:	e5823a28 	str	r3, [r2, #2600]	; 0xa28
     
   
    //gpio章节初始化
    GPIOF->MODER &= (~(0x3<<12));
c0009b64:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b68:	e3453000 	movt	r3, #20480	; 0x5000
c0009b6c:	e5932000 	ldr	r2, [r3]
c0009b70:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b74:	e3453000 	movt	r3, #20480	; 0x5000
c0009b78:	e3c22a03 	bic	r2, r2, #12288	; 0x3000
c0009b7c:	e5832000 	str	r2, [r3]
    GPIOF->MODER |=  (0x2<<12);
c0009b80:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b84:	e3453000 	movt	r3, #20480	; 0x5000
c0009b88:	e5932000 	ldr	r2, [r3]
c0009b8c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009b90:	e3453000 	movt	r3, #20480	; 0x5000
c0009b94:	e3822a02 	orr	r2, r2, #8192	; 0x2000
c0009b98:	e5832000 	str	r2, [r3]
   
    GPIOF->AFRL &= (~(0xf<<24));
c0009b9c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ba0:	e3453000 	movt	r3, #20480	; 0x5000
c0009ba4:	e5932020 	ldr	r2, [r3, #32]
c0009ba8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009bac:	e3453000 	movt	r3, #20480	; 0x5000
c0009bb0:	e3c2240f 	bic	r2, r2, #251658240	; 0xf000000
c0009bb4:	e5832020 	str	r2, [r3, #32]
    GPIOF->AFRL |= (0x1<<24); //AF1
c0009bb8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009bbc:	e3453000 	movt	r3, #20480	; 0x5000
c0009bc0:	e5932020 	ldr	r2, [r3, #32]
c0009bc4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009bc8:	e3453000 	movt	r3, #20480	; 0x5000
c0009bcc:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
c0009bd0:	e5832020 	str	r2, [r3, #32]

    //time16章节初始化
    //设置TIMx_PSC寄存器
    TIM16->PSC = (209-1);
c0009bd4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009bd8:	e3443400 	movt	r3, #17408	; 0x4400
c0009bdc:	e3a020d0 	mov	r2, #208	; 0xd0
c0009be0:	e5832028 	str	r2, [r3, #40]	; 0x28

     //TIMx_ARR寄存器
    TIM16->ARR = 1000;
c0009be4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009be8:	e3443400 	movt	r3, #17408	; 0x4400
c0009bec:	e3a02ffa 	mov	r2, #1000	; 0x3e8
c0009bf0:	e583202c 	str	r2, [r3, #44]	; 0x2c

    // TIMx_CCR1
    TIM16->CCR1 = 700;  // |= 不行  = 可以
c0009bf4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009bf8:	e3443400 	movt	r3, #17408	; 0x4400
c0009bfc:	e3a02faf 	mov	r2, #700	; 0x2bc
c0009c00:	e5832034 	str	r2, [r3, #52]	; 0x34

    

    //TIMx_CCMR1
    //设置输出模式为PWM模式
    TIM16->CCMR1 &= (~(0x1<<16));
c0009c04:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c08:	e3443400 	movt	r3, #17408	; 0x4400
c0009c0c:	e5932018 	ldr	r2, [r3, #24]
c0009c10:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c14:	e3443400 	movt	r3, #17408	; 0x4400
c0009c18:	e3c22801 	bic	r2, r2, #65536	; 0x10000
c0009c1c:	e5832018 	str	r2, [r3, #24]
    TIM16->CCMR1 &= (~(0x7<<4));
c0009c20:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c24:	e3443400 	movt	r3, #17408	; 0x4400
c0009c28:	e5932018 	ldr	r2, [r3, #24]
c0009c2c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c30:	e3443400 	movt	r3, #17408	; 0x4400
c0009c34:	e3c22070 	bic	r2, r2, #112	; 0x70
c0009c38:	e5832018 	str	r2, [r3, #24]
    TIM16->CCMR1 |= (0x6<<4);
c0009c3c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c40:	e3443400 	movt	r3, #17408	; 0x4400
c0009c44:	e5932018 	ldr	r2, [r3, #24]
c0009c48:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c4c:	e3443400 	movt	r3, #17408	; 0x4400
c0009c50:	e3822060 	orr	r2, r2, #96	; 0x60
c0009c54:	e5832018 	str	r2, [r3, #24]
    //TIM16->CCMR1 |= (~(0x6<<4));
    TIM16->CCMR1 |= (0x1<<3);
c0009c58:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c5c:	e3443400 	movt	r3, #17408	; 0x4400
c0009c60:	e5932018 	ldr	r2, [r3, #24]
c0009c64:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c68:	e3443400 	movt	r3, #17408	; 0x4400
c0009c6c:	e3822008 	orr	r2, r2, #8
c0009c70:	e5832018 	str	r2, [r3, #24]
    TIM16->CCMR1 &= (~(0x3<<0));
c0009c74:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c78:	e3443400 	movt	r3, #17408	; 0x4400
c0009c7c:	e5932018 	ldr	r2, [r3, #24]
c0009c80:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c84:	e3443400 	movt	r3, #17408	; 0x4400
c0009c88:	e3c22003 	bic	r2, r2, #3
c0009c8c:	e5832018 	str	r2, [r3, #24]

    //TIMx_CCER
     // 设置捕获/比较寄存输出极性
     TIM16->CCER |= (0x1<<3);
c0009c90:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009c94:	e3443400 	movt	r3, #17408	; 0x4400
c0009c98:	e5932020 	ldr	r2, [r3, #32]
c0009c9c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ca0:	e3443400 	movt	r3, #17408	; 0x4400
c0009ca4:	e3822008 	orr	r2, r2, #8
c0009ca8:	e5832020 	str	r2, [r3, #32]
        //设置捕获/比较寄存输出极性，起始状态为高电平
     TIM16->CCER &= (~(0x1<<1));
c0009cac:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009cb0:	e3443400 	movt	r3, #17408	; 0x4400
c0009cb4:	e5932020 	ldr	r2, [r3, #32]
c0009cb8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009cbc:	e3443400 	movt	r3, #17408	; 0x4400
c0009cc0:	e3c22002 	bic	r2, r2, #2
c0009cc4:	e5832020 	str	r2, [r3, #32]
     //设置捕获/比较寄存输出使能
     TIM16->CCER |= (0x1<<0);
c0009cc8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ccc:	e3443400 	movt	r3, #17408	; 0x4400
c0009cd0:	e5932020 	ldr	r2, [r3, #32]
c0009cd4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009cd8:	e3443400 	movt	r3, #17408	; 0x4400
c0009cdc:	e3822001 	orr	r2, r2, #1
c0009ce0:	e5832020 	str	r2, [r3, #32]
  
    //TIMx_CR1
    //设置自动重载计数器使能  
    TIM16->CR1 |= (0x1<<7); 
c0009ce4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ce8:	e3443400 	movt	r3, #17408	; 0x4400
c0009cec:	e5932000 	ldr	r2, [r3]
c0009cf0:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009cf4:	e3443400 	movt	r3, #17408	; 0x4400
c0009cf8:	e3822080 	orr	r2, r2, #128	; 0x80
c0009cfc:	e5832000 	str	r2, [r3]
    //设置边沿对齐模式
    TIM16->CR1 &= (~(0x3<<5));
c0009d00:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009d04:	e3443400 	movt	r3, #17408	; 0x4400
c0009d08:	e5932000 	ldr	r2, [r3]
c0009d0c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009d10:	e3443400 	movt	r3, #17408	; 0x4400
c0009d14:	e3c22060 	bic	r2, r2, #96	; 0x60
c0009d18:	e5832000 	str	r2, [r3]
    //设置递减计数方式 ==> TIM16只支持一种方式
    //TIM16->CR1 |= (0x1<<4);
    //设置计数器使能
    TIM16->CR1 |= (0x1<<0);
c0009d1c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009d20:	e3443400 	movt	r3, #17408	; 0x4400
c0009d24:	e5932000 	ldr	r2, [r3]
c0009d28:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009d2c:	e3443400 	movt	r3, #17408	; 0x4400
c0009d30:	e3822001 	orr	r2, r2, #1
c0009d34:	e5832000 	str	r2, [r3]

    
    TIM16->BDTR |= (0x1<<15);
c0009d38:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009d3c:	e3443400 	movt	r3, #17408	; 0x4400
c0009d40:	e5932044 	ldr	r2, [r3, #68]	; 0x44
c0009d44:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009d48:	e3443400 	movt	r3, #17408	; 0x4400
c0009d4c:	e3822902 	orr	r2, r2, #32768	; 0x8000
c0009d50:	e5832044 	str	r2, [r3, #68]	; 0x44
    TIM16->CCR1 |=  700;

    TIM16->BDTR |= (0x1<<15);
    */
    
c0009d54:	e320f000 	nop	{0}
c0009d58:	e28bd000 	add	sp, fp, #0
c0009d5c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009d60:	e12fff1e 	bx	lr

c0009d64 <si7006_init>:
 * 函数功能：SI7006芯片的初始化
 * 函数参数：无
 * 函数返回值：无
*/
void si7006_init(void)
{
c0009d64:	e92d4800 	push	{fp, lr}
c0009d68:	e28db004 	add	fp, sp, #4
	i2c_init();
c0009d6c:	eb000087 	bl	c0009f90 <i2c_init>
	i2c_start();
c0009d70:	eb0000c2 	bl	c000a080 <i2c_start>
	i2c_write_byte(SI7006_SLAVE<<1 | 0);
c0009d74:	e3a00080 	mov	r0, #128	; 0x80
c0009d78:	eb000122 	bl	c000a208 <i2c_write_byte>
	i2c_wait_ack();
c0009d7c:	eb0001a4 	bl	c000a414 <i2c_wait_ack>
	i2c_write_byte(0xE6); //写用户寄存器怎么理解？
c0009d80:	e3a000e6 	mov	r0, #230	; 0xe6
c0009d84:	eb00011f 	bl	c000a208 <i2c_write_byte>
	i2c_wait_ack();
c0009d88:	eb0001a1 	bl	c000a414 <i2c_wait_ack>
	i2c_write_byte(0x3A);
c0009d8c:	e3a0003a 	mov	r0, #58	; 0x3a
c0009d90:	eb00011c 	bl	c000a208 <i2c_write_byte>
	i2c_wait_ack();
c0009d94:	eb00019e 	bl	c000a414 <i2c_wait_ack>
	i2c_stop();
c0009d98:	eb0000e8 	bl	c000a140 <i2c_stop>

}
c0009d9c:	e320f000 	nop	{0}
c0009da0:	e8bd8800 	pop	{fp, pc}

c0009da4 <si7006_read_hum_data>:
 * 函数返回值：无
*/

//读湿度
unsigned short si7006_read_hum_data(unsigned char slave_addr, unsigned char reg_addr)
{
c0009da4:	e92d4800 	push	{fp, lr}
c0009da8:	e28db004 	add	fp, sp, #4
c0009dac:	e24dd00c 	sub	sp, sp, #12
c0009db0:	e1a03000 	mov	r3, r0
c0009db4:	e1a02001 	mov	r2, r1
c0009db8:	e54b300c 	strb	r3, [fp, #-12]
c0009dbc:	e1a03002 	mov	r3, r2
c0009dc0:	e54b3010 	strb	r3, [fp, #-16]
	unsigned short dat;
	unsigned char dat_h,dat_l;
	i2c_start();
c0009dc4:	eb0000ad 	bl	c000a080 <i2c_start>
	i2c_write_byte(slave_addr<<1 | 0);
c0009dc8:	e55b300c 	ldrb	r3, [fp, #-12]
c0009dcc:	e1a03083 	lsl	r3, r3, #1
c0009dd0:	e6ef3073 	uxtb	r3, r3
c0009dd4:	e1a00003 	mov	r0, r3
c0009dd8:	eb00010a 	bl	c000a208 <i2c_write_byte>
	i2c_wait_ack();
c0009ddc:	eb00018c 	bl	c000a414 <i2c_wait_ack>
	i2c_write_byte(reg_addr);
c0009de0:	e55b3010 	ldrb	r3, [fp, #-16]
c0009de4:	e1a00003 	mov	r0, r3
c0009de8:	eb000106 	bl	c000a208 <i2c_write_byte>
	i2c_wait_ack();
c0009dec:	eb000188 	bl	c000a414 <i2c_wait_ack>
	i2c_start();
c0009df0:	eb0000a2 	bl	c000a080 <i2c_start>
	i2c_write_byte(slave_addr<<1|1);
c0009df4:	e55b300c 	ldrb	r3, [fp, #-12]
c0009df8:	e1a03083 	lsl	r3, r3, #1
c0009dfc:	e6af3073 	sxtb	r3, r3
c0009e00:	e3833001 	orr	r3, r3, #1
c0009e04:	e6af3073 	sxtb	r3, r3
c0009e08:	e6ef3073 	uxtb	r3, r3
c0009e0c:	e1a00003 	mov	r0, r3
c0009e10:	eb0000fc 	bl	c000a208 <i2c_write_byte>
	i2c_wait_ack();
c0009e14:	eb00017e 	bl	c000a414 <i2c_wait_ack>
	delay_ms(10);
c0009e18:	e3a0000a 	mov	r0, #10
c0009e1c:	eb000214 	bl	c000a674 <delay_ms>
	dat_h = i2c_read_byte(0);
c0009e20:	e3a00000 	mov	r0, #0
c0009e24:	eb00013d 	bl	c000a320 <i2c_read_byte>
c0009e28:	e1a03000 	mov	r3, r0
c0009e2c:	e54b3005 	strb	r3, [fp, #-5]
	dat_l = i2c_read_byte(1);
c0009e30:	e3a00001 	mov	r0, #1
c0009e34:	eb000139 	bl	c000a320 <i2c_read_byte>
c0009e38:	e1a03000 	mov	r3, r0
c0009e3c:	e54b3006 	strb	r3, [fp, #-6]
	i2c_stop();
c0009e40:	eb0000be 	bl	c000a140 <i2c_stop>
	dat = dat_h;
c0009e44:	e55b3005 	ldrb	r3, [fp, #-5]
c0009e48:	e14b30b8 	strh	r3, [fp, #-8]
	dat<<=8;
c0009e4c:	e15b30b8 	ldrh	r3, [fp, #-8]
c0009e50:	e1a03403 	lsl	r3, r3, #8
c0009e54:	e14b30b8 	strh	r3, [fp, #-8]
	dat|=dat_l;
c0009e58:	e55b3006 	ldrb	r3, [fp, #-6]
c0009e5c:	e6ff2073 	uxth	r2, r3
c0009e60:	e15b30b8 	ldrh	r3, [fp, #-8]
c0009e64:	e1823003 	orr	r3, r2, r3
c0009e68:	e14b30b8 	strh	r3, [fp, #-8]
	return dat;
c0009e6c:	e15b30b8 	ldrh	r3, [fp, #-8]
}
c0009e70:	e1a00003 	mov	r0, r3
c0009e74:	e24bd004 	sub	sp, fp, #4
c0009e78:	e8bd8800 	pop	{fp, pc}

c0009e7c <si7006_read_temp_data>:

short si7006_read_temp_data(unsigned char slave_addr, unsigned char reg_addr)
{
c0009e7c:	e92d4800 	push	{fp, lr}
c0009e80:	e28db004 	add	fp, sp, #4
c0009e84:	e24dd00c 	sub	sp, sp, #12
c0009e88:	e1a03000 	mov	r3, r0
c0009e8c:	e1a02001 	mov	r2, r1
c0009e90:	e54b300c 	strb	r3, [fp, #-12]
c0009e94:	e1a03002 	mov	r3, r2
c0009e98:	e54b3010 	strb	r3, [fp, #-16]
    short dat;
	unsigned char dat_h,dat_l;
	i2c_start();
c0009e9c:	eb000077 	bl	c000a080 <i2c_start>
	i2c_write_byte(slave_addr<<1 | 0);
c0009ea0:	e55b300c 	ldrb	r3, [fp, #-12]
c0009ea4:	e1a03083 	lsl	r3, r3, #1
c0009ea8:	e6ef3073 	uxtb	r3, r3
c0009eac:	e1a00003 	mov	r0, r3
c0009eb0:	eb0000d4 	bl	c000a208 <i2c_write_byte>
	i2c_wait_ack();
c0009eb4:	eb000156 	bl	c000a414 <i2c_wait_ack>
	i2c_write_byte(reg_addr);
c0009eb8:	e55b3010 	ldrb	r3, [fp, #-16]
c0009ebc:	e1a00003 	mov	r0, r3
c0009ec0:	eb0000d0 	bl	c000a208 <i2c_write_byte>
	i2c_wait_ack();
c0009ec4:	eb000152 	bl	c000a414 <i2c_wait_ack>
	i2c_start();
c0009ec8:	eb00006c 	bl	c000a080 <i2c_start>
	i2c_write_byte(slave_addr<<1|1);
c0009ecc:	e55b300c 	ldrb	r3, [fp, #-12]
c0009ed0:	e1a03083 	lsl	r3, r3, #1
c0009ed4:	e6af3073 	sxtb	r3, r3
c0009ed8:	e3833001 	orr	r3, r3, #1
c0009edc:	e6af3073 	sxtb	r3, r3
c0009ee0:	e6ef3073 	uxtb	r3, r3
c0009ee4:	e1a00003 	mov	r0, r3
c0009ee8:	eb0000c6 	bl	c000a208 <i2c_write_byte>
	i2c_wait_ack();
c0009eec:	eb000148 	bl	c000a414 <i2c_wait_ack>
	delay_ms(10);
c0009ef0:	e3a0000a 	mov	r0, #10
c0009ef4:	eb0001de 	bl	c000a674 <delay_ms>
	dat_h = i2c_read_byte(0);
c0009ef8:	e3a00000 	mov	r0, #0
c0009efc:	eb000107 	bl	c000a320 <i2c_read_byte>
c0009f00:	e1a03000 	mov	r3, r0
c0009f04:	e54b3005 	strb	r3, [fp, #-5]
	dat_l = i2c_read_byte(1);
c0009f08:	e3a00001 	mov	r0, #1
c0009f0c:	eb000103 	bl	c000a320 <i2c_read_byte>
c0009f10:	e1a03000 	mov	r3, r0
c0009f14:	e54b3006 	strb	r3, [fp, #-6]
	i2c_stop();
c0009f18:	eb000088 	bl	c000a140 <i2c_stop>
	dat = dat_h;
c0009f1c:	e55b3005 	ldrb	r3, [fp, #-5]
c0009f20:	e14b30b8 	strh	r3, [fp, #-8]
	dat<<=8;
c0009f24:	e15b30f8 	ldrsh	r3, [fp, #-8]
c0009f28:	e1a03403 	lsl	r3, r3, #8
c0009f2c:	e14b30b8 	strh	r3, [fp, #-8]
	dat|=dat_l;
c0009f30:	e55b3006 	ldrb	r3, [fp, #-6]
c0009f34:	e6bf2073 	sxth	r2, r3
c0009f38:	e15b30b8 	ldrh	r3, [fp, #-8]
c0009f3c:	e1823003 	orr	r3, r2, r3
c0009f40:	e14b30b8 	strh	r3, [fp, #-8]
	return dat;
c0009f44:	e15b30f8 	ldrsh	r3, [fp, #-8]
}
c0009f48:	e1a00003 	mov	r0, r3
c0009f4c:	e24bd004 	sub	sp, fp, #4
c0009f50:	e8bd8800 	pop	{fp, pc}

c0009f54 <delay_us>:
 * 函数功能：延时函数
 * 函数参数：无
 * 函数返回值：无
 * */
void delay_us(void)
{
c0009f54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009f58:	e28db000 	add	fp, sp, #0
c0009f5c:	e24dd004 	sub	sp, sp, #4
	unsigned int i = 2000;
c0009f60:	e3a03e7d 	mov	r3, #2000	; 0x7d0
c0009f64:	e50b3004 	str	r3, [fp, #-4]
	while(i--);
c0009f68:	e320f000 	nop	{0}
c0009f6c:	e51b3004 	ldr	r3, [fp, #-4]
c0009f70:	e2432001 	sub	r2, r3, #1
c0009f74:	e50b2004 	str	r2, [fp, #-4]
c0009f78:	e3530000 	cmp	r3, #0
c0009f7c:	1afffffa 	bne	c0009f6c <delay_us+0x18>
}
c0009f80:	e320f000 	nop	{0}
c0009f84:	e28bd000 	add	sp, fp, #0
c0009f88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009f8c:	e12fff1e 	bx	lr

c0009f90 <i2c_init>:
 * 函数功能： i2C总线引脚的初始化， 通用输出，推挽输出，输出速度，
 * 函数参数：无
 * 函数返回值：无
 * */
void i2c_init(void)
{
c0009f90:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009f94:	e28db000 	add	fp, sp, #0
 	// 使能GPIOF端口的时钟
	RCC->MP_AHB4ENSETR |= (0x1 << 5);
c0009f98:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c0009f9c:	e5933a28 	ldr	r3, [r3, #2600]	; 0xa28
c0009fa0:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c0009fa4:	e3833020 	orr	r3, r3, #32
c0009fa8:	e5823a28 	str	r3, [r2, #2600]	; 0xa28
	// 设置PF14，PF15引脚为通用的输出功能
	GPIOF->MODER &= (~(0xF << 28));
c0009fac:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009fb0:	e3453000 	movt	r3, #20480	; 0x5000
c0009fb4:	e5932000 	ldr	r2, [r3]
c0009fb8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009fbc:	e3453000 	movt	r3, #20480	; 0x5000
c0009fc0:	e3c2220f 	bic	r2, r2, #-268435456	; 0xf0000000
c0009fc4:	e5832000 	str	r2, [r3]
	GPIOF->MODER |= (0x5 << 28);
c0009fc8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009fcc:	e3453000 	movt	r3, #20480	; 0x5000
c0009fd0:	e5932000 	ldr	r2, [r3]
c0009fd4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009fd8:	e3453000 	movt	r3, #20480	; 0x5000
c0009fdc:	e3822205 	orr	r2, r2, #1342177280	; 0x50000000
c0009fe0:	e5832000 	str	r2, [r3]
	// 设置PF14, PF15引脚为推挽输出
	GPIOF->OTYPER &= (~(0x3 << 14));
c0009fe4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009fe8:	e3453000 	movt	r3, #20480	; 0x5000
c0009fec:	e5932004 	ldr	r2, [r3, #4]
c0009ff0:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ff4:	e3453000 	movt	r3, #20480	; 0x5000
c0009ff8:	e3c22903 	bic	r2, r2, #49152	; 0xc000
c0009ffc:	e5832004 	str	r2, [r3, #4]
	// 设置PF14, PF15引脚为高速输出
	GPIOF->OSPEEDR |= (0xF << 28);
c000a000:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a004:	e3453000 	movt	r3, #20480	; 0x5000
c000a008:	e5932008 	ldr	r2, [r3, #8]
c000a00c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a010:	e3453000 	movt	r3, #20480	; 0x5000
c000a014:	e382220f 	orr	r2, r2, #-268435456	; 0xf0000000
c000a018:	e5832008 	str	r2, [r3, #8]
	// 设置PF14, PF15引脚的禁止上拉和下拉
	GPIOF->PUPDR &= (~(0xF << 28));
c000a01c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a020:	e3453000 	movt	r3, #20480	; 0x5000
c000a024:	e593200c 	ldr	r2, [r3, #12]
c000a028:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a02c:	e3453000 	movt	r3, #20480	; 0x5000
c000a030:	e3c2220f 	bic	r2, r2, #-268435456	; 0xf0000000
c000a034:	e583200c 	str	r2, [r3, #12]
	// 空闲状态SDA和SCL拉高 
	I2C_SCL_H;
c000a038:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a03c:	e3453000 	movt	r3, #20480	; 0x5000
c000a040:	e5932018 	ldr	r2, [r3, #24]
c000a044:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a048:	e3453000 	movt	r3, #20480	; 0x5000
c000a04c:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a050:	e5832018 	str	r2, [r3, #24]
	I2C_SDA_H;
c000a054:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a058:	e3453000 	movt	r3, #20480	; 0x5000
c000a05c:	e5932018 	ldr	r2, [r3, #24]
c000a060:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a064:	e3453000 	movt	r3, #20480	; 0x5000
c000a068:	e3822902 	orr	r2, r2, #32768	; 0x8000
c000a06c:	e5832018 	str	r2, [r3, #24]
}
c000a070:	e320f000 	nop	{0}
c000a074:	e28bd000 	add	sp, fp, #0
c000a078:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c000a07c:	e12fff1e 	bx	lr

c000a080 <i2c_start>:
 * 函数功能：模拟i2c开始信号的时序
 * 函数参数：无
 * 函数返回值：无
 * */
void i2c_start(void)
{
c000a080:	e92d4800 	push	{fp, lr}
c000a084:	e28db004 	add	fp, sp, #4
	 *     ----
	 * SDA     \
	 *          --------
	 * */	
	 //1.设置SDA为输出模式
	 SET_SDA_OUT;
c000a088:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a08c:	e3453000 	movt	r3, #20480	; 0x5000
c000a090:	e5932000 	ldr	r2, [r3]
c000a094:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a098:	e3453000 	movt	r3, #20480	; 0x5000
c000a09c:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c000a0a0:	e5832000 	str	r2, [r3]
c000a0a4:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a0a8:	e3453000 	movt	r3, #20480	; 0x5000
c000a0ac:	e5932000 	ldr	r2, [r3]
c000a0b0:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a0b4:	e3453000 	movt	r3, #20480	; 0x5000
c000a0b8:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
c000a0bc:	e5832000 	str	r2, [r3]

	 //当SCL拉高，数据线SDA从拉高到低
	 //2. SCL拉高
	 I2C_SCL_H;
c000a0c0:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a0c4:	e3453000 	movt	r3, #20480	; 0x5000
c000a0c8:	e5932018 	ldr	r2, [r3, #24]
c000a0cc:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a0d0:	e3453000 	movt	r3, #20480	; 0x5000
c000a0d4:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a0d8:	e5832018 	str	r2, [r3, #24]
	 delay_us();
c000a0dc:	ebffff9c 	bl	c0009f54 <delay_us>
	 //3. SDA拉高
	 I2C_SDA_H;
c000a0e0:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a0e4:	e3453000 	movt	r3, #20480	; 0x5000
c000a0e8:	e5932018 	ldr	r2, [r3, #24]
c000a0ec:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a0f0:	e3453000 	movt	r3, #20480	; 0x5000
c000a0f4:	e3822902 	orr	r2, r2, #32768	; 0x8000
c000a0f8:	e5832018 	str	r2, [r3, #24]
	 delay_us();
c000a0fc:	ebffff94 	bl	c0009f54 <delay_us>
	 //4.SDA拉低
	 I2C_SDA_L;
c000a100:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a104:	e3453000 	movt	r3, #20480	; 0x5000
c000a108:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a10c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a110:	e3453000 	movt	r3, #20480	; 0x5000
c000a114:	e3822902 	orr	r2, r2, #32768	; 0x8000
c000a118:	e5832028 	str	r2, [r3, #40]	; 0x28
	 //5.SCL拉低，总线处于占用状态
	 I2C_SCL_L;
c000a11c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a120:	e3453000 	movt	r3, #20480	; 0x5000
c000a124:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a128:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a12c:	e3453000 	movt	r3, #20480	; 0x5000
c000a130:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a134:	e5832028 	str	r2, [r3, #40]	; 0x28

}
c000a138:	e320f000 	nop	{0}
c000a13c:	e8bd8800 	pop	{fp, pc}

c000a140 <i2c_stop>:
 * 函数参数：无
 * 函数返回值：无
 * */

void i2c_stop(void)
{
c000a140:	e92d4800 	push	{fp, lr}
c000a144:	e28db004 	add	fp, sp, #4
	 *    ---         -------
	 * SDA   X       /
	 *    --- -------
	 * */
	//1.设置SDA为输出模式   主机向数据线写数据
	SET_SDA_OUT;
c000a148:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a14c:	e3453000 	movt	r3, #20480	; 0x5000
c000a150:	e5932000 	ldr	r2, [r3]
c000a154:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a158:	e3453000 	movt	r3, #20480	; 0x5000
c000a15c:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c000a160:	e5832000 	str	r2, [r3]
c000a164:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a168:	e3453000 	movt	r3, #20480	; 0x5000
c000a16c:	e5932000 	ldr	r2, [r3]
c000a170:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a174:	e3453000 	movt	r3, #20480	; 0x5000
c000a178:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
c000a17c:	e5832000 	str	r2, [r3]

	//2.SCL拉低
	I2C_SCL_L;  //为了可以把SDA置为低电平，先拉低SCL
c000a180:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a184:	e3453000 	movt	r3, #20480	; 0x5000
c000a188:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a18c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a190:	e3453000 	movt	r3, #20480	; 0x5000
c000a194:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a198:	e5832028 	str	r2, [r3, #40]	; 0x28
	delay_us();
c000a19c:	ebffff6c 	bl	c0009f54 <delay_us>

	//3.SDA拉低
	I2C_SDA_L;
c000a1a0:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a1a4:	e3453000 	movt	r3, #20480	; 0x5000
c000a1a8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a1ac:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a1b0:	e3453000 	movt	r3, #20480	; 0x5000
c000a1b4:	e3822902 	orr	r2, r2, #32768	; 0x8000
c000a1b8:	e5832028 	str	r2, [r3, #40]	; 0x28
	delay_us();
c000a1bc:	ebffff64 	bl	c0009f54 <delay_us>
	//4.SCL拉高
	I2C_SCL_H;
c000a1c0:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a1c4:	e3453000 	movt	r3, #20480	; 0x5000
c000a1c8:	e5932018 	ldr	r2, [r3, #24]
c000a1cc:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a1d0:	e3453000 	movt	r3, #20480	; 0x5000
c000a1d4:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a1d8:	e5832018 	str	r2, [r3, #24]
	delay_us();
c000a1dc:	ebffff5c 	bl	c0009f54 <delay_us>

	//5.SDA拉高
	I2C_SDA_H;
c000a1e0:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a1e4:	e3453000 	movt	r3, #20480	; 0x5000
c000a1e8:	e5932018 	ldr	r2, [r3, #24]
c000a1ec:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a1f0:	e3453000 	movt	r3, #20480	; 0x5000
c000a1f4:	e3822902 	orr	r2, r2, #32768	; 0x8000
c000a1f8:	e5832018 	str	r2, [r3, #24]
	delay_us();
c000a1fc:	ebffff54 	bl	c0009f54 <delay_us>

}
c000a200:	e320f000 	nop	{0}
c000a204:	e8bd8800 	pop	{fp, pc}

c000a208 <i2c_write_byte>:
 * 函数参数：dat : 等待发送的字节数据
 * 函数返回值： 无
 * */

void i2c_write_byte(unsigned char dat)
{
c000a208:	e92d4800 	push	{fp, lr}
c000a20c:	e28db004 	add	fp, sp, #4
c000a210:	e24dd008 	sub	sp, sp, #8
c000a214:	e1a03000 	mov	r3, r0
c000a218:	e54b300c 	strb	r3, [fp, #-12]
	 *
	 *      先发送高位在发送低位 
	 * */
	
	//1.设置SDA为输出模式
	SET_SDA_OUT;
c000a21c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a220:	e3453000 	movt	r3, #20480	; 0x5000
c000a224:	e5932000 	ldr	r2, [r3]
c000a228:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a22c:	e3453000 	movt	r3, #20480	; 0x5000
c000a230:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c000a234:	e5832000 	str	r2, [r3]
c000a238:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a23c:	e3453000 	movt	r3, #20480	; 0x5000
c000a240:	e5932000 	ldr	r2, [r3]
c000a244:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a248:	e3453000 	movt	r3, #20480	; 0x5000
c000a24c:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
c000a250:	e5832000 	str	r2, [r3]
	//for循环  串行传输，只能一位一位发送
	//内容: SCL拉低   先发送高位，再发送低位  左移
	//取出最高位
	unsigned int i;
	for(i = 0;i<8;i++)
c000a254:	e3a03000 	mov	r3, #0
c000a258:	e50b3008 	str	r3, [fp, #-8]
c000a25c:	ea000029 	b	c000a308 <i2c_write_byte+0x100>
	{
		//2. SCL拉低，向数据线写入数据
		I2C_SCL_L;
c000a260:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a264:	e3453000 	movt	r3, #20480	; 0x5000
c000a268:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a26c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a270:	e3453000 	movt	r3, #20480	; 0x5000
c000a274:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a278:	e5832028 	str	r2, [r3, #40]	; 0x28
		delay_us();
c000a27c:	ebffff34 	bl	c0009f54 <delay_us>
		if(dat&0x80) //3. 先发送高位，再发送低位
c000a280:	e15b30dc 	ldrsb	r3, [fp, #-12]
c000a284:	e3530000 	cmp	r3, #0
c000a288:	aa000007 	bge	c000a2ac <i2c_write_byte+0xa4>
		{
			I2C_SDA_H;//4. 向数据线写入高电平
c000a28c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a290:	e3453000 	movt	r3, #20480	; 0x5000
c000a294:	e5932018 	ldr	r2, [r3, #24]
c000a298:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a29c:	e3453000 	movt	r3, #20480	; 0x5000
c000a2a0:	e3822902 	orr	r2, r2, #32768	; 0x8000
c000a2a4:	e5832018 	str	r2, [r3, #24]
c000a2a8:	ea000006 	b	c000a2c8 <i2c_write_byte+0xc0>
		} else
		{
			I2C_SDA_L;//5. 向数据线写入低电平
c000a2ac:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a2b0:	e3453000 	movt	r3, #20480	; 0x5000
c000a2b4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a2b8:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a2bc:	e3453000 	movt	r3, #20480	; 0x5000
c000a2c0:	e3822902 	orr	r2, r2, #32768	; 0x8000
c000a2c4:	e5832028 	str	r2, [r3, #40]	; 0x28
		}
		delay_us();
c000a2c8:	ebffff21 	bl	c0009f54 <delay_us>
		//6. SCL拉高，接收器从数据线读取数据
		I2C_SCL_H;
c000a2cc:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a2d0:	e3453000 	movt	r3, #20480	; 0x5000
c000a2d4:	e5932018 	ldr	r2, [r3, #24]
c000a2d8:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a2dc:	e3453000 	movt	r3, #20480	; 0x5000
c000a2e0:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a2e4:	e5832018 	str	r2, [r3, #24]
		delay_us();
c000a2e8:	ebffff19 	bl	c0009f54 <delay_us>
		delay_us();
c000a2ec:	ebffff18 	bl	c0009f54 <delay_us>
		dat<<=1;
c000a2f0:	e55b300c 	ldrb	r3, [fp, #-12]
c000a2f4:	e1a03083 	lsl	r3, r3, #1
c000a2f8:	e54b300c 	strb	r3, [fp, #-12]
	for(i = 0;i<8;i++)
c000a2fc:	e51b3008 	ldr	r3, [fp, #-8]
c000a300:	e2833001 	add	r3, r3, #1
c000a304:	e50b3008 	str	r3, [fp, #-8]
c000a308:	e51b3008 	ldr	r3, [fp, #-8]
c000a30c:	e3530007 	cmp	r3, #7
c000a310:	9affffd2 	bls	c000a260 <i2c_write_byte+0x58>
	}
	

}
c000a314:	e320f000 	nop	{0}
c000a318:	e24bd004 	sub	sp, fp, #4
c000a31c:	e8bd8800 	pop	{fp, pc}

c000a320 <i2c_read_byte>:
 * 函数参数： 0 ： 应答信号   1 ： 非应答信号
 * 函数返回值：读到的有效数据
 *
 * */
unsigned char i2c_read_byte(unsigned char ack)
{
c000a320:	e92d4800 	push	{fp, lr}
c000a324:	e28db004 	add	fp, sp, #4
c000a328:	e24dd00c 	sub	sp, sp, #12
c000a32c:	e1a03000 	mov	r3, r0
c000a330:	e54b3010 	strb	r3, [fp, #-16]
	 *      先接收高位， 在接收低位 
	 * */
	
	unsigned int i;
	//1.设置SDA数据线为输入模式
	SET_SDA_IN;
c000a334:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a338:	e3453000 	movt	r3, #20480	; 0x5000
c000a33c:	e5932000 	ldr	r2, [r3]
c000a340:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a344:	e3453000 	movt	r3, #20480	; 0x5000
c000a348:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c000a34c:	e5832000 	str	r2, [r3]
	unsigned char data;
	//for循环内容: SCL拉高 读取数据 如何将读到的8位数据进行返回
	for(i=0;i<8;i++)
c000a350:	e3a03000 	mov	r3, #0
c000a354:	e50b3008 	str	r3, [fp, #-8]
c000a358:	ea000020 	b	c000a3e0 <i2c_read_byte+0xc0>
	{
		I2C_SCL_L; //将SCL拉低，保证从机向数据线上写入数据完成
c000a35c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a360:	e3453000 	movt	r3, #20480	; 0x5000
c000a364:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a368:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a36c:	e3453000 	movt	r3, #20480	; 0x5000
c000a370:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a374:	e5832028 	str	r2, [r3, #40]	; 0x28
		delay_us();
c000a378:	ebfffef5 	bl	c0009f54 <delay_us>
		delay_us();
c000a37c:	ebfffef4 	bl	c0009f54 <delay_us>
		//拉高SCL  主机可以向从机读取数据
		I2C_SCL_H;
c000a380:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a384:	e3453000 	movt	r3, #20480	; 0x5000
c000a388:	e5932018 	ldr	r2, [r3, #24]
c000a38c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a390:	e3453000 	movt	r3, #20480	; 0x5000
c000a394:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a398:	e5832018 	str	r2, [r3, #24]
		delay_us();
c000a39c:	ebfffeec 	bl	c0009f54 <delay_us>
		data<<=1; //将data左移
c000a3a0:	e55b3009 	ldrb	r3, [fp, #-9]
c000a3a4:	e1a03083 	lsl	r3, r3, #1
c000a3a8:	e54b3009 	strb	r3, [fp, #-9]
		if(I2C_SDA_READ) //从数据线上读取数据
c000a3ac:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a3b0:	e3453000 	movt	r3, #20480	; 0x5000
c000a3b4:	e5933010 	ldr	r3, [r3, #16]
c000a3b8:	e2033902 	and	r3, r3, #32768	; 0x8000
c000a3bc:	e3530000 	cmp	r3, #0
c000a3c0:	0a000002 	beq	c000a3d0 <i2c_read_byte+0xb0>
		{
			data |=1;
c000a3c4:	e55b3009 	ldrb	r3, [fp, #-9]
c000a3c8:	e3833001 	orr	r3, r3, #1
c000a3cc:	e54b3009 	strb	r3, [fp, #-9]
		} else
		{
			data|=0;
		}
		delay_us();
c000a3d0:	ebfffedf 	bl	c0009f54 <delay_us>
	for(i=0;i<8;i++)
c000a3d4:	e51b3008 	ldr	r3, [fp, #-8]
c000a3d8:	e2833001 	add	r3, r3, #1
c000a3dc:	e50b3008 	str	r3, [fp, #-8]
c000a3e0:	e51b3008 	ldr	r3, [fp, #-8]
c000a3e4:	e3530007 	cmp	r3, #7
c000a3e8:	9affffdb 	bls	c000a35c <i2c_read_byte+0x3c>
	}
		//判断应答信号   应答: 0   非应答: 1
		if(!ack)
c000a3ec:	e55b3010 	ldrb	r3, [fp, #-16]
c000a3f0:	e3530000 	cmp	r3, #0
c000a3f4:	1a000001 	bne	c000a400 <i2c_read_byte+0xe0>
		{
			i2c_ack(); //主机给从机返回应答信号
c000a3f8:	eb000039 	bl	c000a4e4 <i2c_ack>
c000a3fc:	ea000000 	b	c000a404 <i2c_read_byte+0xe4>
		} else
		{
			i2c_nack(); //主机给从机返回非应答信号
c000a400:	eb000069 	bl	c000a5ac <i2c_nack>
		}

	return data;
c000a404:	e55b3009 	ldrb	r3, [fp, #-9]
}
c000a408:	e1a00003 	mov	r0, r3
c000a40c:	e24bd004 	sub	sp, fp, #4
c000a410:	e8bd8800 	pop	{fp, pc}

c000a414 <i2c_wait_ack>:
 * 函数返回值：
 *					0：接收到的应答信号
 *                  1：接收到的非应答信号
 * */
unsigned char i2c_wait_ack(void)
{
c000a414:	e92d4800 	push	{fp, lr}
c000a418:	e28db004 	add	fp, sp, #4
	 *         总   线写    上的数据
	 *         线   数据
	 * */	
	
	//1.SCL拉低 
	I2C_SCL_L;
c000a41c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a420:	e3453000 	movt	r3, #20480	; 0x5000
c000a424:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a428:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a42c:	e3453000 	movt	r3, #20480	; 0x5000
c000a430:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a434:	e5832028 	str	r2, [r3, #40]	; 0x28
	delay_us();
c000a438:	ebfffec5 	bl	c0009f54 <delay_us>
	//2.SDA拉高，释放总线   主机释放总线给从机
	I2C_SDA_H;
c000a43c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a440:	e3453000 	movt	r3, #20480	; 0x5000
c000a444:	e5932018 	ldr	r2, [r3, #24]
c000a448:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a44c:	e3453000 	movt	r3, #20480	; 0x5000
c000a450:	e3822902 	orr	r2, r2, #32768	; 0x8000
c000a454:	e5832018 	str	r2, [r3, #24]
	delay_us();
c000a458:	ebfffebd 	bl	c0009f54 <delay_us>
	//3.设置数据线为输入模式
	SET_SDA_IN;
c000a45c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a460:	e3453000 	movt	r3, #20480	; 0x5000
c000a464:	e5932000 	ldr	r2, [r3]
c000a468:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a46c:	e3453000 	movt	r3, #20480	; 0x5000
c000a470:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c000a474:	e5832000 	str	r2, [r3]
	delay_us();
c000a478:	ebfffeb5 	bl	c0009f54 <delay_us>
	I2C_SCL_H; //4. SCL拉高，总线数据保持温度
c000a47c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a480:	e3453000 	movt	r3, #20480	; 0x5000
c000a484:	e5932018 	ldr	r2, [r3, #24]
c000a488:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a48c:	e3453000 	movt	r3, #20480	; 0x5000
c000a490:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a494:	e5832018 	str	r2, [r3, #24]
	delay_us();
c000a498:	ebfffead 	bl	c0009f54 <delay_us>
	if(I2C_SDA_READ)
c000a49c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a4a0:	e3453000 	movt	r3, #20480	; 0x5000
c000a4a4:	e5933010 	ldr	r3, [r3, #16]
c000a4a8:	e2033902 	and	r3, r3, #32768	; 0x8000
c000a4ac:	e3530000 	cmp	r3, #0
c000a4b0:	0a000001 	beq	c000a4bc <i2c_wait_ack+0xa8>
	{
		return 1; //5.返回非应答信号
c000a4b4:	e3a03001 	mov	r3, #1
c000a4b8:	ea000007 	b	c000a4dc <i2c_wait_ack+0xc8>
	}
	I2C_SCL_L; //7.SCL拉低，总线处于占用状态
c000a4bc:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a4c0:	e3453000 	movt	r3, #20480	; 0x5000
c000a4c4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a4c8:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a4cc:	e3453000 	movt	r3, #20480	; 0x5000
c000a4d0:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a4d4:	e5832028 	str	r2, [r3, #40]	; 0x28
	return 0; //6. 返回应答信号
c000a4d8:	e3a03000 	mov	r3, #0


	//主机读取数据线上的数据
} 
c000a4dc:	e1a00003 	mov	r0, r3
c000a4e0:	e8bd8800 	pop	{fp, pc}

c000a4e4 <i2c_ack>:
 * 函数功能： 主机作为接收器时，给发送器发送应答信号
 * 函数参数：无
 * 函数返回值：无
 * */
void i2c_ack(void)
{
c000a4e4:	e92d4800 	push	{fp, lr}
c000a4e8:	e28db004 	add	fp, sp, #4
	 * SDA   X 
	 *    --- -------------
	 *
	*/
	//1. 设置SDA为输出模式
	SET_SDA_OUT;
c000a4ec:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a4f0:	e3453000 	movt	r3, #20480	; 0x5000
c000a4f4:	e5932000 	ldr	r2, [r3]
c000a4f8:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a4fc:	e3453000 	movt	r3, #20480	; 0x5000
c000a500:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c000a504:	e5832000 	str	r2, [r3]
c000a508:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a50c:	e3453000 	movt	r3, #20480	; 0x5000
c000a510:	e5932000 	ldr	r2, [r3]
c000a514:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a518:	e3453000 	movt	r3, #20480	; 0x5000
c000a51c:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
c000a520:	e5832000 	str	r2, [r3]

	//2.SCL拉低
	I2C_SCL_L;
c000a524:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a528:	e3453000 	movt	r3, #20480	; 0x5000
c000a52c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a530:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a534:	e3453000 	movt	r3, #20480	; 0x5000
c000a538:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a53c:	e5832028 	str	r2, [r3, #40]	; 0x28
	delay_us();
c000a540:	ebfffe83 	bl	c0009f54 <delay_us>

	 //3.SDA拉低
	 I2C_SDA_L;
c000a544:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a548:	e3453000 	movt	r3, #20480	; 0x5000
c000a54c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a550:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a554:	e3453000 	movt	r3, #20480	; 0x5000
c000a558:	e3822902 	orr	r2, r2, #32768	; 0x8000
c000a55c:	e5832028 	str	r2, [r3, #40]	; 0x28
	 delay_us();
c000a560:	ebfffe7b 	bl	c0009f54 <delay_us>

	 //4. SCL拉高
	 I2C_SCL_H;
c000a564:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a568:	e3453000 	movt	r3, #20480	; 0x5000
c000a56c:	e5932018 	ldr	r2, [r3, #24]
c000a570:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a574:	e3453000 	movt	r3, #20480	; 0x5000
c000a578:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a57c:	e5832018 	str	r2, [r3, #24]
	 delay_us();
c000a580:	ebfffe73 	bl	c0009f54 <delay_us>
	 delay_us();
c000a584:	ebfffe72 	bl	c0009f54 <delay_us>

	 //5.SCL拉低，总线处于占用状态
	 I2C_SCL_L;
c000a588:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a58c:	e3453000 	movt	r3, #20480	; 0x5000
c000a590:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a594:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a598:	e3453000 	movt	r3, #20480	; 0x5000
c000a59c:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a5a0:	e5832028 	str	r2, [r3, #40]	; 0x28
}
c000a5a4:	e320f000 	nop	{0}
c000a5a8:	e8bd8800 	pop	{fp, pc}

c000a5ac <i2c_nack>:
 * 函数功能： 主机作为接收器时，给发送器发送非应答信号
 * 函数参数：无
 * 函数返回值：无
 * */
void i2c_nack(void)
{
c000a5ac:	e92d4800 	push	{fp, lr}
c000a5b0:	e28db004 	add	fp, sp, #4
	 *    --- ---------------
	 * SDA   X 
	 *    --- 
	 * */
	//1. 设置SDA为输出模式
	SET_SDA_OUT;
c000a5b4:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a5b8:	e3453000 	movt	r3, #20480	; 0x5000
c000a5bc:	e5932000 	ldr	r2, [r3]
c000a5c0:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a5c4:	e3453000 	movt	r3, #20480	; 0x5000
c000a5c8:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
c000a5cc:	e5832000 	str	r2, [r3]
c000a5d0:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a5d4:	e3453000 	movt	r3, #20480	; 0x5000
c000a5d8:	e5932000 	ldr	r2, [r3]
c000a5dc:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a5e0:	e3453000 	movt	r3, #20480	; 0x5000
c000a5e4:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
c000a5e8:	e5832000 	str	r2, [r3]

	//2.SCL拉低
	I2C_SCL_L;
c000a5ec:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a5f0:	e3453000 	movt	r3, #20480	; 0x5000
c000a5f4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a5f8:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a5fc:	e3453000 	movt	r3, #20480	; 0x5000
c000a600:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a604:	e5832028 	str	r2, [r3, #40]	; 0x28
	delay_us();
c000a608:	ebfffe51 	bl	c0009f54 <delay_us>

	 //3.SDA拉高
	 I2C_SDA_H;
c000a60c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a610:	e3453000 	movt	r3, #20480	; 0x5000
c000a614:	e5932018 	ldr	r2, [r3, #24]
c000a618:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a61c:	e3453000 	movt	r3, #20480	; 0x5000
c000a620:	e3822902 	orr	r2, r2, #32768	; 0x8000
c000a624:	e5832018 	str	r2, [r3, #24]
	 delay_us();
c000a628:	ebfffe49 	bl	c0009f54 <delay_us>

	 //4. SCL拉高
	 I2C_SCL_H;
c000a62c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a630:	e3453000 	movt	r3, #20480	; 0x5000
c000a634:	e5932018 	ldr	r2, [r3, #24]
c000a638:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a63c:	e3453000 	movt	r3, #20480	; 0x5000
c000a640:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a644:	e5832018 	str	r2, [r3, #24]
	 delay_us();
c000a648:	ebfffe41 	bl	c0009f54 <delay_us>
	 delay_us();
c000a64c:	ebfffe40 	bl	c0009f54 <delay_us>

	 //5.SCL拉低，总线处于占用状态
	 I2C_SCL_L;	
c000a650:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a654:	e3453000 	movt	r3, #20480	; 0x5000
c000a658:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c000a65c:	e3a03a07 	mov	r3, #28672	; 0x7000
c000a660:	e3453000 	movt	r3, #20480	; 0x5000
c000a664:	e3822901 	orr	r2, r2, #16384	; 0x4000
c000a668:	e5832028 	str	r2, [r3, #40]	; 0x28
}
c000a66c:	e320f000 	nop	{0}
c000a670:	e8bd8800 	pop	{fp, pc}

c000a674 <delay_ms>:
#include "pwm.h"
extern void printf(const char *fmt, ...);
void delay_ms(int ms)
{
c000a674:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c000a678:	e28db000 	add	fp, sp, #0
c000a67c:	e24dd00c 	sub	sp, sp, #12
c000a680:	e50b000c 	str	r0, [fp, #-12]
	int i,j;
	for(i = 0; i < ms;i++)
c000a684:	e3a03000 	mov	r3, #0
c000a688:	e50b3004 	str	r3, [fp, #-4]
c000a68c:	ea00000c 	b	c000a6c4 <delay_ms+0x50>
		for (j = 0; j < 1800; j++);
c000a690:	e3a03000 	mov	r3, #0
c000a694:	e50b3008 	str	r3, [fp, #-8]
c000a698:	ea000002 	b	c000a6a8 <delay_ms+0x34>
c000a69c:	e51b3008 	ldr	r3, [fp, #-8]
c000a6a0:	e2833001 	add	r3, r3, #1
c000a6a4:	e50b3008 	str	r3, [fp, #-8]
c000a6a8:	e51b3008 	ldr	r3, [fp, #-8]
c000a6ac:	e3002707 	movw	r2, #1799	; 0x707
c000a6b0:	e1530002 	cmp	r3, r2
c000a6b4:	dafffff8 	ble	c000a69c <delay_ms+0x28>
	for(i = 0; i < ms;i++)
c000a6b8:	e51b3004 	ldr	r3, [fp, #-4]
c000a6bc:	e2833001 	add	r3, r3, #1
c000a6c0:	e50b3004 	str	r3, [fp, #-4]
c000a6c4:	e51b2004 	ldr	r2, [fp, #-4]
c000a6c8:	e51b300c 	ldr	r3, [fp, #-12]
c000a6cc:	e1520003 	cmp	r2, r3
c000a6d0:	baffffee 	blt	c000a690 <delay_ms+0x1c>
}
c000a6d4:	e320f000 	nop	{0}
c000a6d8:	e28bd000 	add	sp, fp, #0
c000a6dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c000a6e0:	e12fff1e 	bx	lr

c000a6e4 <main>:



int main()
{
c000a6e4:	e92d4800 	push	{fp, lr}
c000a6e8:	e28db004 	add	fp, sp, #4
	//hal_beep_init();
	//hal_fan_init();
	
	
	
	hal_motor_init();
c000a6ec:	ebfffd10 	bl	c0009b34 <hal_motor_init>
	while(1)
c000a6f0:	eafffffe 	b	c000a6f0 <main+0xc>

Disassembly of section .rodata:

c000a6f4 <.LC0>:
c000a6f4:	33323130 	teqcc	r2, #48, 2
c000a6f8:	37363534 			; <UNDEFINED> instruction: 0x37363534
c000a6fc:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
c000a700:	66656463 	strbtvs	r6, [r5], -r3, ror #8
c000a704:	6a696867 	bvs	c1a648a8 <__bss_end__+0x1a59858>
c000a708:	6e6d6c6b 	cdpvs	12, 6, cr6, cr13, cr11, {3}
c000a70c:	7271706f 	rsbsvc	r7, r1, #111	; 0x6f
c000a710:	76757473 			; <UNDEFINED> instruction: 0x76757473
c000a714:	7a797877 	bvc	c1e688f8 <__bss_end__+0x1e5d8a8>
c000a718:	00000000 	andeq	r0, r0, r0

c000a71c <.LC1>:
c000a71c:	33323130 	teqcc	r2, #48, 2
c000a720:	37363534 			; <UNDEFINED> instruction: 0x37363534
c000a724:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
c000a728:	46454443 	strbmi	r4, [r5], -r3, asr #8
c000a72c:	4a494847 	bmi	c125c850 <__bss_end__+0x1251800>
c000a730:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
c000a734:	5251504f 	subspl	r5, r1, #79	; 0x4f
c000a738:	56555453 			; <UNDEFINED> instruction: 0x56555453
c000a73c:	5a595857 	bpl	c16608a0 <__bss_end__+0x1655850>
c000a740:	00000000 	andeq	r0, r0, r0

c000a744 <.LC2>:
c000a744:	4c554e3c 	mrrcmi	14, 3, r4, r5, cr12
c000a748:	Address 0xc000a748 is out of bounds.


Disassembly of section .data:

c000a74c <stack>:
	...

c000af4c <_ctype>:
c000af4c:	08080808 	stmdaeq	r8, {r3, fp}
c000af50:	08080808 	stmdaeq	r8, {r3, fp}
c000af54:	28282808 	stmdacs	r8!, {r3, fp, sp}
c000af58:	08082828 	stmdaeq	r8, {r3, r5, fp, sp}
c000af5c:	08080808 	stmdaeq	r8, {r3, fp}
c000af60:	08080808 	stmdaeq	r8, {r3, fp}
c000af64:	08080808 	stmdaeq	r8, {r3, fp}
c000af68:	08080808 	stmdaeq	r8, {r3, fp}
c000af6c:	101010a0 	andsne	r1, r0, r0, lsr #1
c000af70:	10101010 	andsne	r1, r0, r0, lsl r0
c000af74:	10101010 	andsne	r1, r0, r0, lsl r0
c000af78:	10101010 	andsne	r1, r0, r0, lsl r0
c000af7c:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
c000af80:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
c000af84:	10100404 	andsne	r0, r0, r4, lsl #8
c000af88:	10101010 	andsne	r1, r0, r0, lsl r0
c000af8c:	41414110 	cmpmi	r1, r0, lsl r1
c000af90:	01414141 	cmpeq	r1, r1, asr #2
c000af94:	01010101 	tsteq	r1, r1, lsl #2
c000af98:	01010101 	tsteq	r1, r1, lsl #2
c000af9c:	01010101 	tsteq	r1, r1, lsl #2
c000afa0:	01010101 	tsteq	r1, r1, lsl #2
c000afa4:	10010101 	andne	r0, r1, r1, lsl #2
c000afa8:	10101010 	andsne	r1, r0, r0, lsl r0
c000afac:	42424210 	submi	r4, r2, #16, 4
c000afb0:	02424242 	subeq	r4, r2, #536870916	; 0x20000004
c000afb4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000afb8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000afbc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000afc0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000afc4:	10020202 	andne	r0, r2, r2, lsl #4
c000afc8:	08101010 	ldmdaeq	r0, {r4, ip}
	...
c000afec:	101010a0 	andsne	r1, r0, r0, lsr #1
c000aff0:	10101010 	andsne	r1, r0, r0, lsl r0
c000aff4:	10101010 	andsne	r1, r0, r0, lsl r0
c000aff8:	10101010 	andsne	r1, r0, r0, lsl r0
c000affc:	10101010 	andsne	r1, r0, r0, lsl r0
c000b000:	10101010 	andsne	r1, r0, r0, lsl r0
c000b004:	10101010 	andsne	r1, r0, r0, lsl r0
c000b008:	10101010 	andsne	r1, r0, r0, lsl r0
c000b00c:	01010101 	tsteq	r1, r1, lsl #2
c000b010:	01010101 	tsteq	r1, r1, lsl #2
c000b014:	01010101 	tsteq	r1, r1, lsl #2
c000b018:	01010101 	tsteq	r1, r1, lsl #2
c000b01c:	01010101 	tsteq	r1, r1, lsl #2
c000b020:	10010101 	andne	r0, r1, r1, lsl #2
c000b024:	01010101 	tsteq	r1, r1, lsl #2
c000b028:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
c000b02c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000b030:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000b034:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000b038:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000b03c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000b040:	10020202 	andne	r0, r2, r2, lsl #4
c000b044:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000b048:	02020202 	andeq	r0, r2, #536870912	; 0x20000000

Disassembly of section .bss:

c000b04c <i>:
c000b04c:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002041 	andeq	r2, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000016 	andeq	r0, r0, r6, lsl r0
  10:	412d3705 			; <UNDEFINED> instruction: 0x412d3705
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	09010841 	stmdbeq	r1, {r0, r6, fp}
  1c:	0c030a02 			; <UNDEFINED> instruction: 0x0c030a02
  20:	Address 0x00000020 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_start-0xbef372dc>
   4:	694c2820 	stmdbvs	ip, {r5, fp, sp}^
   8:	6f72616e 	svcvs	0x0072616e
   c:	43434720 	movtmi	r4, #14112	; 0x3720
  10:	352e3720 	strcc	r3, [lr, #-1824]!	; 0xfffff8e0
  14:	3130322d 	teqcc	r0, sp, lsr #4
  18:	32312e39 	eorscc	r2, r1, #912	; 0x390
  1c:	2e372029 	cdpcs	0, 3, cr2, cr7, cr9, {1}
  20:	00302e35 	eorseq	r2, r0, r5, lsr lr

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000093 	muleq	r0, r3, r0
   4:	00240002 	eoreq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	73010000 	movwvc	r0, #4096	; 0x1000
  1c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  20:	74730000 	ldrbtvc	r0, [r3], #-0
  24:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
  28:	00010053 	andeq	r0, r1, r3, asr r0
  2c:	05000000 	streq	r0, [r0, #-0]
  30:	00800002 	addeq	r0, r0, r2
  34:	011b03c0 	tsteq	fp, r0, asr #7
  38:	2f2f2f2f 	svccs	0x002f2f2f
  3c:	032f2f2f 			; <UNDEFINED> instruction: 0x032f2f2f
  40:	2f2ff215 	svccs	0x002ff215
  44:	2f312f2f 	svccs	0x00312f2f
  48:	2f312f2f 	svccs	0x00312f2f
  4c:	2f2f2f2f 	svccs	0x002f2f2f
  50:	2f2f312f 	svccs	0x002f312f
  54:	2f2f2f2f 	svccs	0x002f2f2f
  58:	2f2f312f 	svccs	0x002f312f
  5c:	2f2f2f31 	svccs	0x002f2f31
  60:	332f2f2f 			; <UNDEFINED> instruction: 0x332f2f2f
  64:	2f302f31 	svccs	0x00302f31
  68:	2f2f302f 	svccs	0x002f302f
  6c:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
  70:	2f302f2f 	svccs	0x00302f2f
  74:	302f2f32 	eorcc	r2, pc, r2, lsr pc	; <UNPREDICTABLE>
  78:	312f2f2f 			; <UNDEFINED> instruction: 0x312f2f2f
  7c:	f6f6f6de 			; <UNDEFINED> instruction: 0xf6f6f6de
  80:	2f2ff7f6 	svccs	0x002ff7f6
  84:	8903a32f 	stmdbhi	r3, {r0, r1, r2, r3, r5, r8, r9, sp, pc}
  88:	c8034a7f 	stmdagt	r3, {r0, r1, r2, r3, r4, r5, r6, r9, fp, lr}
  8c:	032f2e00 			; <UNDEFINED> instruction: 0x032f2e00
  90:	02022e09 	andeq	r2, r2, #9, 28	; 0x90
  94:	6c010100 	stfvss	f0, [r1], {-0}
  98:	02000000 	andeq	r0, r0, #0
  9c:	00002c00 	andeq	r2, r0, r0, lsl #24
  a0:	fb010200 	blx	408aa <_start-0xbffc7756>
  a4:	01000d0e 	tsteq	r0, lr, lsl #26
  a8:	00010101 	andeq	r0, r1, r1, lsl #2
  ac:	00010000 	andeq	r0, r1, r0
  b0:	6f630100 	svcvs	0x00630100
  b4:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
  b8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
  bc:	755f0000 	ldrbvc	r0, [pc, #-0]	; c4 <_start-0xc0007f3c>
  c0:	73646f6d 	cmnvc	r4, #436	; 0x1b4
  c4:	532e3369 			; <UNDEFINED> instruction: 0x532e3369
  c8:	00000100 	andeq	r0, r0, r0, lsl #2
  cc:	02050000 	andeq	r0, r5, #0
  d0:	c0008218 	andgt	r8, r0, r8, lsl r2
  d4:	2f011203 	svccs	0x00011203
  d8:	342f2f2f 	strtcc	r2, [pc], #-3887	; e0 <_start-0xc0007f20>
  dc:	2f2f2f2f 	svccs	0x002f2f2f
  e0:	2f2f2f32 	svccs	0x002f2f32
  e4:	2f2f332f 	svccs	0x002f332f
  e8:	2f2f2f2f 	svccs	0x002f2f2f
  ec:	2f2f2f2f 	svccs	0x002f2f2f
  f0:	2f2f2f2f 	svccs	0x002f2f2f
  f4:	2f352f2f 	svccs	0x00352f2f
  f8:	2f2f2f2f 	svccs	0x002f2f2f
  fc:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
 100:	02022f30 	andeq	r2, r2, #48, 30	; 0xc0
 104:	65010100 	strvs	r0, [r1, #-256]	; 0xffffff00
 108:	02000000 	andeq	r0, r0, #0
 10c:	00002c00 	andeq	r2, r0, r0, lsl #24
 110:	fb010200 	blx	4091a <_start-0xbffc76e6>
 114:	01000d0e 	tsteq	r0, lr, lsl #26
 118:	00010101 	andeq	r0, r1, r1, lsl #2
 11c:	00010000 	andeq	r0, r1, r0
 120:	6f630100 	svcvs	0x00630100
 124:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
 128:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 12c:	755f0000 	ldrbvc	r0, [pc, #-0]	; 134 <_start-0xc0007ecc>
 130:	73766964 	cmnvc	r6, #100, 18	; 0x190000
 134:	532e3369 			; <UNDEFINED> instruction: 0x532e3369
 138:	00000100 	andeq	r0, r0, r0, lsl #2
 13c:	02050000 	andeq	r0, r5, #0
 140:	c00082c8 	andgt	r8, r0, r8, asr #5
 144:	2f011103 	svccs	0x00011103
 148:	2f2f2f2f 	svccs	0x002f2f2f
 14c:	2f2f2f34 	svccs	0x002f2f34
 150:	2f2f322f 	svccs	0x002f322f
 154:	2f342f2f 	svccs	0x00342f2f
 158:	2f2f2f2f 	svccs	0x002f2f2f
 15c:	2f2f2f2f 	svccs	0x002f2f2f
 160:	2f2f2f2f 	svccs	0x002f2f2f
 164:	2f302f2f 	svccs	0x00302f2f
 168:	022f3030 	eoreq	r3, pc, #48	; 0x30
 16c:	01010002 	tsteq	r1, r2
 170:	0000022e 	andeq	r0, r0, lr, lsr #4
 174:	00520002 	subseq	r0, r2, r2
 178:	01020000 	mrseq	r0, (UNDEF: 2)
 17c:	000d0efb 	strdeq	r0, [sp], -fp
 180:	01010101 	tsteq	r1, r1, lsl #2
 184:	01000000 	mrseq	r0, (UNDEF: 0)
 188:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 18c:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; d8 <_start-0xc0007f28>
 190:	2f6e6f6d 	svccs	0x006e6f6d
 194:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 198:	00656475 	rsbeq	r6, r5, r5, ror r4
 19c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1a0:	732f6e6f 			; <UNDEFINED> instruction: 0x732f6e6f
 1a4:	00006372 	andeq	r6, r0, r2, ror r3
 1a8:	70797463 	rsbsvc	r7, r9, r3, ror #8
 1ac:	00682e65 	rsbeq	r2, r8, r5, ror #28
 1b0:	70000001 	andvc	r0, r0, r1
 1b4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 1b8:	00632e66 	rsbeq	r2, r3, r6, ror #28
 1bc:	73000002 	movwvc	r0, #2
 1c0:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
 1c4:	00682e67 	rsbeq	r2, r8, r7, ror #28
 1c8:	00000001 	andeq	r0, r0, r1
 1cc:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
 1d0:	03c00083 	biceq	r0, r0, #131	; 0x83
 1d4:	9f0100c4 	svcls	0x000100c4
 1d8:	042f67d7 	strteq	r6, [pc], #-2007	; 1e0 <_start-0xc0007e20>
 1dc:	7fbe0302 	svcvc	0x00be0302
 1e0:	834cbb82 	movthi	fp, #52098	; 0xcb82
 1e4:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 1e8:	06820601 	streq	r0, [r2], r1, lsl #12
 1ec:	684b3d08 	stmdavs	fp, {r3, r8, sl, fp, ip, sp}^
 1f0:	4c674d67 	stclmi	13, cr4, [r7], #-412	; 0xfffffe64
 1f4:	0063bb30 	rsbeq	fp, r3, r0, lsr fp
 1f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 1fc:	02002008 	andeq	r2, r0, #8
 200:	20080204 	andcs	r0, r8, r4, lsl #4
 204:	03040200 	movweq	r0, #16896	; 0x4200
 208:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
 20c:	21080605 	tstcs	r8, r5, lsl #12
 210:	06040200 	streq	r0, [r4], -r0, lsl #4
 214:	0200d606 	andeq	sp, r0, #6291456	; 0x600000
 218:	65060904 	strvs	r0, [r6, #-2308]	; 0xfffff6fc
 21c:	2f6767a3 	svccs	0x006767a3
 220:	0883bb69 	stmeq	r3, {r0, r3, r5, r6, r8, r9, fp, ip, sp, pc}
 224:	24039f21 	strcs	r9, [r3], #-3873	; 0xfffff0df
 228:	2f4c8366 	svccs	0x004c8366
 22c:	0200c708 	andeq	ip, r0, #8, 14	; 0x200000
 230:	9e060104 	adflss	f0, f6, f4
 234:	032fa006 			; <UNDEFINED> instruction: 0x032fa006
 238:	69d88220 	ldmibvs	r8, {r5, r9, pc}^
 23c:	67836783 	strvs	r6, [r3, r3, lsl #15]
 240:	01040200 	mrseq	r0, R12_usr
 244:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 248:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 24c:	00820601 	addeq	r0, r2, r1, lsl #12
 250:	4a020402 	bmi	81260 <_start-0xbff86da0>
 254:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 258:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 25c:	002f0604 	eoreq	r0, pc, r4, lsl #12
 260:	4b040402 	blmi	101270 <_start-0xbff06d90>
 264:	674b6783 	strbvs	r6, [fp, -r3, lsl #15]
 268:	834b8383 	movthi	r8, #45955	; 0xb383
 26c:	83694b83 	cmnhi	r9, #134144	; 0x20c00
 270:	68678367 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, pc}^
 274:	83f4674b 	mvnshi	r6, #19660800	; 0x12c0000
 278:	69102e02 	ldmdbvs	r0, {r1, r9, sl, fp, sp}
 27c:	2f83834b 	svccs	0x0083834b
 280:	9f67a09d 	svcls	0x0067a09d
 284:	67bb6783 	ldrvs	r6, [fp, r3, lsl #15]!
 288:	2f83bd9f 	svccs	0x0083bd9f
 28c:	9d2fa09d 	stcls	0, cr10, [pc, #-628]!	; 20 <_start-0xc0007fe0>
 290:	a0f12fbc 	ldrhtge	r2, [r1], #252	; 0xfc
 294:	00a09d2f 	adceq	r9, r0, pc, lsr #26
 298:	2f010402 	svccs	0x00010402
 29c:	0200a16b 	andeq	sl, r0, #-1073741798	; 0xc000001a
 2a0:	66060404 	strvs	r0, [r6], -r4, lsl #8
 2a4:	01040200 	mrseq	r0, R12_usr
 2a8:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 2ac:	84069e03 	strhi	r9, [r6], #-3587	; 0xfffff1fd
 2b0:	12038467 	andne	r8, r3, #1728053248	; 0x67000000
 2b4:	bb8367ba 	bllt	fe0da1a4 <__bss_end__+0x3e0cf154>
 2b8:	02674c32 	rsbeq	r4, r7, #12800	; 0x3200
 2bc:	8383132e 	orrhi	r1, r3, #-1207959552	; 0xb8000000
 2c0:	4b868383 	blmi	fe1a10d4 <__bss_end__+0x3e196084>
 2c4:	01040200 	mrseq	r0, R12_usr
 2c8:	83068206 	movwhi	r8, #25094	; 0x6206
 2cc:	9f68839f 	svcls	0x0068839f
 2d0:	4b6b6767 	blmi	1ada074 <_start-0xbe52df8c>
 2d4:	02006783 	andeq	r6, r0, #34340864	; 0x20c0000
 2d8:	82060104 	andhi	r0, r6, #4, 2
 2dc:	839f8306 	orrshi	r8, pc, #402653184	; 0x18000000
 2e0:	4e67a068 	cdpmi	0, 6, cr10, cr7, cr8, {3}
 2e4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2e8:	00820601 	addeq	r0, r2, r1, lsl #12
 2ec:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 2f0:	03040200 	movweq	r0, #16896	; 0x4200
 2f4:	02008306 	andeq	r8, r0, #402653184	; 0x18000000
 2f8:	4b490304 	blmi	1240f10 <_start-0xbedc70f0>
 2fc:	01040200 	mrseq	r0, R12_usr
 300:	02008206 	andeq	r8, r0, #1610612736	; 0x60000000
 304:	83060204 	movwhi	r0, #25092	; 0x6204
 308:	02040200 	andeq	r0, r4, #0, 4
 30c:	00674c49 	rsbeq	r4, r7, r9, asr #24
 310:	06010402 	streq	r0, [r1], -r2, lsl #8
 314:	4b9f0666 	blmi	fe7c1cb4 <__bss_end__+0x3e7b6c64>
 318:	024c6a68 	subeq	r6, ip, #104, 20	; 0x68000
 31c:	831401b4 	tsthi	r4, #180, 2	; 0x2d
 320:	08bc9d2f 	ldmeq	ip!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, pc}
 324:	bc9d2f21 	ldclt	15, cr2, [sp], {33}	; 0x21
 328:	68679f31 	stmdavs	r7!, {r0, r4, r5, r8, r9, sl, fp, ip, pc}^
 32c:	9d2f83bc 	stcls	3, cr8, [pc, #-752]!	; 44 <_start-0xc0007fbc>
 330:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 334:	02006703 	andeq	r6, r0, #786432	; 0xc0000
 338:	00f10304 	rscseq	r0, r1, r4, lsl #6
 33c:	06010402 	streq	r0, [r1], -r2, lsl #8
 340:	2f840666 	svccs	0x00840666
 344:	6731bc9d 			; <UNDEFINED> instruction: 0x6731bc9d
 348:	0881694b 	stmeq	r1, {r0, r1, r3, r6, r8, fp, sp, lr}
 34c:	9f67323f 	svcls	0x0067323f
 350:	a09f2ba3 	addsge	r2, pc, r3, lsr #23
 354:	4b329f31 	blmi	ca8020 <_start-0xbf35ffe0>
 358:	324b6831 	subcc	r6, fp, #3211264	; 0x310000
 35c:	839f3168 	orrshi	r3, pc, #104, 2
 360:	03672dbd 	cmneq	r7, #12096	; 0x2f40
 364:	0f032e78 	svceq	0x00032e78
 368:	00bb672e 	adcseq	r6, fp, lr, lsr #14
 36c:	06010402 	streq	r0, [r1], -r2, lsl #8
 370:	bb670666 	bllt	19c1d10 <_start-0xbe6462f0>
 374:	bb67bb67 	bllt	19ef118 <_start-0xbe618ee8>
 378:	bc838383 	stclt	3, cr8, [r3], {131}	; 0x83
 37c:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 380:	7ee20302 	cdpvc	3, 14, cr0, cr2, cr2, {0}
 384:	02003c08 	andeq	r3, r0, #8, 24	; 0x800
 388:	66060104 	strvs	r0, [r6], -r4, lsl #2
 38c:	01a00306 	lsleq	r0, r6, #6
 390:	69676782 	stmdbvs	r7!, {r1, r7, r8, r9, sl, sp, lr}^
 394:	2fbc4ba2 	svccs	0x00bc4ba2
 398:	a04f85a1 	subge	r8, pc, r1, lsr #11
 39c:	000a0267 	andeq	r0, sl, r7, ror #4
 3a0:	00a60101 	adceq	r0, r6, r1, lsl #2
 3a4:	00020000 	andeq	r0, r2, r0
 3a8:	00000063 	andeq	r0, r0, r3, rrx
 3ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 3b0:	0101000d 	tsteq	r1, sp
 3b4:	00000101 	andeq	r0, r0, r1, lsl #2
 3b8:	00000100 	andeq	r0, r0, r0, lsl #2
 3bc:	6d6f6301 	stclvs	3, cr6, [pc, #-4]!	; 3c0 <_start-0xc0007c40>
 3c0:	2f6e6f6d 	svccs	0x006e6f6d
 3c4:	00637273 	rsbeq	r7, r3, r3, ror r2
 3c8:	6f632f2e 	svcvs	0x00632f2e
 3cc:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
 3d0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 3d4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 3d8:	61750000 	cmnvs	r5, r0
 3dc:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
 3e0:	00000100 	andeq	r0, r0, r0, lsl #2
 3e4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 3e8:	31706d32 	cmncc	r0, r2, lsr sp
 3ec:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 3f0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 3f4:	00020068 	andeq	r0, r2, r8, rrx
 3f8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 3fc:	706d3233 	rsbvc	r3, sp, r3, lsr r2
 400:	5f787831 	svcpl	0x00787831
 404:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 408:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 40c:	00000000 	andeq	r0, r0, r0
 410:	94140205 	ldrls	r0, [r4], #-517	; 0xfffffdfb
 414:	4c17c000 	ldcmi	0, cr12, [r7], {-0}
 418:	d8d7d7d7 	ldmle	r7, {r0, r1, r2, r4, r6, r7, r8, r9, sl, ip, lr, pc}^
 41c:	d8d7d7d7 	ldmle	r7, {r0, r1, r2, r4, r6, r7, r8, r9, sl, ip, lr, pc}^
 420:	d7d8d8d7 			; <UNDEFINED> instruction: 0xd7d8d8d7
 424:	d7d8d884 	ldrble	sp, [r8, r4, lsl #17]
 428:	009f85d8 			; <UNDEFINED> instruction: 0x009f85d8
 42c:	06010402 	streq	r0, [r1], -r2, lsl #8
 430:	83bb062e 			; <UNDEFINED> instruction: 0x83bb062e
 434:	83684b67 	cmnhi	r8, #105472	; 0x19c00
 438:	6984b92f 	stmibvs	r4, {r0, r1, r2, r3, r5, r8, fp, ip, sp, pc}
 43c:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
 440:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 444:	022f83bb 	eoreq	r8, pc, #-335544318	; 0xec000002
 448:	01010008 	tsteq	r1, r8
 44c:	00000037 	andeq	r0, r0, r7, lsr r0
 450:	00230002 	eoreq	r0, r3, r2
 454:	01020000 	mrseq	r0, (UNDEF: 2)
 458:	000d0efb 	strdeq	r0, [sp], -fp
 45c:	01010101 	tsteq	r1, r1, lsl #2
 460:	01000000 	mrseq	r0, (UNDEF: 0)
 464:	73010000 	movwvc	r0, #4096	; 0x1000
 468:	00006372 	andeq	r6, r0, r2, ror r3
 46c:	695f6f64 	ldmdbvs	pc, {r2, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 470:	632e7172 			; <UNDEFINED> instruction: 0x632e7172
 474:	00000100 	andeq	r0, r0, r0, lsl #2
 478:	02050000 	andeq	r0, r5, #0
 47c:	c00096f0 	strdgt	r9, [r0], -r0
 480:	08024b15 	stmdaeq	r2, {r0, r2, r4, r8, r9, fp, lr}
 484:	cb010100 	blgt	4088c <_start-0xbffc7774>
 488:	02000000 	andeq	r0, r0, #0
 48c:	00006e00 	andeq	r6, r0, r0, lsl #28
 490:	fb010200 	blx	40c9a <_start-0xbffc7366>
 494:	01000d0e 	tsteq	r0, lr, lsl #26
 498:	00010101 	andeq	r0, r1, r1, lsl #2
 49c:	00010000 	andeq	r0, r1, r0
 4a0:	72730100 	rsbsvc	r0, r3, #0, 2
 4a4:	2f2e0063 	svccs	0x002e0063
 4a8:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 4ac:	692f6e6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}	; <UNPREDICTABLE>
 4b0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 4b4:	00006564 	andeq	r6, r0, r4, ror #10
 4b8:	2e6d7770 	mcrcs	7, 3, r7, cr13, cr0, {3}
 4bc:	00010063 	andeq	r0, r1, r3, rrx
 4c0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 4c4:	706d3233 	rsbvc	r3, sp, r3, lsr r2
 4c8:	5f787831 	svcpl	0x00787831
 4cc:	2e6d6974 			; <UNDEFINED> instruction: 0x2e6d6974
 4d0:	00020068 	andeq	r0, r2, r8, rrx
 4d4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 4d8:	706d3233 	rsbvc	r3, sp, r3, lsr r2
 4dc:	5f787831 	svcpl	0x00787831
 4e0:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 4e4:	00020068 	andeq	r0, r2, r8, rrx
 4e8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 4ec:	706d3233 	rsbvc	r3, sp, r3, lsr r2
 4f0:	5f787831 	svcpl	0x00787831
 4f4:	6f697067 	svcvs	0x00697067
 4f8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 4fc:	00000000 	andeq	r0, r0, r0
 500:	97080205 	strls	r0, [r8, -r5, lsl #4]
 504:	4c17c000 	ldcmi	0, cr12, [r7], {-0}
 508:	d8d7a2a0 	ldmle	r7, {r5, r7, r9, sp, pc}^
 50c:	d9d9dad7 	ldmible	r9, {r0, r1, r2, r4, r6, r7, r9, fp, ip, lr, pc}^
 510:	d9d7d7d9 	ldmible	r7, {r0, r3, r4, r6, r7, r8, r9, sl, ip, lr, pc}^
 514:	d9d8d9d9 	ldmible	r8, {r0, r3, r4, r6, r7, r8, fp, ip, lr, pc}^
 518:	d8d8d8d9 	ldmle	r8, {r0, r3, r4, r6, r7, fp, ip, lr, pc}^
 51c:	86d62803 	ldrbhi	r2, [r6], r3, lsl #16
 520:	d7a29f4d 	strle	r9, [r2, sp, asr #30]!
 524:	a0dcd7d8 	ldrsbge	sp, [ip], #120	; 0x78
 528:	a0a2a0a2 	adcge	sl, r2, r2, lsr #1
 52c:	a09fa3a0 	addsge	sl, pc, r0, lsr #7
 530:	69a29f9f 	stmibvs	r2!, {r0, r1, r2, r3, r4, r7, r8, r9, sl, fp, ip, pc}
 534:	87a36869 	strhi	r6, [r3, r9, ror #16]!
 538:	d7a29f4d 	strle	r9, [r2, sp, asr #30]!
 53c:	85dad7d8 	ldrbhi	sp, [sl, #2008]	; 0x7d8
 540:	d7d78885 	ldrble	r8, [r7, r5, lsl #17]
 544:	d8dad7d8 	ldmle	sl, {r3, r4, r6, r7, r8, r9, sl, ip, lr, pc}^
 548:	dad8dad8 	ble	ff6370b0 <__bss_end__+0x3f62c060>
 54c:	00c703d9 	ldrdeq	r0, [r7], #57	; 0x39
 550:	000802d6 	ldrdeq	r0, [r8], -r6
 554:	00680101 	rsbeq	r0, r8, r1, lsl #2
 558:	00020000 	andeq	r0, r2, r0
 55c:	00000023 	andeq	r0, r0, r3, lsr #32
 560:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 564:	0101000d 	tsteq	r1, sp
 568:	00000101 	andeq	r0, r0, r1, lsl #2
 56c:	00000100 	andeq	r0, r0, r0, lsl #2
 570:	63727301 	cmnvs	r2, #67108864	; 0x4000000
 574:	69730000 	ldmdbvs	r3!, {}^	; <UNPREDICTABLE>
 578:	36303037 			; <UNDEFINED> instruction: 0x36303037
 57c:	0100632e 	tsteq	r0, lr, lsr #6
 580:	00000000 	andeq	r0, r0, r0
 584:	9d640205 	sfmls	f0, 2, [r4, #-20]!	; 0xffffffec
 588:	0a03c000 	beq	f0590 <_start-0xbff17a70>
 58c:	2f2f4b01 	svccs	0x002f4b01
 590:	2f4b2f4b 	svccs	0x004b2f4b
 594:	03302f4b 	teqeq	r0, #300	; 0x12c
 598:	2ff54a0c 	svccs	0x00f54a0c
 59c:	2f672f9f 	svccs	0x00672f9f
 5a0:	4b2ff32f 	blmi	bfd264 <_start-0xbf40ad9c>
 5a4:	4b2f8383 	blmi	be13b8 <_start-0xbf426c48>
 5a8:	692f9f67 	stmdbvs	pc!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, pc}	; <UNPREDICTABLE>
 5ac:	2f9f2ff5 	svccs	0x009f2ff5
 5b0:	f32f2f67 	vpmin.f32	q1, <illegal reg q7.5>, <illegal reg q11.5>
 5b4:	83834b2f 	orrhi	r4, r3, #48128	; 0xbc00
 5b8:	9f674b2f 	svcls	0x00674b2f
 5bc:	0006022f 	andeq	r0, r6, pc, lsr #4
 5c0:	012f0101 			; <UNDEFINED> instruction: 0x012f0101
 5c4:	00020000 	andeq	r0, r2, r0
 5c8:	0000005a 	andeq	r0, r0, sl, asr r0
 5cc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 5d0:	0101000d 	tsteq	r1, sp
 5d4:	00000101 	andeq	r0, r0, r1, lsl #2
 5d8:	00000100 	andeq	r0, r0, r0, lsl #2
 5dc:	63727301 	cmnvs	r2, #67108864	; 0x4000000
 5e0:	632f2e00 			; <UNDEFINED> instruction: 0x632f2e00
 5e4:	6f6d6d6f 	svcvs	0x006d6d6f
 5e8:	6e692f6e 	cdpvs	15, 6, cr2, cr9, cr14, {3}
 5ec:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 5f0:	69000065 	stmdbvs	r0, {r0, r2, r5, r6}
 5f4:	632e6369 			; <UNDEFINED> instruction: 0x632e6369
 5f8:	00000100 	andeq	r0, r0, r0, lsl #2
 5fc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 600:	31706d32 	cmncc	r0, r2, lsr sp
 604:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 608:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 60c:	00020068 	andeq	r0, r2, r8, rrx
 610:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 614:	706d3233 	rsbvc	r3, sp, r3, lsr r2
 618:	5f787831 	svcpl	0x00787831
 61c:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 620:	00020068 	andeq	r0, r2, r8, rrx
 624:	05000000 	streq	r0, [r0, #-0]
 628:	009f5402 	addseq	r5, pc, r2, lsl #8
 62c:	010a03c0 	smlabteq	sl, r0, r3, r0
 630:	02004b67 	andeq	r4, r0, #105472	; 0x19c00
 634:	2e060104 	adfcss	f0, f6, f4
 638:	4c8a9f06 	stcmi	15, cr9, [sl], {6}
 63c:	d8d8d7a0 	ldmle	r8, {r5, r7, r8, r9, sl, ip, lr, pc}^
 640:	d7d7d8d8 			; <UNDEFINED> instruction: 0xd7d7d8d8
 644:	03820b03 	orreq	r0, r2, #3072	; 0xc00
 648:	b0084a0b 	andlt	r4, r8, fp, lsl #20
 64c:	30d730d7 	ldrsbcc	r3, [r7], #7
 650:	0a03d8d8 	beq	f69b8 <_start-0xbff11648>
 654:	4a0b034a 	bmi	2c1384 <_start-0xbfd46c7c>
 658:	31d7af08 	bicscc	sl, r7, r8, lsl #30
 65c:	31d730d7 	ldrsbcc	r3, [r7, #7]
 660:	0a0330d7 	beq	cc9c4 <_start-0xbff3b63c>
 664:	9e0f034a 	cdpls	3, 0, cr0, cr15, cr10, {2}
 668:	d769b108 	strble	fp, [r9, -r8, lsl #2]!
 66c:	00f5682f 	rscseq	r6, r5, pc, lsr #16
 670:	d8020402 	stmdale	r2, {r1, sl}
 674:	02040200 	andeq	r0, r4, #0, 4
 678:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
 67c:	0200d702 	andeq	sp, r0, #524288	; 0x80000
 680:	002f0204 	eoreq	r0, pc, r4, lsl #4
 684:	2f020402 	svccs	0x00020402
 688:	02040200 	andeq	r0, r4, #0, 4
 68c:	00666f03 	rsbeq	r6, r6, r3, lsl #30
 690:	06010402 	streq	r0, [r1], -r2, lsl #8
 694:	15030666 	strne	r0, [r3, #-1638]	; 0xfffff99a
 698:	660b0366 	strvs	r0, [fp], -r6, ror #6
 69c:	d99e1003 	ldmible	lr, {r0, r1, ip}
 6a0:	302fd768 	eorcc	sp, pc, r8, ror #14
 6a4:	bc672fd7 	stcllt	15, cr2, [r7], #-860	; 0xfffffca4
 6a8:	02040200 	andeq	r0, r4, #0, 4
 6ac:	0402006b 	streq	r0, [r2], #-107	; 0xffffff95
 6b0:	2e700302 	cdpcs	3, 7, cr0, cr0, cr2, {0}
 6b4:	01040200 	mrseq	r0, R12_usr
 6b8:	03066606 	movweq	r6, #26118	; 0x6606
 6bc:	4d686613 	stclmi	6, cr6, [r8, #-76]!	; 0xffffffb4
 6c0:	0a032f31 	beq	cc38c <_start-0xbff3bc74>
 6c4:	4a110366 	bmi	441464 <_start-0xbfbc6b9c>
 6c8:	30d730d7 	ldrsbcc	r3, [r7], #7
 6cc:	2fd72fd7 	svccs	0x00d72fd7
 6d0:	32d74cbc 	sbcscc	r4, r7, #188, 24	; 0xbc00
 6d4:	4a0a0352 	bmi	281424 <_start-0xbfd86bdc>
 6d8:	31d7af08 	bicscc	sl, r7, r8, lsl #30
 6dc:	2fd731d7 	svccs	0x00d731d7
 6e0:	0352d731 	cmpeq	r2, #12845056	; 0xc40000
 6e4:	af084a09 	svcge	0x00084a09
 6e8:	31d731d7 	ldrsbcc	r3, [r7, #23]
 6ec:	d7312fd7 			; <UNDEFINED> instruction: 0xd7312fd7
 6f0:	01000402 	tsteq	r0, r2, lsl #8
 6f4:	00005201 	andeq	r5, r0, r1, lsl #4
 6f8:	1d000200 	sfmne	f0, 4, [r0, #-0]
 6fc:	02000000 	andeq	r0, r0, #0
 700:	0d0efb01 	vstreq	d15, [lr, #-4]
 704:	01010100 	mrseq	r0, (UNDEF: 17)
 708:	00000001 	andeq	r0, r0, r1
 70c:	01000001 	tsteq	r0, r1
 710:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 714:	00632e6e 	rsbeq	r2, r3, lr, ror #28
 718:	00000000 	andeq	r0, r0, r0
 71c:	74020500 	strvc	r0, [r2], #-1280	; 0xfffffb00
 720:	15c000a6 	strbne	r0, [r0, #166]	; 0xa6
 724:	02006784 	andeq	r6, r0, #132, 14	; 0x2100000
 728:	66060304 	strvs	r0, [r6], -r4, lsl #6
 72c:	01040200 	mrseq	r0, R12_usr
 730:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 734:	00810602 	addeq	r0, r1, r2, lsl #12
 738:	06010402 	streq	r0, [r1], -r2, lsl #8
 73c:	87840666 	strhi	r0, [r4, r6, ror #12]
 740:	04020050 	streq	r0, [r2], #-80	; 0xffffffb0
 744:	02022f01 	andeq	r2, r2, #1, 30
 748:	Address 0x00000748 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000062 	andeq	r0, r0, r2, rrx
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000000 	andeq	r0, r0, r0
      10:	c0008000 	andgt	r8, r0, r0
      14:	c0008218 	andgt	r8, r0, r8, lsl r2
      18:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
      1c:	74732f74 	ldrbtvc	r2, [r3], #-3956	; 0xfffff08c
      20:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
      24:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
      28:	2f656d6f 	svccs	0x00656d6f
      2c:	756e696c 	strbvc	r6, [lr, #-2412]!	; 0xfffff694
      30:	61662f78 	smcvs	25336	; 0x62f8
      34:	67697372 			; <UNDEFINED> instruction: 0x67697372
      38:	412f7468 			; <UNDEFINED> instruction: 0x412f7468
      3c:	442f4d52 	strtmi	r4, [pc], #-3410	; 44 <_start-0xc0007fbc>
      40:	31323243 	teqcc	r2, r3, asr #4
      44:	642f3131 	strtvs	r3, [pc], #-305	; 4c <_start-0xc0007fb4>
      48:	30317961 	eorscc	r7, r1, r1, ror #18
      4c:	2d32302f 	ldccs	0, cr3, [r2, #-188]!	; 0xffffff44
      50:	2d6d7770 	stclcs	7, cr7, [sp, #-448]!	; 0xfffffe40
      54:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
      58:	53412055 	movtpl	r2, #4181	; 0x1055
      5c:	322e3220 	eorcc	r3, lr, #32, 4
      60:	00322e38 	eorseq	r2, r2, r8, lsr lr
      64:	006a8001 	rsbeq	r8, sl, r1
      68:	00020000 	andeq	r0, r2, r0
      6c:	00000014 	andeq	r0, r0, r4, lsl r0
      70:	00970104 	addseq	r0, r7, r4, lsl #2
      74:	82180000 	andshi	r0, r8, #0
      78:	82c8c000 	sbchi	ip, r8, #0
      7c:	6f63c000 	svcvs	0x0063c000
      80:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
      84:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
      88:	6d755f2f 	ldclvs	15, cr5, [r5, #-188]!	; 0xffffff44
      8c:	6973646f 	ldmdbvs	r3!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
      90:	00532e33 	subseq	r2, r3, r3, lsr lr
      94:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffe0 <__bss_end__+0x3fff4f90>
      98:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
      9c:	2f78756e 	svccs	0x0078756e
      a0:	73726166 	cmnvc	r2, #-2147483623	; 0x80000019
      a4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
      a8:	4d52412f 	ldfmie	f4, [r2, #-188]	; 0xffffff44
      ac:	3243442f 	subcc	r4, r3, #788529152	; 0x2f000000
      b0:	31313132 	teqcc	r1, r2, lsr r1
      b4:	7961642f 	stmdbvc	r1!, {r0, r1, r2, r3, r5, sl, sp, lr}^
      b8:	302f3031 	eorcc	r3, pc, r1, lsr r0	; <UNPREDICTABLE>
      bc:	77702d32 			; <UNDEFINED> instruction: 0x77702d32
      c0:	00632d6d 	rsbeq	r2, r3, sp, ror #26
      c4:	20554e47 	subscs	r4, r5, r7, asr #28
      c8:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      cc:	2e38322e 	cdpcs	2, 3, cr3, cr8, cr14, {1}
      d0:	80010032 	andhi	r0, r1, r2, lsr r0
      d4:	0000006a 	andeq	r0, r0, sl, rrx
      d8:	00280002 	eoreq	r0, r8, r2
      dc:	01040000 	mrseq	r0, (UNDEF: 4)
      e0:	00000107 	andeq	r0, r0, r7, lsl #2
      e4:	c00082c8 	andgt	r8, r0, r8, asr #5
      e8:	c000835c 	andgt	r8, r0, ip, asr r3
      ec:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
      f0:	732f6e6f 			; <UNDEFINED> instruction: 0x732f6e6f
      f4:	5f2f6372 	svcpl	0x002f6372
      f8:	76696475 			; <UNDEFINED> instruction: 0x76696475
      fc:	2e336973 			; <UNDEFINED> instruction: 0x2e336973
     100:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
     104:	2f656d6f 	svccs	0x00656d6f
     108:	756e696c 	strbvc	r6, [lr, #-2412]!	; 0xfffff694
     10c:	61662f78 	smcvs	25336	; 0x62f8
     110:	67697372 			; <UNDEFINED> instruction: 0x67697372
     114:	412f7468 			; <UNDEFINED> instruction: 0x412f7468
     118:	442f4d52 	strtmi	r4, [pc], #-3410	; 120 <_start-0xc0007ee0>
     11c:	31323243 	teqcc	r2, r3, asr #4
     120:	642f3131 	strtvs	r3, [pc], #-305	; 128 <_start-0xc0007ed8>
     124:	30317961 	eorscc	r7, r1, r1, ror #18
     128:	2d32302f 	ldccs	0, cr3, [r2, #-188]!	; 0xffffff44
     12c:	2d6d7770 	stclcs	7, cr7, [sp, #-448]!	; 0xfffffe40
     130:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
     134:	53412055 	movtpl	r2, #4181	; 0x1055
     138:	322e3220 	eorcc	r3, lr, #32, 4
     13c:	00322e38 	eorseq	r2, r2, r8, lsr lr
     140:	047e8001 	ldrbteq	r8, [lr], #-1
     144:	00040000 	andeq	r0, r4, r0
     148:	0000003c 	andeq	r0, r0, ip, lsr r0
     14c:	00520104 	subseq	r0, r2, r4, lsl #2
     150:	410c0000 	mrsmi	r0, (UNDEF: 12)
     154:	fe000001 	cdp2	0, 0, cr0, cr0, cr1, {0}
     158:	5c000000 	stcpl	0, cr0, [r0], {-0}
     15c:	b8c00083 	stmialt	r0, {r0, r1, r7}^
     160:	70000010 	andvc	r0, r0, r0, lsl r0
     164:	02000001 	andeq	r0, r0, #1
     168:	00000039 	andeq	r0, r0, r9, lsr r0
     16c:	00302803 	eorseq	r2, r0, r3, lsl #16
     170:	04030000 	streq	r0, [r3], #-0
     174:	00000007 	andeq	r0, r0, r7
     178:	00004002 	andeq	r4, r0, r2
     17c:	25660300 	strbcs	r0, [r6, #-768]!	; 0xfffffd00
     180:	04000000 	streq	r0, [r0], #-0
     184:	00000058 	andeq	r0, r0, r8, asr r0
     188:	00000051 	andeq	r0, r0, r1, asr r0
     18c:	00005105 	andeq	r5, r0, r5, lsl #2
     190:	0600ff00 	streq	pc, [r0], -r0, lsl #30
     194:	00f10704 	rscseq	r0, r1, r4, lsl #14
     198:	01060000 	mrseq	r0, (UNDEF: 6)
     19c:	0000de08 	andeq	sp, r0, r8, lsl #28
     1a0:	01960700 	orrseq	r0, r6, r0, lsl #14
     1a4:	11010000 	mrsne	r0, (UNDEF: 1)
     1a8:	00000041 	andeq	r0, r0, r1, asr #32
     1ac:	af4c0305 	svcge	0x004c0305
     1b0:	d008c000 	andle	ip, r8, r0
     1b4:	02000001 	andeq	r0, r0, #1
     1b8:	93c8017d 	bicls	r0, r8, #1073741855	; 0x4000001f
     1bc:	004cc000 	subeq	ip, ip, r0
     1c0:	9c010000 	stcls	0, cr0, [r1], {-0}
     1c4:	000000b6 	strheq	r0, [r0], -r6
     1c8:	746d6609 	strbtvc	r6, [sp], #-1545	; 0xfffff9f7
     1cc:	017d0200 	cmneq	sp, r0, lsl #4
     1d0:	000000b6 	strheq	r0, [r0], -r6
     1d4:	0a709102 	beq	1c245e4 <_start-0xbe3e3a1c>
     1d8:	0001b50b 	andeq	fp, r1, fp, lsl #10
     1dc:	017f0200 	cmneq	pc, r0, lsl #4
     1e0:	00000036 	andeq	r0, r0, r6, lsr r0
     1e4:	0b649102 	bleq	19245f4 <_start-0xbe6e3a0c>
     1e8:	0000019d 	muleq	r0, sp, r1
     1ec:	c8018002 	stmdagt	r1, {r1, pc}
     1f0:	03000000 	movweq	r0, #0
     1f4:	007f8091 			; <UNDEFINED> instruction: 0x007f8091
     1f8:	00c3040c 	sbceq	r0, r3, ip, lsl #8
     1fc:	01060000 	mrseq	r0, (UNDEF: 6)
     200:	0000e708 	andeq	lr, r0, r8, lsl #14
     204:	00bc0d00 	adcseq	r0, ip, r0, lsl #26
     208:	bc040000 	stclt	0, cr0, [r4], {-0}
     20c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     210:	05000000 	streq	r0, [r0, #-0]
     214:	00000051 	andeq	r0, r0, r1, asr r0
     218:	cf0e0063 	svcgt	0x000e0063
     21c:	02000001 	andeq	r0, r0, #1
     220:	012e0172 			; <UNDEFINED> instruction: 0x012e0172
     224:	937c0000 	cmnls	ip, #0
     228:	004cc000 	subeq	ip, ip, r0
     22c:	9c010000 	stcls	0, cr0, [r1], {-0}
     230:	0000012e 	andeq	r0, r0, lr, lsr #2
     234:	66756209 	ldrbtvs	r6, [r5], -r9, lsl #4
     238:	01720200 	cmneq	r2, r0, lsl #4
     23c:	00000135 	andeq	r0, r0, r5, lsr r1
     240:	09609102 	stmdbeq	r0!, {r1, r8, ip, pc}^
     244:	00746d66 	rsbseq	r6, r4, r6, ror #26
     248:	b6017202 	strlt	r7, [r1], -r2, lsl #4
     24c:	02000000 	andeq	r0, r0, #0
     250:	0b0a7491 	bleq	29d49c <_start-0xbfd6ab64>
     254:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     258:	36017402 	strcc	r7, [r1], -r2, lsl #8
     25c:	02000000 	andeq	r0, r0, #0
     260:	690f6491 	stmdbvs	pc, {r0, r4, r7, sl, sp, lr}	; <UNPREDICTABLE>
     264:	01750200 	cmneq	r5, r0, lsl #4
     268:	0000012e 	andeq	r0, r0, lr, lsr #2
     26c:	00689102 	rsbeq	r9, r8, r2, lsl #2
     270:	69050410 	stmdbvs	r5, {r4, sl}
     274:	0c00746e 	cfstrseq	mvf7, [r0], {110}	; 0x6e
     278:	0000bc04 	andeq	fp, r0, r4, lsl #24
     27c:	01ce1100 	biceq	r1, lr, r0, lsl #2
     280:	bb020000 	bllt	80288 <_start-0xbff87d78>
     284:	0000012e 	andeq	r0, r0, lr, lsr #2
     288:	c0008ab4 			; <UNDEFINED> instruction: 0xc0008ab4
     28c:	000008c8 	andeq	r0, r0, r8, asr #17
     290:	02479c01 	subeq	r9, r7, #256	; 0x100
     294:	62120000 	andsvs	r0, r2, #0
     298:	02006675 	andeq	r6, r0, #122683392	; 0x7500000
     29c:	000135bb 			; <UNDEFINED> instruction: 0x000135bb
     2a0:	44910200 	ldrmi	r0, [r1], #512	; 0x200
     2a4:	746d6612 	strbtvc	r6, [sp], #-1554	; 0xfffff9ee
     2a8:	b6bb0200 	ldrtlt	r0, [fp], r0, lsl #4
     2ac:	02000000 	andeq	r0, r0, #0
     2b0:	b5134091 	ldrlt	r4, [r3, #-145]	; 0xffffff6f
     2b4:	02000001 	andeq	r0, r0, #1
     2b8:	000036bb 			; <UNDEFINED> instruction: 0x000036bb
     2bc:	bc910300 	ldclt	3, cr0, [r1], {0}
     2c0:	656c147f 	strbvs	r1, [ip, #-1151]!	; 0xfffffb81
     2c4:	bd02006e 	stclt	0, cr0, [r2, #-440]	; 0xfffffe48
     2c8:	0000012e 	andeq	r0, r0, lr, lsr #2
     2cc:	14509102 	ldrbne	r9, [r0], #-258	; 0xfffffefe
     2d0:	006d756e 	rsbeq	r7, sp, lr, ror #10
     2d4:	0247c102 	subeq	ip, r7, #-2147483648	; 0x80000000
     2d8:	91020000 	mrsls	r0, (UNDEF: 2)
     2dc:	00691474 	rsbeq	r1, r9, r4, ror r4
     2e0:	012ec302 			; <UNDEFINED> instruction: 0x012ec302
     2e4:	91020000 	mrsls	r0, (UNDEF: 2)
     2e8:	00d91570 	sbcseq	r1, r9, r0, ror r5
     2ec:	c3020000 	movwgt	r0, #8192	; 0x2000
     2f0:	0000012e 	andeq	r0, r0, lr, lsr #2
     2f4:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
     2f8:	00727473 	rsbseq	r7, r2, r3, ror r4
     2fc:	0135c402 	teqeq	r5, r2, lsl #8
     300:	91020000 	mrsls	r0, (UNDEF: 2)
     304:	00731468 	rsbseq	r1, r3, r8, ror #8
     308:	00b6c502 	adcseq	ip, r6, r2, lsl #10
     30c:	91020000 	mrsls	r0, (UNDEF: 2)
     310:	01551564 	cmpeq	r5, r4, ror #10
     314:	c7020000 	strgt	r0, [r2, -r0]
     318:	0000012e 	andeq	r0, r0, lr, lsr #2
     31c:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
     320:	000001a9 	andeq	r0, r0, r9, lsr #3
     324:	012ec902 			; <UNDEFINED> instruction: 0x012ec902
     328:	91020000 	mrsls	r0, (UNDEF: 2)
     32c:	0048155c 	subeq	r1, r8, ip, asr r5
     330:	ca020000 	bgt	80338 <_start-0xbff87cc8>
     334:	0000012e 	andeq	r0, r0, lr, lsr #2
     338:	15589102 	ldrbne	r9, [r8, #-258]	; 0xfffffefe
     33c:	00000160 	andeq	r0, r0, r0, ror #2
     340:	012ecc02 			; <UNDEFINED> instruction: 0x012ecc02
     344:	91020000 	mrsls	r0, (UNDEF: 2)
     348:	01801654 	orreq	r1, r0, r4, asr r6
     34c:	d6020000 	strle	r0, [r2], -r0
     350:	c0008b0c 	andgt	r8, r0, ip, lsl #22
     354:	00912417 	addseq	r2, r1, r7, lsl r4
     358:	000028c0 	andeq	r2, r0, r0, asr #17
     35c:	00022e00 	andeq	r2, r2, r0, lsl #28
     360:	70690f00 	rsbvc	r0, r9, r0, lsl #30
     364:	01340200 	teqeq	r4, r0, lsl #4
     368:	0000024e 	andeq	r0, r0, lr, asr #4
     36c:	00489102 	subeq	r9, r8, r2, lsl #2
     370:	00915018 	addseq	r5, r1, r8, lsl r0
     374:	000028c0 	andeq	r2, r0, r0, asr #17
     378:	70690f00 	rsbvc	r0, r9, r0, lsl #30
     37c:	01370200 	teqeq	r7, r0, lsl #4
     380:	0000025b 	andeq	r0, r0, fp, asr r2
     384:	004c9102 	subeq	r9, ip, r2, lsl #2
     388:	07040600 	streq	r0, [r4, -r0, lsl #12]
     38c:	000000ec 	andeq	r0, r0, ip, ror #1
     390:	0254040c 	subseq	r0, r4, #12, 8	; 0xc000000
     394:	04060000 	streq	r0, [r6], #-0
     398:	0001ba05 	andeq	fp, r1, r5, lsl #20
     39c:	2e040c00 	cdpcs	12, 0, cr0, cr4, cr0, {0}
     3a0:	19000001 	stmdbne	r0, {r0}
     3a4:	00000187 	andeq	r0, r0, r7, lsl #3
     3a8:	0051b302 	subseq	fp, r1, r2, lsl #6
     3ac:	8a480000 	bhi	12003b4 <_start-0xbee07c4c>
     3b0:	006cc000 	rsbeq	ip, ip, r0
     3b4:	9c010000 	stcls	0, cr0, [r1], {-0}
     3b8:	000002a2 	andeq	r0, r0, r2, lsr #5
     3bc:	02007312 	andeq	r7, r0, #1207959552	; 0x48000000
     3c0:	0000b6b3 			; <UNDEFINED> instruction: 0x0000b6b3
     3c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     3c8:	00002913 	andeq	r2, r0, r3, lsl r9
     3cc:	51b30200 			; <UNDEFINED> instruction: 0x51b30200
     3d0:	02000000 	andeq	r0, r0, #0
     3d4:	73147091 	tstvc	r4, #145	; 0x91
     3d8:	b5020063 	strlt	r0, [r2, #-99]	; 0xffffff9d
     3dc:	000000b6 	strheq	r0, [r0], -r6
     3e0:	00789102 	rsbseq	r9, r8, r2, lsl #2
     3e4:	00018f1a 	andeq	r8, r1, sl, lsl pc
     3e8:	356e0200 	strbcc	r0, [lr, #-512]!	; 0xfffffe00
     3ec:	64000001 	strvs	r0, [r0], #-1
     3f0:	e4c00086 	strb	r0, [r0], #134	; 0x86
     3f4:	01000003 	tsteq	r0, r3
     3f8:	00036f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
     3fc:	74731200 	ldrbtvc	r1, [r3], #-512	; 0xfffffe00
     400:	6e020072 	mcrvs	0, 0, r0, cr2, cr2, {3}
     404:	00000135 	andeq	r0, r0, r5, lsr r1
     408:	7f9c9103 	svcvc	0x009c9103
     40c:	6d756e12 	ldclvs	14, cr6, [r5, #-72]!	; 0xffffffb8
     410:	546e0200 	strbtpl	r0, [lr], #-512	; 0xfffffe00
     414:	03000002 	movweq	r0, #2
     418:	137f9891 	cmnne	pc, #9502720	; 0x910000
     41c:	000000d9 	ldrdeq	r0, [r0], -r9
     420:	00516e02 	subseq	r6, r1, r2, lsl #28
     424:	91030000 	mrsls	r0, (UNDEF: 3)
     428:	5b137f94 	blpl	4e0280 <_start-0xbfb27d80>
     42c:	02000001 	andeq	r0, r0, #1
     430:	00012e6e 	andeq	r2, r1, lr, ror #28
     434:	90910300 	addsls	r0, r1, r0, lsl #6
     438:	0048137f 	subeq	r1, r8, pc, ror r3
     43c:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
     440:	0000012e 	andeq	r0, r0, lr, lsr #2
     444:	13009102 	movwne	r9, #258	; 0x102
     448:	00000198 	muleq	r0, r8, r1
     44c:	012e6e02 			; <UNDEFINED> instruction: 0x012e6e02
     450:	91020000 	mrsls	r0, (UNDEF: 2)
     454:	00631404 	rsbeq	r1, r3, r4, lsl #8
     458:	00bc7102 	adcseq	r7, ip, r2, lsl #2
     45c:	91020000 	mrsls	r0, (UNDEF: 2)
     460:	01c3156b 	biceq	r1, r3, fp, ror #10
     464:	71020000 	mrsvc	r0, (UNDEF: 2)
     468:	000000bc 	strheq	r0, [r0], -ip
     46c:	14779102 	ldrbtne	r9, [r7], #-258	; 0xfffffefe
     470:	00706d74 	rsbseq	r6, r0, r4, ror sp
     474:	036f7102 	cmneq	pc, #-2147483648	; 0x80000000
     478:	91030000 	mrsls	r0, (UNDEF: 3)
     47c:	00157fa0 	andseq	r7, r5, r0, lsr #31
     480:	02000000 	andeq	r0, r0, #0
     484:	0000b672 	andeq	fp, r0, r2, ror r6
     488:	70910200 	addsvc	r0, r1, r0, lsl #4
     48c:	02006914 	andeq	r6, r0, #20, 18	; 0x50000
     490:	00012e73 	andeq	r2, r1, r3, ror lr
     494:	6c910200 	lfmvs	f0, 4, [r1], {0}
     498:	00882018 	addeq	r2, r8, r8, lsl r0
     49c:	000034c0 	andeq	r3, r0, r0, asr #9
     4a0:	01c81500 	biceq	r1, r8, r0, lsl #10
     4a4:	95020000 	strls	r0, [r2, #-0]
     4a8:	0000012e 	andeq	r0, r0, lr, lsr #2
     4ac:	00649102 	rsbeq	r9, r4, r2, lsl #2
     4b0:	00bc0400 	adcseq	r0, ip, r0, lsl #8
     4b4:	037f0000 	cmneq	pc, #0
     4b8:	51050000 	mrspl	r0, (UNDEF: 5)
     4bc:	41000000 	mrsmi	r0, (UNDEF: 0)
     4c0:	00191b00 	andseq	r1, r9, r0, lsl #22
     4c4:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
     4c8:	0000012e 	andeq	r0, r0, lr, lsr #2
     4cc:	c00085d0 	ldrdgt	r8, [r0], -r0
     4d0:	00000094 	muleq	r0, r4, r0
     4d4:	03b19c01 			; <UNDEFINED> instruction: 0x03b19c01
     4d8:	73120000 	tstvc	r2, #0
     4dc:	b1490200 	mrslt	r0, (UNDEF: 105)
     4e0:	02000003 	andeq	r0, r0, #3
     4e4:	69147491 	ldmdbvs	r4, {r0, r4, r7, sl, ip, sp, lr}
     4e8:	2e4b0200 	cdpcs	2, 4, cr0, cr11, cr0, {0}
     4ec:	02000001 	andeq	r0, r0, #1
     4f0:	0c007891 	stceq	8, cr7, [r0], {145}	; 0x91
     4f4:	0000b604 	andeq	fp, r0, r4, lsl #12
     4f8:	01331100 	teqeq	r3, r0, lsl #2
     4fc:	21020000 	mrscs	r0, (UNDEF: 2)
     500:	00000254 	andeq	r0, r0, r4, asr r2
     504:	c0008564 	andgt	r8, r0, r4, ror #10
     508:	0000006c 	andeq	r0, r0, ip, rrx
     50c:	03fa9c01 	mvnseq	r9, #256	; 0x100
     510:	63120000 	tstvs	r2, #0
     514:	21020070 	tstcs	r2, r0, ror r0
     518:	000000b6 	strheq	r0, [r0], -r6
     51c:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
     520:	0000012e 	andeq	r0, r0, lr, lsr #2
     524:	03fa2102 	mvnseq	r2, #-2147483648	; 0x80000000
     528:	91020000 	mrsls	r0, (UNDEF: 2)
     52c:	00d91370 	sbcseq	r1, r9, r0, ror r3
     530:	21020000 	mrscs	r0, (UNDEF: 2)
     534:	00000051 	andeq	r0, r0, r1, asr r0
     538:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     53c:	0135040c 	teqeq	r5, ip, lsl #8
     540:	6a110000 	bvs	440548 <_start-0xbfbc7ab8>
     544:	02000001 	andeq	r0, r0, #1
     548:	00024706 	andeq	r4, r2, r6, lsl #14
     54c:	0083ac00 	addeq	sl, r3, r0, lsl #24
     550:	0001b8c0 	andeq	fp, r1, r0, asr #17
     554:	5f9c0100 	svcpl	0x009c0100
     558:	12000004 	andne	r0, r0, #4
     55c:	02007063 	andeq	r7, r0, #99	; 0x63
     560:	0000b606 	andeq	fp, r0, r6, lsl #12
     564:	6c910200 	lfmvs	f0, 4, [r1], {0}
     568:	00012e13 	andeq	r2, r1, r3, lsl lr
     56c:	fa060200 	blx	180d74 <_start-0xbfe8728c>
     570:	02000003 	andeq	r0, r0, #3
     574:	d9136891 	ldmdble	r3, {r0, r4, r7, fp, sp, lr}
     578:	02000000 	andeq	r0, r0, #0
     57c:	00005106 	andeq	r5, r0, r6, lsl #2
     580:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     584:	00017915 	andeq	r7, r1, r5, lsl r9
     588:	47080200 	strmi	r0, [r8, -r0, lsl #4]
     58c:	02000002 	andeq	r0, r0, #2
     590:	23157491 	tstcs	r5, #-1862270976	; 0x91000000
     594:	02000000 	andeq	r0, r0, #0
     598:	00024708 	andeq	r4, r2, r8, lsl #14
     59c:	70910200 	addsvc	r0, r1, r0, lsl #4
     5a0:	002f1c00 	eoreq	r1, pc, r0, lsl #24
     5a4:	44010000 	strmi	r0, [r1], #-0
     5a8:	00000058 	andeq	r0, r0, r8, asr r0
     5ac:	c000835c 	andgt	r8, r0, ip, asr r3
     5b0:	00000050 	andeq	r0, r0, r0, asr r0
     5b4:	63129c01 	tstvs	r2, #256	; 0x100
     5b8:	58440100 	stmdapl	r4, {r8}^
     5bc:	02000000 	andeq	r0, r0, #0
     5c0:	00007891 	muleq	r0, r1, r8
     5c4:	00000214 	andeq	r0, r0, r4, lsl r2
     5c8:	01f80004 	mvnseq	r0, r4
     5cc:	01040000 	mrseq	r0, (UNDEF: 4)
     5d0:	00000052 	andeq	r0, r0, r2, asr r0
     5d4:	00025c0c 	andeq	r5, r2, ip, lsl #24
     5d8:	0000fe00 	andeq	pc, r0, r0, lsl #28
     5dc:	00941400 	addseq	r1, r4, r0, lsl #8
     5e0:	0002dcc0 	andeq	sp, r2, r0, asr #25
     5e4:	0003a200 	andeq	sl, r3, r0, lsl #4
     5e8:	02340200 	eorseq	r0, r4, #0, 4
     5ec:	0000ca04 	andeq	ip, r0, r4, lsl #20
     5f0:	02070300 	andeq	r0, r7, #0, 6
     5f4:	05020000 	streq	r0, [r2, #-0]
     5f8:	000000d1 	ldrdeq	r0, [r0], -r1
     5fc:	023f0300 	eorseq	r0, pc, #0, 6
     600:	06020000 	streq	r0, [r2], -r0
     604:	000000d1 	ldrdeq	r0, [r0], -r1
     608:	020d0304 	andeq	r0, sp, #4, 6	; 0x10000000
     60c:	07020000 	streq	r0, [r2, -r0]
     610:	000000d1 	ldrdeq	r0, [r0], -r1
     614:	02010308 	andeq	r0, r1, #8, 6	; 0x20000000
     618:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     61c:	000000d1 	ldrdeq	r0, [r0], -r1
     620:	4449040c 	strbmi	r0, [r9], #-1036	; 0xfffffbf4
     624:	09020052 	stmdbeq	r2, {r1, r4, r6}
     628:	000000d1 	ldrdeq	r0, [r0], -r1
     62c:	444f0410 	strbmi	r0, [pc], #-1040	; 634 <_start-0xc00079cc>
     630:	0a020052 	beq	80780 <_start-0xbff87880>
     634:	000000d1 	ldrdeq	r0, [r0], -r1
     638:	01fc0314 	mvnseq	r0, r4, lsl r3
     63c:	0b020000 	bleq	80644 <_start-0xbff879bc>
     640:	000000d1 	ldrdeq	r0, [r0], -r1
     644:	02330318 	eorseq	r0, r3, #24, 6	; 0x60000000
     648:	0c020000 	stceq	0, cr0, [r2], {-0}
     64c:	000000d1 	ldrdeq	r0, [r0], -r1
     650:	0246031c 	subeq	r0, r6, #28, 6	; 0x70000000
     654:	0d020000 	stceq	0, cr0, [r2, #-0]
     658:	000000d1 	ldrdeq	r0, [r0], -r1
     65c:	02570320 	subseq	r0, r7, #32, 6	; 0x80000000
     660:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     664:	000000d1 	ldrdeq	r0, [r0], -r1
     668:	52420424 	subpl	r0, r2, #36, 8	; 0x24000000
     66c:	0f020052 	svceq	0x00020052
     670:	000000d1 	ldrdeq	r0, [r0], -r1
     674:	65720428 	ldrbvs	r0, [r2, #-1064]!	; 0xfffffbd8
     678:	10020073 	andne	r0, r2, r3, ror r0
     67c:	000000d1 	ldrdeq	r0, [r0], -r1
     680:	01e3032c 	mvneq	r0, ip, lsr #6
     684:	11020000 	mrsne	r0, (UNDEF: 2)
     688:	000000d1 	ldrdeq	r0, [r0], -r1
     68c:	04050030 	streq	r0, [r5], #-48	; 0xffffffd0
     690:	0000f107 	andeq	pc, r0, r7, lsl #2
     694:	00ca0600 	sbceq	r0, sl, r0, lsl #12
     698:	2c070000 	stccs	0, cr0, [r7], {-0}
     69c:	02000002 	andeq	r0, r0, #2
     6a0:	00002513 	andeq	r2, r0, r3, lsl r5
     6a4:	03300200 	teqeq	r0, #0, 4
     6a8:	00017a04 	andeq	r7, r1, r4, lsl #20
     6ac:	52430400 	subpl	r0, r3, #0, 8
     6b0:	05030031 	streq	r0, [r3, #-49]	; 0xffffffcf
     6b4:	000000d1 	ldrdeq	r0, [r0], -r1
     6b8:	52430400 	subpl	r0, r3, #0, 8
     6bc:	06030032 			; <UNDEFINED> instruction: 0x06030032
     6c0:	000000d1 	ldrdeq	r0, [r0], -r1
     6c4:	52430404 	subpl	r0, r3, #4, 8	; 0x4000000
     6c8:	07030033 	smladxeq	r3, r3, r0, r0
     6cc:	000000d1 	ldrdeq	r0, [r0], -r1
     6d0:	52420408 	subpl	r0, r2, #8, 8	; 0x8000000
     6d4:	08030052 	stmdaeq	r3, {r1, r4, r6}
     6d8:	000000d1 	ldrdeq	r0, [r0], -r1
     6dc:	0215030c 	andseq	r0, r5, #12, 6	; 0x30000000
     6e0:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     6e4:	000000d1 	ldrdeq	r0, [r0], -r1
     6e8:	01f70310 	mvnseq	r0, r0, lsl r3
     6ec:	0a030000 	beq	c06f4 <_start-0xbff4790c>
     6f0:	000000d1 	ldrdeq	r0, [r0], -r1
     6f4:	51520414 	cmppl	r2, r4, lsl r4
     6f8:	0b030052 	bleq	c0848 <_start-0xbff477b8>
     6fc:	000000d1 	ldrdeq	r0, [r0], -r1
     700:	53490418 	movtpl	r0, #37912	; 0x9418
     704:	0c030052 	stceq	0, cr0, [r3], {82}	; 0x52
     708:	000000d1 	ldrdeq	r0, [r0], -r1
     70c:	4349041c 	movtmi	r0, #37916	; 0x941c
     710:	0d030052 	stceq	0, cr0, [r3, #-328]	; 0xfffffeb8
     714:	000000d1 	ldrdeq	r0, [r0], -r1
     718:	44520420 	ldrbmi	r0, [r2], #-1056	; 0xfffffbe0
     71c:	0e030052 	mcreq	0, 0, r0, cr3, cr2, {2}
     720:	000000d1 	ldrdeq	r0, [r0], -r1
     724:	44540424 	ldrbmi	r0, [r4], #-1060	; 0xfffffbdc
     728:	0f030052 	svceq	0x00030052
     72c:	000000d1 	ldrdeq	r0, [r0], -r1
     730:	021a0328 	andseq	r0, sl, #40, 6	; 0xa0000000
     734:	10030000 	andne	r0, r3, r0
     738:	000000d1 	ldrdeq	r0, [r0], -r1
     73c:	3807002c 	stmdacc	r7, {r2, r3, r5}
     740:	03000002 	movweq	r0, #2
     744:	0000e111 	andeq	lr, r0, r1, lsl r1
     748:	024b0800 	subeq	r0, fp, #0, 16
     74c:	30010000 	andcc	r0, r1, r0
     750:	000001ac 	andeq	r0, r0, ip, lsr #3
     754:	c00096a4 	andgt	r9, r0, r4, lsr #13
     758:	0000004c 	andeq	r0, r0, ip, asr #32
     75c:	01ac9c01 			; <UNDEFINED> instruction: 0x01ac9c01
     760:	63090000 	movwvs	r0, #36864	; 0x9000
     764:	32010068 	andcc	r0, r1, #104	; 0x68
     768:	000001ac 	andeq	r0, r0, ip, lsr #3
     76c:	007b9102 	rsbseq	r9, fp, r2, lsl #2
     770:	e7080105 	str	r0, [r8, -r5, lsl #2]
     774:	0a000000 	beq	77c <_start-0xc0007884>
     778:	000001ac 	andeq	r0, r0, ip, lsr #3
     77c:	0001eb0b 	andeq	lr, r1, fp, lsl #22
     780:	5c2a0100 	stfpls	f0, [sl], #-0
     784:	48c00096 	stmiami	r0, {r1, r2, r4, r7}^
     788:	01000000 	mrseq	r0, (UNDEF: 0)
     78c:	0001dc9c 	muleq	r1, ip, ip
     790:	026e0c00 	rsbeq	r0, lr, #0, 24
     794:	2a010000 	bcs	4079c <_start-0xbffc7864>
     798:	000001dc 	ldrdeq	r0, [r0], -ip
     79c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     7a0:	01b3040d 			; <UNDEFINED> instruction: 0x01b3040d
     7a4:	d70b0000 	strle	r0, [fp, -r0]
     7a8:	01000001 	tsteq	r0, r1
     7ac:	0095fc23 	addseq	pc, r5, r3, lsr #24
     7b0:	000060c0 	andeq	r6, r0, r0, asr #1
     7b4:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     7b8:	0c000002 	stceq	0, cr0, [r0], {2}
     7bc:	00000efe 	strdeq	r0, [r0], -lr
     7c0:	01b32301 			; <UNDEFINED> instruction: 0x01b32301
     7c4:	91020000 	mrsls	r0, (UNDEF: 2)
     7c8:	200e0074 	andcs	r0, lr, r4, ror r0
     7cc:	01000002 	tsteq	r0, r2
     7d0:	00941405 	addseq	r1, r4, r5, lsl #8
     7d4:	0001e8c0 	andeq	lr, r1, r0, asr #17
     7d8:	009c0100 	addseq	r0, ip, r0, lsl #2
     7dc:	00000049 	andeq	r0, r0, r9, asr #32
     7e0:	02d00004 	sbcseq	r0, r0, #4
     7e4:	01040000 	mrseq	r0, (UNDEF: 4)
     7e8:	00000052 	andeq	r0, r0, r2, asr r0
     7ec:	00027a0c 	andeq	r7, r2, ip, lsl #20
     7f0:	0000fe00 	andeq	pc, r0, r0, lsl #28
     7f4:	0096f000 	addseq	pc, r6, r0
     7f8:	000018c0 	andeq	r1, r0, r0, asr #17
     7fc:	00044c00 	andeq	r4, r4, r0, lsl #24
     800:	00690200 	rsbeq	r0, r9, r0, lsl #4
     804:	00340201 	eorseq	r0, r4, r1, lsl #4
     808:	03050000 	movweq	r0, #20480	; 0x5000
     80c:	c000b04c 	andgt	fp, r0, ip, asr #32
     810:	f1070403 			; <UNDEFINED> instruction: 0xf1070403
     814:	04000000 	streq	r0, [r0], #-0
     818:	00000273 	andeq	r0, r0, r3, ror r2
     81c:	96f00301 	ldrbtls	r0, [r0], r1, lsl #6
     820:	0018c000 	andseq	ip, r8, r0
     824:	9c010000 	stcls	0, cr0, [r1], {-0}
     828:	0012c400 	andseq	ip, r2, r0, lsl #8
     82c:	18000400 	stmdane	r0, {sl}
     830:	04000003 	streq	r0, [r0], #-3
     834:	00005201 	andeq	r5, r0, r1, lsl #4
     838:	0b030c00 	bleq	c3840 <_start-0xbff447c0>
     83c:	00fe0000 	rscseq	r0, lr, r0
     840:	97080000 	strls	r0, [r8, -r0]
     844:	065cc000 	ldrbeq	ip, [ip], -r0
     848:	04870000 	streq	r0, [r7], #0
     84c:	6c020000 	stcvs	0, cr0, [r2], {-0}
     850:	01710402 	cmneq	r1, r2, lsl #8
     854:	43030000 	movwmi	r0, #12288	; 0x3000
     858:	02003152 	andeq	r3, r0, #-2147483628	; 0x80000014
     85c:	00017805 	andeq	r7, r1, r5, lsl #16
     860:	43030000 	movwmi	r0, #12288	; 0x3000
     864:	02003252 	andeq	r3, r0, #536870917	; 0x20000005
     868:	00017806 	andeq	r7, r1, r6, lsl #16
     86c:	02040400 	andeq	r0, r4, #0, 8
     870:	02000007 	andeq	r0, r0, #7
     874:	00017807 	andeq	r7, r1, r7, lsl #16
     878:	00040800 	andeq	r0, r4, r0, lsl #16
     87c:	02000003 	andeq	r0, r0, #3
     880:	00017808 	andeq	r7, r1, r8, lsl #16
     884:	53030c00 	movwpl	r0, #15360	; 0x3c00
     888:	09020052 	stmdbeq	r2, {r1, r4, r6}
     88c:	00000178 	andeq	r0, r0, r8, ror r1
     890:	47450310 	smlaldmi	r0, r5, r0, r3
     894:	0a020052 	beq	809e4 <_start-0xbff8761c>
     898:	00000178 	andeq	r0, r0, r8, ror r1
     89c:	040d0414 	streq	r0, [sp], #-1044	; 0xfffffbec
     8a0:	0b020000 	bleq	808a8 <_start-0xbff87758>
     8a4:	00000178 	andeq	r0, r0, r8, ror r1
     8a8:	04130418 	ldreq	r0, [r3], #-1048	; 0xfffffbe8
     8ac:	0c020000 	stceq	0, cr0, [r2], {-0}
     8b0:	00000178 	andeq	r0, r0, r8, ror r1
     8b4:	0517041c 	ldreq	r0, [r7, #-1052]	; 0xfffffbe4
     8b8:	0d020000 	stceq	0, cr0, [r2, #-0]
     8bc:	00000178 	andeq	r0, r0, r8, ror r1
     8c0:	4e430320 	cdpmi	3, 4, cr0, cr3, cr0, {1}
     8c4:	0e020054 	mcreq	0, 0, r0, cr2, cr4, {2}
     8c8:	00000178 	andeq	r0, r0, r8, ror r1
     8cc:	53500324 	cmppl	r0, #36, 6	; 0x90000000
     8d0:	0f020043 	svceq	0x00020043
     8d4:	00000178 	andeq	r0, r0, r8, ror r1
     8d8:	52410328 	subpl	r0, r1, #40, 6	; 0xa0000000
     8dc:	10020052 	andne	r0, r2, r2, asr r0
     8e0:	00000178 	andeq	r0, r0, r8, ror r1
     8e4:	4352032c 	cmpmi	r2, #44, 6	; 0xb0000000
     8e8:	11020052 	qaddne	r0, r2, r2
     8ec:	00000178 	andeq	r0, r0, r8, ror r1
     8f0:	0d500430 	cfldrdeq	mvd0, [r0, #-192]	; 0xffffff40
     8f4:	12020000 	andne	r0, r2, #0
     8f8:	00000178 	andeq	r0, r0, r8, ror r1
     8fc:	0d550434 	cfldrdeq	mvd0, [r5, #-208]	; 0xffffff30
     900:	13020000 	movwne	r0, #8192	; 0x2000
     904:	00000178 	andeq	r0, r0, r8, ror r1
     908:	0d5a0438 	cfldrdeq	mvd0, [sl, #-224]	; 0xffffff20
     90c:	14020000 	strne	r0, [r2], #-0
     910:	00000178 	andeq	r0, r0, r8, ror r1
     914:	0d5f043c 	cfldrdeq	mvd0, [pc, #-240]	; 82c <_start-0xc00077d4>
     918:	15020000 	strne	r0, [r2, #-0]
     91c:	00000178 	andeq	r0, r0, r8, ror r1
     920:	03d00440 	bicseq	r0, r0, #64, 8	; 0x40000000
     924:	16020000 	strne	r0, [r2], -r0
     928:	00000178 	andeq	r0, r0, r8, ror r1
     92c:	43440344 	movtmi	r0, #17220	; 0x4344
     930:	17020052 	smlsdne	r2, r2, r0, r0
     934:	00000178 	andeq	r0, r0, r8, ror r1
     938:	0c4e0448 	cfstrdeq	mvd0, [lr], {72}	; 0x48
     93c:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     940:	00000178 	andeq	r0, r0, r8, ror r1
     944:	074b044c 	strbeq	r0, [fp, -ip, asr #8]
     948:	19020000 	stmdbne	r2, {}	; <UNPREDICTABLE>
     94c:	00000178 	andeq	r0, r0, r8, ror r1
     950:	04190450 	ldreq	r0, [r9], #-1104	; 0xfffffbb0
     954:	1a020000 	bne	8095c <_start-0xbff876a4>
     958:	00000178 	andeq	r0, r0, r8, ror r1
     95c:	0d640454 	cfstrdeq	mvd0, [r4, #-336]!	; 0xfffffeb0
     960:	1b020000 	blne	80968 <_start-0xbff87698>
     964:	00000178 	andeq	r0, r0, r8, ror r1
     968:	0d690458 	cfstrdeq	mvd0, [r9, #-352]!	; 0xfffffea0
     96c:	1c020000 	stcne	0, cr0, [r2], {-0}
     970:	00000178 	andeq	r0, r0, r8, ror r1
     974:	4641035c 			; <UNDEFINED> instruction: 0x4641035c
     978:	1d020031 	stcne	0, cr0, [r2, #-196]	; 0xffffff3c
     97c:	00000178 	andeq	r0, r0, r8, ror r1
     980:	46410360 	strbmi	r0, [r1], -r0, ror #6
     984:	1e020032 	mcrne	0, 0, r0, cr2, cr2, {1}
     988:	00000178 	andeq	r0, r0, r8, ror r1
     98c:	076b0464 	strbeq	r0, [fp, -r4, ror #8]!
     990:	1f020000 	svcne	0x00020000
     994:	00000178 	andeq	r0, r0, r8, ror r1
     998:	04050068 	streq	r0, [r5], #-104	; 0xffffff98
     99c:	0000f107 	andeq	pc, r0, r7, lsl #2
     9a0:	01710600 	cmneq	r1, r0, lsl #12
     9a4:	a5070000 	strge	r0, [r7, #-0]
     9a8:	0200000e 	andeq	r0, r0, #14
     9ac:	00002520 	andeq	r2, r0, r0, lsr #10
     9b0:	026c0200 	rsbeq	r0, ip, #0, 4
     9b4:	0002b023 	andeq	fp, r2, r3, lsr #32
     9b8:	52430300 	subpl	r0, r3, #0, 6
     9bc:	24020031 	strcs	r0, [r2], #-49	; 0xffffffcf
     9c0:	00000178 	andeq	r0, r0, r8, ror r1
     9c4:	52430300 	subpl	r0, r3, #0, 6
     9c8:	25020032 	strcs	r0, [r2, #-50]	; 0xffffffce
     9cc:	00000178 	andeq	r0, r0, r8, ror r1
     9d0:	07020404 	streq	r0, [r2, -r4, lsl #8]
     9d4:	26020000 	strcs	r0, [r2], -r0
     9d8:	00000178 	andeq	r0, r0, r8, ror r1
     9dc:	03000408 	movweq	r0, #1032	; 0x408
     9e0:	27020000 	strcs	r0, [r2, -r0]
     9e4:	00000178 	andeq	r0, r0, r8, ror r1
     9e8:	5253030c 	subspl	r0, r3, #12, 6	; 0x30000000
     9ec:	78280200 	stmdavc	r8!, {r9}
     9f0:	10000001 	andne	r0, r0, r1
     9f4:	52474503 	subpl	r4, r7, #12582912	; 0xc00000
     9f8:	78290200 	stmdavc	r9!, {r9}
     9fc:	14000001 	strne	r0, [r0], #-1
     a00:	00040d04 	andeq	r0, r4, r4, lsl #26
     a04:	782a0200 	stmdavc	sl!, {r9}
     a08:	18000001 	stmdane	r0, {r0}
     a0c:	00041304 	andeq	r1, r4, r4, lsl #6
     a10:	782b0200 	stmdavc	fp!, {r9}
     a14:	1c000001 	stcne	0, cr0, [r0], {1}
     a18:	00051704 	andeq	r1, r5, r4, lsl #14
     a1c:	782c0200 	stmdavc	ip!, {r9}
     a20:	20000001 	andcs	r0, r0, r1
     a24:	544e4303 	strbpl	r4, [lr], #-771	; 0xfffffcfd
     a28:	782d0200 	stmdavc	sp!, {r9}
     a2c:	24000001 	strcs	r0, [r0], #-1
     a30:	43535003 	cmpmi	r3, #3
     a34:	782e0200 	stmdavc	lr!, {r9}
     a38:	28000001 	stmdacs	r0, {r0}
     a3c:	52524103 	subspl	r4, r2, #-1073741824	; 0xc0000000
     a40:	782f0200 	stmdavc	pc!, {r9}	; <UNPREDICTABLE>
     a44:	2c000001 	stccs	0, cr0, [r0], {1}
     a48:	000eac04 	andeq	sl, lr, r4, lsl #24
     a4c:	c0300200 	eorsgt	r0, r0, r0, lsl #4
     a50:	30000002 	andcc	r0, r0, r2
     a54:	000d5004 	andeq	r5, sp, r4
     a58:	78310200 	ldmdavc	r1!, {r9}
     a5c:	34000001 	strcc	r0, [r0], #-1
     a60:	000d5504 	andeq	r5, sp, r4, lsl #10
     a64:	78320200 	ldmdavc	r2!, {r9}
     a68:	38000001 	stmdacc	r0, {r0}
     a6c:	000d5a04 	andeq	r5, sp, r4, lsl #20
     a70:	78330200 	ldmdavc	r3!, {r9}
     a74:	3c000001 	stccc	0, cr0, [r0], {1}
     a78:	000d5f04 	andeq	r5, sp, r4, lsl #30
     a7c:	78340200 	ldmdavc	r4!, {r9}
     a80:	40000001 	andmi	r0, r0, r1
     a84:	000eb104 	andeq	fp, lr, r4, lsl #2
     a88:	c0350200 	eorsgt	r0, r5, r0, lsl #4
     a8c:	44000002 	strmi	r0, [r0], #-2
     a90:	52434403 	subpl	r4, r3, #50331648	; 0x3000000
     a94:	78360200 	ldmdavc	r6!, {r9}
     a98:	48000001 	stmdami	r0, {r0}
     a9c:	000c4e04 	andeq	r4, ip, r4, lsl #28
     aa0:	78370200 	ldmdavc	r7!, {r9}
     aa4:	4c000001 	stcmi	0, cr0, [r0], {1}
     aa8:	000eb604 	andeq	fp, lr, r4, lsl #12
     aac:	d5380200 	ldrle	r0, [r8, #-512]!	; 0xfffffe00
     ab0:	50000002 	andpl	r0, r0, r2
     ab4:	31464103 	cmpcc	r6, r3, lsl #2
     ab8:	78390200 	ldmdavc	r9!, {r9}
     abc:	60000001 	andvs	r0, r0, r1
     ac0:	000ebb04 	andeq	fp, lr, r4, lsl #22
     ac4:	c03a0200 	eorsgt	r0, sl, r0, lsl #4
     ac8:	64000002 	strvs	r0, [r0], #-2
     acc:	00076b04 	andeq	r6, r7, r4, lsl #22
     ad0:	783b0200 	ldmdavc	fp!, {r9}
     ad4:	68000001 	stmdavs	r0, {r0}
     ad8:	01780800 	cmneq	r8, r0, lsl #16
     adc:	02c00000 	sbceq	r0, r0, #0
     ae0:	71090000 	mrsvc	r0, (UNDEF: 9)
     ae4:	00000001 	andeq	r0, r0, r1
     ae8:	02b00600 	adcseq	r0, r0, #0, 12
     aec:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
     af0:	d5000001 	strle	r0, [r0, #-1]
     af4:	09000002 	stmdbeq	r0, {r1}
     af8:	00000171 	andeq	r0, r0, r1, ror r1
     afc:	c5060003 	strgt	r0, [r6, #-3]
     b00:	07000002 	streq	r0, [r0, -r2]
     b04:	0000029d 	muleq	r0, sp, r2
     b08:	01883c02 	orreq	r3, r8, r2, lsl #24
     b0c:	6c020000 	stcvs	0, cr0, [r2], {-0}
     b10:	03f54302 	mvnseq	r4, #134217728	; 0x8000000
     b14:	43030000 	movwmi	r0, #12288	; 0x3000
     b18:	02003152 	andeq	r3, r0, #-2147483628	; 0x80000014
     b1c:	00017844 	andeq	r7, r1, r4, asr #16
     b20:	43030000 	movwmi	r0, #12288	; 0x3000
     b24:	02003252 	andeq	r3, r0, #536870917	; 0x20000005
     b28:	00017845 	andeq	r7, r1, r5, asr #16
     b2c:	ac040400 	cfstrsge	mvf0, [r4], {-0}
     b30:	0200000e 	andeq	r0, r0, #14
     b34:	00017846 	andeq	r7, r1, r6, asr #16
     b38:	00040800 	andeq	r0, r4, r0, lsl #16
     b3c:	02000003 	andeq	r0, r0, #3
     b40:	00017847 	andeq	r7, r1, r7, asr #16
     b44:	53030c00 	movwpl	r0, #15360	; 0x3c00
     b48:	48020052 	stmdami	r2, {r1, r4, r6}
     b4c:	00000178 	andeq	r0, r0, r8, ror r1
     b50:	47450310 	smlaldmi	r0, r5, r0, r3
     b54:	49020052 	stmdbmi	r2, {r1, r4, r6}
     b58:	00000178 	andeq	r0, r0, r8, ror r1
     b5c:	040d0414 	streq	r0, [sp], #-1044	; 0xfffffbec
     b60:	4a020000 	bmi	80b68 <_start-0xbff87498>
     b64:	00000178 	andeq	r0, r0, r8, ror r1
     b68:	0eb10418 	mrceq	4, 5, r0, cr1, cr8, {0}
     b6c:	4b020000 	blmi	80b74 <_start-0xbff8748c>
     b70:	00000178 	andeq	r0, r0, r8, ror r1
     b74:	0517041c 	ldreq	r0, [r7, #-1052]	; 0xfffffbe4
     b78:	4c020000 	stcmi	0, cr0, [r2], {-0}
     b7c:	00000178 	andeq	r0, r0, r8, ror r1
     b80:	4e430320 	cdpmi	3, 4, cr0, cr3, cr0, {1}
     b84:	4d020054 	stcmi	0, cr0, [r2, #-336]	; 0xfffffeb0
     b88:	00000178 	andeq	r0, r0, r8, ror r1
     b8c:	53500324 	cmppl	r0, #36, 6	; 0x90000000
     b90:	4e020043 	cdpmi	0, 0, cr0, cr2, cr3, {2}
     b94:	00000178 	andeq	r0, r0, r8, ror r1
     b98:	52410328 	subpl	r0, r1, #40, 6	; 0xa0000000
     b9c:	4f020052 	svcmi	0x00020052
     ba0:	00000178 	andeq	r0, r0, r8, ror r1
     ba4:	4352032c 	cmpmi	r2, #44, 6	; 0xb0000000
     ba8:	50020052 	andpl	r0, r2, r2, asr r0
     bac:	00000178 	andeq	r0, r0, r8, ror r1
     bb0:	0d500430 	cfldrdeq	mvd0, [r0, #-192]	; 0xffffff40
     bb4:	51020000 	mrspl	r0, (UNDEF: 2)
     bb8:	00000178 	andeq	r0, r0, r8, ror r1
     bbc:	0eb60434 	mrceq	4, 5, r0, cr6, cr4, {1}
     bc0:	52020000 	andpl	r0, r2, #0
     bc4:	00000405 	andeq	r0, r0, r5, lsl #8
     bc8:	03d00438 	bicseq	r0, r0, #56, 8	; 0x38000000
     bcc:	53020000 	movwpl	r0, #8192	; 0x2000
     bd0:	00000178 	andeq	r0, r0, r8, ror r1
     bd4:	43440344 	movtmi	r0, #17220	; 0x4344
     bd8:	54020052 	strpl	r0, [r2], #-82	; 0xffffffae
     bdc:	00000178 	andeq	r0, r0, r8, ror r1
     be0:	0c4e0448 	cfstrdeq	mvd0, [lr], {72}	; 0x48
     be4:	55020000 	strpl	r0, [r2, #-0]
     be8:	00000178 	andeq	r0, r0, r8, ror r1
     bec:	0ebb044c 	cdpeq	4, 11, cr0, cr11, cr12, {2}
     bf0:	56020000 	strpl	r0, [r2], -r0
     bf4:	000002d5 	ldrdeq	r0, [r0], -r5
     bf8:	46410350 			; <UNDEFINED> instruction: 0x46410350
     bfc:	57020031 	smladxpl	r2, r1, r0, r0
     c00:	00000178 	andeq	r0, r0, r8, ror r1
     c04:	0ec00460 	cdpeq	4, 12, cr0, cr0, cr0, {3}
     c08:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
     c0c:	00000178 	andeq	r0, r0, r8, ror r1
     c10:	076b0464 	strbeq	r0, [fp, -r4, ror #8]!
     c14:	59020000 	stmdbpl	r2, {}	; <UNPREDICTABLE>
     c18:	00000178 	andeq	r0, r0, r8, ror r1
     c1c:	78080068 	stmdavc	r8, {r3, r5, r6}
     c20:	05000001 	streq	r0, [r0, #-1]
     c24:	09000004 	stmdbeq	r0, {r2}
     c28:	00000171 	andeq	r0, r0, r1, ror r1
     c2c:	f5060002 			; <UNDEFINED> instruction: 0xf5060002
     c30:	07000003 	streq	r0, [r0, -r3]
     c34:	00000859 	andeq	r0, r0, r9, asr r8
     c38:	02e55a02 	rsceq	r5, r5, #8192	; 0x2000
     c3c:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
     c40:	25000001 	strcs	r0, [r0, #-1]
     c44:	09000004 	stmdbeq	r0, {r2}
     c48:	00000171 	andeq	r0, r0, r1, ror r1
     c4c:	15060001 	strne	r0, [r6, #-1]
     c50:	0a000004 	beq	c68 <_start-0xc0007398>
     c54:	04031000 	streq	r1, [r3], #-0
     c58:	000010dc 	ldrdeq	r1, [r0], -ip
     c5c:	000e0a04 	andeq	r0, lr, r4, lsl #20
     c60:	78050300 	stmdavc	r5, {r8, r9}
     c64:	00000001 	andeq	r0, r0, r1
     c68:	0004de04 	andeq	sp, r4, r4, lsl #28
     c6c:	25060300 	strcs	r0, [r6, #-768]	; 0xfffffd00
     c70:	04000004 	streq	r0, [r0], #-4
     c74:	00058b04 	andeq	r8, r5, r4, lsl #22
     c78:	78070300 	stmdavc	r7, {r8, r9}
     c7c:	0c000001 	stceq	0, cr0, [r0], {1}
     c80:	00088004 	andeq	r8, r8, r4
     c84:	78080300 	stmdavc	r8, {r8, r9}
     c88:	10000001 	andne	r0, r0, r1
     c8c:	0004e304 	andeq	lr, r4, r4, lsl #6
     c90:	c0090300 	andgt	r0, r9, r0, lsl #6
     c94:	14000002 	strne	r0, [r0], #-2
     c98:	00072904 	andeq	r2, r7, r4, lsl #18
     c9c:	780a0300 	stmdavc	sl, {r8, r9}
     ca0:	18000001 	stmdane	r0, {r0}
     ca4:	000ced04 	andeq	lr, ip, r4, lsl #26
     ca8:	780b0300 	stmdavc	fp, {r8, r9}
     cac:	1c000001 	stcne	0, cr0, [r0], {1}
     cb0:	0006e804 	andeq	lr, r6, r4, lsl #16
     cb4:	780c0300 	stmdavc	ip, {r8, r9}
     cb8:	20000001 	andcs	r0, r0, r1
     cbc:	000e3204 	andeq	r3, lr, r4, lsl #4
     cc0:	780d0300 	stmdavc	sp, {r8, r9}
     cc4:	24000001 	strcs	r0, [r0], #-1
     cc8:	00099404 	andeq	r9, r9, r4, lsl #8
     ccc:	780e0300 	stmdavc	lr, {r8, r9}
     cd0:	28000001 	stmdacs	r0, {r0}
     cd4:	000a3104 	andeq	r3, sl, r4, lsl #2
     cd8:	780f0300 	stmdavc	pc, {r8, r9}	; <UNPREDICTABLE>
     cdc:	2c000001 	stccs	0, cr0, [r0], {1}
     ce0:	00030504 	andeq	r0, r3, r4, lsl #10
     ce4:	78100300 	ldmdavc	r0, {r8, r9}
     ce8:	30000001 	andcc	r0, r0, r1
     cec:	0004e804 	andeq	lr, r4, r4, lsl #16
     cf0:	25110300 	ldrcs	r0, [r1, #-768]	; 0xfffffd00
     cf4:	34000004 	strcc	r0, [r0], #-4
     cf8:	00035504 	andeq	r5, r3, r4, lsl #10
     cfc:	78120300 	ldmdavc	r2, {r8, r9}
     d00:	3c000001 	stccc	0, cr0, [r0], {1}
     d04:	000b3704 	andeq	r3, fp, r4, lsl #14
     d08:	78130300 	ldmdavc	r3, {r8, r9}
     d0c:	40000001 	andmi	r0, r0, r1
     d10:	0008c704 	andeq	ip, r8, r4, lsl #14
     d14:	78140300 	ldmdavc	r4, {r8, r9}
     d18:	44000001 	strmi	r0, [r0], #-1
     d1c:	000ba704 	andeq	sl, fp, r4, lsl #14
     d20:	78150300 	ldmdavc	r5, {r8, r9}
     d24:	48000001 	stmdami	r0, {r0}
     d28:	0004ed04 	andeq	lr, r4, r4, lsl #26
     d2c:	ec160300 	ldc	3, cr0, [r6], {-0}
     d30:	4c000010 	stcmi	0, cr0, [r0], {16}
     d34:	000de504 	andeq	lr, sp, r4, lsl #10
     d38:	78170300 	ldmdavc	r7, {r8, r9}
     d3c:	80000001 	andhi	r0, r0, r1
     d40:	0007ef04 	andeq	lr, r7, r4, lsl #30
     d44:	78180300 	ldmdavc	r8, {r8, r9}
     d48:	84000001 	strhi	r0, [r0], #-1
     d4c:	0007f904 	andeq	pc, r7, r4, lsl #18
     d50:	78190300 	ldmdavc	r9, {r8, r9}
     d54:	88000001 	stmdahi	r0, {r0}
     d58:	0004d404 	andeq	sp, r4, r4, lsl #8
     d5c:	781a0300 	ldmdavc	sl, {r8, r9}
     d60:	8c000001 	stchi	0, cr0, [r0], {1}
     d64:	00068104 	andeq	r8, r6, r4, lsl #2
     d68:	781b0300 	ldmdavc	fp, {r8, r9}
     d6c:	90000001 	andls	r0, r0, r1
     d70:	000ba004 	andeq	sl, fp, r4
     d74:	781c0300 	ldmdavc	ip, {r8, r9}
     d78:	94000001 	strls	r0, [r0], #-1
     d7c:	00041f04 	andeq	r1, r4, r4, lsl #30
     d80:	781d0300 	ldmdavc	sp, {r8, r9}
     d84:	98000001 	stmdals	r0, {r0}
     d88:	00099e04 	andeq	r9, r9, r4, lsl #28
     d8c:	781e0300 	ldmdavc	lr, {r8, r9}
     d90:	9c000001 	stcls	0, cr0, [r0], {1}
     d94:	00063504 	andeq	r3, r6, r4, lsl #10
     d98:	781f0300 	ldmdavc	pc, {r8, r9}	; <UNPREDICTABLE>
     d9c:	a0000001 	andge	r0, r0, r1
     da0:	000e8404 	andeq	r8, lr, r4, lsl #8
     da4:	78200300 	stmdavc	r0!, {r8, r9}
     da8:	a4000001 	strge	r0, [r0], #-1
     dac:	0004f204 	andeq	pc, r4, r4, lsl #4
     db0:	01210300 			; <UNDEFINED> instruction: 0x01210300
     db4:	a8000011 	stmdage	r0, {r0, r4}
     db8:	000da504 	andeq	sl, sp, r4, lsl #10
     dbc:	78220300 	stmdavc	r2!, {r8, r9}
     dc0:	c0000001 	andgt	r0, r0, r1
     dc4:	00044c04 	andeq	r4, r4, r4, lsl #24
     dc8:	78230300 	stmdavc	r3!, {r8, r9}
     dcc:	c4000001 	strgt	r0, [r0], #-1
     dd0:	00040104 	andeq	r0, r4, r4, lsl #2
     dd4:	78240300 	stmdavc	r4!, {r8, r9}
     dd8:	c8000001 	stmdagt	r0, {r0}
     ddc:	000d8f04 	andeq	r8, sp, r4, lsl #30
     de0:	78250300 	stmdavc	r5!, {r8, r9}
     de4:	cc000001 	stcgt	0, cr0, [r0], {1}
     de8:	000a4304 	andeq	r4, sl, r4, lsl #6
     dec:	78260300 	stmdavc	r6!, {r8, r9}
     df0:	d0000001 	andle	r0, r0, r1
     df4:	0008cf04 	andeq	ip, r8, r4, lsl #30
     df8:	78270300 	stmdavc	r7!, {r8, r9}
     dfc:	d4000001 	strle	r0, [r0], #-1
     e00:	000a3a04 	andeq	r3, sl, r4, lsl #20
     e04:	78280300 	stmdavc	r8!, {r8, r9}
     e08:	d8000001 	stmdale	r0, {r0}
     e0c:	0004f704 	andeq	pc, r4, r4, lsl #14
     e10:	16290300 	strtne	r0, [r9], -r0, lsl #6
     e14:	dc000011 	stcle	0, cr0, [r0], {17}
     e18:	00034b0b 	andeq	r4, r3, fp, lsl #22
     e1c:	782a0300 	stmdavc	sl!, {r8, r9}
     e20:	00000001 	andeq	r0, r0, r1
     e24:	09d90b01 	ldmibeq	r9, {r0, r8, r9, fp}^
     e28:	2b030000 	blcs	c0e30 <_start-0xbff471d0>
     e2c:	00000178 	andeq	r0, r0, r8, ror r1
     e30:	f50b0104 			; <UNDEFINED> instruction: 0xf50b0104
     e34:	0300000c 	movweq	r0, #12
     e38:	0001782c 	andeq	r7, r1, ip, lsr #16
     e3c:	0b010800 	bleq	42e44 <_start-0xbffc51bc>
     e40:	00000b23 	andeq	r0, r0, r3, lsr #22
     e44:	01782d03 	cmneq	r8, r3, lsl #26
     e48:	010c0000 	mrseq	r0, (UNDEF: 12)
     e4c:	000a940b 	andeq	r9, sl, fp, lsl #8
     e50:	782e0300 	stmdavc	lr!, {r8, r9}
     e54:	10000001 	andne	r0, r0, r1
     e58:	0c090b01 			; <UNDEFINED> instruction: 0x0c090b01
     e5c:	2f030000 	svccs	0x00030000
     e60:	00000178 	andeq	r0, r0, r8, ror r1
     e64:	fc0b0114 	stc2	1, cr0, [fp], {20}
     e68:	03000004 	movweq	r0, #4
     e6c:	00112b30 	andseq	r2, r1, r0, lsr fp
     e70:	0b011800 	bleq	46e78 <_start-0xbffc1188>
     e74:	00000d7e 	andeq	r0, r0, lr, ror sp
     e78:	01783103 	cmneq	r8, r3, lsl #2
     e7c:	01400000 	mrseq	r0, (UNDEF: 64)
     e80:	0009850b 	andeq	r8, r9, fp, lsl #10
     e84:	78320300 	ldmdavc	r2!, {r8, r9}
     e88:	44000001 	strmi	r0, [r0], #-1
     e8c:	05010b01 	streq	r0, [r1, #-2817]	; 0xfffff4ff
     e90:	33030000 	movwcc	r0, #12288	; 0x3000
     e94:	00001140 	andeq	r1, r0, r0, asr #2
     e98:	5c0b0148 	stfpls	f0, [fp], {72}	; 0x48
     e9c:	0300000e 	movweq	r0, #14
     ea0:	00017834 	andeq	r7, r1, r4, lsr r8
     ea4:	0b018000 	bleq	60eac <_start-0xbffa7154>
     ea8:	000004c8 	andeq	r0, r0, r8, asr #9
     eac:	01783503 	cmneq	r8, r3, lsl #10
     eb0:	01840000 	orreq	r0, r4, r0
     eb4:	000a9f0b 	andeq	r9, sl, fp, lsl #30
     eb8:	78360300 	ldmdavc	r6!, {r8, r9}
     ebc:	88000001 	stmdahi	r0, {r0}
     ec0:	0d830b01 	vstreq	d0, [r3, #4]
     ec4:	37030000 	strcc	r0, [r3, -r0]
     ec8:	00000178 	andeq	r0, r0, r8, ror r1
     ecc:	b10b018c 	smlabblt	fp, ip, r1, r0
     ed0:	0300000d 	movweq	r0, #13
     ed4:	00017838 	andeq	r7, r1, r8, lsr r8
     ed8:	0b019000 	bleq	64ee0 <_start-0xbffa3120>
     edc:	00000440 	andeq	r0, r0, r0, asr #8
     ee0:	01783903 	cmneq	r8, r3, lsl #18
     ee4:	01940000 	orrseq	r0, r4, r0
     ee8:	000a880b 	andeq	r8, sl, fp, lsl #16
     eec:	783a0300 	ldmdavc	sl!, {r8, r9}
     ef0:	98000001 	stmdals	r0, {r0}
     ef4:	08130b01 	ldmdaeq	r3, {r0, r8, r9, fp}
     ef8:	3b030000 	blcc	c0f00 <_start-0xbff47100>
     efc:	00000178 	andeq	r0, r0, r8, ror r1
     f00:	760b019c 			; <UNDEFINED> instruction: 0x760b019c
     f04:	03000004 	movweq	r0, #4
     f08:	0001783c 	andeq	r7, r1, ip, lsr r8
     f0c:	0b01a000 	bleq	68f14 <_start-0xbff9f0ec>
     f10:	00000811 	andeq	r0, r0, r1, lsl r8
     f14:	01783d03 	cmneq	r8, r3, lsl #26
     f18:	01a40000 			; <UNDEFINED> instruction: 0x01a40000
     f1c:	0005060b 	andeq	r0, r5, fp, lsl #12
     f20:	553e0300 	ldrpl	r0, [lr, #-768]!	; 0xfffffd00
     f24:	a8000011 	stmdage	r0, {r0, r4}
     f28:	06110b01 	ldreq	r0, [r1], -r1, lsl #22
     f2c:	3f030000 	svccc	0x00030000
     f30:	00000178 	andeq	r0, r0, r8, ror r1
     f34:	040b0200 	streq	r0, [fp], #-512	; 0xfffffe00
     f38:	03000009 	movweq	r0, #9
     f3c:	00017840 	andeq	r7, r1, r0, asr #16
     f40:	0b020400 	bleq	81f48 <_start-0xbff860b8>
     f44:	00000ca2 	andeq	r0, r0, r2, lsr #25
     f48:	01784103 	cmneq	r8, r3, lsl #2
     f4c:	02080000 	andeq	r0, r8, #0
     f50:	0003370b 	andeq	r3, r3, fp, lsl #14
     f54:	78420300 	stmdavc	r2, {r8, r9}^
     f58:	0c000001 	stceq	0, cr0, [r0], {1}
     f5c:	02d80b02 	sbcseq	r0, r8, #2048	; 0x800
     f60:	43030000 	movwmi	r0, #12288	; 0x3000
     f64:	00000178 	andeq	r0, r0, r8, ror r1
     f68:	170b0210 	smladne	fp, r0, r2, r0
     f6c:	0300000d 	movweq	r0, #13
     f70:	00017844 	andeq	r7, r1, r4, asr #16
     f74:	0b021400 	bleq	85f7c <_start-0xbff82084>
     f78:	00000715 	andeq	r0, r0, r5, lsl r7
     f7c:	01784503 	cmneq	r8, r3, lsl #10
     f80:	02180000 	andseq	r0, r8, #0
     f84:	0006bf0b 	andeq	fp, r6, fp, lsl #30
     f88:	78460300 	stmdavc	r6, {r8, r9}^
     f8c:	1c000001 	stcne	0, cr0, [r0], {1}
     f90:	0b840b02 	bleq	fe103ba0 <__bss_end__+0x3e0f8b50>
     f94:	47030000 	strmi	r0, [r3, -r0]
     f98:	00000178 	andeq	r0, r0, r8, ror r1
     f9c:	8d0b0220 	sfmhi	f0, 4, [fp, #-128]	; 0xffffff80
     fa0:	03000002 	movweq	r0, #2
     fa4:	00017848 	andeq	r7, r1, r8, asr #16
     fa8:	0b022400 	bleq	89fb0 <_start-0xbff7e050>
     fac:	0000061f 	andeq	r0, r0, pc, lsl r6
     fb0:	11554903 	cmpne	r5, r3, lsl #18
     fb4:	02280000 	eoreq	r0, r8, #0
     fb8:	0004320b 	andeq	r3, r4, fp, lsl #4
     fbc:	784a0300 	stmdavc	sl, {r8, r9}^
     fc0:	80000001 	andhi	r0, r0, r1
     fc4:	07070b02 	streq	r0, [r7, -r2, lsl #22]
     fc8:	4b030000 	blmi	c0fd0 <_start-0xbff47030>
     fcc:	00000178 	andeq	r0, r0, r8, ror r1
     fd0:	d70b0284 	strle	r0, [fp, -r4, lsl #5]
     fd4:	0300000a 	movweq	r0, #10
     fd8:	0001784c 	andeq	r7, r1, ip, asr #16
     fdc:	0b028800 	bleq	a2fe4 <_start-0xbff6501c>
     fe0:	00000dbd 			; <UNDEFINED> instruction: 0x00000dbd
     fe4:	01784d03 	cmneq	r8, r3, lsl #26
     fe8:	028c0000 	addeq	r0, ip, #0
     fec:	00084b0b 	andeq	r4, r8, fp, lsl #22
     ff0:	784e0300 	stmdavc	lr, {r8, r9}^
     ff4:	90000001 	andls	r0, r0, r1
     ff8:	0b660b02 	bleq	1983c08 <_start-0xbe6843f8>
     ffc:	4f030000 	svcmi	0x00030000
    1000:	00000178 	andeq	r0, r0, r8, ror r1
    1004:	760b0294 			; <UNDEFINED> instruction: 0x760b0294
    1008:	0300000e 	movweq	r0, #14
    100c:	00017850 	andeq	r7, r1, r0, asr r8
    1010:	0b029800 	bleq	a7018 <_start-0xbff60fe8>
    1014:	0000051c 	andeq	r0, r0, ip, lsl r5
    1018:	01785103 	cmneq	r8, r3, lsl #2
    101c:	029c0000 	addseq	r0, ip, #0
    1020:	00030d0b 	andeq	r0, r3, fp, lsl #26
    1024:	6a520300 	bvs	1481c2c <_start-0xbeb863d4>
    1028:	a0000011 	andge	r0, r0, r1, lsl r0
    102c:	0d250b02 	vstmdbeq	r5!, {d0}
    1030:	53030000 	movwpl	r0, #12288	; 0x3000
    1034:	00000178 	andeq	r0, r0, r8, ror r1
    1038:	350b0300 	strcc	r0, [fp, #-768]	; 0xfffffd00
    103c:	0300000d 	movweq	r0, #13
    1040:	00017854 	andeq	r7, r1, r4, asr r8
    1044:	0b030400 	bleq	c204c <_start-0xbff45fb4>
    1048:	00000c61 	andeq	r0, r0, r1, ror #24
    104c:	01785503 	cmneq	r8, r3, lsl #10
    1050:	03080000 	movweq	r0, #32768	; 0x8000
    1054:	0002c80b 	andeq	ip, r2, fp, lsl #16
    1058:	78560300 	ldmdavc	r6, {r8, r9}^
    105c:	0c000001 	stceq	0, cr0, [r0], {1}
    1060:	09b20b03 	ldmibeq	r2!, {r0, r1, r8, r9, fp}
    1064:	57030000 	strpl	r0, [r3, -r0]
    1068:	00000178 	andeq	r0, r0, r8, ror r1
    106c:	ba0b0310 	blt	2c1cb4 <_start-0xbfd4634c>
    1070:	0300000c 	movweq	r0, #12
    1074:	00017858 	andeq	r7, r1, r8, asr r8
    1078:	0b031400 	bleq	c6080 <_start-0xbff41f80>
    107c:	00000bcb 	andeq	r0, r0, fp, asr #23
    1080:	01785903 	cmneq	r8, r3, lsl #18
    1084:	03180000 	tsteq	r8, #0
    1088:	000e8d0b 	andeq	r8, lr, fp, lsl #26
    108c:	785a0300 	ldmdavc	sl, {r8, r9}^
    1090:	1c000001 	stcne	0, cr0, [r0], {1}
    1094:	054c0b03 	strbeq	r0, [ip, #-2819]	; 0xfffff4fd
    1098:	5b030000 	blpl	c10a0 <_start-0xbff46f60>
    109c:	00000178 	andeq	r0, r0, r8, ror r1
    10a0:	390b0320 	stmdbcc	fp, {r5, r8, r9}
    10a4:	03000008 	movweq	r0, #8
    10a8:	0001785c 	andeq	r7, r1, ip, asr r8
    10ac:	0b032400 	bleq	ca0b4 <_start-0xbff3df4c>
    10b0:	00000313 	andeq	r0, r0, r3, lsl r3
    10b4:	11555d03 	cmpne	r5, r3, lsl #26
    10b8:	03280000 			; <UNDEFINED> instruction: 0x03280000
    10bc:	0008db0b 	andeq	sp, r8, fp, lsl #22
    10c0:	785e0300 	ldmdavc	lr, {r8, r9}^
    10c4:	80000001 	andhi	r0, r0, r1
    10c8:	0c140b03 			; <UNDEFINED> instruction: 0x0c140b03
    10cc:	5f030000 	svcpl	0x00030000
    10d0:	00000178 	andeq	r0, r0, r8, ror r1
    10d4:	f30b0384 	vcgt.u8	d0, d27, d4
    10d8:	0300000a 	movweq	r0, #10
    10dc:	00017860 	andeq	r7, r1, r0, ror #16
    10e0:	0b038800 	bleq	e30e8 <_start-0xbff24f18>
    10e4:	00000dd5 	ldrdeq	r0, [r0], -r5
    10e8:	01786103 	cmneq	r8, r3, lsl #2
    10ec:	038c0000 	orreq	r0, ip, #0
    10f0:	0004b80b 	andeq	fp, r4, fp, lsl #16
    10f4:	78620300 	stmdavc	r2!, {r8, r9}^
    10f8:	90000001 	andls	r0, r0, r1
    10fc:	07500b03 	ldrbeq	r0, [r0, -r3, lsl #22]
    1100:	63030000 	movwvs	r0, #12288	; 0x3000
    1104:	00000178 	andeq	r0, r0, r8, ror r1
    1108:	6b0b0394 	blvs	2c1f60 <_start-0xbfd460a0>
    110c:	03000006 	movweq	r0, #6
    1110:	00017864 	andeq	r7, r1, r4, ror #16
    1114:	0b039800 	bleq	e711c <_start-0xbff20ee4>
    1118:	00000975 	andeq	r0, r0, r5, ror r9
    111c:	01786503 	cmneq	r8, r3, lsl #10
    1120:	039c0000 	orrseq	r0, ip, #0
    1124:	0003190b 	andeq	r1, r3, fp, lsl #18
    1128:	6a660300 	bvs	1981d30 <_start-0xbe6862d0>
    112c:	a0000011 	andge	r0, r0, r1, lsl r0
    1130:	03b40b03 			; <UNDEFINED> instruction: 0x03b40b03
    1134:	67030000 	strvs	r0, [r3, -r0]
    1138:	00000178 	andeq	r0, r0, r8, ror r1
    113c:	a00b0400 	andge	r0, fp, r0, lsl #8
    1140:	03000007 	movweq	r0, #7
    1144:	00017868 	andeq	r7, r1, r8, ror #16
    1148:	0b040400 	bleq	102150 <_start-0xbff05eb0>
    114c:	00000429 	andeq	r0, r0, r9, lsr #8
    1150:	01786903 	cmneq	r8, r3, lsl #18
    1154:	04080000 	streq	r0, [r8], #-0
    1158:	0008b90b 	andeq	fp, r8, fp, lsl #18
    115c:	786a0300 	stmdavc	sl!, {r8, r9}^
    1160:	0c000001 	stceq	0, cr0, [r0], {1}
    1164:	0bfb0b04 	bleq	ffec3d7c <__bss_end__+0x3feb8d2c>
    1168:	6b030000 	blvs	c1170 <_start-0xbff46e90>
    116c:	00000178 	andeq	r0, r0, r8, ror r1
    1170:	580b0410 	stmdapl	fp, {r4, sl}
    1174:	0300000a 	movweq	r0, #10
    1178:	0001786c 	andeq	r7, r1, ip, ror #16
    117c:	0b041400 	bleq	106184 <_start-0xbff01e7c>
    1180:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1184:	01786d03 	cmneq	r8, r3, lsl #26
    1188:	04180000 	ldreq	r0, [r8], #-0
    118c:	0007600b 	andeq	r6, r7, fp
    1190:	786e0300 	stmdavc	lr!, {r8, r9}^
    1194:	1c000001 	stcne	0, cr0, [r0], {1}
    1198:	0cca0b04 	vstmiaeq	sl, {d16-d17}
    119c:	6f030000 	svcvs	0x00030000
    11a0:	00000178 	andeq	r0, r0, r8, ror r1
    11a4:	1f0b0420 	svcne	0x000b0420
    11a8:	03000003 	movweq	r0, #3
    11ac:	00117f70 	andseq	r7, r1, r0, ror pc
    11b0:	0b042400 	bleq	10a1b8 <_start-0xbfefde48>
    11b4:	0000064c 	andeq	r0, r0, ip, asr #12
    11b8:	01787103 	cmneq	r8, r3, lsl #2
    11bc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    11c0:	0008b00b 	andeq	fp, r8, fp
    11c4:	78720300 	ldmdavc	r2!, {r8, r9}^
    11c8:	04000001 	streq	r0, [r0], #-1
    11cc:	0e1b0b08 	vnmlseq.f64	d0, d11, d8
    11d0:	73030000 	movwvc	r0, #12288	; 0x3000
    11d4:	00000178 	andeq	r0, r0, r8, ror r1
    11d8:	890b0808 	stmdbhi	fp, {r3, fp}
    11dc:	03000008 	movweq	r0, #8
    11e0:	00017874 	andeq	r7, r1, r4, ror r8
    11e4:	0b080c00 	bleq	2041ec <_start-0xbfe03e14>
    11e8:	00000325 	andeq	r0, r0, r5, lsr #6
    11ec:	02d57503 	sbcseq	r7, r5, #12582912	; 0xc00000
    11f0:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
    11f4:	000ac90b 	andeq	ip, sl, fp, lsl #18
    11f8:	78760300 	ldmdavc	r6!, {r8, r9}^
    11fc:	20000001 	andcs	r0, r0, r1
    1200:	05fa0b08 	ldrbeq	r0, [sl, #2824]!	; 0xb08
    1204:	77030000 	strvc	r0, [r3, -r0]
    1208:	00000178 	andeq	r0, r0, r8, ror r1
    120c:	ec0b0824 	stc	8, cr0, [fp], {36}	; 0x24
    1210:	0300000d 	movweq	r0, #13
    1214:	00017878 	andeq	r7, r1, r8, ror r8
    1218:	0b082800 	bleq	20b220 <_start-0xbfdfcde0>
    121c:	00000920 	andeq	r0, r0, r0, lsr #18
    1220:	01787903 	cmneq	r8, r3, lsl #18
    1224:	082c0000 	stmdaeq	ip!, {}	; <UNPREDICTABLE>
    1228:	000b0d0b 	andeq	r0, fp, fp, lsl #26
    122c:	787a0300 	ldmdavc	sl!, {r8, r9}^
    1230:	30000001 	andcc	r0, r0, r1
    1234:	04af0b08 	strteq	r0, [pc], #2824	; 123c <_start-0xc0006dc4>
    1238:	7b030000 	blvc	c1240 <_start-0xbff46dc0>
    123c:	00000178 	andeq	r0, r0, r8, ror r1
    1240:	990b0834 	stmdbls	fp, {r2, r4, r5, fp}
    1244:	0300000c 	movweq	r0, #12
    1248:	0001787c 	andeq	r7, r1, ip, ror r8
    124c:	0b083800 	bleq	20f254 <_start-0xbfdf8dac>
    1250:	000007ad 	andeq	r0, r0, sp, lsr #15
    1254:	01787d03 	cmneq	r8, r3, lsl #26
    1258:	083c0000 	ldmdaeq	ip!, {}	; <UNPREDICTABLE>
    125c:	00032b0b 	andeq	r2, r3, fp, lsl #22
    1260:	947e0300 	ldrbtls	r0, [lr], #-768	; 0xfffffd00
    1264:	40000011 	andmi	r0, r0, r1, lsl r0
    1268:	092a0b08 	stmdbeq	sl!, {r3, r8, r9, fp}
    126c:	7f030000 	svcvc	0x00030000
    1270:	00000178 	andeq	r0, r0, r8, ror r1
    1274:	000b0880 	andeq	r0, fp, r0, lsl #17
    1278:	0300000e 	movweq	r0, #14
    127c:	00017880 	andeq	r7, r1, r0, lsl #17
    1280:	0b088400 	bleq	222288 <_start-0xbfde5d78>
    1284:	00000b40 	andeq	r0, r0, r0, asr #22
    1288:	01788103 	cmneq	r8, r3, lsl #2
    128c:	08880000 	stmeq	r8, {}	; <UNPREDICTABLE>
    1290:	000df60b 	andeq	pc, sp, fp, lsl #12
    1294:	78820300 	stmvc	r2, {r8, r9}
    1298:	8c000001 	stchi	0, cr0, [r0], {1}
    129c:	09d00b08 	ldmibeq	r0, {r3, r8, r9, fp}^
    12a0:	83030000 	movwhi	r0, #12288	; 0x3000
    12a4:	00000178 	andeq	r0, r0, r8, ror r1
    12a8:	8d0b0890 	stchi	8, cr0, [fp, #-576]	; 0xfffffdc0
    12ac:	03000009 	movweq	r0, #9
    12b0:	00017884 	andeq	r7, r1, r4, lsl #17
    12b4:	0b089400 	bleq	2262bc <_start-0xbfde1d44>
    12b8:	000009a8 	andeq	r0, r0, r8, lsr #19
    12bc:	01788503 	cmneq	r8, r3, lsl #10
    12c0:	08980000 	ldmeq	r8, {}	; <UNPREDICTABLE>
    12c4:	000cb00b 	andeq	fp, ip, fp
    12c8:	78860300 	stmvc	r6, {r8, r9}
    12cc:	9c000001 	stcls	0, cr0, [r0], {1}
    12d0:	093f0b08 	ldmdbeq	pc!, {r3, r8, r9, fp}	; <UNPREDICTABLE>
    12d4:	87030000 	strhi	r0, [r3, -r0]
    12d8:	00000178 	andeq	r0, r0, r8, ror r1
    12dc:	2a0b08a0 	bcs	2c3564 <_start-0xbfd44a9c>
    12e0:	03000005 	movweq	r0, #5
    12e4:	00017888 	andeq	r7, r1, r8, lsl #17
    12e8:	0b08a400 	bleq	22a2f0 <_start-0xbfdddd10>
    12ec:	00000331 	andeq	r0, r0, r1, lsr r3
    12f0:	11018903 	tstne	r1, r3, lsl #18
    12f4:	08a80000 	stmiaeq	r8!, {}	; <UNPREDICTABLE>
    12f8:	0007c60b 	andeq	ip, r7, fp, lsl #12
    12fc:	788a0300 	stmvc	sl, {r8, r9}
    1300:	c0000001 	andgt	r0, r0, r1
    1304:	07940b08 	ldreq	r0, [r4, r8, lsl #22]
    1308:	8b030000 	blhi	c1310 <_start-0xbff46cf0>
    130c:	00000178 	andeq	r0, r0, r8, ror r1
    1310:	8a0b08c4 	bhi	2c3628 <_start-0xbfd449d8>
    1314:	03000006 	movweq	r0, #6
    1318:	0001788c 	andeq	r7, r1, ip, lsl #17
    131c:	0b08c800 	bleq	233324 <_start-0xbfdd4cdc>
    1320:	00000d45 	andeq	r0, r0, r5, asr #26
    1324:	01788d03 	cmneq	r8, r3, lsl #26
    1328:	08cc0000 	stmiaeq	ip, {}^	; <UNPREDICTABLE>
    132c:	0006dd0b 	andeq	sp, r6, fp, lsl #26
    1330:	788e0300 	stmvc	lr, {r8, r9}
    1334:	d0000001 	andle	r0, r0, r1
    1338:	0d9a0b08 	vldreq	d0, [sl, #32]
    133c:	8f030000 	svchi	0x00030000
    1340:	00000178 	andeq	r0, r0, r8, ror r1
    1344:	2a0b08d4 	bcs	2c369c <_start-0xbfd44964>
    1348:	0300000b 	movweq	r0, #11
    134c:	00017890 	muleq	r1, r0, r8
    1350:	0b08d800 	bleq	237358 <_start-0xbfdd0ca8>
    1354:	00000872 	andeq	r0, r0, r2, ror r8
    1358:	01789103 	cmneq	r8, r3, lsl #2
    135c:	08dc0000 	ldmeq	ip, {}^	; <UNPREDICTABLE>
    1360:	0008eb0b 	andeq	lr, r8, fp, lsl #22
    1364:	78920300 	ldmvc	r2, {r8, r9}
    1368:	e0000001 	and	r0, r0, r1
    136c:	0b5a0b08 	bleq	1683f94 <_start-0xbe98406c>
    1370:	93030000 	movwls	r0, #12288	; 0x3000
    1374:	00000178 	andeq	r0, r0, r8, ror r1
    1378:	3f0b08e4 	svccc	0x000b08e4
    137c:	03000006 	movweq	r0, #6
    1380:	00017894 	muleq	r1, r4, r8
    1384:	0b08e800 	bleq	23b38c <_start-0xbfdccc74>
    1388:	000008f7 	strdeq	r0, [r0], -r7
    138c:	01789503 	cmneq	r8, r3, lsl #10
    1390:	08ec0000 	stmiaeq	ip!, {}^	; <UNPREDICTABLE>
    1394:	0004630b 	andeq	r6, r4, fp, lsl #6
    1398:	78960300 	ldmvc	r6, {r8, r9}
    139c:	f0000001 			; <UNDEFINED> instruction: 0xf0000001
    13a0:	09e50b08 	stmibeq	r5!, {r3, r8, r9, fp}^
    13a4:	97030000 	strls	r0, [r3, -r0]
    13a8:	00000178 	andeq	r0, r0, r8, ror r1
    13ac:	8c0b08f4 	stchi	8, cr0, [fp], {244}	; 0xf4
    13b0:	03000003 	movweq	r0, #3
    13b4:	00017898 	muleq	r1, r8, r8
    13b8:	0b08f800 	bleq	23f3c0 <_start-0xbfdc8c40>
    13bc:	00000564 	andeq	r0, r0, r4, ror #10
    13c0:	01789903 	cmneq	r8, r3, lsl #18
    13c4:	08fc0000 	ldmeq	ip!, {}^	; <UNPREDICTABLE>
    13c8:	0006950b 	andeq	r9, r6, fp, lsl #10
    13cc:	789a0300 	ldmvc	sl, {r8, r9}
    13d0:	00000001 	andeq	r0, r0, r1
    13d4:	0c440b09 	mcrreq	11, 0, r0, r4, cr9
    13d8:	9b030000 	blls	c13e0 <_start-0xbff46c20>
    13dc:	00000178 	andeq	r0, r0, r8, ror r1
    13e0:	7b0b0904 	blvc	2c37f8 <_start-0xbfd44808>
    13e4:	03000006 	movweq	r0, #6
    13e8:	0002c09c 	muleq	r2, ip, r0
    13ec:	0b090800 	bleq	2433f4 <_start-0xbfdc4c0c>
    13f0:	00000e0f 	andeq	r0, r0, pc, lsl #28
    13f4:	01789d03 	cmneq	r8, r3, lsl #26
    13f8:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    13fc:	0003450b 	andeq	r4, r3, fp, lsl #10
    1400:	c09e0300 	addsgt	r0, lr, r0, lsl #6
    1404:	10000002 	andne	r0, r0, r2
    1408:	0bb10b09 	bleq	fec44034 <__bss_end__+0x3ec38fe4>
    140c:	9f030000 	svcls	0x00030000
    1410:	00000178 	andeq	r0, r0, r8, ror r1
    1414:	4e0b0914 			; <UNDEFINED> instruction: 0x4e0b0914
    1418:	0300000a 	movweq	r0, #10
    141c:	000178a0 	andeq	r7, r1, r0, lsr #17
    1420:	0b091800 	bleq	247428 <_start-0xbfdc0bd8>
    1424:	00000dcb 	andeq	r0, r0, fp, asr #27
    1428:	0178a103 	cmneq	r8, r3, lsl #2
    142c:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
    1430:	0007310b 	andeq	r3, r7, fp, lsl #2
    1434:	78a20300 	stmiavc	r2!, {r8, r9}
    1438:	20000001 	andcs	r0, r0, r1
    143c:	05420b09 	strbeq	r0, [r2, #-2825]	; 0xfffff4f7
    1440:	a3030000 	movwge	r0, #12288	; 0x3000
    1444:	00000178 	andeq	r0, r0, r8, ror r1
    1448:	600b0924 	andvs	r0, fp, r4, lsr #18
    144c:	0300000a 	movweq	r0, #10
    1450:	000178a4 	andeq	r7, r1, r4, lsr #17
    1454:	0b092800 	bleq	24b45c <_start-0xbfdbcba4>
    1458:	00000603 	andeq	r0, r0, r3, lsl #12
    145c:	0178a503 	cmneq	r8, r3, lsl #10
    1460:	092c0000 	stmdbeq	ip!, {}	; <UNPREDICTABLE>
    1464:	000bbd0b 	andeq	fp, fp, fp, lsl #26
    1468:	78a60300 	stmiavc	r6!, {r8, r9}
    146c:	30000001 	andcc	r0, r0, r1
    1470:	03e60b09 	mvneq	r0, #9216	; 0x2400
    1474:	a7030000 	strge	r0, [r3, -r0]
    1478:	00000178 	andeq	r0, r0, r8, ror r1
    147c:	570b0934 	smladxpl	fp, r4, r9, r0
    1480:	03000004 	movweq	r0, #4
    1484:	0011a9a8 	andseq	sl, r1, r8, lsr #19
    1488:	0b093800 	bleq	24f490 <_start-0xbfdb8b70>
    148c:	00000959 	andeq	r0, r0, r9, asr r9
    1490:	0178a903 	cmneq	r8, r3, lsl #18
    1494:	09800000 	stmibeq	r0, {}	; <UNPREDICTABLE>
    1498:	000c8d0b 	andeq	r8, ip, fp, lsl #26
    149c:	78aa0300 	stmiavc	sl!, {r8, r9}
    14a0:	84000001 	strhi	r0, [r0], #-1
    14a4:	057f0b09 	ldrbeq	r0, [pc, #-2825]!	; 9a3 <_start-0xc000765d>
    14a8:	ab030000 	blge	c14b0 <_start-0xbff46b50>
    14ac:	00000178 	andeq	r0, r0, r8, ror r1
    14b0:	930b0988 	movwls	r0, #47496	; 0xb988
    14b4:	03000004 	movweq	r0, #4
    14b8:	000178ac 	andeq	r7, r1, ip, lsr #17
    14bc:	0b098c00 	bleq	2644c4 <_start-0xbfda3b3c>
    14c0:	00000b94 	muleq	r0, r4, fp
    14c4:	0178ad03 	cmneq	r8, r3, lsl #26
    14c8:	09900000 	ldmibeq	r0, {}	; <UNPREDICTABLE>
    14cc:	000ce10b 	andeq	lr, ip, fp, lsl #2
    14d0:	78ae0300 	stmiavc	lr!, {r8, r9}
    14d4:	94000001 	strls	r0, [r0], #-1
    14d8:	05ee0b09 	strbeq	r0, [lr, #2825]!	; 0xb09
    14dc:	af030000 	svcge	0x00030000
    14e0:	00000178 	andeq	r0, r0, r8, ror r1
    14e4:	300b0998 	mulcc	fp, r8, r9
    14e8:	0300000c 	movweq	r0, #12
    14ec:	000178b0 			; <UNDEFINED> instruction: 0x000178b0
    14f0:	0b099c00 	bleq	2684f8 <_start-0xbfd9fb08>
    14f4:	00000771 	andeq	r0, r0, r1, ror r7
    14f8:	0178b103 	cmneq	r8, r3, lsl #2
    14fc:	09a00000 	stmibeq	r0!, {}	; <UNPREDICTABLE>
    1500:	00082d0b 	andeq	r2, r8, fp, lsl #26
    1504:	78b20300 	ldmvc	r2!, {r8, r9}
    1508:	a4000001 	strge	r0, [r0], #-1
    150c:	0c240b09 			; <UNDEFINED> instruction: 0x0c240b09
    1510:	b3030000 	movwlt	r0, #12288	; 0x3000
    1514:	00000178 	andeq	r0, r0, r8, ror r1
    1518:	0b0b09a8 	bleq	2c3bc0 <_start-0xbfd44440>
    151c:	03000005 	movweq	r0, #5
    1520:	000178b4 			; <UNDEFINED> instruction: 0x000178b4
    1524:	0b09ac00 	bleq	26c52c <_start-0xbfd9bad4>
    1528:	0000045d 	andeq	r0, r0, sp, asr r4
    152c:	11beb503 			; <UNDEFINED> instruction: 0x11beb503
    1530:	09b00000 	ldmibeq	r0!, {}	; <UNPREDICTABLE>
    1534:	0008030b 	andeq	r0, r8, fp, lsl #6
    1538:	78b60300 	ldmvc	r6!, {r8, r9}
    153c:	00000001 	andeq	r0, r0, r1
    1540:	0b150b0a 	bleq	544170 <_start-0xbfac3e90>
    1544:	b7030000 	strlt	r0, [r3, -r0]
    1548:	00000178 	andeq	r0, r0, r8, ror r1
    154c:	310b0a04 	tstcc	fp, r4, lsl #20
    1550:	03000009 	movweq	r0, #9
    1554:	000178b8 			; <UNDEFINED> instruction: 0x000178b8
    1558:	0b0a0800 	bleq	283560 <_start-0xbfd84aa0>
    155c:	00000864 	andeq	r0, r0, r4, ror #16
    1560:	0178b903 	cmneq	r8, r3, lsl #18
    1564:	0a0c0000 	beq	30156c <_start-0xbfd06a94>
    1568:	000c710b 	andeq	r7, ip, fp, lsl #2
    156c:	78ba0300 	ldmvc	sl!, {r8, r9}
    1570:	10000001 	andne	r0, r0, r1
    1574:	02ec0b0a 	rsceq	r0, ip, #10240	; 0x2800
    1578:	bb030000 	bllt	c1580 <_start-0xbff46a80>
    157c:	00000178 	andeq	r0, r0, r8, ror r1
    1580:	530b0a14 	movwpl	r0, #47636	; 0xba14
    1584:	0300000c 	movweq	r0, #12
    1588:	000178bc 			; <UNDEFINED> instruction: 0x000178bc
    158c:	0b0a1800 	bleq	287594 <_start-0xbfd80a6c>
    1590:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    1594:	0178bd03 	cmneq	r8, r3, lsl #26
    1598:	0a1c0000 	beq	7015a0 <_start-0xbf906a60>
    159c:	0009c20b 	andeq	ip, r9, fp, lsl #4
    15a0:	78be0300 	ldmvc	lr!, {r8, r9}
    15a4:	20000001 	andcs	r0, r0, r1
    15a8:	0cd30b0a 	vldmiaeq	r3, {d16-d20}
    15ac:	bf030000 	svclt	0x00030000
    15b0:	00000178 	andeq	r0, r0, r8, ror r1
    15b4:	990b0a24 	stmdbls	fp, {r2, r5, r9, fp}
    15b8:	03000003 	movweq	r0, #3
    15bc:	000178c0 	andeq	r7, r1, r0, asr #17
    15c0:	0b0a2800 	bleq	28b5c8 <_start-0xbfd7ca38>
    15c4:	000005a4 	andeq	r0, r0, r4, lsr #11
    15c8:	0178c103 	cmneq	r8, r3, lsl #2
    15cc:	0a2c0000 	beq	b015d4 <_start-0xbf506a2c>
    15d0:	0007230b 	andeq	r2, r7, fp, lsl #6
    15d4:	25c20300 	strbcs	r0, [r2, #768]	; 0x300
    15d8:	30000004 	andcc	r0, r0, r4
    15dc:	04840b0a 	streq	r0, [r4], #2826	; 0xb0a
    15e0:	c3030000 	movwgt	r0, #12288	; 0x3000
    15e4:	00000178 	andeq	r0, r0, r8, ror r1
    15e8:	3c0b0a38 			; <UNDEFINED> instruction: 0x3c0b0a38
    15ec:	03000007 	movweq	r0, #7
    15f0:	000178c4 	andeq	r7, r1, r4, asr #17
    15f4:	0b0a3c00 	bleq	2905fc <_start-0xbfd77a04>
    15f8:	00000470 	andeq	r0, r0, r0, ror r4
    15fc:	1194c503 	orrsne	ip, r4, r3, lsl #10
    1600:	0a400000 	beq	1001608 <_start-0xbf0069f8>
    1604:	000a230b 	andeq	r2, sl, fp, lsl #6
    1608:	78c60300 	stmiavc	r6, {r8, r9}^
    160c:	80000001 	andhi	r0, r0, r1
    1610:	0d090b0a 	vstreq	d0, [r9, #-40]	; 0xffffffd8
    1614:	c7030000 	strgt	r0, [r3, -r0]
    1618:	00000178 	andeq	r0, r0, r8, ror r1
    161c:	f30b0a84 	vpmax.u8	d0, d27, d4
    1620:	03000003 	movweq	r0, #3
    1624:	000178c8 	andeq	r7, r1, r8, asr #17
    1628:	0b0a8800 	bleq	2a3630 <_start-0xbfd649d0>
    162c:	000006b1 			; <UNDEFINED> instruction: 0x000006b1
    1630:	0178c903 	cmneq	r8, r3, lsl #18
    1634:	0a8c0000 	beq	fe30163c <__bss_end__+0x3e2f65ec>
    1638:	000a6a0b 	andeq	r6, sl, fp, lsl #20
    163c:	78ca0300 	stmiavc	sl, {r8, r9}^
    1640:	90000001 	andls	r0, r0, r1
    1644:	09120b0a 	ldmdbeq	r2, {r1, r3, r8, r9, fp}
    1648:	cb030000 	blgt	c1650 <_start-0xbff469b0>
    164c:	00000178 	andeq	r0, r0, r8, ror r1
    1650:	e50b0a94 	str	r0, [fp, #-2708]	; 0xfffff56c
    1654:	0300000a 	movweq	r0, #10
    1658:	000178cc 	andeq	r7, r1, ip, asr #17
    165c:	0b0a9800 	bleq	2a7664 <_start-0xbfd6099c>
    1660:	0000037e 	andeq	r0, r0, lr, ror r3
    1664:	0178cd03 	cmneq	r8, r3, lsl #26
    1668:	0a9c0000 	beq	fe701670 <__bss_end__+0x3e6f6620>
    166c:	0007e10b 	andeq	lr, r7, fp, lsl #2
    1670:	78ce0300 	stmiavc	lr, {r8, r9}^
    1674:	a0000001 	andge	r0, r0, r1
    1678:	0abb0b0a 	beq	feec42a8 <__bss_end__+0x3eeb9258>
    167c:	cf030000 	svcgt	0x00030000
    1680:	00000178 	andeq	r0, r0, r8, ror r1
    1684:	680b0aa4 	stmdavs	fp, {r2, r5, r7, r9, fp}
    1688:	0300000e 	movweq	r0, #14
    168c:	000178d0 	ldrdeq	r7, [r1], -r0
    1690:	0b0aa800 	bleq	2ab698 <_start-0xbfd5c968>
    1694:	000005e0 	andeq	r0, r0, r0, ror #11
    1698:	0178d103 	cmneq	r8, r3, lsl #2
    169c:	0aac0000 	beq	feb016a4 <__bss_end__+0x3eaf6654>
    16a0:	00081f0b 	andeq	r1, r8, fp, lsl #30
    16a4:	78d20300 	ldmvc	r2, {r8, r9}^
    16a8:	b0000001 	andlt	r0, r0, r1
    16ac:	05d20b0a 	ldrbeq	r0, [r2, #2826]	; 0xb0a
    16b0:	d3030000 	movwle	r0, #12288	; 0x3000
    16b4:	00000178 	andeq	r0, r0, r8, ror r1
    16b8:	d20b0ab4 	andle	r0, fp, #180, 20	; 0xb4000
    16bc:	03000007 	movweq	r0, #7
    16c0:	000178d4 	ldrdeq	r7, [r1], -r4
    16c4:	0b0ab800 	bleq	2af6cc <_start-0xbfd58934>
    16c8:	00000533 	andeq	r0, r0, r3, lsr r5
    16cc:	0178d503 	cmneq	r8, r3, lsl #10
    16d0:	0abc0000 	beq	fef016d8 <__bss_end__+0x3eef6688>
    16d4:	0002870b 	andeq	r8, r2, fp, lsl #14
    16d8:	94d60300 	ldrbls	r0, [r6], #768	; 0x300
    16dc:	c0000011 	andgt	r0, r0, r1, lsl r0
    16e0:	0d6e0b0a 	vstmdbeq	lr!, {d16-d20}
    16e4:	d7030000 	strle	r0, [r3, -r0]
    16e8:	00000178 	andeq	r0, r0, r8, ror r1
    16ec:	220b0b00 	andcs	r0, fp, #0, 22
    16f0:	0300000e 	movweq	r0, #14
    16f4:	000178d8 	ldrdeq	r7, [r1], -r8
    16f8:	0b0b0400 	bleq	2c2700 <_start-0xbfd45900>
    16fc:	00000e3c 	andeq	r0, r0, ip, lsr lr
    1700:	0178d903 	cmneq	r8, r3, lsl #18
    1704:	0b080000 	bleq	20170c <_start-0xbfe068f4>
    1708:	0009490b 	andeq	r4, r9, fp, lsl #18
    170c:	78da0300 	ldmvc	sl, {r8, r9}^
    1710:	0c000001 	stceq	0, cr0, [r0], {1}
    1714:	0beb0b0b 	bleq	ffac4348 <__bss_end__+0x3fab92f8>
    1718:	db030000 	blle	c1720 <_start-0xbff468e0>
    171c:	00000178 	andeq	r0, r0, r8, ror r1
    1720:	740b0b10 	strvc	r0, [fp], #-2832	; 0xfffff4f0
    1724:	0300000b 	movweq	r0, #11
    1728:	000178dc 	ldrdeq	r7, [r1], -ip
    172c:	0b0b1400 	bleq	2c6734 <_start-0xbfd418cc>
    1730:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    1734:	0178dd03 	cmneq	r8, r3, lsl #26
    1738:	0b180000 	bleq	601740 <_start-0xbfa068c0>
    173c:	0006cd0b 	andeq	ip, r6, fp, lsl #26
    1740:	78de0300 	ldmvc	lr, {r8, r9}^
    1744:	1c000001 	stcne	0, cr0, [r0], {1}
    1748:	05c20b0b 	strbeq	r0, [r2, #2827]	; 0xb0b
    174c:	df030000 	svcle	0x00030000
    1750:	00000178 	andeq	r0, r0, r8, ror r1
    1754:	4a0b0b20 	bmi	2c43dc <_start-0xbfd43c24>
    1758:	0300000b 	movweq	r0, #11
    175c:	000178e0 	andeq	r7, r1, r0, ror #17
    1760:	0b0b2400 	bleq	2ca768 <_start-0xbfd3d898>
    1764:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
    1768:	0178e103 	cmneq	r8, r3, lsl #2
    176c:	0b280000 	bleq	a01774 <_start-0xbf60688c>
    1770:	00036e0b 	andeq	r6, r3, fp, lsl #28
    1774:	78e20300 	stmiavc	r2!, {r8, r9}^
    1778:	2c000001 	stccs	0, cr0, [r0], {1}
    177c:	0a030b0b 	beq	c43b0 <_start-0xbff43c50>
    1780:	e3030000 	movw	r0, #12288	; 0x3000
    1784:	00000178 	andeq	r0, r0, r8, ror r1
    1788:	aa0b0b30 	bge	2c4450 <_start-0xbfd43bb0>
    178c:	03000002 	movweq	r0, #2
    1790:	000178e4 	andeq	r7, r1, r4, ror #17
    1794:	0b0b3400 	bleq	2ce79c <_start-0xbfd39864>
    1798:	000003d5 	ldrdeq	r0, [r0], -r5
    179c:	0178e503 	cmneq	r8, r3, lsl #10
    17a0:	0b380000 	bleq	e017a8 <_start-0xbf206858>
    17a4:	0006a00b 	andeq	sl, r6, fp
    17a8:	78e60300 	stmiavc	r6!, {r8, r9}^
    17ac:	3c000001 	stccc	0, cr0, [r0], {1}
    17b0:	055e0b0b 	ldrbeq	r0, [lr, #-2827]	; 0xfffff4f5
    17b4:	e7030000 	str	r0, [r3, -r0]
    17b8:	00001194 	muleq	r0, r4, r1
    17bc:	5e0b0b40 	vmlspl.f64	d0, d11, d0
    17c0:	03000003 	movweq	r0, #3
    17c4:	000178e8 	andeq	r7, r1, r8, ror #17
    17c8:	0b0b8000 	bleq	2e17d0 <_start-0xbfd26830>
    17cc:	00000625 	andeq	r0, r0, r5, lsr #12
    17d0:	0178e903 	cmneq	r8, r3, lsl #18
    17d4:	0b840000 	bleq	fe1017dc <__bss_end__+0x3e0f678c>
    17d8:	0006550b 	andeq	r5, r6, fp, lsl #10
    17dc:	78ea0300 	stmiavc	sl!, {r8, r9}^
    17e0:	88000001 	stmdahi	r0, {r0}
    17e4:	0bdb0b0b 	bleq	ff6c4418 <__bss_end__+0x3f6b93c8>
    17e8:	eb030000 	bl	c17f0 <_start-0xbff46810>
    17ec:	00000178 	andeq	r0, r0, r8, ror r1
    17f0:	910b0b8c 	smlabbls	fp, ip, fp, r0
    17f4:	03000008 	movweq	r0, #8
    17f8:	000178ec 	andeq	r7, r1, ip, ror #17
    17fc:	0b0b9000 	bleq	2e5804 <_start-0xbfd227fc>
    1800:	00000a13 	andeq	r0, r0, r3, lsl sl
    1804:	0178ed03 	cmneq	r8, r3, lsl #26
    1808:	0b940000 	bleq	fe501810 <__bss_end__+0x3e4f67c0>
    180c:	0009f30b 	andeq	pc, r9, fp, lsl #6
    1810:	78ee0300 	stmiavc	lr!, {r8, r9}^
    1814:	98000001 	stmdals	r0, {r0}
    1818:	0aab0b0b 	beq	feac444c <__bss_end__+0x3eab93fc>
    181c:	ef030000 	svc	0x00030000
    1820:	00000178 	andeq	r0, r0, r8, ror r1
    1824:	650b0b9c 	strvs	r0, [fp, #-2972]	; 0xfffff464
    1828:	03000009 	movweq	r0, #9
    182c:	000178f0 	strdeq	r7, [r1], -r0
    1830:	0b0ba000 	bleq	2e9838 <_start-0xbfd1e7c8>
    1834:	000003c0 	andeq	r0, r0, r0, asr #7
    1838:	0178f103 	cmneq	r8, r3, lsl #2	; <UNPREDICTABLE>
    183c:	0ba40000 	bleq	fe901844 <__bss_end__+0x3e8f67f4>
    1840:	000e4c0b 	andeq	r4, lr, fp, lsl #24
    1844:	78f20300 	ldmvc	r2!, {r8, r9}^
    1848:	a8000001 	stmdage	r0, {r0}
    184c:	05940b0b 	ldreq	r0, [r4, #2827]	; 0xb0b
    1850:	f3030000 	vhadd.u8	d0, d3, d0
    1854:	00000178 	andeq	r0, r0, r8, ror r1
    1858:	b20b0bac 	andlt	r0, fp, #172, 22	; 0x2b000
    185c:	03000005 	movweq	r0, #5
    1860:	000178f4 	strdeq	r7, [r1], -r4
    1864:	0b0bb000 	bleq	2ed86c <_start-0xbfd1a794>
    1868:	00000a78 	andeq	r0, r0, r8, ror sl
    186c:	0178f503 	cmneq	r8, r3, lsl #10	; <UNPREDICTABLE>
    1870:	0bb40000 	bleq	fed01878 <__bss_end__+0x3ecf6828>
    1874:	00056e0b 	andeq	r6, r5, fp, lsl #28
    1878:	78f60300 	ldmvc	r6!, {r8, r9}^
    187c:	b8000001 	stmdalt	r0, {r0}
    1880:	06f10b0b 	ldrbteq	r0, [r1], fp, lsl #22
    1884:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    1888:	00000178 	andeq	r0, r0, r8, ror r1
    188c:	7d0b0bbc 	vstrvc	d0, [fp, #-752]	; 0xfffffd10
    1890:	03000007 	movweq	r0, #7
    1894:	001194f8 			; <UNDEFINED> instruction: 0x001194f8
    1898:	0b0bc000 	bleq	2f18a0 <_start-0xbfd16760>
    189c:	00000783 	andeq	r0, r0, r3, lsl #15
    18a0:	0178f903 	cmneq	r8, r3, lsl #18	; <UNPREDICTABLE>
    18a4:	0c000000 	stceq	0, cr0, [r0], {-0}
    18a8:	0002e60b 	andeq	lr, r2, fp, lsl #12
    18ac:	d5fa0300 	ldrble	r0, [sl, #768]!	; 0x300
    18b0:	04000002 	streq	r0, [r0], #-2
    18b4:	0d010b0c 	vstreq	d0, [r1, #-48]	; 0xffffffd0
    18b8:	fb030000 	blx	c18c2 <_start-0xbff4673e>
    18bc:	00000178 	andeq	r0, r0, r8, ror r1
    18c0:	9d0b0c14 	stcls	12, cr0, [fp, #-80]	; 0xffffffb0
    18c4:	0300000e 	movweq	r0, #14
    18c8:	000178fc 	strdeq	r7, [r1], -ip
    18cc:	0b0c1800 	bleq	3078d4 <_start-0xbfd0072c>
    18d0:	000002fa 	strdeq	r0, [r0], -sl
    18d4:	11d3fd03 	bicsne	pc, r3, r3, lsl #26
    18d8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    18dc:	000ad20b 	andeq	sp, sl, fp, lsl #4
    18e0:	78fe0300 	ldmvc	lr!, {r8, r9}^
    18e4:	f4000001 	vst4.8	{d0-d3}, [r0], r1
    18e8:	44490c0f 	strbmi	r0, [r9], #-3087	; 0xfffff3f1
    18ec:	ff030052 			; <UNDEFINED> instruction: 0xff030052
    18f0:	00000178 	andeq	r0, r0, r8, ror r1
    18f4:	8f0d0ff8 	svchi	0x000d0ff8
    18f8:	03000007 	movweq	r0, #7
    18fc:	01780100 	cmneq	r8, r0, lsl #2
    1900:	0ffc0000 	svceq	0x00fc0000
    1904:	01780800 	cmneq	r8, r0, lsl #16
    1908:	10ec0000 	rscne	r0, ip, r0
    190c:	71090000 	mrsvc	r0, (UNDEF: 9)
    1910:	0c000001 	stceq	0, cr0, [r0], {1}
    1914:	10dc0600 	sbcsne	r0, ip, r0, lsl #12
    1918:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
    191c:	01000001 	tsteq	r0, r1
    1920:	09000011 	stmdbeq	r0, {r0, r4}
    1924:	00000171 	andeq	r0, r0, r1, ror r1
    1928:	f1060005 	cps	#5
    192c:	08000010 	stmdaeq	r0, {r4}
    1930:	00000178 	andeq	r0, r0, r8, ror r1
    1934:	00001116 	andeq	r1, r0, r6, lsl r1
    1938:	00017109 	andeq	r7, r1, r9, lsl #2
    193c:	06000800 	streq	r0, [r0], -r0, lsl #16
    1940:	00001106 	andeq	r1, r0, r6, lsl #2
    1944:	00017808 	andeq	r7, r1, r8, lsl #16
    1948:	00112b00 	andseq	r2, r1, r0, lsl #22
    194c:	01710900 	cmneq	r1, r0, lsl #18
    1950:	00090000 	andeq	r0, r9, r0
    1954:	00111b06 	andseq	r1, r1, r6, lsl #22
    1958:	01780800 	cmneq	r8, r0, lsl #16
    195c:	11400000 	mrsne	r0, (UNDEF: 64)
    1960:	71090000 	mrsvc	r0, (UNDEF: 9)
    1964:	0d000001 	stceq	0, cr0, [r0, #-4]
    1968:	11300600 	teqne	r0, r0, lsl #12
    196c:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
    1970:	55000001 	strpl	r0, [r0, #-1]
    1974:	09000011 	stmdbeq	r0, {r0, r4}
    1978:	00000171 	andeq	r0, r0, r1, ror r1
    197c:	45060015 	strmi	r0, [r6, #-21]	; 0xffffffeb
    1980:	08000011 	stmdaeq	r0, {r0, r4}
    1984:	00000178 	andeq	r0, r0, r8, ror r1
    1988:	0000116a 	andeq	r1, r0, sl, ror #2
    198c:	00017109 	andeq	r7, r1, r9, lsl #2
    1990:	06001700 	streq	r1, [r0], -r0, lsl #14
    1994:	0000115a 	andeq	r1, r0, sl, asr r1
    1998:	00017808 	andeq	r7, r1, r8, lsl #16
    199c:	00117f00 	andseq	r7, r1, r0, lsl #30
    19a0:	01710900 	cmneq	r1, r0, lsl #18
    19a4:	00f60000 	rscseq	r0, r6, r0
    19a8:	00116f06 	andseq	r6, r1, r6, lsl #30
    19ac:	01780800 	cmneq	r8, r0, lsl #16
    19b0:	11940000 	orrsne	r0, r4, r0
    19b4:	71090000 	mrsvc	r0, (UNDEF: 9)
    19b8:	0f000001 	svceq	0x00000001
    19bc:	11840600 	orrne	r0, r4, r0, lsl #12
    19c0:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
    19c4:	a9000001 	stmdbge	r0, {r0}
    19c8:	09000011 	stmdbeq	r0, {r0, r4}
    19cc:	00000171 	andeq	r0, r0, r1, ror r1
    19d0:	99060011 	stmdbls	r6, {r0, r4}
    19d4:	08000011 	stmdaeq	r0, {r0, r4}
    19d8:	00000178 	andeq	r0, r0, r8, ror r1
    19dc:	000011be 			; <UNDEFINED> instruction: 0x000011be
    19e0:	00017109 	andeq	r7, r1, r9, lsl #2
    19e4:	06001300 	streq	r1, [r0], -r0, lsl #6
    19e8:	000011ae 	andeq	r1, r0, lr, lsr #3
    19ec:	00017808 	andeq	r7, r1, r8, lsl #16
    19f0:	0011d300 	andseq	sp, r1, r0, lsl #6
    19f4:	01710900 	cmneq	r1, r0, lsl #18
    19f8:	00f50000 	rscseq	r0, r5, r0
    19fc:	0011c306 	andseq	ip, r1, r6, lsl #6
    1a00:	06650e00 	strbteq	r0, [r5], -r0, lsl #28
    1a04:	01030000 	mrseq	r0, (UNDEF: 3)
    1a08:	00042a01 	andeq	r2, r4, r1, lsl #20
    1a0c:	04340200 	ldrteq	r0, [r4], #-512	; 0xfffffe00
    1a10:	00128904 	andseq	r8, r2, r4, lsl #18
    1a14:	02070400 	andeq	r0, r7, #0, 8
    1a18:	05040000 	streq	r0, [r4, #-0]
    1a1c:	00000178 	andeq	r0, r0, r8, ror r1
    1a20:	023f0400 	eorseq	r0, pc, #0, 8
    1a24:	06040000 	streq	r0, [r4], -r0
    1a28:	00000178 	andeq	r0, r0, r8, ror r1
    1a2c:	020d0404 	andeq	r0, sp, #4, 8	; 0x4000000
    1a30:	07040000 	streq	r0, [r4, -r0]
    1a34:	00000178 	andeq	r0, r0, r8, ror r1
    1a38:	02010408 	andeq	r0, r1, #8, 8	; 0x8000000
    1a3c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    1a40:	00000178 	andeq	r0, r0, r8, ror r1
    1a44:	4449030c 	strbmi	r0, [r9], #-780	; 0xfffffcf4
    1a48:	09040052 	stmdbeq	r4, {r1, r4, r6}
    1a4c:	00000178 	andeq	r0, r0, r8, ror r1
    1a50:	444f0310 	strbmi	r0, [pc], #-784	; 1a58 <_start-0xc00065a8>
    1a54:	0a040052 	beq	101ba4 <_start-0xbff0645c>
    1a58:	00000178 	andeq	r0, r0, r8, ror r1
    1a5c:	01fc0414 	mvnseq	r0, r4, lsl r4
    1a60:	0b040000 	bleq	101a68 <_start-0xbff06598>
    1a64:	00000178 	andeq	r0, r0, r8, ror r1
    1a68:	02330418 	eorseq	r0, r3, #24, 8	; 0x18000000
    1a6c:	0c040000 	stceq	0, cr0, [r4], {-0}
    1a70:	00000178 	andeq	r0, r0, r8, ror r1
    1a74:	0246041c 	subeq	r0, r6, #28, 8	; 0x1c000000
    1a78:	0d040000 	stceq	0, cr0, [r4, #-0]
    1a7c:	00000178 	andeq	r0, r0, r8, ror r1
    1a80:	02570420 	subseq	r0, r7, #32, 8	; 0x20000000
    1a84:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    1a88:	00000178 	andeq	r0, r0, r8, ror r1
    1a8c:	52420324 	subpl	r0, r2, #36, 6	; 0x90000000
    1a90:	0f040052 	svceq	0x00040052
    1a94:	00000178 	andeq	r0, r0, r8, ror r1
    1a98:	65720328 	ldrbvs	r0, [r2, #-808]!	; 0xfffffcd8
    1a9c:	10040073 	andne	r0, r4, r3, ror r0
    1aa0:	00000178 	andeq	r0, r0, r8, ror r1
    1aa4:	01e3042c 	mvneq	r0, ip, lsr #8
    1aa8:	11040000 	mrsne	r0, (UNDEF: 4)
    1aac:	00000178 	andeq	r0, r0, r8, ror r1
    1ab0:	2c070030 	stccs	0, cr0, [r7], {48}	; 0x30
    1ab4:	04000002 	streq	r0, [r0], #-2
    1ab8:	0011e413 	andseq	lr, r1, r3, lsl r4
    1abc:	08a10f00 	stmiaeq	r1!, {r8, r9, sl, fp}
    1ac0:	a5010000 	strge	r0, [r1, #-0]
    1ac4:	c0009b34 	andgt	r9, r0, r4, lsr fp
    1ac8:	00000230 	andeq	r0, r0, r0, lsr r2
    1acc:	a70f9c01 	strge	r9, [pc, -r1, lsl #24]
    1ad0:	01000003 	tsteq	r0, r3
    1ad4:	00995c63 	addseq	r5, r9, r3, ror #24
    1ad8:	0001d8c0 	andeq	sp, r1, r0, asr #17
    1adc:	0f9c0100 	svceq	0x009c0100
    1ae0:	00000c7f 	andeq	r0, r0, pc, ror ip
    1ae4:	97080501 	strls	r0, [r8, -r1, lsl #10]
    1ae8:	0254c000 	subseq	ip, r4, #0
    1aec:	9c010000 	stcls	0, cr0, [r1], {-0}
    1af0:	00010f00 	andeq	r0, r1, r0, lsl #30
    1af4:	e5000400 	str	r0, [r0, #-1024]	; 0xfffffc00
    1af8:	04000003 	streq	r0, [r0], #-3
    1afc:	00005201 	andeq	r5, r0, r1, lsl #4
    1b00:	0f240c00 	svceq	0x00240c00
    1b04:	00fe0000 	rscseq	r0, lr, r0
    1b08:	9d640000 	stclls	0, cr0, [r4, #-0]
    1b0c:	01f0c000 	mvnseq	ip, r0
    1b10:	05560000 	ldrbeq	r0, [r6, #-0]
    1b14:	04020000 	streq	r0, [r2], #-0
    1b18:	0000f107 	andeq	pc, r0, r7, lsl #2
    1b1c:	0f0e0300 	svceq	0x000e0300
    1b20:	37010000 	strcc	r0, [r1, -r0]
    1b24:	0000008c 	andeq	r0, r0, ip, lsl #1
    1b28:	c0009e7c 	andgt	r9, r0, ip, ror lr
    1b2c:	000000d8 	ldrdeq	r0, [r0], -r8
    1b30:	008c9c01 	addeq	r9, ip, r1, lsl #24
    1b34:	03040000 	movweq	r0, #16384	; 0x4000
    1b38:	0100000f 	tsteq	r0, pc
    1b3c:	00009337 	andeq	r9, r0, r7, lsr r3
    1b40:	70910200 	addsvc	r0, r1, r0, lsl #4
    1b44:	000f3104 	andeq	r3, pc, r4, lsl #2
    1b48:	93370100 	teqls	r7, #0, 2
    1b4c:	02000000 	andeq	r0, r0, #0
    1b50:	64056c91 	strvs	r6, [r5], #-3217	; 0xfffff36f
    1b54:	01007461 	tsteq	r0, r1, ror #8
    1b58:	00008c39 	andeq	r8, r0, r9, lsr ip
    1b5c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1b60:	000f3a06 	andeq	r3, pc, r6, lsl #20
    1b64:	933a0100 	teqls	sl, #0, 2
    1b68:	02000000 	andeq	r0, r0, #0
    1b6c:	40067791 	mulmi	r6, r1, r7
    1b70:	0100000f 	tsteq	r0, pc
    1b74:	0000933a 	andeq	r9, r0, sl, lsr r3
    1b78:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1b7c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    1b80:	00000ee4 	andeq	r0, r0, r4, ror #29
    1b84:	de080102 	adflee	f0, f0, f2
    1b88:	03000000 	movweq	r0, #0
    1b8c:	00000eee 	andeq	r0, r0, lr, ror #29
    1b90:	00fa2101 	rscseq	r2, sl, r1, lsl #2
    1b94:	9da40000 	stcls	0, cr0, [r4]
    1b98:	00d8c000 	sbcseq	ip, r8, r0
    1b9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ba0:	000000fa 	strdeq	r0, [r0], -sl
    1ba4:	000f0304 	andeq	r0, pc, r4, lsl #6
    1ba8:	93210100 			; <UNDEFINED> instruction: 0x93210100
    1bac:	02000000 	andeq	r0, r0, #0
    1bb0:	31047091 	swpcc	r7, r1, [r4]
    1bb4:	0100000f 	tsteq	r0, pc
    1bb8:	00009321 	andeq	r9, r0, r1, lsr #6
    1bbc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1bc0:	74616405 	strbtvc	r6, [r1], #-1029	; 0xfffffbfb
    1bc4:	fa230100 	blx	8c1fcc <_start-0xbf746034>
    1bc8:	02000000 	andeq	r0, r0, #0
    1bcc:	3a067491 	bcc	19ee18 <_start-0xbfe691e8>
    1bd0:	0100000f 	tsteq	r0, pc
    1bd4:	00009324 	andeq	r9, r0, r4, lsr #6
    1bd8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1bdc:	000f4006 	andeq	r4, pc, r6
    1be0:	93240100 			; <UNDEFINED> instruction: 0x93240100
    1be4:	02000000 	andeq	r0, r0, #0
    1be8:	02007691 	andeq	r7, r0, #152043520	; 0x9100000
    1bec:	0ed10702 	cdpeq	7, 13, cr0, cr1, cr2, {0}
    1bf0:	c5070000 	strgt	r0, [r7, #-0]
    1bf4:	0100000e 	tsteq	r0, lr
    1bf8:	009d640a 	addseq	r6, sp, sl, lsl #8
    1bfc:	000040c0 	andeq	r4, r0, r0, asr #1
    1c00:	009c0100 	addseq	r0, ip, r0, lsl #2
    1c04:	00000fda 	ldrdeq	r0, [r0], -sl
    1c08:	04650004 	strbteq	r0, [r5], #-4
    1c0c:	01040000 	mrseq	r0, (UNDEF: 4)
    1c10:	00000052 	andeq	r0, r0, r2, asr r0
    1c14:	000f860c 	andeq	r8, pc, ip, lsl #12
    1c18:	0000fe00 	andeq	pc, r0, r0, lsl #28
    1c1c:	009f5400 	addseq	r5, pc, r0, lsl #8
    1c20:	000720c0 	andeq	r2, r7, r0, asr #1
    1c24:	0005c200 	andeq	ip, r5, r0, lsl #4
    1c28:	02340200 	eorseq	r0, r4, #0, 4
    1c2c:	0000ca04 	andeq	ip, r0, r4, lsl #20
    1c30:	02070300 	andeq	r0, r7, #0, 6
    1c34:	05020000 	streq	r0, [r2, #-0]
    1c38:	000000d1 	ldrdeq	r0, [r0], -r1
    1c3c:	023f0300 	eorseq	r0, pc, #0, 6
    1c40:	06020000 	streq	r0, [r2], -r0
    1c44:	000000d1 	ldrdeq	r0, [r0], -r1
    1c48:	020d0304 	andeq	r0, sp, #4, 6	; 0x10000000
    1c4c:	07020000 	streq	r0, [r2, -r0]
    1c50:	000000d1 	ldrdeq	r0, [r0], -r1
    1c54:	02010308 	andeq	r0, r1, #8, 6	; 0x20000000
    1c58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1c5c:	000000d1 	ldrdeq	r0, [r0], -r1
    1c60:	4449040c 	strbmi	r0, [r9], #-1036	; 0xfffffbf4
    1c64:	09020052 	stmdbeq	r2, {r1, r4, r6}
    1c68:	000000d1 	ldrdeq	r0, [r0], -r1
    1c6c:	444f0410 	strbmi	r0, [pc], #-1040	; 1c74 <_start-0xc000638c>
    1c70:	0a020052 	beq	81dc0 <_start-0xbff86240>
    1c74:	000000d1 	ldrdeq	r0, [r0], -r1
    1c78:	01fc0314 	mvnseq	r0, r4, lsl r3
    1c7c:	0b020000 	bleq	81c84 <_start-0xbff8637c>
    1c80:	000000d1 	ldrdeq	r0, [r0], -r1
    1c84:	02330318 	eorseq	r0, r3, #24, 6	; 0x60000000
    1c88:	0c020000 	stceq	0, cr0, [r2], {-0}
    1c8c:	000000d1 	ldrdeq	r0, [r0], -r1
    1c90:	0246031c 	subeq	r0, r6, #28, 6	; 0x70000000
    1c94:	0d020000 	stceq	0, cr0, [r2, #-0]
    1c98:	000000d1 	ldrdeq	r0, [r0], -r1
    1c9c:	02570320 	subseq	r0, r7, #32, 6	; 0x80000000
    1ca0:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    1ca4:	000000d1 	ldrdeq	r0, [r0], -r1
    1ca8:	52420424 	subpl	r0, r2, #36, 8	; 0x24000000
    1cac:	0f020052 	svceq	0x00020052
    1cb0:	000000d1 	ldrdeq	r0, [r0], -r1
    1cb4:	65720428 	ldrbvs	r0, [r2, #-1064]!	; 0xfffffbd8
    1cb8:	10020073 	andne	r0, r2, r3, ror r0
    1cbc:	000000d1 	ldrdeq	r0, [r0], -r1
    1cc0:	01e3032c 	mvneq	r0, ip, lsr #6
    1cc4:	11020000 	mrsne	r0, (UNDEF: 2)
    1cc8:	000000d1 	ldrdeq	r0, [r0], -r1
    1ccc:	04050030 	streq	r0, [r5], #-48	; 0xffffffd0
    1cd0:	0000f107 	andeq	pc, r0, r7, lsl #2
    1cd4:	00ca0600 	sbceq	r0, sl, r0, lsl #12
    1cd8:	2c070000 	stccs	0, cr0, [r7], {-0}
    1cdc:	02000002 	andeq	r0, r0, #2
    1ce0:	00002513 	andeq	r2, r0, r3, lsl r5
    1ce4:	10000800 	andne	r0, r0, r0, lsl #16
    1ce8:	0d930403 	cfldrseq	mvf0, [r3, #12]
    1cec:	0a030000 	beq	c1cf4 <_start-0xbff4630c>
    1cf0:	0300000e 	movweq	r0, #14
    1cf4:	0000d105 	andeq	sp, r0, r5, lsl #2
    1cf8:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    1cfc:	03000004 	movweq	r0, #4
    1d00:	000da306 	andeq	sl, sp, r6, lsl #6
    1d04:	8b030400 	blhi	c2d0c <_start-0xbff452f4>
    1d08:	03000005 	movweq	r0, #5
    1d0c:	0000d107 	andeq	sp, r0, r7, lsl #2
    1d10:	80030c00 	andhi	r0, r3, r0, lsl #24
    1d14:	03000008 	movweq	r0, #8
    1d18:	0000d108 	andeq	sp, r0, r8, lsl #2
    1d1c:	e3031000 	movw	r1, #12288	; 0x3000
    1d20:	03000004 	movweq	r0, #4
    1d24:	000db809 	andeq	fp, sp, r9, lsl #16
    1d28:	29031400 	stmdbcs	r3, {sl, ip}
    1d2c:	03000007 	movweq	r0, #7
    1d30:	0000d10a 	andeq	sp, r0, sl, lsl #2
    1d34:	ed031800 	stc	8, cr1, [r3, #-0]
    1d38:	0300000c 	movweq	r0, #12
    1d3c:	0000d10b 	andeq	sp, r0, fp, lsl #2
    1d40:	e8031c00 	stmda	r3, {sl, fp, ip}
    1d44:	03000006 	movweq	r0, #6
    1d48:	0000d10c 	andeq	sp, r0, ip, lsl #2
    1d4c:	32032000 	andcc	r2, r3, #0
    1d50:	0300000e 	movweq	r0, #14
    1d54:	0000d10d 	andeq	sp, r0, sp, lsl #2
    1d58:	94032400 	strls	r2, [r3], #-1024	; 0xfffffc00
    1d5c:	03000009 	movweq	r0, #9
    1d60:	0000d10e 	andeq	sp, r0, lr, lsl #2
    1d64:	31032800 	tstcc	r3, r0, lsl #16
    1d68:	0300000a 	movweq	r0, #10
    1d6c:	0000d10f 	andeq	sp, r0, pc, lsl #2
    1d70:	05032c00 	streq	r2, [r3, #-3072]	; 0xfffff400
    1d74:	03000003 	movweq	r0, #3
    1d78:	0000d110 	andeq	sp, r0, r0, lsl r1
    1d7c:	e8033000 	stmda	r3, {ip, sp}
    1d80:	03000004 	movweq	r0, #4
    1d84:	000da311 	andeq	sl, sp, r1, lsl r3
    1d88:	55033400 	strpl	r3, [r3, #-1024]	; 0xfffffc00
    1d8c:	03000003 	movweq	r0, #3
    1d90:	0000d112 	andeq	sp, r0, r2, lsl r1
    1d94:	37033c00 	strcc	r3, [r3, -r0, lsl #24]
    1d98:	0300000b 	movweq	r0, #11
    1d9c:	0000d113 	andeq	sp, r0, r3, lsl r1
    1da0:	c7034000 	strgt	r4, [r3, -r0]
    1da4:	03000008 	movweq	r0, #8
    1da8:	0000d114 	andeq	sp, r0, r4, lsl r1
    1dac:	a7034400 	strge	r4, [r3, -r0, lsl #8]
    1db0:	0300000b 	movweq	r0, #11
    1db4:	0000d115 	andeq	sp, r0, r5, lsl r1
    1db8:	ed034800 	stc	8, cr4, [r3, #-0]
    1dbc:	03000004 	movweq	r0, #4
    1dc0:	000dcd16 	andeq	ip, sp, r6, lsl sp
    1dc4:	e5034c00 	str	r4, [r3, #-3072]	; 0xfffff400
    1dc8:	0300000d 	movweq	r0, #13
    1dcc:	0000d117 	andeq	sp, r0, r7, lsl r1
    1dd0:	ef038000 	svc	0x00038000
    1dd4:	03000007 	movweq	r0, #7
    1dd8:	0000d118 	andeq	sp, r0, r8, lsl r1
    1ddc:	f9038400 			; <UNDEFINED> instruction: 0xf9038400
    1de0:	03000007 	movweq	r0, #7
    1de4:	0000d119 	andeq	sp, r0, r9, lsl r1
    1de8:	d4038800 	strle	r8, [r3], #-2048	; 0xfffff800
    1dec:	03000004 	movweq	r0, #4
    1df0:	0000d11a 	andeq	sp, r0, sl, lsl r1
    1df4:	81038c00 	tsthi	r3, r0, lsl #24
    1df8:	03000006 	movweq	r0, #6
    1dfc:	0000d11b 	andeq	sp, r0, fp, lsl r1
    1e00:	a0039000 	andge	r9, r3, r0
    1e04:	0300000b 	movweq	r0, #11
    1e08:	0000d11c 	andeq	sp, r0, ip, lsl r1
    1e0c:	1f039400 	svcne	0x00039400
    1e10:	03000004 	movweq	r0, #4
    1e14:	0000d11d 	andeq	sp, r0, sp, lsl r1
    1e18:	9e039800 	cdpls	8, 0, cr9, cr3, cr0, {0}
    1e1c:	03000009 	movweq	r0, #9
    1e20:	0000d11e 	andeq	sp, r0, lr, lsl r1
    1e24:	35039c00 	strcc	r9, [r3, #-3072]	; 0xfffff400
    1e28:	03000006 	movweq	r0, #6
    1e2c:	0000d11f 	andeq	sp, r0, pc, lsl r1
    1e30:	8403a000 	strhi	sl, [r3], #-0
    1e34:	0300000e 	movweq	r0, #14
    1e38:	0000d120 	andeq	sp, r0, r0, lsr #2
    1e3c:	f203a400 	vshl.s8	d10, d0, d3
    1e40:	03000004 	movweq	r0, #4
    1e44:	000de221 	andeq	lr, sp, r1, lsr #4
    1e48:	a503a800 	strge	sl, [r3, #-2048]	; 0xfffff800
    1e4c:	0300000d 	movweq	r0, #13
    1e50:	0000d122 	andeq	sp, r0, r2, lsr #2
    1e54:	4c03c000 	stcmi	0, cr12, [r3], {-0}
    1e58:	03000004 	movweq	r0, #4
    1e5c:	0000d123 	andeq	sp, r0, r3, lsr #2
    1e60:	0103c400 	tsteq	r3, r0, lsl #8
    1e64:	03000004 	movweq	r0, #4
    1e68:	0000d124 	andeq	sp, r0, r4, lsr #2
    1e6c:	8f03c800 	svchi	0x0003c800
    1e70:	0300000d 	movweq	r0, #13
    1e74:	0000d125 	andeq	sp, r0, r5, lsr #2
    1e78:	4303cc00 	movwmi	ip, #15360	; 0x3c00
    1e7c:	0300000a 	movweq	r0, #10
    1e80:	0000d126 	andeq	sp, r0, r6, lsr #2
    1e84:	cf03d000 	svcgt	0x0003d000
    1e88:	03000008 	movweq	r0, #8
    1e8c:	0000d127 	andeq	sp, r0, r7, lsr #2
    1e90:	3a03d400 	bcc	f6e98 <_start-0xbff11168>
    1e94:	0300000a 	movweq	r0, #10
    1e98:	0000d128 	andeq	sp, r0, r8, lsr #2
    1e9c:	f703d800 			; <UNDEFINED> instruction: 0xf703d800
    1ea0:	03000004 	movweq	r0, #4
    1ea4:	000df729 	andeq	pc, sp, r9, lsr #14
    1ea8:	4b09dc00 	blmi	278eb0 <_start-0xbfd8f150>
    1eac:	03000003 	movweq	r0, #3
    1eb0:	0000d12a 	andeq	sp, r0, sl, lsr #2
    1eb4:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1eb8:	000009d9 	ldrdeq	r0, [r0], -r9
    1ebc:	00d12b03 	sbcseq	r2, r1, r3, lsl #22
    1ec0:	01040000 	mrseq	r0, (UNDEF: 4)
    1ec4:	000cf509 	andeq	pc, ip, r9, lsl #10
    1ec8:	d12c0300 			; <UNDEFINED> instruction: 0xd12c0300
    1ecc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1ed0:	0b230901 	bleq	8c42dc <_start-0xbf743d24>
    1ed4:	2d030000 	stccs	0, cr0, [r3, #-0]
    1ed8:	000000d1 	ldrdeq	r0, [r0], -r1
    1edc:	9409010c 	strls	r0, [r9], #-268	; 0xfffffef4
    1ee0:	0300000a 	movweq	r0, #10
    1ee4:	0000d12e 	andeq	sp, r0, lr, lsr #2
    1ee8:	09011000 	stmdbeq	r1, {ip}
    1eec:	00000c09 	andeq	r0, r0, r9, lsl #24
    1ef0:	00d12f03 	sbcseq	r2, r1, r3, lsl #30
    1ef4:	01140000 	tsteq	r4, r0
    1ef8:	0004fc09 	andeq	pc, r4, r9, lsl #24
    1efc:	0c300300 	ldceq	3, cr0, [r0], #-0
    1f00:	1800000e 	stmdane	r0, {r1, r2, r3}
    1f04:	0d7e0901 			; <UNDEFINED> instruction: 0x0d7e0901
    1f08:	31030000 	mrscc	r0, (UNDEF: 3)
    1f0c:	000000d1 	ldrdeq	r0, [r0], -r1
    1f10:	85090140 	strhi	r0, [r9, #-320]	; 0xfffffec0
    1f14:	03000009 	movweq	r0, #9
    1f18:	0000d132 	andeq	sp, r0, r2, lsr r1
    1f1c:	09014400 	stmdbeq	r1, {sl, lr}
    1f20:	00000501 	andeq	r0, r0, r1, lsl #10
    1f24:	0e213303 	cdpeq	3, 2, cr3, cr1, cr3, {0}
    1f28:	01480000 	mrseq	r0, (UNDEF: 72)
    1f2c:	000e5c09 	andeq	r5, lr, r9, lsl #24
    1f30:	d1340300 	teqle	r4, r0, lsl #6
    1f34:	80000000 	andhi	r0, r0, r0
    1f38:	04c80901 	strbeq	r0, [r8], #2305	; 0x901
    1f3c:	35030000 	strcc	r0, [r3, #-0]
    1f40:	000000d1 	ldrdeq	r0, [r0], -r1
    1f44:	9f090184 	svcls	0x00090184
    1f48:	0300000a 	movweq	r0, #10
    1f4c:	0000d136 	andeq	sp, r0, r6, lsr r1
    1f50:	09018800 	stmdbeq	r1, {fp, pc}
    1f54:	00000d83 	andeq	r0, r0, r3, lsl #27
    1f58:	00d13703 	sbcseq	r3, r1, r3, lsl #14
    1f5c:	018c0000 	orreq	r0, ip, r0
    1f60:	000db109 	andeq	fp, sp, r9, lsl #2
    1f64:	d1380300 	teqle	r8, r0, lsl #6
    1f68:	90000000 	andls	r0, r0, r0
    1f6c:	04400901 	strbeq	r0, [r0], #-2305	; 0xfffff6ff
    1f70:	39030000 	stmdbcc	r3, {}	; <UNPREDICTABLE>
    1f74:	000000d1 	ldrdeq	r0, [r0], -r1
    1f78:	88090194 	stmdahi	r9, {r2, r4, r7, r8}
    1f7c:	0300000a 	movweq	r0, #10
    1f80:	0000d13a 	andeq	sp, r0, sl, lsr r1
    1f84:	09019800 	stmdbeq	r1, {fp, ip, pc}
    1f88:	00000813 	andeq	r0, r0, r3, lsl r8
    1f8c:	00d13b03 	sbcseq	r3, r1, r3, lsl #22
    1f90:	019c0000 	orrseq	r0, ip, r0
    1f94:	00047609 	andeq	r7, r4, r9, lsl #12
    1f98:	d13c0300 	teqle	ip, r0, lsl #6
    1f9c:	a0000000 	andge	r0, r0, r0
    1fa0:	08110901 	ldmdaeq	r1, {r0, r8, fp}
    1fa4:	3d030000 	stccc	0, cr0, [r3, #-0]
    1fa8:	000000d1 	ldrdeq	r0, [r0], -r1
    1fac:	060901a4 	streq	r0, [r9], -r4, lsr #3
    1fb0:	03000005 	movweq	r0, #5
    1fb4:	000e363e 	andeq	r3, lr, lr, lsr r6
    1fb8:	0901a800 	stmdbeq	r1, {fp, sp, pc}
    1fbc:	00000611 	andeq	r0, r0, r1, lsl r6
    1fc0:	00d13f03 	sbcseq	r3, r1, r3, lsl #30
    1fc4:	02000000 	andeq	r0, r0, #0
    1fc8:	00090409 	andeq	r0, r9, r9, lsl #8
    1fcc:	d1400300 	mrsle	r0, SPSR_irq
    1fd0:	04000000 	streq	r0, [r0], #-0
    1fd4:	0ca20902 			; <UNDEFINED> instruction: 0x0ca20902
    1fd8:	41030000 	mrsmi	r0, (UNDEF: 3)
    1fdc:	000000d1 	ldrdeq	r0, [r0], -r1
    1fe0:	37090208 	strcc	r0, [r9, -r8, lsl #4]
    1fe4:	03000003 	movweq	r0, #3
    1fe8:	0000d142 	andeq	sp, r0, r2, asr #2
    1fec:	09020c00 	stmdbeq	r2, {sl, fp}
    1ff0:	000002d8 	ldrdeq	r0, [r0], -r8
    1ff4:	00d14303 	sbcseq	r4, r1, r3, lsl #6
    1ff8:	02100000 	andseq	r0, r0, #0
    1ffc:	000d1709 	andeq	r1, sp, r9, lsl #14
    2000:	d1440300 	mrsle	r0, SPSR_abt
    2004:	14000000 	strne	r0, [r0], #-0
    2008:	07150902 	ldreq	r0, [r5, -r2, lsl #18]
    200c:	45030000 	strmi	r0, [r3, #-0]
    2010:	000000d1 	ldrdeq	r0, [r0], -r1
    2014:	bf090218 	svclt	0x00090218
    2018:	03000006 	movweq	r0, #6
    201c:	0000d146 	andeq	sp, r0, r6, asr #2
    2020:	09021c00 	stmdbeq	r2, {sl, fp, ip}
    2024:	00000b84 	andeq	r0, r0, r4, lsl #23
    2028:	00d14703 	sbcseq	r4, r1, r3, lsl #14
    202c:	02200000 	eoreq	r0, r0, #0
    2030:	00028d09 	andeq	r8, r2, r9, lsl #26
    2034:	d1480300 	mrsle	r0, (UNDEF: 120)
    2038:	24000000 	strcs	r0, [r0], #-0
    203c:	061f0902 	ldreq	r0, [pc], -r2, lsl #18
    2040:	49030000 	stmdbmi	r3, {}	; <UNPREDICTABLE>
    2044:	00000e36 	andeq	r0, r0, r6, lsr lr
    2048:	32090228 	andcc	r0, r9, #40, 4	; 0x80000002
    204c:	03000004 	movweq	r0, #4
    2050:	0000d14a 	andeq	sp, r0, sl, asr #2
    2054:	09028000 	stmdbeq	r2, {pc}
    2058:	00000707 	andeq	r0, r0, r7, lsl #14
    205c:	00d14b03 	sbcseq	r4, r1, r3, lsl #22
    2060:	02840000 	addeq	r0, r4, #0
    2064:	000ad709 	andeq	sp, sl, r9, lsl #14
    2068:	d14c0300 	mrsle	r0, SPSR_mon
    206c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2070:	0dbd0902 			; <UNDEFINED> instruction: 0x0dbd0902
    2074:	4d030000 	stcmi	0, cr0, [r3, #-0]
    2078:	000000d1 	ldrdeq	r0, [r0], -r1
    207c:	4b09028c 	blmi	242ab4 <_start-0xbfdc554c>
    2080:	03000008 	movweq	r0, #8
    2084:	0000d14e 	andeq	sp, r0, lr, asr #2
    2088:	09029000 	stmdbeq	r2, {ip, pc}
    208c:	00000b66 	andeq	r0, r0, r6, ror #22
    2090:	00d14f03 	sbcseq	r4, r1, r3, lsl #30
    2094:	02940000 	addseq	r0, r4, #0
    2098:	000e7609 	andeq	r7, lr, r9, lsl #12
    209c:	d1500300 	cmple	r0, r0, lsl #6
    20a0:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    20a4:	051c0902 	ldreq	r0, [ip, #-2306]	; 0xfffff6fe
    20a8:	51030000 	mrspl	r0, (UNDEF: 3)
    20ac:	000000d1 	ldrdeq	r0, [r0], -r1
    20b0:	0d09029c 	sfmeq	f0, 4, [r9, #-624]	; 0xfffffd90
    20b4:	03000003 	movweq	r0, #3
    20b8:	000e4b52 	andeq	r4, lr, r2, asr fp
    20bc:	0902a000 	stmdbeq	r2, {sp, pc}
    20c0:	00000d25 	andeq	r0, r0, r5, lsr #26
    20c4:	00d15303 	sbcseq	r5, r1, r3, lsl #6
    20c8:	03000000 	movweq	r0, #0
    20cc:	000d3509 	andeq	r3, sp, r9, lsl #10
    20d0:	d1540300 	cmple	r4, r0, lsl #6
    20d4:	04000000 	streq	r0, [r0], #-0
    20d8:	0c610903 			; <UNDEFINED> instruction: 0x0c610903
    20dc:	55030000 	strpl	r0, [r3, #-0]
    20e0:	000000d1 	ldrdeq	r0, [r0], -r1
    20e4:	c8090308 	stmdagt	r9, {r3, r8, r9}
    20e8:	03000002 	movweq	r0, #2
    20ec:	0000d156 	andeq	sp, r0, r6, asr r1
    20f0:	09030c00 	stmdbeq	r3, {sl, fp}
    20f4:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    20f8:	00d15703 	sbcseq	r5, r1, r3, lsl #14
    20fc:	03100000 	tsteq	r0, #0
    2100:	000cba09 	andeq	fp, ip, r9, lsl #20
    2104:	d1580300 	cmple	r8, r0, lsl #6
    2108:	14000000 	strne	r0, [r0], #-0
    210c:	0bcb0903 	bleq	ff2c4520 <__bss_end__+0x3f2b94d0>
    2110:	59030000 	stmdbpl	r3, {}	; <UNPREDICTABLE>
    2114:	000000d1 	ldrdeq	r0, [r0], -r1
    2118:	8d090318 	stchi	3, cr0, [r9, #-96]	; 0xffffffa0
    211c:	0300000e 	movweq	r0, #14
    2120:	0000d15a 	andeq	sp, r0, sl, asr r1
    2124:	09031c00 	stmdbeq	r3, {sl, fp, ip}
    2128:	0000054c 	andeq	r0, r0, ip, asr #10
    212c:	00d15b03 	sbcseq	r5, r1, r3, lsl #22
    2130:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
    2134:	00083909 	andeq	r3, r8, r9, lsl #18
    2138:	d15c0300 	cmple	ip, r0, lsl #6
    213c:	24000000 	strcs	r0, [r0], #-0
    2140:	03130903 	tsteq	r3, #49152	; 0xc000
    2144:	5d030000 	stcpl	0, cr0, [r3, #-0]
    2148:	00000e36 	andeq	r0, r0, r6, lsr lr
    214c:	db090328 	blle	242df4 <_start-0xbfdc520c>
    2150:	03000008 	movweq	r0, #8
    2154:	0000d15e 	andeq	sp, r0, lr, asr r1
    2158:	09038000 	stmdbeq	r3, {pc}
    215c:	00000c14 	andeq	r0, r0, r4, lsl ip
    2160:	00d15f03 	sbcseq	r5, r1, r3, lsl #30
    2164:	03840000 	orreq	r0, r4, #0
    2168:	000af309 	andeq	pc, sl, r9, lsl #6
    216c:	d1600300 	cmnle	r0, r0, lsl #6
    2170:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2174:	0dd50903 	vldreq.16	s1, [r5, #6]	; <UNPREDICTABLE>
    2178:	61030000 	mrsvs	r0, (UNDEF: 3)
    217c:	000000d1 	ldrdeq	r0, [r0], -r1
    2180:	b809038c 	stmdalt	r9, {r2, r3, r7, r8, r9}
    2184:	03000004 	movweq	r0, #4
    2188:	0000d162 	andeq	sp, r0, r2, ror #2
    218c:	09039000 	stmdbeq	r3, {ip, pc}
    2190:	00000750 	andeq	r0, r0, r0, asr r7
    2194:	00d16303 	sbcseq	r6, r1, r3, lsl #6
    2198:	03940000 	orrseq	r0, r4, #0
    219c:	00066b09 	andeq	r6, r6, r9, lsl #22
    21a0:	d1640300 	cmnle	r4, r0, lsl #6
    21a4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    21a8:	09750903 	ldmdbeq	r5!, {r0, r1, r8, fp}^
    21ac:	65030000 	strvs	r0, [r3, #-0]
    21b0:	000000d1 	ldrdeq	r0, [r0], -r1
    21b4:	1909039c 	stmdbne	r9, {r2, r3, r4, r7, r8, r9}
    21b8:	03000003 	movweq	r0, #3
    21bc:	000e4b66 	andeq	r4, lr, r6, ror #22
    21c0:	0903a000 	stmdbeq	r3, {sp, pc}
    21c4:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
    21c8:	00d16703 	sbcseq	r6, r1, r3, lsl #14
    21cc:	04000000 	streq	r0, [r0], #-0
    21d0:	0007a009 	andeq	sl, r7, r9
    21d4:	d1680300 	cmnle	r8, r0, lsl #6
    21d8:	04000000 	streq	r0, [r0], #-0
    21dc:	04290904 	strteq	r0, [r9], #-2308	; 0xfffff6fc
    21e0:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    21e4:	000000d1 	ldrdeq	r0, [r0], -r1
    21e8:	b9090408 	stmdblt	r9, {r3, sl}
    21ec:	03000008 	movweq	r0, #8
    21f0:	0000d16a 	andeq	sp, r0, sl, ror #2
    21f4:	09040c00 	stmdbeq	r4, {sl, fp}
    21f8:	00000bfb 	strdeq	r0, [r0], -fp
    21fc:	00d16b03 	sbcseq	r6, r1, r3, lsl #22
    2200:	04100000 	ldreq	r0, [r0], #-0
    2204:	000a5809 	andeq	r5, sl, r9, lsl #16
    2208:	d16c0300 	cmnle	ip, r0, lsl #6
    220c:	14000000 	strne	r0, [r0], #-0
    2210:	0c3c0904 			; <UNDEFINED> instruction: 0x0c3c0904
    2214:	6d030000 	stcvs	0, cr0, [r3, #-0]
    2218:	000000d1 	ldrdeq	r0, [r0], -r1
    221c:	60090418 	andvs	r0, r9, r8, lsl r4
    2220:	03000007 	movweq	r0, #7
    2224:	0000d16e 	andeq	sp, r0, lr, ror #2
    2228:	09041c00 	stmdbeq	r4, {sl, fp, ip}
    222c:	00000cca 	andeq	r0, r0, sl, asr #25
    2230:	00d16f03 	sbcseq	r6, r1, r3, lsl #30
    2234:	04200000 	strteq	r0, [r0], #-0
    2238:	00031f09 	andeq	r1, r3, r9, lsl #30
    223c:	60700300 	rsbsvs	r0, r0, r0, lsl #6
    2240:	2400000e 	strcs	r0, [r0], #-14
    2244:	064c0904 	strbeq	r0, [ip], -r4, lsl #18
    2248:	71030000 	mrsvc	r0, (UNDEF: 3)
    224c:	000000d1 	ldrdeq	r0, [r0], -r1
    2250:	b0090800 	andlt	r0, r9, r0, lsl #16
    2254:	03000008 	movweq	r0, #8
    2258:	0000d172 	andeq	sp, r0, r2, ror r1
    225c:	09080400 	stmdbeq	r8, {sl}
    2260:	00000e1b 	andeq	r0, r0, fp, lsl lr
    2264:	00d17303 	sbcseq	r7, r1, r3, lsl #6
    2268:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    226c:	00088909 	andeq	r8, r8, r9, lsl #18
    2270:	d1740300 	cmnle	r4, r0, lsl #6
    2274:	0c000000 	stceq	0, cr0, [r0], {-0}
    2278:	03250908 			; <UNDEFINED> instruction: 0x03250908
    227c:	75030000 	strvc	r0, [r3, #-0]
    2280:	00000e75 	andeq	r0, r0, r5, ror lr
    2284:	c9090810 	stmdbgt	r9, {r4, fp}
    2288:	0300000a 	movweq	r0, #10
    228c:	0000d176 	andeq	sp, r0, r6, ror r1
    2290:	09082000 	stmdbeq	r8, {sp}
    2294:	000005fa 	strdeq	r0, [r0], -sl
    2298:	00d17703 	sbcseq	r7, r1, r3, lsl #14
    229c:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
    22a0:	000dec09 	andeq	lr, sp, r9, lsl #24
    22a4:	d1780300 	cmnle	r8, r0, lsl #6
    22a8:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    22ac:	09200908 	stmdbeq	r0!, {r3, r8, fp}
    22b0:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    22b4:	000000d1 	ldrdeq	r0, [r0], -r1
    22b8:	0d09082c 	stceq	8, cr0, [r9, #-176]	; 0xffffff50
    22bc:	0300000b 	movweq	r0, #11
    22c0:	0000d17a 	andeq	sp, r0, sl, ror r1
    22c4:	09083000 	stmdbeq	r8, {ip, sp}
    22c8:	000004af 	andeq	r0, r0, pc, lsr #9
    22cc:	00d17b03 	sbcseq	r7, r1, r3, lsl #22
    22d0:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
    22d4:	000c9909 	andeq	r9, ip, r9, lsl #18
    22d8:	d17c0300 	cmnle	ip, r0, lsl #6
    22dc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    22e0:	07ad0908 	streq	r0, [sp, r8, lsl #18]!
    22e4:	7d030000 	stcvc	0, cr0, [r3, #-0]
    22e8:	000000d1 	ldrdeq	r0, [r0], -r1
    22ec:	2b09083c 	blcs	2443e4 <_start-0xbfdc3c1c>
    22f0:	03000003 	movweq	r0, #3
    22f4:	000e8a7e 	andeq	r8, lr, lr, ror sl
    22f8:	09084000 	stmdbeq	r8, {lr}
    22fc:	0000092a 	andeq	r0, r0, sl, lsr #18
    2300:	00d17f03 	sbcseq	r7, r1, r3, lsl #30
    2304:	08800000 	stmeq	r0, {}	; <UNPREDICTABLE>
    2308:	000e0009 	andeq	r0, lr, r9
    230c:	d1800300 	orrle	r0, r0, r0, lsl #6
    2310:	84000000 	strhi	r0, [r0], #-0
    2314:	0b400908 	bleq	100473c <_start-0xbf0038c4>
    2318:	81030000 	mrshi	r0, (UNDEF: 3)
    231c:	000000d1 	ldrdeq	r0, [r0], -r1
    2320:	f6090888 			; <UNDEFINED> instruction: 0xf6090888
    2324:	0300000d 	movweq	r0, #13
    2328:	0000d182 	andeq	sp, r0, r2, lsl #3
    232c:	09088c00 	stmdbeq	r8, {sl, fp, pc}
    2330:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2334:	00d18303 	sbcseq	r8, r1, r3, lsl #6
    2338:	08900000 	ldmeq	r0, {}	; <UNPREDICTABLE>
    233c:	00098d09 	andeq	r8, r9, r9, lsl #26
    2340:	d1840300 	orrle	r0, r4, r0, lsl #6
    2344:	94000000 	strls	r0, [r0], #-0
    2348:	09a80908 	stmibeq	r8!, {r3, r8, fp}
    234c:	85030000 	strhi	r0, [r3, #-0]
    2350:	000000d1 	ldrdeq	r0, [r0], -r1
    2354:	b0090898 	mullt	r9, r8, r8
    2358:	0300000c 	movweq	r0, #12
    235c:	0000d186 	andeq	sp, r0, r6, lsl #3
    2360:	09089c00 	stmdbeq	r8, {sl, fp, ip, pc}
    2364:	0000093f 	andeq	r0, r0, pc, lsr r9
    2368:	00d18703 	sbcseq	r8, r1, r3, lsl #14
    236c:	08a00000 	stmiaeq	r0!, {}	; <UNPREDICTABLE>
    2370:	00052a09 	andeq	r2, r5, r9, lsl #20
    2374:	d1880300 	orrle	r0, r8, r0, lsl #6
    2378:	a4000000 	strge	r0, [r0], #-0
    237c:	03310908 	teqeq	r1, #8, 18	; 0x20000
    2380:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
    2384:	00000de2 	andeq	r0, r0, r2, ror #27
    2388:	c60908a8 	strgt	r0, [r9], -r8, lsr #17
    238c:	03000007 	movweq	r0, #7
    2390:	0000d18a 	andeq	sp, r0, sl, lsl #3
    2394:	0908c000 	stmdbeq	r8, {lr, pc}
    2398:	00000794 	muleq	r0, r4, r7
    239c:	00d18b03 	sbcseq	r8, r1, r3, lsl #22
    23a0:	08c40000 	stmiaeq	r4, {}^	; <UNPREDICTABLE>
    23a4:	00068a09 	andeq	r8, r6, r9, lsl #20
    23a8:	d18c0300 	orrle	r0, ip, r0, lsl #6
    23ac:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    23b0:	0d450908 	vstreq.16	s1, [r5, #-16]	; <UNPREDICTABLE>
    23b4:	8d030000 	stchi	0, cr0, [r3, #-0]
    23b8:	000000d1 	ldrdeq	r0, [r0], -r1
    23bc:	dd0908cc 	stcle	8, cr0, [r9, #-816]	; 0xfffffcd0
    23c0:	03000006 	movweq	r0, #6
    23c4:	0000d18e 	andeq	sp, r0, lr, lsl #3
    23c8:	0908d000 	stmdbeq	r8, {ip, lr, pc}
    23cc:	00000d9a 	muleq	r0, sl, sp
    23d0:	00d18f03 	sbcseq	r8, r1, r3, lsl #30
    23d4:	08d40000 	ldmeq	r4, {}^	; <UNPREDICTABLE>
    23d8:	000b2a09 	andeq	r2, fp, r9, lsl #20
    23dc:	d1900300 	orrsle	r0, r0, r0, lsl #6
    23e0:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    23e4:	08720908 	ldmdaeq	r2!, {r3, r8, fp}^
    23e8:	91030000 	mrsls	r0, (UNDEF: 3)
    23ec:	000000d1 	ldrdeq	r0, [r0], -r1
    23f0:	eb0908dc 	bl	244768 <_start-0xbfdc3898>
    23f4:	03000008 	movweq	r0, #8
    23f8:	0000d192 	muleq	r0, r2, r1
    23fc:	0908e000 	stmdbeq	r8, {sp, lr, pc}
    2400:	00000b5a 	andeq	r0, r0, sl, asr fp
    2404:	00d19303 	sbcseq	r9, r1, r3, lsl #6
    2408:	08e40000 	stmiaeq	r4!, {}^	; <UNPREDICTABLE>
    240c:	00063f09 	andeq	r3, r6, r9, lsl #30
    2410:	d1940300 	orrsle	r0, r4, r0, lsl #6
    2414:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    2418:	08f70908 	ldmeq	r7!, {r3, r8, fp}^
    241c:	95030000 	strls	r0, [r3, #-0]
    2420:	000000d1 	ldrdeq	r0, [r0], -r1
    2424:	630908ec 	movwvs	r0, #39148	; 0x98ec
    2428:	03000004 	movweq	r0, #4
    242c:	0000d196 	muleq	r0, r6, r1
    2430:	0908f000 	stmdbeq	r8, {ip, sp, lr, pc}
    2434:	000009e5 	andeq	r0, r0, r5, ror #19
    2438:	00d19703 	sbcseq	r9, r1, r3, lsl #14
    243c:	08f40000 	ldmeq	r4!, {}^	; <UNPREDICTABLE>
    2440:	00038c09 	andeq	r8, r3, r9, lsl #24
    2444:	d1980300 	orrsle	r0, r8, r0, lsl #6
    2448:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    244c:	05640908 	strbeq	r0, [r4, #-2312]!	; 0xfffff6f8
    2450:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    2454:	000000d1 	ldrdeq	r0, [r0], -r1
    2458:	950908fc 	strls	r0, [r9, #-2300]	; 0xfffff704
    245c:	03000006 	movweq	r0, #6
    2460:	0000d19a 	muleq	r0, sl, r1
    2464:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    2468:	00000c44 	andeq	r0, r0, r4, asr #24
    246c:	00d19b03 	sbcseq	r9, r1, r3, lsl #22
    2470:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    2474:	00067b09 	andeq	r7, r6, r9, lsl #22
    2478:	b89c0300 	ldmlt	ip, {r8, r9}
    247c:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    2480:	0e0f0909 	vmlaeq.f16	s0, s30, s18	; <UNPREDICTABLE>
    2484:	9d030000 	stcls	0, cr0, [r3, #-0]
    2488:	000000d1 	ldrdeq	r0, [r0], -r1
    248c:	4509090c 	strmi	r0, [r9, #-2316]	; 0xfffff6f4
    2490:	03000003 	movweq	r0, #3
    2494:	000db89e 	muleq	sp, lr, r8
    2498:	09091000 	stmdbeq	r9, {ip}
    249c:	00000bb1 			; <UNDEFINED> instruction: 0x00000bb1
    24a0:	00d19f03 	sbcseq	r9, r1, r3, lsl #30
    24a4:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    24a8:	000a4e09 	andeq	r4, sl, r9, lsl #28
    24ac:	d1a00300 	lslle	r0, r0, #6
    24b0:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    24b4:	0dcb0909 	vstreq.16	s1, [fp, #18]	; <UNPREDICTABLE>
    24b8:	a1030000 	mrsge	r0, (UNDEF: 3)
    24bc:	000000d1 	ldrdeq	r0, [r0], -r1
    24c0:	3109091c 	tstcc	r9, ip, lsl r9
    24c4:	03000007 	movweq	r0, #7
    24c8:	0000d1a2 	andeq	sp, r0, r2, lsr #3
    24cc:	09092000 	stmdbeq	r9, {sp}
    24d0:	00000542 	andeq	r0, r0, r2, asr #10
    24d4:	00d1a303 	sbcseq	sl, r1, r3, lsl #6
    24d8:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    24dc:	000a6009 	andeq	r6, sl, r9
    24e0:	d1a40300 			; <UNDEFINED> instruction: 0xd1a40300
    24e4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    24e8:	06030909 	streq	r0, [r3], -r9, lsl #18
    24ec:	a5030000 	strge	r0, [r3, #-0]
    24f0:	000000d1 	ldrdeq	r0, [r0], -r1
    24f4:	bd09092c 	vstrlt.16	s0, [r9, #-88]	; 0xffffffa8	; <UNPREDICTABLE>
    24f8:	0300000b 	movweq	r0, #11
    24fc:	0000d1a6 	andeq	sp, r0, r6, lsr #3
    2500:	09093000 	stmdbeq	r9, {ip, sp}
    2504:	000003e6 	andeq	r0, r0, r6, ror #7
    2508:	00d1a703 	sbcseq	sl, r1, r3, lsl #14
    250c:	09340000 	ldmdbeq	r4!, {}	; <UNPREDICTABLE>
    2510:	00045709 	andeq	r5, r4, r9, lsl #14
    2514:	9fa80300 	svcls	0x00a80300
    2518:	3800000e 	stmdacc	r0, {r1, r2, r3}
    251c:	09590909 	ldmdbeq	r9, {r0, r3, r8, fp}^
    2520:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    2524:	000000d1 	ldrdeq	r0, [r0], -r1
    2528:	8d090980 	vstrhi.16	s0, [r9, #-256]	; 0xffffff00	; <UNPREDICTABLE>
    252c:	0300000c 	movweq	r0, #12
    2530:	0000d1aa 	andeq	sp, r0, sl, lsr #3
    2534:	09098400 	stmdbeq	r9, {sl, pc}
    2538:	0000057f 	andeq	r0, r0, pc, ror r5
    253c:	00d1ab03 	sbcseq	sl, r1, r3, lsl #22
    2540:	09880000 	stmibeq	r8, {}	; <UNPREDICTABLE>
    2544:	00049309 	andeq	r9, r4, r9, lsl #6
    2548:	d1ac0300 			; <UNDEFINED> instruction: 0xd1ac0300
    254c:	8c000000 	stchi	0, cr0, [r0], {-0}
    2550:	0b940909 	bleq	fe50497c <__bss_end__+0x3e4f992c>
    2554:	ad030000 	stcge	0, cr0, [r3, #-0]
    2558:	000000d1 	ldrdeq	r0, [r0], -r1
    255c:	e1090990 			; <UNDEFINED> instruction: 0xe1090990
    2560:	0300000c 	movweq	r0, #12
    2564:	0000d1ae 	andeq	sp, r0, lr, lsr #3
    2568:	09099400 	stmdbeq	r9, {sl, ip, pc}
    256c:	000005ee 	andeq	r0, r0, lr, ror #11
    2570:	00d1af03 	sbcseq	sl, r1, r3, lsl #30
    2574:	09980000 	ldmibeq	r8, {}	; <UNPREDICTABLE>
    2578:	000c3009 	andeq	r3, ip, r9
    257c:	d1b00300 	lslsle	r0, r0, #6
    2580:	9c000000 	stcls	0, cr0, [r0], {-0}
    2584:	07710909 	ldrbeq	r0, [r1, -r9, lsl #18]!
    2588:	b1030000 	mrslt	r0, (UNDEF: 3)
    258c:	000000d1 	ldrdeq	r0, [r0], -r1
    2590:	2d0909a0 	vstrcs.16	s0, [r9, #-320]	; 0xfffffec0	; <UNPREDICTABLE>
    2594:	03000008 	movweq	r0, #8
    2598:	0000d1b2 			; <UNDEFINED> instruction: 0x0000d1b2
    259c:	0909a400 	stmdbeq	r9, {sl, sp, pc}
    25a0:	00000c24 	andeq	r0, r0, r4, lsr #24
    25a4:	00d1b303 	sbcseq	fp, r1, r3, lsl #6
    25a8:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
    25ac:	00050b09 	andeq	r0, r5, r9, lsl #22
    25b0:	d1b40300 			; <UNDEFINED> instruction: 0xd1b40300
    25b4:	ac000000 	stcge	0, cr0, [r0], {-0}
    25b8:	045d0909 	ldrbeq	r0, [sp], #-2313	; 0xfffff6f7
    25bc:	b5030000 	strlt	r0, [r3, #-0]
    25c0:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
    25c4:	030909b0 	movweq	r0, #39344	; 0x99b0
    25c8:	03000008 	movweq	r0, #8
    25cc:	0000d1b6 			; <UNDEFINED> instruction: 0x0000d1b6
    25d0:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    25d4:	00000b15 	andeq	r0, r0, r5, lsl fp
    25d8:	00d1b703 	sbcseq	fp, r1, r3, lsl #14
    25dc:	0a040000 	beq	1025e4 <_start-0xbff05a1c>
    25e0:	00093109 	andeq	r3, r9, r9, lsl #2
    25e4:	d1b80300 			; <UNDEFINED> instruction: 0xd1b80300
    25e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    25ec:	0864090a 	stmdaeq	r4!, {r1, r3, r8, fp}^
    25f0:	b9030000 	stmdblt	r3, {}	; <UNPREDICTABLE>
    25f4:	000000d1 	ldrdeq	r0, [r0], -r1
    25f8:	71090a0c 	tstvc	r9, ip, lsl #20
    25fc:	0300000c 	movweq	r0, #12
    2600:	0000d1ba 			; <UNDEFINED> instruction: 0x0000d1ba
    2604:	090a1000 	stmdbeq	sl, {ip}
    2608:	000002ec 	andeq	r0, r0, ip, ror #5
    260c:	00d1bb03 	sbcseq	fp, r1, r3, lsl #22
    2610:	0a140000 	beq	502618 <_start-0xbfb059e8>
    2614:	000c5309 	andeq	r5, ip, r9, lsl #6
    2618:	d1bc0300 			; <UNDEFINED> instruction: 0xd1bc0300
    261c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2620:	02ba090a 	adcseq	r0, sl, #163840	; 0x28000
    2624:	bd030000 	stclt	0, cr0, [r3, #-0]
    2628:	000000d1 	ldrdeq	r0, [r0], -r1
    262c:	c2090a1c 	andgt	r0, r9, #28, 20	; 0x1c000
    2630:	03000009 	movweq	r0, #9
    2634:	0000d1be 			; <UNDEFINED> instruction: 0x0000d1be
    2638:	090a2000 	stmdbeq	sl, {sp}
    263c:	00000cd3 	ldrdeq	r0, [r0], -r3
    2640:	00d1bf03 	sbcseq	fp, r1, r3, lsl #30
    2644:	0a240000 	beq	90264c <_start-0xbf7059b4>
    2648:	00039909 	andeq	r9, r3, r9, lsl #18
    264c:	d1c00300 	bicle	r0, r0, r0, lsl #6
    2650:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2654:	05a4090a 	streq	r0, [r4, #2314]!	; 0x90a
    2658:	c1030000 	mrsgt	r0, (UNDEF: 3)
    265c:	000000d1 	ldrdeq	r0, [r0], -r1
    2660:	23090a2c 	movwcs	r0, #39468	; 0x9a2c
    2664:	03000007 	movweq	r0, #7
    2668:	000da3c2 	andeq	sl, sp, r2, asr #7
    266c:	090a3000 	stmdbeq	sl, {ip, sp}
    2670:	00000484 	andeq	r0, r0, r4, lsl #9
    2674:	00d1c303 	sbcseq	ip, r1, r3, lsl #6
    2678:	0a380000 	beq	e02680 <_start-0xbf205980>
    267c:	00073c09 	andeq	r3, r7, r9, lsl #24
    2680:	d1c40300 	bicle	r0, r4, r0, lsl #6
    2684:	3c000000 	stccc	0, cr0, [r0], {-0}
    2688:	0470090a 	ldrbteq	r0, [r0], #-2314	; 0xfffff6f6
    268c:	c5030000 	strgt	r0, [r3, #-0]
    2690:	00000e8a 	andeq	r0, r0, sl, lsl #29
    2694:	23090a40 	movwcs	r0, #39488	; 0x9a40
    2698:	0300000a 	movweq	r0, #10
    269c:	0000d1c6 	andeq	sp, r0, r6, asr #3
    26a0:	090a8000 	stmdbeq	sl, {pc}
    26a4:	00000d09 	andeq	r0, r0, r9, lsl #26
    26a8:	00d1c703 	sbcseq	ip, r1, r3, lsl #14
    26ac:	0a840000 	beq	fe1026b4 <__bss_end__+0x3e0f7664>
    26b0:	0003f309 	andeq	pc, r3, r9, lsl #6
    26b4:	d1c80300 	bicle	r0, r8, r0, lsl #6
    26b8:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    26bc:	06b1090a 	ldrteq	r0, [r1], sl, lsl #18
    26c0:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    26c4:	000000d1 	ldrdeq	r0, [r0], -r1
    26c8:	6a090a8c 	bvs	245100 <_start-0xbfdc2f00>
    26cc:	0300000a 	movweq	r0, #10
    26d0:	0000d1ca 	andeq	sp, r0, sl, asr #3
    26d4:	090a9000 	stmdbeq	sl, {ip, pc}
    26d8:	00000912 	andeq	r0, r0, r2, lsl r9
    26dc:	00d1cb03 	sbcseq	ip, r1, r3, lsl #22
    26e0:	0a940000 	beq	fe5026e8 <__bss_end__+0x3e4f7698>
    26e4:	000ae509 	andeq	lr, sl, r9, lsl #10
    26e8:	d1cc0300 	bicle	r0, ip, r0, lsl #6
    26ec:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    26f0:	037e090a 	cmneq	lr, #163840	; 0x28000
    26f4:	cd030000 	stcgt	0, cr0, [r3, #-0]
    26f8:	000000d1 	ldrdeq	r0, [r0], -r1
    26fc:	e1090a9c 			; <UNDEFINED> instruction: 0xe1090a9c
    2700:	03000007 	movweq	r0, #7
    2704:	0000d1ce 	andeq	sp, r0, lr, asr #3
    2708:	090aa000 	stmdbeq	sl, {sp, pc}
    270c:	00000abb 			; <UNDEFINED> instruction: 0x00000abb
    2710:	00d1cf03 	sbcseq	ip, r1, r3, lsl #30
    2714:	0aa40000 	beq	fe90271c <__bss_end__+0x3e8f76cc>
    2718:	000e6809 	andeq	r6, lr, r9, lsl #16
    271c:	d1d00300 	bicsle	r0, r0, r0, lsl #6
    2720:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    2724:	05e0090a 	strbeq	r0, [r0, #2314]!	; 0x90a
    2728:	d1030000 	mrsle	r0, (UNDEF: 3)
    272c:	000000d1 	ldrdeq	r0, [r0], -r1
    2730:	1f090aac 	svcne	0x00090aac
    2734:	03000008 	movweq	r0, #8
    2738:	0000d1d2 	ldrdeq	sp, [r0], -r2
    273c:	090ab000 	stmdbeq	sl, {ip, sp, pc}
    2740:	000005d2 	ldrdeq	r0, [r0], -r2
    2744:	00d1d303 	sbcseq	sp, r1, r3, lsl #6
    2748:	0ab40000 	beq	fed02750 <__bss_end__+0x3ecf7700>
    274c:	0007d209 	andeq	sp, r7, r9, lsl #4
    2750:	d1d40300 	bicsle	r0, r4, r0, lsl #6
    2754:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    2758:	0533090a 	ldreq	r0, [r3, #-2314]!	; 0xfffff6f6
    275c:	d5030000 	strle	r0, [r3, #-0]
    2760:	000000d1 	ldrdeq	r0, [r0], -r1
    2764:	87090abc 			; <UNDEFINED> instruction: 0x87090abc
    2768:	03000002 	movweq	r0, #2
    276c:	000e8ad6 	ldrdeq	r8, [lr], -r6
    2770:	090ac000 	stmdbeq	sl, {lr, pc}
    2774:	00000d6e 	andeq	r0, r0, lr, ror #26
    2778:	00d1d703 	sbcseq	sp, r1, r3, lsl #14
    277c:	0b000000 	bleq	2784 <_start-0xc000587c>
    2780:	000e2209 	andeq	r2, lr, r9, lsl #4
    2784:	d1d80300 	bicsle	r0, r8, r0, lsl #6
    2788:	04000000 	streq	r0, [r0], #-0
    278c:	0e3c090b 	vaddeq.f16	s0, s24, s22	; <UNPREDICTABLE>
    2790:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    2794:	000000d1 	ldrdeq	r0, [r0], -r1
    2798:	49090b08 	stmdbmi	r9, {r3, r8, r9, fp}
    279c:	03000009 	movweq	r0, #9
    27a0:	0000d1da 	ldrdeq	sp, [r0], -sl
    27a4:	090b0c00 	stmdbeq	fp, {sl, fp}
    27a8:	00000beb 	andeq	r0, r0, fp, ror #23
    27ac:	00d1db03 	sbcseq	sp, r1, r3, lsl #22
    27b0:	0b100000 	bleq	4027b8 <_start-0xbfc05848>
    27b4:	000b7409 	andeq	r7, fp, r9, lsl #8
    27b8:	d1dc0300 	bicsle	r0, ip, r0, lsl #6
    27bc:	14000000 	strne	r0, [r0], #-0
    27c0:	049f090b 	ldreq	r0, [pc], #2315	; 27c8 <_start-0xc0005838>
    27c4:	dd030000 	stcle	0, cr0, [r3, #-0]
    27c8:	000000d1 	ldrdeq	r0, [r0], -r1
    27cc:	cd090b18 	vstrgt	d0, [r9, #-96]	; 0xffffffa0
    27d0:	03000006 	movweq	r0, #6
    27d4:	0000d1de 	ldrdeq	sp, [r0], -lr
    27d8:	090b1c00 	stmdbeq	fp, {sl, fp, ip}
    27dc:	000005c2 	andeq	r0, r0, r2, asr #11
    27e0:	00d1df03 	sbcseq	sp, r1, r3, lsl #30
    27e4:	0b200000 	bleq	8027ec <_start-0xbf805814>
    27e8:	000b4a09 	andeq	r4, fp, r9, lsl #20
    27ec:	d1e00300 	mvnle	r0, r0, lsl #6
    27f0:	24000000 	strcs	r0, [r0], #-0
    27f4:	07b6090b 	ldreq	r0, [r6, fp, lsl #18]!
    27f8:	e1030000 	mrs	r0, (UNDEF: 3)
    27fc:	000000d1 	ldrdeq	r0, [r0], -r1
    2800:	6e090b28 	vmlavs.f64	d0, d9, d24
    2804:	03000003 	movweq	r0, #3
    2808:	0000d1e2 	andeq	sp, r0, r2, ror #3
    280c:	090b2c00 	stmdbeq	fp, {sl, fp, sp}
    2810:	00000a03 	andeq	r0, r0, r3, lsl #20
    2814:	00d1e303 	sbcseq	lr, r1, r3, lsl #6
    2818:	0b300000 	bleq	c02820 <_start-0xbf4057e0>
    281c:	0002aa09 	andeq	sl, r2, r9, lsl #20
    2820:	d1e40300 	mvnle	r0, r0, lsl #6
    2824:	34000000 	strcc	r0, [r0], #-0
    2828:	03d5090b 	bicseq	r0, r5, #180224	; 0x2c000
    282c:	e5030000 	str	r0, [r3, #-0]
    2830:	000000d1 	ldrdeq	r0, [r0], -r1
    2834:	a0090b38 	andge	r0, r9, r8, lsr fp
    2838:	03000006 	movweq	r0, #6
    283c:	0000d1e6 	andeq	sp, r0, r6, ror #3
    2840:	090b3c00 	stmdbeq	fp, {sl, fp, ip, sp}
    2844:	0000055e 	andeq	r0, r0, lr, asr r5
    2848:	0e8ae703 	cdpeq	7, 8, cr14, cr10, cr3, {0}
    284c:	0b400000 	bleq	1002854 <_start-0xbf0057ac>
    2850:	00035e09 	andeq	r5, r3, r9, lsl #28
    2854:	d1e80300 	mvnle	r0, r0, lsl #6
    2858:	80000000 	andhi	r0, r0, r0
    285c:	0625090b 	strteq	r0, [r5], -fp, lsl #18
    2860:	e9030000 	stmdb	r3, {}	; <UNPREDICTABLE>
    2864:	000000d1 	ldrdeq	r0, [r0], -r1
    2868:	55090b84 	strpl	r0, [r9, #-2948]	; 0xfffff47c
    286c:	03000006 	movweq	r0, #6
    2870:	0000d1ea 	andeq	sp, r0, sl, ror #3
    2874:	090b8800 	stmdbeq	fp, {fp, pc}
    2878:	00000bdb 	ldrdeq	r0, [r0], -fp
    287c:	00d1eb03 	sbcseq	lr, r1, r3, lsl #22
    2880:	0b8c0000 	bleq	fe302888 <__bss_end__+0x3e2f7838>
    2884:	00089109 	andeq	r9, r8, r9, lsl #2
    2888:	d1ec0300 	mvnle	r0, r0, lsl #6
    288c:	90000000 	andls	r0, r0, r0
    2890:	0a13090b 	beq	4c4cc4 <_start-0xbfb4333c>
    2894:	ed030000 	stc	0, cr0, [r3, #-0]
    2898:	000000d1 	ldrdeq	r0, [r0], -r1
    289c:	f3090b94 	vqrdmlah.s<illegal width 8>	d0, d25, d4
    28a0:	03000009 	movweq	r0, #9
    28a4:	0000d1ee 	andeq	sp, r0, lr, ror #3
    28a8:	090b9800 	stmdbeq	fp, {fp, ip, pc}
    28ac:	00000aab 	andeq	r0, r0, fp, lsr #21
    28b0:	00d1ef03 	sbcseq	lr, r1, r3, lsl #30
    28b4:	0b9c0000 	bleq	fe7028bc <__bss_end__+0x3e6f786c>
    28b8:	00096509 	andeq	r6, r9, r9, lsl #10
    28bc:	d1f00300 	mvnsle	r0, r0, lsl #6
    28c0:	a0000000 	andge	r0, r0, r0
    28c4:	03c0090b 	biceq	r0, r0, #180224	; 0x2c000
    28c8:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    28cc:	000000d1 	ldrdeq	r0, [r0], -r1
    28d0:	4c090ba4 			; <UNDEFINED> instruction: 0x4c090ba4
    28d4:	0300000e 	movweq	r0, #14
    28d8:	0000d1f2 	strdeq	sp, [r0], -r2
    28dc:	090ba800 	stmdbeq	fp, {fp, sp, pc}
    28e0:	00000594 	muleq	r0, r4, r5
    28e4:	00d1f303 	sbcseq	pc, r1, r3, lsl #6
    28e8:	0bac0000 	bleq	feb028f0 <__bss_end__+0x3eaf78a0>
    28ec:	0005b209 	andeq	fp, r5, r9, lsl #4
    28f0:	d1f40300 	mvnsle	r0, r0, lsl #6
    28f4:	b0000000 	andlt	r0, r0, r0
    28f8:	0a78090b 	beq	1e04d2c <_start-0xbe2032d4>
    28fc:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    2900:	000000d1 	ldrdeq	r0, [r0], -r1
    2904:	6e090bb4 	vmovvs.16	d25[0], r0
    2908:	03000005 	movweq	r0, #5
    290c:	0000d1f6 	strdeq	sp, [r0], -r6
    2910:	090bb800 	stmdbeq	fp, {fp, ip, sp, pc}
    2914:	000006f1 	strdeq	r0, [r0], -r1
    2918:	00d1f703 	sbcseq	pc, r1, r3, lsl #14
    291c:	0bbc0000 	bleq	fef02924 <__bss_end__+0x3eef78d4>
    2920:	00077d09 	andeq	r7, r7, r9, lsl #26
    2924:	8af80300 	bhi	ffe0352c <__bss_end__+0x3fdf84dc>
    2928:	c000000e 	andgt	r0, r0, lr
    292c:	0783090b 	streq	r0, [r3, fp, lsl #18]
    2930:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    2934:	000000d1 	ldrdeq	r0, [r0], -r1
    2938:	e6090c00 	str	r0, [r9], -r0, lsl #24
    293c:	03000002 	movweq	r0, #2
    2940:	000e75fa 	strdeq	r7, [lr], -sl
    2944:	090c0400 	stmdbeq	ip, {sl}
    2948:	00000d01 	andeq	r0, r0, r1, lsl #26
    294c:	00d1fb03 	sbcseq	pc, r1, r3, lsl #22
    2950:	0c140000 	ldceq	0, cr0, [r4], {-0}
    2954:	000e9d09 	andeq	r9, lr, r9, lsl #26
    2958:	d1fc0300 	mvnsle	r0, r0, lsl #6
    295c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2960:	02fa090c 	rscseq	r0, sl, #12, 18	; 0x30000
    2964:	fd030000 	stc2	0, cr0, [r3, #-0]
    2968:	00000ec9 	andeq	r0, r0, r9, asr #29
    296c:	d2090c1c 	andle	r0, r9, #28, 24	; 0x1c00
    2970:	0300000a 	movweq	r0, #10
    2974:	0000d1fe 	strdeq	sp, [r0], -lr
    2978:	0a0ff400 	beq	3ff980 <_start-0xbfc08680>
    297c:	00524449 	subseq	r4, r2, r9, asr #8
    2980:	00d1ff03 	sbcseq	pc, r1, r3, lsl #30
    2984:	0ff80000 	svceq	0x00f80000
    2988:	00078f0b 	andeq	r8, r7, fp, lsl #30
    298c:	01000300 	mrseq	r0, LR_irq
    2990:	000000d1 	ldrdeq	r0, [r0], -r1
    2994:	0c000ffc 	stceq	15, cr0, [r0], {252}	; 0xfc
    2998:	000000d1 	ldrdeq	r0, [r0], -r1
    299c:	00000da3 	andeq	r0, r0, r3, lsr #27
    29a0:	0000ca0d 	andeq	ip, r0, sp, lsl #20
    29a4:	06000100 	streq	r0, [r0], -r0, lsl #2
    29a8:	00000d93 	muleq	r0, r3, sp
    29ac:	0000d10c 	andeq	sp, r0, ip, lsl #2
    29b0:	000db800 	andeq	fp, sp, r0, lsl #16
    29b4:	00ca0d00 	sbceq	r0, sl, r0, lsl #26
    29b8:	00000000 	andeq	r0, r0, r0
    29bc:	000da806 	andeq	sl, sp, r6, lsl #16
    29c0:	00d10c00 	sbcseq	r0, r1, r0, lsl #24
    29c4:	0dcd0000 	stcleq	0, cr0, [sp]
    29c8:	ca0d0000 	bgt	3429d0 <_start-0xbfcc5630>
    29cc:	0c000000 	stceq	0, cr0, [r0], {-0}
    29d0:	0dbd0600 	ldceq	6, cr0, [sp]
    29d4:	d10c0000 	mrsle	r0, (UNDEF: 12)
    29d8:	e2000000 	and	r0, r0, #0
    29dc:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
    29e0:	000000ca 	andeq	r0, r0, sl, asr #1
    29e4:	d2060005 	andle	r0, r6, #5
    29e8:	0c00000d 	stceq	0, cr0, [r0], {13}
    29ec:	000000d1 	ldrdeq	r0, [r0], -r1
    29f0:	00000df7 	strdeq	r0, [r0], -r7
    29f4:	0000ca0d 	andeq	ip, r0, sp, lsl #20
    29f8:	06000800 	streq	r0, [r0], -r0, lsl #16
    29fc:	00000de7 	andeq	r0, r0, r7, ror #27
    2a00:	0000d10c 	andeq	sp, r0, ip, lsl #2
    2a04:	000e0c00 	andeq	r0, lr, r0, lsl #24
    2a08:	00ca0d00 	sbceq	r0, sl, r0, lsl #26
    2a0c:	00090000 	andeq	r0, r9, r0
    2a10:	000dfc06 	andeq	pc, sp, r6, lsl #24
    2a14:	00d10c00 	sbcseq	r0, r1, r0, lsl #24
    2a18:	0e210000 	cdpeq	0, 2, cr0, cr1, cr0, {0}
    2a1c:	ca0d0000 	bgt	342a24 <_start-0xbfcc55dc>
    2a20:	0d000000 	stceq	0, cr0, [r0, #-0]
    2a24:	0e110600 	cfmsub32eq	mvax0, mvfx0, mvfx1, mvfx0
    2a28:	d10c0000 	mrsle	r0, (UNDEF: 12)
    2a2c:	36000000 	strcc	r0, [r0], -r0
    2a30:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    2a34:	000000ca 	andeq	r0, r0, sl, asr #1
    2a38:	26060015 			; <UNDEFINED> instruction: 0x26060015
    2a3c:	0c00000e 	stceq	0, cr0, [r0], {14}
    2a40:	000000d1 	ldrdeq	r0, [r0], -r1
    2a44:	00000e4b 	andeq	r0, r0, fp, asr #28
    2a48:	0000ca0d 	andeq	ip, r0, sp, lsl #20
    2a4c:	06001700 	streq	r1, [r0], -r0, lsl #14
    2a50:	00000e3b 	andeq	r0, r0, fp, lsr lr
    2a54:	0000d10c 	andeq	sp, r0, ip, lsl #2
    2a58:	000e6000 	andeq	r6, lr, r0
    2a5c:	00ca0d00 	sbceq	r0, sl, r0, lsl #26
    2a60:	00f60000 	rscseq	r0, r6, r0
    2a64:	000e5006 	andeq	r5, lr, r6
    2a68:	00d10c00 	sbcseq	r0, r1, r0, lsl #24
    2a6c:	0e750000 	cdpeq	0, 7, cr0, cr5, cr0, {0}
    2a70:	ca0d0000 	bgt	342a78 <_start-0xbfcc5588>
    2a74:	03000000 	movweq	r0, #0
    2a78:	0e650600 	cdpeq	6, 6, cr0, cr5, cr0, {0}
    2a7c:	d10c0000 	mrsle	r0, (UNDEF: 12)
    2a80:	8a000000 	bhi	2a88 <_start-0xc0005578>
    2a84:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    2a88:	000000ca 	andeq	r0, r0, sl, asr #1
    2a8c:	7a06000f 	bvc	182ad0 <_start-0xbfe85530>
    2a90:	0c00000e 	stceq	0, cr0, [r0], {14}
    2a94:	000000d1 	ldrdeq	r0, [r0], -r1
    2a98:	00000e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    2a9c:	0000ca0d 	andeq	ip, r0, sp, lsl #20
    2aa0:	06001100 	streq	r1, [r0], -r0, lsl #2
    2aa4:	00000e8f 	andeq	r0, r0, pc, lsl #29
    2aa8:	0000d10c 	andeq	sp, r0, ip, lsl #2
    2aac:	000eb400 	andeq	fp, lr, r0, lsl #8
    2ab0:	00ca0d00 	sbceq	r0, sl, r0, lsl #26
    2ab4:	00130000 	andseq	r0, r3, r0
    2ab8:	000ea406 	andeq	sl, lr, r6, lsl #8
    2abc:	00d10c00 	sbcseq	r0, r1, r0, lsl #24
    2ac0:	0ec90000 	cdpeq	0, 12, cr0, cr9, cr0, {0}
    2ac4:	ca0d0000 	bgt	342acc <_start-0xbfcc5534>
    2ac8:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    2acc:	0eb90600 	cdpeq	6, 11, cr0, cr9, cr0, {0}
    2ad0:	650e0000 	strvs	r0, [lr, #-0]
    2ad4:	03000006 	movweq	r0, #6
    2ad8:	00e10101 	rsceq	r0, r1, r1, lsl #2
    2adc:	4e0f0000 	cdpmi	0, 0, cr0, cr15, cr0, {0}
    2ae0:	0100000f 	tsteq	r0, pc
    2ae4:	a5ac0134 	strge	r0, [ip, #308]!	; 0x134
    2ae8:	00c8c000 	sbceq	ip, r8, r0
    2aec:	9c010000 	stcls	0, cr0, [r1], {-0}
    2af0:	000f460f 	andeq	r4, pc, pc, lsl #12
    2af4:	01110100 	tsteq	r1, r0, lsl #2
    2af8:	c000a4e4 	andgt	sl, r0, r4, ror #9
    2afc:	000000c8 	andeq	r0, r0, r8, asr #1
    2b00:	79109c01 	ldmdbvc	r0, {r0, sl, fp, ip, pc}
    2b04:	0100000f 	tsteq	r0, pc
    2b08:	000f13e5 	andeq	r1, pc, r5, ror #7
    2b0c:	00a41400 	adceq	r1, r4, r0, lsl #8
    2b10:	0000d0c0 	andeq	sp, r0, r0, asr #1
    2b14:	059c0100 	ldreq	r0, [ip, #256]	; 0x100
    2b18:	00de0801 	sbcseq	r0, lr, r1, lsl #16
    2b1c:	a2110000 	andsge	r0, r1, #0
    2b20:	0100000f 	tsteq	r0, pc
    2b24:	000f13ac 	andeq	r1, pc, ip, lsr #7
    2b28:	00a32000 	adceq	r2, r3, r0
    2b2c:	0000f4c0 	andeq	pc, r0, r0, asr #9
    2b30:	5c9c0100 	ldfpls	f0, [ip], {0}
    2b34:	1200000f 	andne	r0, r0, #15
    2b38:	006b6361 	rsbeq	r6, fp, r1, ror #6
    2b3c:	0f13ac01 	svceq	0x0013ac01
    2b40:	91020000 	mrsls	r0, (UNDEF: 2)
    2b44:	0069136c 	rsbeq	r1, r9, ip, ror #6
    2b48:	00cabb01 	sbceq	fp, sl, r1, lsl #22
    2b4c:	91020000 	mrsls	r0, (UNDEF: 2)
    2b50:	0efe1474 	mrceq	4, 7, r1, cr14, cr4, {3}
    2b54:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    2b58:	00000f13 	andeq	r0, r0, r3, lsl pc
    2b5c:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2b60:	000f6a15 	andeq	r6, pc, r5, lsl sl	; <UNPREDICTABLE>
    2b64:	08780100 	ldmdaeq	r8!, {r8}^
    2b68:	18c000a2 	stmiane	r0, {r1, r5, r7}^
    2b6c:	01000001 	tsteq	r0, r1
    2b70:	000f8c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    2b74:	61641200 	cmnvs	r4, r0, lsl #4
    2b78:	78010074 	stmdavc	r1, {r2, r4, r5, r6}
    2b7c:	00000f13 	andeq	r0, r0, r3, lsl pc
    2b80:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
    2b84:	8c010069 	stchi	0, cr0, [r1], {105}	; 0x69
    2b88:	000000ca 	andeq	r0, r0, sl, asr #1
    2b8c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2b90:	000f9016 	andeq	r9, pc, r6, lsl r0	; <UNPREDICTABLE>
    2b94:	40520100 	subsmi	r0, r2, r0, lsl #2
    2b98:	c8c000a1 	stmiagt	r0, {r0, r5, r7}^
    2b9c:	01000000 	mrseq	r0, (UNDEF: 0)
    2ba0:	0f60169c 	svceq	0x0060169c
    2ba4:	2f010000 	svccs	0x00010000
    2ba8:	c000a080 	andgt	sl, r0, r0, lsl #1
    2bac:	000000c0 	andeq	r0, r0, r0, asr #1
    2bb0:	57179c01 	ldrpl	r9, [r7, -r1, lsl #24]
    2bb4:	0100000f 	tsteq	r0, pc
    2bb8:	009f9015 	addseq	r9, pc, r5, lsl r0	; <UNPREDICTABLE>
    2bbc:	0000f0c0 	andeq	pc, r0, r0, asr #1
    2bc0:	189c0100 	ldmne	ip, {r8}
    2bc4:	00000f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    2bc8:	9f540a01 	svcls	0x00540a01
    2bcc:	003cc000 	eorseq	ip, ip, r0
    2bd0:	9c010000 	stcls	0, cr0, [r1], {-0}
    2bd4:	01006913 	tsteq	r0, r3, lsl r9
    2bd8:	0000ca0c 	andeq	ip, r0, ip, lsl #20
    2bdc:	78910200 	ldmvc	r1, {r9}
    2be0:	007c0000 	rsbseq	r0, ip, r0
    2be4:	00040000 	andeq	r0, r4, r0
    2be8:	000005f9 	strdeq	r0, [r0], -r9
    2bec:	00520104 	subseq	r0, r2, r4, lsl #2
    2bf0:	b00c0000 	andlt	r0, ip, r0
    2bf4:	fe00000f 	cdp2	0, 0, cr0, cr0, cr15, {0}
    2bf8:	74000000 	strvc	r0, [r0], #-0
    2bfc:	80c000a6 	sbchi	r0, r0, r6, lsr #1
    2c00:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    2c04:	02000006 	andeq	r0, r0, #6
    2c08:	00f10704 	rscseq	r0, r1, r4, lsl #14
    2c0c:	b7030000 	strlt	r0, [r3, -r0]
    2c10:	0100000f 	tsteq	r0, pc
    2c14:	0000410c 	andeq	r4, r0, ip, lsl #2
    2c18:	00a6e400 	adceq	lr, r6, r0, lsl #8
    2c1c:	000010c0 	andeq	r1, r0, r0, asr #1
    2c20:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    2c24:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2c28:	bc050074 	stclt	0, cr0, [r5], {116}	; 0x74
    2c2c:	0100000f 	tsteq	r0, pc
    2c30:	00a67403 	adceq	r7, r6, r3, lsl #8
    2c34:	000070c0 	andeq	r7, r0, r0, asr #1
    2c38:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    2c3c:	0100736d 	tsteq	r0, sp, ror #6
    2c40:	00004103 	andeq	r4, r0, r3, lsl #2
    2c44:	70910200 	addsvc	r0, r1, r0, lsl #4
    2c48:	01006907 	tsteq	r0, r7, lsl #18
    2c4c:	00004105 	andeq	r4, r0, r5, lsl #2
    2c50:	78910200 	ldmvc	r1, {r9}
    2c54:	01006a07 	tsteq	r0, r7, lsl #20
    2c58:	00004105 	andeq	r4, r0, r5, lsl #2
    2c5c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	10001101 	andne	r1, r0, r1, lsl #2
   4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
   8:	1b080301 	blne	200c14 <_start-0xbfe073ec>
   c:	13082508 	movwne	r2, #34056	; 0x8508
  10:	00000005 	andeq	r0, r0, r5
  14:	10001101 	andne	r1, r0, r1, lsl #2
  18:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
  1c:	1b080301 	blne	200c28 <_start-0xbfe073d8>
  20:	13082508 	movwne	r2, #34056	; 0x8508
  24:	00000005 	andeq	r0, r0, r5
  28:	10001101 	andne	r1, r0, r1, lsl #2
  2c:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
  30:	1b080301 	blne	200c3c <_start-0xbfe073c4>
  34:	13082508 	movwne	r2, #34056	; 0x8508
  38:	00000005 	andeq	r0, r0, r5
  3c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  40:	030b130e 	movweq	r1, #45838	; 0xb30e
  44:	110e1b0e 	tstne	lr, lr, lsl #22
  48:	10061201 	andne	r1, r6, r1, lsl #4
  4c:	02000017 	andeq	r0, r0, #23
  50:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <_start-0xbf1452bc>
  58:	00001349 	andeq	r1, r0, r9, asr #6
  5c:	0b000f03 	bleq	3c70 <_start-0xc0004390>
  60:	000e030b 	andeq	r0, lr, fp, lsl #6
  64:	01010400 	tsteq	r1, r0, lsl #8
  68:	13011349 	movwne	r1, #4937	; 0x1349
  6c:	21050000 	mrscs	r0, (UNDEF: 5)
  70:	2f134900 	svccs	0x00134900
  74:	0600000b 	streq	r0, [r0], -fp
  78:	0b0b0024 	bleq	2c0110 <_start-0xbfd47ef0>
  7c:	0e030b3e 	vmoveq.16	d3[0], r0
  80:	34070000 	strcc	r0, [r7], #-0
  84:	3a0e0300 	bcc	380c8c <_start-0xbfc87374>
  88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  8c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  90:	08000018 	stmdaeq	r0, {r3, r4}
  94:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  98:	0b3a0e03 	bleq	e838ac <_start-0xbf184754>
  9c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  a4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  a8:	00130119 	andseq	r0, r3, r9, lsl r1
  ac:	00050900 	andeq	r0, r5, r0, lsl #18
  b0:	0b3a0803 	bleq	e820c4 <_start-0xbf185f3c>
  b4:	1349053b 	movtne	r0, #38203	; 0x953b
  b8:	00001802 	andeq	r1, r0, r2, lsl #16
  bc:	0000180a 	andeq	r1, r0, sl, lsl #16
  c0:	00340b00 	eorseq	r0, r4, r0, lsl #22
  c4:	0b3a0e03 	bleq	e838d8 <_start-0xbf184728>
  c8:	1349053b 	movtne	r0, #38203	; 0x953b
  cc:	00001802 	andeq	r1, r0, r2, lsl #16
  d0:	0b000f0c 	bleq	3d08 <_start-0xc00042f8>
  d4:	0013490b 	andseq	r4, r3, fp, lsl #18
  d8:	00260d00 	eoreq	r0, r6, r0, lsl #26
  dc:	00001349 	andeq	r1, r0, r9, asr #6
  e0:	3f012e0e 	svccc	0x00012e0e
  e4:	3a0e0319 	bcc	380d50 <_start-0xbfc872b0>
  e8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  ec:	11134919 	tstne	r3, r9, lsl r9
  f0:	40061201 	andmi	r1, r6, r1, lsl #4
  f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f8:	00001301 	andeq	r1, r0, r1, lsl #6
  fc:	0300340f 	movweq	r3, #1039	; 0x40f
 100:	3b0b3a08 	blcc	2ce928 <_start-0xbfd396d8>
 104:	02134905 	andseq	r4, r3, #81920	; 0x14000
 108:	10000018 	andne	r0, r0, r8, lsl r0
 10c:	0b0b0024 	bleq	2c01a4 <_start-0xbfd47e5c>
 110:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 114:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 118:	03193f01 	tsteq	r9, #1, 30
 11c:	3b0b3a0e 	blcc	2ce95c <_start-0xbfd396a4>
 120:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 124:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 128:	96184006 	ldrls	r4, [r8], -r6
 12c:	13011942 	movwne	r1, #6466	; 0x1942
 130:	05120000 	ldreq	r0, [r2, #-0]
 134:	3a080300 	bcc	200d3c <_start-0xbfe072c4>
 138:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 13c:	00180213 	andseq	r0, r8, r3, lsl r2
 140:	00051300 	andeq	r1, r5, r0, lsl #6
 144:	0b3a0e03 	bleq	e83958 <_start-0xbf1846a8>
 148:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 14c:	00001802 	andeq	r1, r0, r2, lsl #16
 150:	03003414 	movweq	r3, #1044	; 0x414
 154:	3b0b3a08 	blcc	2ce97c <_start-0xbfd39684>
 158:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 15c:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 164:	0b3b0b3a 	bleq	ec2e54 <_start-0xbf1451ac>
 168:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 16c:	0a160000 	beq	580174 <_start-0xbfa87e8c>
 170:	3a0e0300 	bcc	380d78 <_start-0xbfc87288>
 174:	110b3b0b 	tstne	fp, fp, lsl #22
 178:	17000001 	strne	r0, [r0, -r1]
 17c:	0111010b 	tsteq	r1, fp, lsl #2
 180:	13010612 	movwne	r0, #5650	; 0x1612
 184:	0b180000 	bleq	60018c <_start-0xbfa07e74>
 188:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 18c:	19000006 	stmdbne	r0, {r1, r2}
 190:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 194:	0b3a0e03 	bleq	e839a8 <_start-0xbf184658>
 198:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 19c:	01111349 	tsteq	r1, r9, asr #6
 1a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1a8:	1a000013 	bne	1fc <_start-0xc0007e04>
 1ac:	0e03012e 	adfeqsp	f0, f3, #0.5
 1b0:	0b3b0b3a 	bleq	ec2ea0 <_start-0xbf145160>
 1b4:	13491927 	movtne	r1, #39207	; 0x9927
 1b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1c0:	00130119 	andseq	r0, r3, r9, lsl r1
 1c4:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 1c8:	0b3a0e03 	bleq	e839dc <_start-0xbf184624>
 1cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1d0:	01111349 	tsteq	r1, r9, asr #6
 1d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1d8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1dc:	1c000013 	stcne	0, cr0, [r0], {19}
 1e0:	0e03012e 	adfeqsp	f0, f3, #0.5
 1e4:	0b3b0b3a 	bleq	ec2ed4 <_start-0xbf14512c>
 1e8:	13491927 	movtne	r1, #39207	; 0x9927
 1ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1f4:	00000019 	andeq	r0, r0, r9, lsl r0
 1f8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1fc:	030b130e 	movweq	r1, #45838	; 0xb30e
 200:	110e1b0e 	tstne	lr, lr, lsl #22
 204:	10061201 	andne	r1, r6, r1, lsl #4
 208:	02000017 	andeq	r0, r0, #23
 20c:	0b0b0113 	bleq	2c0660 <_start-0xbfd479a0>
 210:	0b3b0b3a 	bleq	ec2f00 <_start-0xbf145100>
 214:	00001301 	andeq	r1, r0, r1, lsl #6
 218:	03000d03 	movweq	r0, #3331	; 0xd03
 21c:	3b0b3a0e 	blcc	2cea5c <_start-0xbfd395a4>
 220:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 224:	0400000b 	streq	r0, [r0], #-11
 228:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 22c:	0b3b0b3a 	bleq	ec2f1c <_start-0xbf1450e4>
 230:	0b381349 	bleq	e04f5c <_start-0xbf2030a4>
 234:	24050000 	strcs	r0, [r5], #-0
 238:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 23c:	000e030b 	andeq	r0, lr, fp, lsl #6
 240:	00350600 	eorseq	r0, r5, r0, lsl #12
 244:	00001349 	andeq	r1, r0, r9, asr #6
 248:	03001607 	movweq	r1, #1543	; 0x607
 24c:	3b0b3a0e 	blcc	2cea8c <_start-0xbfd39574>
 250:	0013490b 	andseq	r4, r3, fp, lsl #18
 254:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 258:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 25c:	0b3b0b3a 	bleq	ec2f4c <_start-0xbf1450b4>
 260:	13491927 	movtne	r1, #39207	; 0x9927
 264:	06120111 			; <UNDEFINED> instruction: 0x06120111
 268:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 26c:	00130119 	andseq	r0, r3, r9, lsl r1
 270:	00340900 	eorseq	r0, r4, r0, lsl #18
 274:	0b3a0803 	bleq	e82288 <_start-0xbf185d78>
 278:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 27c:	00001802 	andeq	r1, r0, r2, lsl #16
 280:	4900260a 	stmdbmi	r0, {r1, r3, r9, sl, sp}
 284:	0b000013 	bleq	2d8 <_start-0xc0007d28>
 288:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 28c:	0b3a0e03 	bleq	e83aa0 <_start-0xbf184560>
 290:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 294:	06120111 			; <UNDEFINED> instruction: 0x06120111
 298:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 29c:	00130119 	andseq	r0, r3, r9, lsl r1
 2a0:	00050c00 	andeq	r0, r5, r0, lsl #24
 2a4:	0b3a0e03 	bleq	e83ab8 <_start-0xbf184548>
 2a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2ac:	00001802 	andeq	r1, r0, r2, lsl #16
 2b0:	0b000f0d 	bleq	3eec <_start-0xc0004114>
 2b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 2b8:	002e0e00 	eoreq	r0, lr, r0, lsl #28
 2bc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2c0:	0b3b0b3a 	bleq	ec2fb0 <_start-0xbf145050>
 2c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2cc:	00000019 	andeq	r0, r0, r9, lsl r0
 2d0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 2d4:	030b130e 	movweq	r1, #45838	; 0xb30e
 2d8:	110e1b0e 	tstne	lr, lr, lsl #22
 2dc:	10061201 	andne	r1, r6, r1, lsl #4
 2e0:	02000017 	andeq	r0, r0, #23
 2e4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 2e8:	0b3b0b3a 	bleq	ec2fd8 <_start-0xbf145028>
 2ec:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 2f0:	00001802 	andeq	r1, r0, r2, lsl #16
 2f4:	0b002403 	bleq	9308 <_start-0xbfffecf8>
 2f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2fc:	0400000e 	streq	r0, [r0], #-14
 300:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 304:	0b3a0e03 	bleq	e83b18 <_start-0xbf1844e8>
 308:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 30c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 310:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 314:	00000019 	andeq	r0, r0, r9, lsl r0
 318:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 31c:	030b130e 	movweq	r1, #45838	; 0xb30e
 320:	110e1b0e 	tstne	lr, lr, lsl #22
 324:	10061201 	andne	r1, r6, r1, lsl #4
 328:	02000017 	andeq	r0, r0, #23
 32c:	0b0b0113 	bleq	2c0780 <_start-0xbfd47880>
 330:	0b3b0b3a 	bleq	ec3020 <_start-0xbf144fe0>
 334:	00001301 	andeq	r1, r0, r1, lsl #6
 338:	03000d03 	movweq	r0, #3331	; 0xd03
 33c:	3b0b3a08 	blcc	2ceb64 <_start-0xbfd3949c>
 340:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 344:	0400000b 	streq	r0, [r0], #-11
 348:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 34c:	0b3b0b3a 	bleq	ec303c <_start-0xbf144fc4>
 350:	0b381349 	bleq	e0507c <_start-0xbf202f84>
 354:	24050000 	strcs	r0, [r5], #-0
 358:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 35c:	000e030b 	andeq	r0, lr, fp, lsl #6
 360:	00350600 	eorseq	r0, r5, r0, lsl #12
 364:	00001349 	andeq	r1, r0, r9, asr #6
 368:	03001607 	movweq	r1, #1543	; 0x607
 36c:	3b0b3a0e 	blcc	2cebac <_start-0xbfd39454>
 370:	0013490b 	andseq	r4, r3, fp, lsl #18
 374:	01010800 	tsteq	r1, r0, lsl #16
 378:	13011349 	movwne	r1, #4937	; 0x1349
 37c:	21090000 	mrscs	r0, (UNDEF: 9)
 380:	2f134900 	svccs	0x00134900
 384:	0a00000b 	beq	3b8 <_start-0xc0007c48>
 388:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
 38c:	0b3b0b3a 	bleq	ec307c <_start-0xbf144f84>
 390:	00001301 	andeq	r1, r0, r1, lsl #6
 394:	03000d0b 	movweq	r0, #3339	; 0xd0b
 398:	3b0b3a0e 	blcc	2cebd8 <_start-0xbfd39428>
 39c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 3a0:	0c000005 	stceq	0, cr0, [r0], {5}
 3a4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 3a8:	0b3b0b3a 	bleq	ec3098 <_start-0xbf144f68>
 3ac:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 3b0:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 3b4:	3a0e0300 	bcc	380fbc <_start-0xbfc87044>
 3b8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 3bc:	00053813 	andeq	r3, r5, r3, lsl r8
 3c0:	00160e00 	andseq	r0, r6, r0, lsl #28
 3c4:	0b3a0e03 	bleq	e83bd8 <_start-0xbf184428>
 3c8:	1349053b 	movtne	r0, #38203	; 0x953b
 3cc:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 3d0:	03193f00 	tsteq	r9, #0, 30
 3d4:	3b0b3a0e 	blcc	2cec14 <_start-0xbfd393ec>
 3d8:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 3dc:	97184006 	ldrls	r4, [r8, -r6]
 3e0:	00001942 	andeq	r1, r0, r2, asr #18
 3e4:	01110100 	tsteq	r1, r0, lsl #2
 3e8:	0b130e25 	bleq	4c3c84 <_start-0xbfb4437c>
 3ec:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 3f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3f4:	00001710 	andeq	r1, r0, r0, lsl r7
 3f8:	0b002402 	bleq	9408 <_start-0xbfffebf8>
 3fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 400:	0300000e 	movweq	r0, #14
 404:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 408:	0b3a0e03 	bleq	e83c1c <_start-0xbf1843e4>
 40c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 410:	01111349 	tsteq	r1, r9, asr #6
 414:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 418:	01194296 			; <UNDEFINED> instruction: 0x01194296
 41c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 420:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 424:	0b3b0b3a 	bleq	ec3114 <_start-0xbf144eec>
 428:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 42c:	34050000 	strcc	r0, [r5], #-0
 430:	3a080300 	bcc	201038 <_start-0xbfe06fc8>
 434:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 438:	00180213 	andseq	r0, r8, r3, lsl r2
 43c:	00340600 	eorseq	r0, r4, r0, lsl #12
 440:	0b3a0e03 	bleq	e83c54 <_start-0xbf1843ac>
 444:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 448:	00001802 	andeq	r1, r0, r2, lsl #16
 44c:	3f002e07 	svccc	0x00002e07
 450:	3a0e0319 	bcc	3810bc <_start-0xbfc86f44>
 454:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 458:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 45c:	96184006 	ldrls	r4, [r8], -r6
 460:	00001942 	andeq	r1, r0, r2, asr #18
 464:	01110100 	tsteq	r1, r0, lsl #2
 468:	0b130e25 	bleq	4c3d04 <_start-0xbfb442fc>
 46c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 470:	06120111 			; <UNDEFINED> instruction: 0x06120111
 474:	00001710 	andeq	r1, r0, r0, lsl r7
 478:	0b011302 	bleq	45088 <_start-0xbffc2f78>
 47c:	3b0b3a0b 	blcc	2cecb0 <_start-0xbfd39350>
 480:	0013010b 	andseq	r0, r3, fp, lsl #2
 484:	000d0300 	andeq	r0, sp, r0, lsl #6
 488:	0b3a0e03 	bleq	e83c9c <_start-0xbf184364>
 48c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 490:	00000b38 	andeq	r0, r0, r8, lsr fp
 494:	03000d04 	movweq	r0, #3332	; 0xd04
 498:	3b0b3a08 	blcc	2cecc0 <_start-0xbfd39340>
 49c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 4a0:	0500000b 	streq	r0, [r0, #-11]
 4a4:	0b0b0024 	bleq	2c053c <_start-0xbfd47ac4>
 4a8:	0e030b3e 	vmoveq.16	d3[0], r0
 4ac:	35060000 	strcc	r0, [r6, #-0]
 4b0:	00134900 	andseq	r4, r3, r0, lsl #18
 4b4:	00160700 	andseq	r0, r6, r0, lsl #14
 4b8:	0b3a0e03 	bleq	e83ccc <_start-0xbf184334>
 4bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4c0:	13080000 	movwne	r0, #32768	; 0x8000
 4c4:	3a050b01 	bcc	1430d0 <_start-0xbfec4f30>
 4c8:	010b3b0b 	tsteq	fp, fp, lsl #22
 4cc:	09000013 	stmdbeq	r0, {r0, r1, r4}
 4d0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 4d4:	0b3b0b3a 	bleq	ec31c4 <_start-0xbf144e3c>
 4d8:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 4dc:	0d0a0000 	stceq	0, cr0, [sl, #-0]
 4e0:	3a080300 	bcc	2010e8 <_start-0xbfe06f18>
 4e4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4e8:	00053813 	andeq	r3, r5, r3, lsl r8
 4ec:	000d0b00 	andeq	r0, sp, r0, lsl #22
 4f0:	0b3a0e03 	bleq	e83d04 <_start-0xbf1842fc>
 4f4:	1349053b 	movtne	r0, #38203	; 0x953b
 4f8:	00000538 	andeq	r0, r0, r8, lsr r5
 4fc:	4901010c 	stmdbmi	r1, {r2, r3, r8}
 500:	00130113 	andseq	r0, r3, r3, lsl r1
 504:	00210d00 	eoreq	r0, r1, r0, lsl #26
 508:	0b2f1349 	bleq	bc5234 <_start-0xbf442dcc>
 50c:	160e0000 	strne	r0, [lr], -r0
 510:	3a0e0300 	bcc	381118 <_start-0xbfc86ee8>
 514:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 518:	0f000013 	svceq	0x00000013
 51c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 520:	0b3a0e03 	bleq	e83d34 <_start-0xbf1842cc>
 524:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 528:	06120111 			; <UNDEFINED> instruction: 0x06120111
 52c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 530:	10000019 	andne	r0, r0, r9, lsl r0
 534:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 538:	0b3a0e03 	bleq	e83d4c <_start-0xbf1842b4>
 53c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 540:	01111349 	tsteq	r1, r9, asr #6
 544:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 548:	00194296 	mulseq	r9, r6, r2
 54c:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 550:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 554:	0b3b0b3a 	bleq	ec3244 <_start-0xbf144dbc>
 558:	13491927 	movtne	r1, #39207	; 0x9927
 55c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 560:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 564:	00130119 	andseq	r0, r3, r9, lsl r1
 568:	00051200 	andeq	r1, r5, r0, lsl #4
 56c:	0b3a0803 	bleq	e82580 <_start-0xbf185a80>
 570:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 574:	00001802 	andeq	r1, r0, r2, lsl #16
 578:	03003413 	movweq	r3, #1043	; 0x413
 57c:	3b0b3a08 	blcc	2ceda4 <_start-0xbfd3925c>
 580:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 584:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 588:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 58c:	0b3b0b3a 	bleq	ec327c <_start-0xbf144d84>
 590:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 594:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 598:	03193f01 	tsteq	r9, #1, 30
 59c:	3b0b3a0e 	blcc	2ceddc <_start-0xbfd39224>
 5a0:	1119270b 	tstne	r9, fp, lsl #14
 5a4:	40061201 	andmi	r1, r6, r1, lsl #4
 5a8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5ac:	00001301 	andeq	r1, r0, r1, lsl #6
 5b0:	3f002e16 	svccc	0x00002e16
 5b4:	3a0e0319 	bcc	381220 <_start-0xbfc86de0>
 5b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5bc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5c0:	96184006 	ldrls	r4, [r8], -r6
 5c4:	00001942 	andeq	r1, r0, r2, asr #18
 5c8:	3f002e17 	svccc	0x00002e17
 5cc:	3a0e0319 	bcc	381238 <_start-0xbfc86dc8>
 5d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5d4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5d8:	97184006 	ldrls	r4, [r8, -r6]
 5dc:	00001942 	andeq	r1, r0, r2, asr #18
 5e0:	3f012e18 	svccc	0x00012e18
 5e4:	3a0e0319 	bcc	381250 <_start-0xbfc86db0>
 5e8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 5ec:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 5f0:	97184006 	ldrls	r4, [r8, -r6]
 5f4:	00001942 	andeq	r1, r0, r2, asr #18
 5f8:	01110100 	tsteq	r1, r0, lsl #2
 5fc:	0b130e25 	bleq	4c3e98 <_start-0xbfb44168>
 600:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 604:	06120111 			; <UNDEFINED> instruction: 0x06120111
 608:	00001710 	andeq	r1, r0, r0, lsl r7
 60c:	0b002402 	bleq	961c <_start-0xbfffe9e4>
 610:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 614:	0300000e 	movweq	r0, #14
 618:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 61c:	0b3a0e03 	bleq	e83e30 <_start-0xbf1841d0>
 620:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 624:	06120111 			; <UNDEFINED> instruction: 0x06120111
 628:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 62c:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
 630:	0b0b0024 	bleq	2c06c8 <_start-0xbfd47938>
 634:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 638:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 63c:	03193f01 	tsteq	r9, #1, 30
 640:	3b0b3a0e 	blcc	2cee80 <_start-0xbfd39180>
 644:	1119270b 	tstne	r9, fp, lsl #14
 648:	40061201 	andmi	r1, r6, r1, lsl #4
 64c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 650:	05060000 	streq	r0, [r6, #-0]
 654:	3a080300 	bcc	20125c <_start-0xbfe06da4>
 658:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 65c:	00180213 	andseq	r0, r8, r3, lsl r2
 660:	00340700 	eorseq	r0, r4, r0, lsl #14
 664:	0b3a0803 	bleq	e82678 <_start-0xbf185988>
 668:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 66c:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	c0008000 	andgt	r8, r0, r0
  14:	00000218 	andeq	r0, r0, r8, lsl r2
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00660002 	rsbeq	r0, r6, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	c0008218 	andgt	r8, r0, r8, lsl r2
  34:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00d40002 	sbcseq	r0, r4, r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	c00082c8 	andgt	r8, r0, r8, asr #5
  54:	00000094 	muleq	r0, r4, r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	01420002 	cmpeq	r2, r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	c000835c 	andgt	r8, r0, ip, asr r3
  74:	000010b8 	strheq	r1, [r0], -r8
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	05c40002 	strbeq	r0, [r4, #2]
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	c0009414 	andgt	r9, r0, r4, lsl r4
  94:	000002dc 	ldrdeq	r0, [r0], -ip
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	07dc0002 	ldrbeq	r0, [ip, r2]
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	c00096f0 	strdgt	r9, [r0], -r0
  b4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	08290002 	stmdaeq	r9!, {r1}
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	c0009708 	andgt	r9, r0, r8, lsl #14
  d4:	0000065c 	andeq	r0, r0, ip, asr r6
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	1af10002 	bne	ffc400f4 <__bss_end__+0x3fc350a4>
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	c0009d64 	andgt	r9, r0, r4, ror #26
  f4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	1c040002 	stcne	0, cr0, [r4], {2}
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	c0009f54 	andgt	r9, r0, r4, asr pc
 114:	00000720 	andeq	r0, r0, r0, lsr #14
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	2be20002 	blcs	ff880134 <__bss_end__+0x3f8750e4>
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	c000a674 	andgt	sl, r0, r4, ror r6
 134:	00000080 	andeq	r0, r0, r0, lsl #1
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	5f007374 	svcpl	0x00007374
   8:	6975625f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sp, lr}^
   c:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
  10:	5f61765f 	svcpl	0x0061765f
  14:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
  18:	696b7300 	stmdbvs	fp!, {r8, r9, ip, sp, lr}^
  1c:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
  20:	7600696f 	strvc	r6, [r0], -pc, ror #18
  24:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
  28:	756f6300 	strbvc	r6, [pc, #-768]!	; fffffd30 <__bss_end__+0x3fff4ce0>
  2c:	5f00746e 	svcpl	0x0000746e
  30:	756f745f 	strbvc	r7, [pc, #-1119]!	; fffffbd9 <__bss_end__+0x3fff4b89>
  34:	72657070 	rsbvc	r7, r5, #112	; 0x70
  38:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
  3c:	5f63756e 	svcpl	0x0063756e
  40:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
  44:	00747369 	rsbseq	r7, r4, r9, ror #6
  48:	63657270 	cmnvs	r5, #112, 4
  4c:	6f697369 	svcvs	0x00697369
  50:	4e47006e 	cdpmi	0, 4, cr0, cr7, cr14, {3}
  54:	31432055 	qdaddcc	r2, r5, r3
  58:	2e372031 	mrccs	0, 1, r2, cr7, cr1, {1}
  5c:	20302e35 	eorscs	r2, r0, r5, lsr lr
  60:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  64:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
  68:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  6c:	73637061 	cmnvc	r3, #97	; 0x61
  70:	756e672d 	strbvc	r6, [lr, #-1837]!	; 0xfffff8d3
  74:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  78:	6e3d7570 	mrcvs	5, 1, r7, cr13, cr0, {3}
  7c:	206e6f65 	rsbcs	r6, lr, r5, ror #30
  80:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  84:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  88:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  8c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  90:	2d207066 	stccs	0, cr7, [r0, #-408]!	; 0xfffffe68
  94:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  98:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  9c:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
  a0:	6d2d2061 	stcvs	0, cr2, [sp, #-388]!	; 0xfffffe7c
  a4:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
  a8:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
  ac:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  b0:	2d203961 			; <UNDEFINED> instruction: 0x2d203961
  b4:	736c746d 	cmnvc	ip, #1828716544	; 0x6d000000
  b8:	6169642d 	cmnvs	r9, sp, lsr #8
  bc:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  c0:	756e673d 	strbvc	r6, [lr, #-1853]!	; 0xfffff8c3
  c4:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c8:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  cc:	6f6e662d 	svcvs	0x006e662d
  d0:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
  d4:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
  d8:	73616200 	cmnvc	r1, #0, 4
  dc:	6e750065 	cdpvs	0, 7, cr0, cr5, cr5, {3}
  e0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  e4:	63206465 			; <UNDEFINED> instruction: 0x63206465
  e8:	00726168 	rsbseq	r6, r2, r8, ror #2
  ec:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  f0:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  f4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  f8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  fc:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
 100:	2f656d6f 	svccs	0x00656d6f
 104:	756e696c 	strbvc	r6, [lr, #-2412]!	; 0xfffff694
 108:	61662f78 	smcvs	25336	; 0x62f8
 10c:	67697372 			; <UNDEFINED> instruction: 0x67697372
 110:	412f7468 			; <UNDEFINED> instruction: 0x412f7468
 114:	442f4d52 	strtmi	r4, [pc], #-3410	; 11c <_start-0xc0007ee4>
 118:	31323243 	teqcc	r2, r3, asr #4
 11c:	642f3131 	strtvs	r3, [pc], #-305	; 124 <_start-0xc0007edc>
 120:	30317961 	eorscc	r7, r1, r1, ror #18
 124:	2d32302f 	ldccs	0, cr3, [r2, #-188]!	; 0xffffff44
 128:	2d6d7770 	stclcs	7, cr7, [sp, #-448]!	; 0xfffffe40
 12c:	6e650063 	cdpvs	0, 6, cr0, cr5, cr3, {3}
 130:	73007064 	movwvc	r7, #100	; 0x64
 134:	6c706d69 	ldclvs	13, cr6, [r0], #-420	; 0xfffffe5c
 138:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
 13c:	6c6f7472 	cfstrdvs	mvd7, [pc], #-456	; ffffff7c <__bss_end__+0x3fff4f2c>
 140:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 148 <_start-0xc0007eb8>
 144:	2f6e6f6d 	svccs	0x006e6f6d
 148:	2f637273 	svccs	0x00637273
 14c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 150:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
 154:	616c6600 	cmnvs	ip, r0, lsl #12
 158:	73007367 	movwvc	r7, #871	; 0x367
 15c:	00657a69 	rsbeq	r7, r5, r9, ror #20
 160:	6c617571 	cfstr64vs	mvdx7, [r1], #-452	; 0xfffffe3c
 164:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
 168:	69730072 	ldmdbvs	r3!, {r1, r4, r5, r6}^
 16c:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
 170:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 174:	6c756f74 	ldclvs	15, cr6, [r5], #-464	; 0xfffffe30
 178:	73657200 	cmnvc	r5, #0, 4
 17c:	00746c75 	rsbseq	r6, r4, r5, ror ip
 180:	65706572 	ldrbvs	r6, [r0, #-1394]!	; 0xfffffa8e
 184:	73007461 	movwvc	r7, #1121	; 0x461
 188:	6c6e7274 	sfmvs	f7, 2, [lr], #-464	; 0xfffffe30
 18c:	6e006e65 	cdpvs	14, 0, cr6, cr0, cr5, {3}
 190:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
 194:	635f0072 	cmpvs	pc, #114	; 0x72
 198:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 19c:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 1a0:	7562746e 	strbvc	r7, [r2, #-1134]!	; 0xfffffb92
 1a4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 1a8:	65696600 	strbvs	r6, [r9, #-1536]!	; 0xfffffa00
 1ac:	775f646c 	ldrbvc	r6, [pc, -ip, ror #8]
 1b0:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 1b4:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 1b8:	6f6c0073 	svcvs	0x006c0073
 1bc:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 1c0:	7300746e 	movwvc	r7, #1134	; 0x46e
 1c4:	006e6769 	rsbeq	r6, lr, r9, ror #14
 1c8:	65725f5f 	ldrbvs	r5, [r2, #-3935]!	; 0xfffff0a1
 1cc:	73760073 	cmnvc	r6, #115	; 0x73
 1d0:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 1d4:	5f006674 	svcpl	0x00006674
 1d8:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 1dc:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xfffff08c
 1e0:	53006374 	movwpl	r6, #884	; 0x374
 1e4:	46434345 	strbmi	r4, [r3], -r5, asr #6
 1e8:	5f005247 	svcpl	0x00005247
 1ec:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 1f0:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xfffff08c
 1f4:	52007374 	andpl	r7, r0, #116, 6	; 0xd0000001
 1f8:	00524f54 	subseq	r4, r2, r4, asr pc
 1fc:	52525342 	subspl	r5, r2, #134217729	; 0x8000001
 200:	50555000 	subspl	r5, r5, r0
 204:	4d005244 	sfmmi	f5, 4, [r0, #-272]	; 0xfffffef0
 208:	5245444f 	subpl	r4, r5, #1325400064	; 0x4f000000
 20c:	50534f00 	subspl	r4, r3, r0, lsl #30
 210:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
 214:	50544700 	subspl	r4, r4, r0, lsl #14
 218:	52500052 	subspl	r0, r0, #82	; 0x52
 21c:	00435345 	subeq	r5, r3, r5, asr #6
 220:	61755f5f 	cmnvs	r5, pc, asr pc
 224:	695f7472 	ldmdbvs	pc, {r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 228:	0074696e 	rsbseq	r6, r4, lr, ror #18
 22c:	6f697067 	svcvs	0x00697067
 230:	4c00745f 	cfstrsmi	mvf7, [r0], {95}	; 0x5f
 234:	00524b43 	subseq	r4, r2, r3, asr #22
 238:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 23c:	4f00745f 	svcmi	0x0000745f
 240:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 244:	46410052 			; <UNDEFINED> instruction: 0x46410052
 248:	5f004c52 	svcpl	0x00004c52
 24c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 250:	65675f74 	strbvs	r5, [r7, #-3956]!	; 0xfffff08c
 254:	41006374 	tstmi	r0, r4, ror r3
 258:	00485246 	subeq	r5, r8, r6, asr #4
 25c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 260:	732f6e6f 			; <UNDEFINED> instruction: 0x732f6e6f
 264:	752f6372 	strvc	r6, [pc, #-882]!	; fffffefa <__bss_end__+0x3fff4eaa>
 268:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
 26c:	73700063 	cmnvc	r0, #99	; 0x63
 270:	64007274 	strvs	r7, [r0], #-628	; 0xfffffd8c
 274:	72695f6f 	rsbvc	r5, r9, #444	; 0x1bc
 278:	72730071 	rsbsvc	r0, r3, #113	; 0x71
 27c:	6f642f63 	svcvs	0x00642f63
 280:	7172695f 	cmnvc	r2, pc, asr r9
 284:	7200632e 	andvc	r6, r0, #-1207959552	; 0xb8000000
 288:	34327365 	ldrtcc	r7, [r2], #-869	; 0xfffffc9b
 28c:	5f504d00 	svcpl	0x00504d00
 290:	48415a54 	stmdami	r1, {r2, r4, r6, r9, fp, ip, lr}^
 294:	4e453642 	cdpmi	6, 4, cr3, cr5, cr2, {2}
 298:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 29c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 2a0:	5f335f32 	svcpl	0x00335f32
 2a4:	5f355f34 	svcpl	0x00355f34
 2a8:	504d0074 	subpl	r0, sp, r4, ror r0
 2ac:	4958415f 	ldmdbmi	r8, {r0, r1, r2, r3, r4, r6, r8, lr}^
 2b0:	45504c4d 	ldrbmi	r4, [r0, #-3149]	; 0xfffff3b3
 2b4:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 2b8:	504d0052 	subpl	r0, sp, r2, asr r0
 2bc:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 2c0:	434e4532 	movtmi	r4, #58674	; 0xe532
 2c4:	0052524c 	subseq	r5, r2, ip, asr #4
 2c8:	415f504d 	cmpmi	pc, sp, asr #32
 2cc:	4c354250 	lfmmi	f4, 4, [r5], #-320	; 0xfffffec0
 2d0:	434e4550 	movtmi	r4, #58704	; 0xe550
 2d4:	0052524c 	subseq	r5, r2, ip, asr #4
 2d8:	415f504d 	cmpmi	pc, sp, asr #32
 2dc:	45354248 	ldrmi	r4, [r5, #-584]!	; 0xfffffdb8
 2e0:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 2e4:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0xffffffae
 2e8:	00373273 	eorseq	r3, r7, r3, ror r2
 2ec:	415f504d 	cmpmi	pc, sp, asr #32
 2f0:	45334250 	ldrmi	r4, [r3, #-592]!	; 0xfffffdb0
 2f4:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 2f8:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0xffffffae
 2fc:	00383273 	eorseq	r3, r8, r3, ror r2
 300:	52454944 	subpl	r4, r5, #68, 18	; 0x110000
 304:	49584100 	ldmdbmi	r8, {r8, lr}^
 308:	52564944 	subspl	r4, r6, #68, 18	; 0x110000
 30c:	73657200 	cmnvc	r5, #0, 4
 310:	72003131 	andvc	r3, r0, #1073741836	; 0x4000000c
 314:	32317365 	eorscc	r7, r1, #-1811939327	; 0x94000001
 318:	73657200 	cmnvc	r5, #0, 4
 31c:	72003331 	andvc	r3, r0, #-1006632960	; 0xc4000000
 320:	34317365 	ldrtcc	r7, [r1], #-869	; 0xfffffc9b
 324:	73657200 	cmnvc	r5, #0, 4
 328:	72003531 	andvc	r3, r0, #205520896	; 0xc400000
 32c:	36317365 	ldrtcc	r7, [r1], -r5, ror #6
 330:	73657200 	cmnvc	r5, #0, 4
 334:	4d003731 	stcmi	7, cr3, [r0, #-196]	; 0xffffff3c
 338:	50415f50 	subpl	r5, r1, r0, asr pc
 33c:	4e453542 	cdpmi	5, 4, cr3, cr5, cr2, {2}
 340:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 344:	73657200 	cmnvc	r5, #0, 4
 348:	4d003931 	vstrmi.16	s6, [r0, #-98]	; 0xffffff9e	; <UNPREDICTABLE>
 34c:	4f425f50 	svcmi	0x00425f50
 350:	5243544f 	subpl	r5, r3, #1325400064	; 0x4f000000
 354:	42504100 	subsmi	r4, r0, #0, 2
 358:	56494434 			; <UNDEFINED> instruction: 0x56494434
 35c:	434d0052 	movtmi	r0, #53330	; 0xd052
 360:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 364:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
 368:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 36c:	504d0052 	subpl	r0, sp, r2, asr r0
 370:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 374:	45504c34 	ldrbmi	r4, [r0, #-3124]	; 0xfffff3cc
 378:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 37c:	434d0052 	movtmi	r0, #53330	; 0xd052
 380:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 384:	434e4532 	movtmi	r4, #58674	; 0xe532
 388:	0052524c 	subseq	r5, r2, ip, asr #4
 38c:	4d4d4453 	cfstrdmi	mvd4, [sp, #-332]	; 0xfffffeb4
 390:	4b433343 	blmi	10cd0a4 <_start-0xbef3af5c>
 394:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 398:	5f504d00 	svcpl	0x00504d00
 39c:	34424841 	strbcc	r4, [r2], #-2113	; 0xfffff7bf
 3a0:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 3a4:	68005254 	stmdavs	r0, {r2, r4, r6, r9, ip, lr}
 3a8:	665f6c61 	ldrbvs	r6, [pc], -r1, ror #24
 3ac:	695f6e61 	ldmdbvs	pc, {r0, r5, r6, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 3b0:	0074696e 	rsbseq	r6, r4, lr, ror #18
 3b4:	525f5242 	subspl	r5, pc, #536870916	; 0x20000004
 3b8:	43535453 	cmpmi	r3, #1392508928	; 0x53000000
 3bc:	0052524c 	subseq	r5, r2, ip, asr #4
 3c0:	415f434d 	cmpmi	pc, sp, asr #6
 3c4:	4c334248 	lfmmi	f4, 4, [r3], #-288	; 0xfffffee0
 3c8:	434e4550 	movtmi	r4, #58704	; 0xe550
 3cc:	0052524c 	subseq	r5, r2, ip, asr #4
 3d0:	52544442 	subspl	r4, r4, #1107296256	; 0x42000000
 3d4:	5f504d00 	svcpl	0x00504d00
 3d8:	48414c4d 	stmdami	r1, {r0, r2, r3, r6, sl, fp, lr}^
 3dc:	45504c42 	ldrbmi	r4, [r0, #-3138]	; 0xfffff3be
 3e0:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 3e4:	504c0052 	subpl	r0, ip, r2, asr r0
 3e8:	314d4954 	cmpcc	sp, r4, asr r9
 3ec:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 3f0:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 3f4:	50415f43 	subpl	r5, r1, r3, asr #30
 3f8:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
 3fc:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 400:	52415500 	subpl	r5, r1, #0, 10
 404:	4b433154 	blmi	10cc95c <_start-0xbef3b6a4>
 408:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 40c:	4d434300 	stclmi	3, cr4, [r3, #-0]
 410:	43003152 	movwmi	r3, #338	; 0x152
 414:	32524d43 	subscc	r4, r2, #4288	; 0x10c0
 418:	4d434300 	stclmi	3, cr4, [r3, #-0]
 41c:	50003352 	andpl	r3, r0, r2, asr r3
 420:	43324c4c 	teqmi	r2, #76, 24	; 0x4c00
 424:	31524746 	cmpcc	r2, r6, asr #14
 428:	5f504d00 	svcpl	0x00504d00
 42c:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 430:	434d0052 	movtmi	r0, #53330	; 0xd052
 434:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 438:	534e4534 	movtpl	r4, #58676	; 0xe534
 43c:	00525445 	subseq	r5, r2, r5, asr #8
 440:	35424841 	strbcc	r4, [r2, #-2113]	; 0xfffff7bf
 444:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 448:	0052524c 	subseq	r5, r2, ip, asr #4
 44c:	36495053 			; <UNDEFINED> instruction: 0x36495053
 450:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 454:	7200524c 	andvc	r5, r0, #76, 4	; 0xc0000004
 458:	30327365 	eorscc	r7, r2, r5, ror #6
 45c:	73657200 	cmnvc	r5, #0, 4
 460:	55003132 	strpl	r3, [r0, #-306]	; 0xfffffece
 464:	37545241 	ldrbcc	r5, [r4, -r1, asr #4]
 468:	534b4338 	movtpl	r4, #45880	; 0xb338
 46c:	00524c45 	subseq	r4, r2, r5, asr #24
 470:	32736572 	rsbscc	r6, r3, #478150656	; 0x1c800000
 474:	5a540033 	bpl	1500548 <_start-0xbeb07ab8>
 478:	36424841 	strbcc	r4, [r2], -r1, asr #16
 47c:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 480:	00524c45 	subseq	r4, r2, r5, asr #24
 484:	4d5f504d 	ldclmi	0, cr5, [pc, #-308]	; 358 <_start-0xc0007ca8>
 488:	4248414c 	submi	r4, r8, #76, 2
 48c:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 490:	41005254 	tstmi	r0, r4, asr r2
 494:	52324250 	eorspl	r4, r2, #80, 4
 498:	4c435453 	cfstrdmi	mvd5, [r3], {83}	; 0x53
 49c:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 4a0:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 4a4:	504c3242 	subpl	r3, ip, r2, asr #4
 4a8:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 4ac:	41005254 	tstmi	r0, r4, asr r2
 4b0:	44314250 	ldrtmi	r4, [r1], #-592	; 0xfffffdb0
 4b4:	00525649 	subseq	r5, r2, r9, asr #12
 4b8:	415f434d 	cmpmi	pc, sp, asr #6
 4bc:	4c354248 	lfmmi	f4, 4, [r5], #-288	; 0xfffffee0
 4c0:	534e4550 	movtpl	r4, #58704	; 0xe550
 4c4:	00525445 	subseq	r5, r2, r5, asr #8
 4c8:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 4cc:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 4d0:	0052524c 	subseq	r5, r2, ip, asr #4
 4d4:	314c4c50 	cmpcc	ip, r0, asr ip
 4d8:	43415246 	movtmi	r5, #4678	; 0x1246
 4dc:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0xffffffae
 4e0:	72003173 	andvc	r3, r0, #-1073741796	; 0xc000001c
 4e4:	00327365 	eorseq	r7, r2, r5, ror #6
 4e8:	33736572 	cmncc	r3, #478150656	; 0x1c800000
 4ec:	73657200 	cmnvc	r5, #0, 4
 4f0:	65720034 	ldrbvs	r0, [r2, #-52]!	; 0xffffffcc
 4f4:	72003573 	andvc	r3, r0, #482344960	; 0x1cc00000
 4f8:	00367365 	eorseq	r7, r6, r5, ror #6
 4fc:	37736572 			; <UNDEFINED> instruction: 0x37736572
 500:	73657200 	cmnvc	r5, #0, 4
 504:	65720038 	ldrbvs	r0, [r2, #-56]!	; 0xffffffc8
 508:	41003973 	tstmi	r0, r3, ror r9
 50c:	52344248 	eorspl	r4, r4, #72, 4	; 0x80000004
 510:	4c435453 	cfstrdmi	mvd5, [r3], {83}	; 0x53
 514:	43005252 	movwmi	r5, #594	; 0x252
 518:	00524543 	subseq	r4, r2, r3, asr #10
 51c:	415f434d 	cmpmi	pc, sp, asr #6
 520:	45364248 	ldrmi	r4, [r6, #-584]!	; 0xfffffdb8
 524:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 528:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 52c:	5343344c 	movtpl	r3, #13388	; 0x344c
 530:	4d005247 	sfmmi	f5, 4, [r0, #-284]	; 0xfffffee4
 534:	4c4d5f43 	mcrrmi	15, 4, r5, sp, cr3
 538:	45424841 	strbmi	r4, [r2, #-2113]	; 0xfffff7bf
 53c:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 540:	53440052 	movtpl	r0, #16466	; 0x4052
 544:	534b4349 	movtpl	r4, #45897	; 0xb349
 548:	00524c45 	subseq	r4, r2, r5, asr #24
 54c:	545f504d 	ldrbpl	r5, [pc], #-77	; 554 <_start-0xc0007aac>
 550:	4248415a 	submi	r4, r8, #-2147483626	; 0x80000016
 554:	45504c36 	ldrbmi	r4, [r0, #-3126]	; 0xfffff3ca
 558:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 55c:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0xffffffae
 560:	00353273 	eorseq	r3, r5, r3, ror r2
 564:	43485445 	movtmi	r5, #33861	; 0x8445
 568:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 56c:	434d0052 	movtmi	r0, #53330	; 0xd052
 570:	414c4d5f 	cmpmi	ip, pc, asr sp
 574:	504c4248 	subpl	r4, ip, r8, asr #4
 578:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 57c:	41005254 	tstmi	r0, r4, asr r2
 580:	52324250 	eorspl	r4, r2, #80, 4
 584:	45535453 	ldrbmi	r5, [r3, #-1107]	; 0xfffffbad
 588:	4f005254 	svcmi	0x00005254
 58c:	534e4543 	movtpl	r4, #58691	; 0xe543
 590:	00525445 	subseq	r5, r2, r5, asr #8
 594:	415f434d 	cmpmi	pc, sp, asr #6
 598:	4c344248 	lfmmi	f4, 4, [r4], #-288	; 0xfffffee0
 59c:	434e4550 	movtmi	r4, #58704	; 0xe550
 5a0:	0052524c 	subseq	r5, r2, ip, asr #4
 5a4:	415f504d 	cmpmi	pc, sp, asr #32
 5a8:	45344248 	ldrmi	r4, [r4, #-584]!	; 0xfffffdb8
 5ac:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 5b0:	434d0052 	movtmi	r0, #53330	; 0xd052
 5b4:	4958415f 	ldmdbmi	r8, {r0, r1, r2, r3, r4, r6, r8, lr}^
 5b8:	45504c4d 	ldrbmi	r4, [r0, #-3149]	; 0xfffff3b3
 5bc:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 5c0:	504d0052 	subpl	r0, sp, r2, asr r0
 5c4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 5c8:	45504c33 	ldrbmi	r4, [r0, #-3123]	; 0xfffff3cd
 5cc:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 5d0:	434d0052 	movtmi	r0, #53330	; 0xd052
 5d4:	4958415f 	ldmdbmi	r8, {r0, r1, r2, r3, r4, r6, r8, lr}^
 5d8:	434e454d 	movtmi	r4, #58701	; 0xe54d
 5dc:	0052524c 	subseq	r5, r2, ip, asr #4
 5e0:	415f434d 	cmpmi	pc, sp, asr #6
 5e4:	45344248 	ldrmi	r4, [r4, #-584]!	; 0xfffffdb8
 5e8:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 5ec:	48410052 	stmdami	r1, {r1, r4, r6}^
 5f0:	53523242 	cmppl	r2, #536870916	; 0x20000004
 5f4:	54455354 	strbpl	r5, [r5], #-852	; 0xfffffcac
 5f8:	43520052 	cmpmi	r2, #82	; 0x52
 5fc:	4553344b 	ldrbmi	r3, [r3, #-1099]	; 0xfffffbb5
 600:	4c00524c 	sfmmi	f5, 4, [r0], {76}	; 0x4c
 604:	4d495450 	cfstrdmi	mvd5, [r9, #-320]	; 0xfffffec0
 608:	4b433534 	blmi	10cdae0 <_start-0xbef3a520>
 60c:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 610:	5f504d00 	svcpl	0x00504d00
 614:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 618:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 61c:	72005254 	andvc	r5, r0, #84, 4	; 0x40000005
 620:	30317365 	eorscc	r7, r1, r5, ror #6
 624:	5f434d00 	svcpl	0x00434d00
 628:	31425041 	cmpcc	r2, r1, asr #32
 62c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 630:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 634:	4c4c5000 	marmi	acc0, r5, ip
 638:	41524632 	cmpmi	r2, r2, lsr r6
 63c:	55005243 	strpl	r5, [r0, #-579]	; 0xfffffdbd
 640:	32545241 	subscc	r5, r4, #268435460	; 0x10000004
 644:	534b4334 	movtpl	r4, #45876	; 0xb334
 648:	00524c45 	subseq	r4, r2, r5, asr #24
 64c:	314f434d 	cmpcc	pc, sp, asr #6
 650:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 654:	5f434d00 	svcpl	0x00434d00
 658:	32425041 	subcc	r5, r2, #65	; 0x41
 65c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 660:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 664:	63637200 	cmnvs	r3, #0, 4
 668:	4d00745f 	cfstrsmi	mvf7, [r0, #-380]	; 0xfffffe84
 66c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 670:	504c3642 	subpl	r3, ip, r2, asr #12
 674:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 678:	72005254 	andvc	r5, r0, #84, 4	; 0x40000005
 67c:	38317365 	ldmdacc	r1!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 680:	4c4c5000 	marmi	acc0, r5, ip
 684:	47534331 	smmlarmi	r3, r1, r3, r4
 688:	41530052 	cmpmi	r3, r2, asr r0
 68c:	4b433149 	blmi	10ccbb8 <_start-0xbef3b448>
 690:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 694:	50535100 	subspl	r5, r3, r0, lsl #2
 698:	534b4349 	movtpl	r4, #45897	; 0xb349
 69c:	00524c45 	subseq	r4, r2, r5, asr #24
 6a0:	4d5f504d 	ldclmi	0, cr5, [pc, #-308]	; 574 <_start-0xc0007a8c>
 6a4:	4248414c 	submi	r4, r8, #76, 2
 6a8:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 6ac:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 6b0:	5f434d00 	svcpl	0x00434d00
 6b4:	32425041 	subcc	r5, r2, #65	; 0x41
 6b8:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 6bc:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 6c0:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 6c4:	4e453642 	cdpmi	6, 4, cr3, cr5, cr2, {2}
 6c8:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 6cc:	5f504d00 	svcpl	0x00504d00
 6d0:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 6d4:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 6d8:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 6dc:	49415300 	stmdbmi	r1, {r8, r9, ip, lr}^
 6e0:	534b4333 	movtpl	r4, #45875	; 0xb333
 6e4:	00524c45 	subseq	r4, r2, r5, asr #24
 6e8:	4b43504d 	blmi	10d4824 <_start-0xbef337dc>
 6ec:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 6f0:	5f434d00 	svcpl	0x00434d00
 6f4:	48414c4d 	stmdami	r1, {r0, r2, r3, r6, sl, fp, lr}^
 6f8:	45504c42 	ldrbmi	r4, [r0, #-3138]	; 0xfffff3be
 6fc:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 700:	4d530052 	ldclmi	0, cr0, [r3, #-328]	; 0xfffffeb8
 704:	4d005243 	sfmmi	f5, 4, [r0, #-268]	; 0xfffffef4
 708:	50415f43 	subpl	r5, r1, r3, asr #30
 70c:	4e453442 	cdpmi	4, 4, cr3, cr5, cr2, {2}
 710:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 714:	5f504d00 	svcpl	0x00504d00
 718:	36424841 	strbcc	r4, [r2], -r1, asr #16
 71c:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 720:	72005254 	andvc	r5, r0, #84, 4	; 0x40000005
 724:	32327365 	eorscc	r7, r2, #-1811939327	; 0x94000001
 728:	49534800 	ldmdbmi	r3, {fp, lr}^
 72c:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 730:	474e5200 	strbmi	r5, [lr, -r0, lsl #4]
 734:	534b4332 	movtpl	r4, #45874	; 0xb332
 738:	00524c45 	subseq	r4, r2, r5, asr #24
 73c:	4d5f504d 	ldclmi	0, cr5, [pc, #-308]	; 610 <_start-0xc00079f0>
 740:	4248414c 	submi	r4, r8, #76, 2
 744:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 748:	52005252 	andpl	r5, r0, #536870917	; 0x20000005
 74c:	00317365 	eorseq	r7, r1, r5, ror #6
 750:	415f434d 	cmpmi	pc, sp, asr #6
 754:	4c354248 	lfmmi	f4, 4, [r5], #-288	; 0xfffffee0
 758:	434e4550 	movtmi	r4, #58704	; 0xe550
 75c:	0052524c 	subseq	r5, r2, ip, asr #4
 760:	4c525750 	mrrcmi	7, 5, r5, r2, cr0
 764:	594c4450 	stmdbpl	ip, {r4, r6, sl, lr}^
 768:	54005243 	strpl	r5, [r0], #-579	; 0xfffffdbd
 76c:	4c455349 	mcrrmi	3, 4, r5, r5, cr9
 770:	42484100 	submi	r4, r8, #0, 2
 774:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
 778:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 77c:	73657200 	cmnvc	r5, #0, 4
 780:	4d003632 	stcmi	6, cr3, [r0, #-200]	; 0xffffff38
 784:	53525f43 	cmppl	r2, #268	; 0x10c
 788:	4c435354 	mcrrmi	3, 5, r5, r3, cr4
 78c:	53005252 	movwpl	r5, #594	; 0x252
 790:	00524449 	subseq	r4, r2, r9, asr #8
 794:	33433249 	movtcc	r3, #12873	; 0x3249
 798:	534b4335 	movtpl	r4, #45877	; 0xb335
 79c:	00524c45 	subseq	r4, r2, r5, asr #24
 7a0:	475f504d 	ldrbmi	r5, [pc, -sp, asr #32]
 7a4:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 7a8:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 7ac:	42504100 	subsmi	r4, r0, #0, 2
 7b0:	56494433 			; <UNDEFINED> instruction: 0x56494433
 7b4:	504d0052 	subpl	r0, sp, r2, asr r0
 7b8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 7bc:	45504c34 	ldrbmi	r4, [r0, #-3124]	; 0xfffff3cc
 7c0:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 7c4:	32490052 	subcc	r0, r9, #82	; 0x52
 7c8:	43323143 	teqmi	r2, #-1073741808	; 0xc0000010
 7cc:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 7d0:	434d0052 	movtmi	r0, #53330	; 0xd052
 7d4:	414c4d5f 	cmpmi	ip, pc, asr sp
 7d8:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
 7dc:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 7e0:	5f434d00 	svcpl	0x00434d00
 7e4:	33424841 	movtcc	r4, #10305	; 0x2841
 7e8:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 7ec:	50005254 	andpl	r5, r0, r4, asr r2
 7f0:	43314c4c 	teqmi	r1, #76, 24	; 0x4c00
 7f4:	31524746 	cmpcc	r2, r6, asr #14
 7f8:	4c4c5000 	marmi	acc0, r5, ip
 7fc:	47464331 	smlaldxmi	r4, r6, r1, r3
 800:	4d003252 	sfmmi	f3, 4, [r0, #-328]	; 0xfffffeb8
 804:	50415f50 	subpl	r5, r1, r0, asr pc
 808:	4e453142 	dvfmism	f3, f5, f2
 80c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 810:	415a5400 	cmpmi	sl, r0, lsl #8
 814:	52364248 	eorspl	r4, r6, #72, 4	; 0x80000004
 818:	4c435453 	cfstrdmi	mvd5, [r3], {83}	; 0x53
 81c:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 820:	58415f43 	stmdapl	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 824:	4e454d49 	cdpmi	13, 4, cr4, cr5, cr9, {2}
 828:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 82c:	42484100 	submi	r4, r8, #0, 2
 830:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
 834:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 838:	5f504d00 	svcpl	0x00504d00
 83c:	48415a54 	stmdami	r1, {r2, r4, r6, r9, fp, ip, lr}^
 840:	504c3642 	subpl	r3, ip, r2, asr #12
 844:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 848:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 84c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 850:	4e453542 	cdpmi	5, 4, cr3, cr5, cr2, {2}
 854:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 858:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 85c:	315f3631 	cmpcc	pc, r1, lsr r6	; <UNPREDICTABLE>
 860:	00745f37 	rsbseq	r5, r4, r7, lsr pc
 864:	415f504d 	cmpmi	pc, sp, asr #32
 868:	45324250 	ldrmi	r4, [r2, #-592]!	; 0xfffffdb0
 86c:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 870:	50530052 	subspl	r0, r3, r2, asr r0
 874:	32533249 	subscc	r3, r3, #-1879048188	; 0x90000004
 878:	534b4333 	movtpl	r4, #45875	; 0xb333
 87c:	00524c45 	subseq	r4, r2, r5, asr #24
 880:	4e45434f 	cdpmi	3, 4, cr4, cr5, cr15, {2}
 884:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 888:	47424400 	strbmi	r4, [r2, -r0, lsl #8]
 88c:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 890:	5f434d00 	svcpl	0x00434d00
 894:	33425041 	movtcc	r5, #8257	; 0x2041
 898:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 89c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 8a0:	6c616800 	stclvs	8, cr6, [r1], #-0
 8a4:	746f6d5f 	strbtvc	r6, [pc], #-3423	; 8ac <_start-0xc0007754>
 8a8:	695f726f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 8ac:	0074696e 	rsbseq	r6, r4, lr, ror #18
 8b0:	324f434d 	subcc	r4, pc, #872415233	; 0x34000001
 8b4:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 8b8:	5f504d00 	svcpl	0x00504d00
 8bc:	47445749 	strbmi	r5, [r4, -r9, asr #14]
 8c0:	45535a46 	ldrbmi	r5, [r3, #-2630]	; 0xfffff5ba
 8c4:	52005254 	andpl	r5, r0, #84, 4	; 0x40000005
 8c8:	49444354 	stmdbmi	r4, {r2, r4, r6, r8, r9, lr}^
 8cc:	53005256 	movwpl	r5, #598	; 0x256
 8d0:	4e454754 	mcrmi	7, 2, r4, cr5, cr4, {2}
 8d4:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 8d8:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 8dc:	50415f43 	subpl	r5, r1, r3, asr #30
 8e0:	504c3442 	subpl	r3, ip, r2, asr #8
 8e4:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 8e8:	53005254 	movwpl	r5, #596	; 0x254
 8ec:	35344950 	ldrcc	r4, [r4, #-2384]!	; 0xfffff6b0
 8f0:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 8f4:	5500524c 	strpl	r5, [r0, #-588]	; 0xfffffdb4
 8f8:	33545241 	cmpcc	r4, #268435460	; 0x10000004
 8fc:	534b4335 	movtpl	r4, #45877	; 0xb335
 900:	00524c45 	subseq	r4, r2, r5, asr #24
 904:	415f504d 	cmpmi	pc, sp, asr #32
 908:	45344250 	ldrmi	r4, [r4, #-592]!	; 0xfffffdb0
 90c:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 910:	434d0052 	movtmi	r0, #53330	; 0xd052
 914:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 918:	434e4533 	movtmi	r4, #58675	; 0xe533
 91c:	0052524c 	subseq	r5, r2, ip, asr #4
 920:	474d4954 	smlsldmi	r4, sp, r4, r9
 924:	45525032 	ldrbmi	r5, [r2, #-50]	; 0xffffffce
 928:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 92c:	5243334c 	subpl	r3, r3, #76, 6	; 0x30000001
 930:	5f504d00 	svcpl	0x00504d00
 934:	32425041 	subcc	r5, r2, #65	; 0x41
 938:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 93c:	50005254 	andpl	r5, r0, r4, asr r2
 940:	46344c4c 	ldrtmi	r4, [r4], -ip, asr #24
 944:	52434152 	subpl	r4, r3, #-2147483628	; 0x80000014
 948:	5f504d00 	svcpl	0x00504d00
 94c:	32425041 	subcc	r5, r2, #65	; 0x41
 950:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 954:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 958:	42504100 	subsmi	r4, r0, #0, 2
 95c:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
 960:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 964:	5f434d00 	svcpl	0x00434d00
 968:	33424841 	movtcc	r4, #10305	; 0x2841
 96c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 970:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 974:	5f434d00 	svcpl	0x00434d00
 978:	36424841 	strbcc	r4, [r2], -r1, asr #16
 97c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 980:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 984:	4c445200 	sfmmi	f5, 2, [r4], {-0}
 988:	52434953 	subpl	r4, r3, #1359872	; 0x14c000
 98c:	4c4c5000 	marmi	acc0, r5, ip
 990:	00524334 	subseq	r4, r2, r4, lsr r3
 994:	314b4350 	cmpcc	fp, r0, asr r3
 998:	4c455332 	mcrrmi	3, 3, r5, r5, cr2
 99c:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 9a0:	4643324c 	strbmi	r3, [r3], -ip, asr #4
 9a4:	00325247 	eorseq	r5, r2, r7, asr #4
 9a8:	344c4c50 	strbcc	r4, [ip], #-3152	; 0xfffff3b0
 9ac:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 9b0:	504d0031 	subpl	r0, sp, r1, lsr r0
 9b4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 9b8:	45504c35 	ldrbmi	r4, [r0, #-3125]	; 0xfffff3cb
 9bc:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 9c0:	504d0052 	subpl	r0, sp, r2, asr r0
 9c4:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 9c8:	534e4533 	movtpl	r4, #58675	; 0xe533
 9cc:	00525445 	subseq	r5, r2, r5, asr #8
 9d0:	334c4c50 	movtcc	r4, #52304	; 0xcc50
 9d4:	52475343 	subpl	r5, r7, #201326593	; 0xc000001
 9d8:	5f504d00 	svcpl	0x00504d00
 9dc:	51455253 	cmppl	r5, r3, asr r2
 9e0:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 9e4:	4d445300 	stclmi	3, cr5, [r4, #-0]
 9e8:	3231434d 	eorscc	r4, r1, #872415233	; 0x34000001
 9ec:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 9f0:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 9f4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 9f8:	504c3242 	subpl	r3, ip, r2, asr #4
 9fc:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 a00:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 a04:	58415f50 	stmdapl	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 a08:	504c4d49 	subpl	r4, ip, r9, asr #26
 a0c:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 a10:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 a14:	50415f43 	subpl	r5, r1, r3, asr #30
 a18:	504c3342 	subpl	r3, ip, r2, asr #6
 a1c:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 a20:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 a24:	50415f43 	subpl	r5, r1, r3, asr #30
 a28:	4e453142 	dvfmism	f3, f5, f2
 a2c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 a30:	43504d00 	cmpmi	r0, #0, 26
 a34:	5649444b 	strbpl	r4, [r9], -fp, asr #8
 a38:	44440052 	strbmi	r0, [r4], #-82	; 0xffffffae
 a3c:	46544952 			; <UNDEFINED> instruction: 0x46544952
 a40:	43005243 	movwmi	r5, #579	; 0x243
 a44:	43524550 	cmpmi	r2, #80, 10	; 0x14000000
 a48:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 a4c:	45430052 	strbmi	r0, [r3, #-82]	; 0xffffffae
 a50:	534b4343 	movtpl	r4, #45891	; 0xb343
 a54:	00524c45 	subseq	r4, r2, r5, asr #24
 a58:	435f504d 	cmpmi	pc, #77	; 0x4d
 a5c:	00524549 	subseq	r4, r2, r9, asr #10
 a60:	43434441 	movtmi	r4, #13377	; 0x3441
 a64:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 a68:	434d0052 	movtmi	r0, #53330	; 0xd052
 a6c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 a70:	534e4533 	movtpl	r4, #58675	; 0xe533
 a74:	00525445 	subseq	r5, r2, r5, asr #8
 a78:	415f434d 	cmpmi	pc, sp, asr #6
 a7c:	4c4d4958 	mcrrmi	9, 5, r4, sp, cr8	; <UNPREDICTABLE>
 a80:	434e4550 	movtmi	r4, #58704	; 0xe550
 a84:	0052524c 	subseq	r5, r2, ip, asr #4
 a88:	36424841 	strbcc	r4, [r2], -r1, asr #16
 a8c:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 a90:	00525445 	subseq	r5, r2, r5, asr #8
 a94:	415f504d 	cmpmi	pc, sp, asr #32
 a98:	54535250 	ldrbpl	r5, [r3], #-592	; 0xfffffdb0
 a9c:	41005243 	tstmi	r0, r3, asr #4
 aa0:	52354250 	eorspl	r4, r5, #80, 4
 aa4:	45535453 	ldrbmi	r5, [r3, #-1107]	; 0xfffffbad
 aa8:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 aac:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 ab0:	504c3242 	subpl	r3, ip, r2, asr #4
 ab4:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 ab8:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 abc:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 ac0:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
 ac4:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 ac8:	4b435200 	blmi	10d52d0 <_start-0xbef32d30>
 acc:	4c455333 	mcrrmi	3, 3, r5, r5, cr3
 ad0:	45560052 	ldrbmi	r0, [r6, #-82]	; 0xffffffae
 ad4:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 ad8:	50415f43 	subpl	r5, r1, r3, asr #30
 adc:	4e453542 	cdpmi	5, 4, cr3, cr5, cr2, {2}
 ae0:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 ae4:	5f434d00 	svcpl	0x00434d00
 ae8:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 aec:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 af0:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 af4:	50415f43 	subpl	r5, r1, r3, asr #30
 af8:	504c3542 	subpl	r3, ip, r2, asr #10
 afc:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 b00:	73005254 	movwvc	r5, #596	; 0x254
 b04:	702f6372 	eorvc	r6, pc, r2, ror r3	; <UNPREDICTABLE>
 b08:	632e6d77 			; <UNDEFINED> instruction: 0x632e6d77
 b0c:	55434d00 	strbpl	r4, [r3, #-3328]	; 0xfffff300
 b10:	52564944 	subspl	r4, r6, #68, 18	; 0x110000
 b14:	5f504d00 	svcpl	0x00504d00
 b18:	31425041 	cmpcc	r2, r1, asr #32
 b1c:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 b20:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 b24:	43475f50 	movtmi	r5, #32592	; 0x7f50
 b28:	50530052 	subspl	r0, r3, r2, asr r0
 b2c:	31533249 	cmpcc	r3, r9, asr #4
 b30:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 b34:	4100524c 	tstmi	r0, ip, asr #4
 b38:	44354250 	ldrtmi	r4, [r5], #-592	; 0xfffffdb0
 b3c:	00525649 	subseq	r5, r2, r9, asr #12
 b40:	334c4c50 	movtcc	r4, #52304	; 0xcc50
 b44:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 b48:	504d0032 	subpl	r0, sp, r2, lsr r0
 b4c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 b50:	45504c33 	ldrbmi	r4, [r0, #-3123]	; 0xfffff3cd
 b54:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 b58:	41550052 	cmpmi	r5, r2, asr r0
 b5c:	43365452 	teqmi	r6, #1375731712	; 0x52000000
 b60:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 b64:	434d0052 	movtmi	r0, #53330	; 0xd052
 b68:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 b6c:	434e4535 	movtmi	r4, #58677	; 0xe535
 b70:	0052524c 	subseq	r5, r2, ip, asr #4
 b74:	415f504d 	cmpmi	pc, sp, asr #32
 b78:	4c334250 	lfmmi	f4, 4, [r3], #-320	; 0xfffffec0
 b7c:	434e4550 	movtmi	r4, #58704	; 0xe550
 b80:	0052524c 	subseq	r5, r2, ip, asr #4
 b84:	545f504d 	ldrbpl	r5, [pc], #-77	; b8c <_start-0xc0007474>
 b88:	4248415a 	submi	r4, r8, #-2147483626	; 0x80000016
 b8c:	534e4536 	movtpl	r4, #58678	; 0xe536
 b90:	00524c45 	subseq	r4, r2, r5, asr #24
 b94:	33425041 	movtcc	r5, #8257	; 0x2041
 b98:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 b9c:	00525445 	subseq	r5, r2, r5, asr #8
 ba0:	324c4c50 	subcc	r4, ip, #80, 24	; 0x5000
 ba4:	4d005243 	sfmmi	f5, 4, [r0, #-268]	; 0xfffffef4
 ba8:	4b435353 	blmi	10d58fc <_start-0xbef32704>
 bac:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 bb0:	44505300 	ldrbmi	r5, [r0], #-768	; 0xfffffd00
 bb4:	4b434649 	blmi	10d24e0 <_start-0xbef35b20>
 bb8:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 bbc:	54504c00 	ldrbpl	r4, [r0], #-3072	; 0xfffff400
 bc0:	33324d49 	teqcc	r2, #4672	; 0x1240
 bc4:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 bc8:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 bcc:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 bd0:	504c3642 	subpl	r3, ip, r2, asr #12
 bd4:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 bd8:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 bdc:	50415f43 	subpl	r5, r1, r3, asr #30
 be0:	504c3242 	subpl	r3, ip, r2, asr #4
 be4:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 be8:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 bec:	50415f50 	subpl	r5, r1, r0, asr pc
 bf0:	504c3342 	subpl	r3, ip, r2, asr #6
 bf4:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 bf8:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 bfc:	57495f50 	smlsldpl	r5, r9, r0, pc	; <UNPREDICTABLE>
 c00:	5a464744 	bpl	1192918 <_start-0xbee756e8>
 c04:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 c08:	5f504d00 	svcpl	0x00504d00
 c0c:	53525041 	cmppl	r2, #65	; 0x41
 c10:	00525354 	subseq	r5, r2, r4, asr r3
 c14:	415f434d 	cmpmi	pc, sp, asr #6
 c18:	4c344250 	lfmmi	f4, 4, [r4], #-320	; 0xfffffec0
 c1c:	434e4550 	movtmi	r4, #58704	; 0xe550
 c20:	0052524c 	subseq	r5, r2, ip, asr #4
 c24:	34424841 	strbcc	r4, [r2], #-2113	; 0xfffff7bf
 c28:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 c2c:	00525445 	subseq	r5, r2, r5, asr #8
 c30:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 c34:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 c38:	0052524c 	subseq	r5, r2, ip, asr #4
 c3c:	435f504d 	cmpmi	pc, #77	; 0x4d
 c40:	00524649 	subseq	r4, r2, r9, asr #12
 c44:	43434d46 	movtmi	r4, #15686	; 0x3d46
 c48:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 c4c:	4d440052 	stclmi	0, cr0, [r4, #-328]	; 0xfffffeb8
 c50:	4d005241 	sfmmi	f5, 4, [r0, #-260]	; 0xfffffefc
 c54:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 c58:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
 c5c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 c60:	5f504d00 	svcpl	0x00504d00
 c64:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 c68:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 c6c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 c70:	5f504d00 	svcpl	0x00504d00
 c74:	33425041 	movtcc	r5, #8257	; 0x2041
 c78:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 c7c:	68005254 	stmdavs	r0, {r2, r4, r6, r9, ip, lr}
 c80:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 c84:	5f706565 	svcpl	0x00706565
 c88:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 c8c:	42504100 	subsmi	r4, r0, #0, 2
 c90:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
 c94:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 c98:	42504100 	subsmi	r4, r0, #0, 2
 c9c:	56494432 			; <UNDEFINED> instruction: 0x56494432
 ca0:	504d0052 	subpl	r0, sp, r2, asr r0
 ca4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 ca8:	534e4535 	movtpl	r4, #58677	; 0xe535
 cac:	00525445 	subseq	r5, r2, r5, asr #8
 cb0:	344c4c50 	strbcc	r4, [ip], #-3152	; 0xfffff3b0
 cb4:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 cb8:	504d0032 	subpl	r0, sp, r2, lsr r0
 cbc:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 cc0:	45504c35 	ldrbmi	r4, [r0, #-3125]	; 0xfffff3cb
 cc4:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 cc8:	504d0052 	subpl	r0, sp, r2, asr r0
 ccc:	5453525f 	ldrbpl	r5, [r3], #-607	; 0xfffffda1
 cd0:	4d005353 	stcmi	3, cr5, [r0, #-332]	; 0xfffffeb4
 cd4:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 cd8:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
 cdc:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 ce0:	42504100 	subsmi	r4, r0, #0, 2
 ce4:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
 ce8:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 cec:	49534300 	ldmdbmi	r3, {r8, r9, lr}^
 cf0:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 cf4:	5f504d00 	svcpl	0x00504d00
 cf8:	51455253 	cmppl	r5, r3, asr r2
 cfc:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 d00:	5f434d00 	svcpl	0x00434d00
 d04:	52454943 	subpl	r4, r5, #1097728	; 0x10c000
 d08:	5f434d00 	svcpl	0x00434d00
 d0c:	31425041 	cmpcc	r2, r1, asr #32
 d10:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 d14:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 d18:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 d1c:	4e453542 	cdpmi	5, 4, cr3, cr5, cr2, {2}
 d20:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 d24:	5f504d00 	svcpl	0x00504d00
 d28:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 d2c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 d30:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 d34:	5f504d00 	svcpl	0x00504d00
 d38:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 d3c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 d40:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 d44:	49415300 	stmdbmi	r1, {r8, r9, ip, lr}^
 d48:	534b4332 	movtpl	r4, #45874	; 0xb332
 d4c:	00524c45 	subseq	r4, r2, r5, asr #24
 d50:	31524343 	cmpcc	r2, r3, asr #6
 d54:	52434300 	subpl	r4, r3, #0, 6
 d58:	43430032 	movtmi	r0, #12338	; 0x3032
 d5c:	43003352 	movwmi	r3, #850	; 0x352
 d60:	00345243 	eorseq	r5, r4, r3, asr #4
 d64:	35524343 	ldrbcc	r4, [r2, #-835]	; 0xfffffcbd
 d68:	52434300 	subpl	r4, r3, #0, 6
 d6c:	504d0036 	subpl	r0, sp, r6, lsr r0
 d70:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 d74:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
 d78:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 d7c:	44420052 	strbmi	r0, [r2], #-82	; 0xffffffae
 d80:	41005243 	tstmi	r0, r3, asr #4
 d84:	52354250 	eorspl	r4, r5, #80, 4
 d88:	4c435453 	cfstrdmi	mvd5, [r3], {83}	; 0x53
 d8c:	52005252 	andpl	r5, r0, #536870917	; 0x20000005
 d90:	4331474e 	teqmi	r1, #20447232	; 0x1380000
 d94:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 d98:	41530052 	cmpmi	r3, r2, asr r0
 d9c:	4b433449 	blmi	10cdec8 <_start-0xbef3a138>
 da0:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 da4:	43324900 	teqmi	r2, #0, 18
 da8:	4b433634 	blmi	10ce680 <_start-0xbef39980>
 dac:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 db0:	42484100 	submi	r4, r8, #0, 2
 db4:	54535235 	ldrbpl	r5, [r3], #-565	; 0xfffffdcb
 db8:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 dbc:	5f434d00 	svcpl	0x00434d00
 dc0:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 dc4:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 dc8:	55005252 	strpl	r5, [r0, #-594]	; 0xfffffdae
 dcc:	4b434253 	blmi	10d1720 <_start-0xbef368e0>
 dd0:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 dd4:	5f434d00 	svcpl	0x00434d00
 dd8:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 ddc:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 de0:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 de4:	4c4c5000 	marmi	acc0, r5, ip
 de8:	00524331 	subseq	r4, r2, r1, lsr r3
 dec:	474d4954 	smlsldmi	r4, sp, r4, r9
 df0:	45525031 	ldrbmi	r5, [r2, #-49]	; 0xffffffcf
 df4:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 df8:	5246334c 	subpl	r3, r6, #76, 6	; 0x30000001
 dfc:	00524341 	subseq	r4, r2, r1, asr #6
 e00:	334c4c50 	movtcc	r4, #52304	; 0xcc50
 e04:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 e08:	5a540031 	bpl	1500ed4 <_start-0xbeb0712c>
 e0c:	46005243 	strmi	r5, [r0], -r3, asr #4
 e10:	4e414344 	cdpmi	3, 4, cr4, cr1, cr4, {2}
 e14:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 e18:	4f00524c 	svcmi	0x0000524c
 e1c:	59445243 	stmdbpl	r4, {r0, r1, r6, r9, ip, lr}^
 e20:	504d0052 	subpl	r0, sp, r2, asr r0
 e24:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 e28:	45504c31 	ldrbmi	r4, [r0, #-3121]	; 0xfffff3cf
 e2c:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 e30:	53410052 	movtpl	r0, #4178	; 0x1052
 e34:	534b4353 	movtpl	r4, #45907	; 0xb353
 e38:	00524c45 	subseq	r4, r2, r5, asr #24
 e3c:	415f504d 	cmpmi	pc, sp, asr #32
 e40:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
 e44:	534e4550 	movtpl	r4, #58704	; 0xe550
 e48:	00525445 	subseq	r5, r2, r5, asr #8
 e4c:	415f434d 	cmpmi	pc, sp, asr #6
 e50:	4c344248 	lfmmi	f4, 4, [r4], #-288	; 0xfffffee0
 e54:	534e4550 	movtpl	r4, #58704	; 0xe550
 e58:	00525445 	subseq	r5, r2, r5, asr #8
 e5c:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 e60:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 e64:	00525445 	subseq	r5, r2, r5, asr #8
 e68:	415f434d 	cmpmi	pc, sp, asr #6
 e6c:	45344248 	ldrmi	r4, [r4, #-584]!	; 0xfffffdb8
 e70:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 e74:	434d0052 	movtmi	r0, #53330	; 0xd052
 e78:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 e7c:	534e4536 	movtpl	r4, #58678	; 0xe536
 e80:	00525445 	subseq	r5, r2, r5, asr #8
 e84:	324c4c50 	subcc	r4, ip, #80, 24	; 0x5000
 e88:	52475343 	subpl	r5, r7, #201326593	; 0xc000001
 e8c:	5f504d00 	svcpl	0x00504d00
 e90:	36424841 	strbcc	r4, [r2], -r1, asr #16
 e94:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 e98:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 e9c:	5f434d00 	svcpl	0x00434d00
 ea0:	52464943 	subpl	r4, r6, #1097728	; 0x10c000
 ea4:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 ea8:	00745f31 	rsbseq	r5, r4, r1, lsr pc
 eac:	31534552 	cmpcc	r3, r2, asr r5
 eb0:	53455200 	movtpl	r5, #20992	; 0x5200
 eb4:	45520032 	ldrbmi	r0, [r2, #-50]	; 0xffffffce
 eb8:	52003353 	andpl	r3, r0, #1275068417	; 0x4c000001
 ebc:	00345345 	eorseq	r5, r4, r5, asr #6
 ec0:	35534552 	ldrbcc	r4, [r3, #-1362]	; 0xfffffaae
 ec4:	37697300 	strbcc	r7, [r9, -r0, lsl #6]!
 ec8:	5f363030 	svcpl	0x00363030
 ecc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 ed0:	6f687300 	svcvs	0x00687300
 ed4:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 ed8:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 edc:	2064656e 	rsbcs	r6, r4, lr, ror #10
 ee0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 ee4:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 ee8:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 eec:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
 ef0:	36303037 			; <UNDEFINED> instruction: 0x36303037
 ef4:	6165725f 	cmnvs	r5, pc, asr r2
 ef8:	75685f64 	strbvc	r5, [r8, #-3940]!	; 0xfffff09c
 efc:	61645f6d 	cmnvs	r4, sp, ror #30
 f00:	73006174 	movwvc	r6, #372	; 0x174
 f04:	6576616c 	ldrbvs	r6, [r6, #-364]!	; 0xfffffe94
 f08:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
 f0c:	69730072 	ldmdbvs	r3!, {r1, r4, r5, r6}^
 f10:	36303037 			; <UNDEFINED> instruction: 0x36303037
 f14:	6165725f 	cmnvs	r5, pc, asr r2
 f18:	65745f64 	ldrbvs	r5, [r4, #-3940]!	; 0xfffff09c
 f1c:	645f706d 	ldrbvs	r7, [pc], #-109	; f24 <_start-0xc00070dc>
 f20:	00617461 	rsbeq	r7, r1, r1, ror #8
 f24:	2f637273 	svccs	0x00637273
 f28:	30376973 	eorscc	r6, r7, r3, ror r9
 f2c:	632e3630 			; <UNDEFINED> instruction: 0x632e3630
 f30:	67657200 	strbvs	r7, [r5, -r0, lsl #4]!
 f34:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
 f38:	61640072 	smcvs	16386	; 0x4002
 f3c:	00685f74 	rsbeq	r5, r8, r4, ror pc
 f40:	5f746164 	svcpl	0x00746164
 f44:	3269006c 	rsbcc	r0, r9, #108	; 0x6c
 f48:	63615f63 	cmnvs	r1, #396	; 0x18c
 f4c:	3269006b 	rsbcc	r0, r9, #107	; 0x6b
 f50:	616e5f63 	cmnvs	lr, r3, ror #30
 f54:	69006b63 	stmdbvs	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 f58:	695f6332 	ldmdbvs	pc, {r1, r4, r5, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 f5c:	0074696e 	rsbseq	r6, r4, lr, ror #18
 f60:	5f633269 	svcpl	0x00633269
 f64:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 f68:	32690074 	rsbcc	r0, r9, #116	; 0x74
 f6c:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 f70:	5f657469 	svcpl	0x00657469
 f74:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 f78:	63326900 	teqvs	r2, #0, 18
 f7c:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 f80:	63615f74 	cmnvs	r1, #116, 30	; 0x1d0
 f84:	7273006b 	rsbsvc	r0, r3, #107	; 0x6b
 f88:	69692f63 	stmdbvs	r9!, {r0, r1, r5, r6, r8, r9, sl, fp, sp}^
 f8c:	00632e63 	rsbeq	r2, r3, r3, ror #28
 f90:	5f633269 	svcpl	0x00633269
 f94:	706f7473 	rsbvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
 f98:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 f9c:	755f7961 	ldrbvc	r7, [pc, #-2401]	; 643 <_start-0xc00079bd>
 fa0:	32690073 	rsbcc	r0, r9, #115	; 0x73
 fa4:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 fa8:	625f6461 	subsvs	r6, pc, #1627389952	; 0x61000000
 fac:	00657479 	rsbeq	r7, r5, r9, ror r4
 fb0:	6e69616d 	powvsez	f6, f1, #5.0
 fb4:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 fb8:	006e6961 	rsbeq	r6, lr, r1, ror #18
 fbc:	616c6564 	cmnvs	ip, r4, ror #10
 fc0:	736d5f79 	cmnvc	sp, #484	; 0x1e4
	...

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	c000835c 	andgt	r8, r0, ip, asr r3
  1c:	00000050 	andeq	r0, r0, r0, asr r0
  20:	8b040e42 	blhi	103930 <_start-0xbff046d0>
  24:	0b0d4201 	bleq	350830 <_start-0xbfcb77d0>
  28:	420d0d60 	andmi	r0, sp, #96, 26	; 0x1800
  2c:	00000ecb 	andeq	r0, r0, fp, asr #29
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	c00083ac 	andgt	r8, r0, ip, lsr #7
  3c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  40:	8b080e42 	blhi	203950 <_start-0xbfe046b0>
  44:	42018e02 	andmi	r8, r1, #2, 28
  48:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
  4c:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	c0008564 	andgt	r8, r0, r4, ror #10
  5c:	0000006c 	andeq	r0, r0, ip, rrx
  60:	8b080e42 	blhi	203970 <_start-0xbfe04690>
  64:	42018e02 	andmi	r8, r1, #2, 28
  68:	70040b0c 	andvc	r0, r4, ip, lsl #22
  6c:	00080d0c 	andeq	r0, r8, ip, lsl #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	c00085d0 	ldrdgt	r8, [r0], -r0
  7c:	00000094 	muleq	r0, r4, r0
  80:	8b040e42 	blhi	103990 <_start-0xbff04670>
  84:	0b0d4201 	bleq	350890 <_start-0xbfcb7770>
  88:	0d0d4202 	sfmeq	f4, 4, [sp, #-8]
  8c:	000ecb42 	andeq	ip, lr, r2, asr #22
  90:	00000020 	andeq	r0, r0, r0, lsr #32
  94:	00000000 	andeq	r0, r0, r0
  98:	c0008664 	andgt	r8, r0, r4, ror #12
  9c:	000003e4 	andeq	r0, r0, r4, ror #7
  a0:	8b080e42 	blhi	2039b0 <_start-0xbfe04650>
  a4:	42018e02 	andmi	r8, r1, #2, 28
  a8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  ac:	0d0c01ec 	stfeqs	f0, [ip, #-944]	; 0xfffffc50
  b0:	00000008 	andeq	r0, r0, r8
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	c0008a48 	andgt	r8, r0, r8, asr #20
  c0:	0000006c 	andeq	r0, r0, ip, rrx
  c4:	8b040e42 	blhi	1039d4 <_start-0xbff0462c>
  c8:	0b0d4201 	bleq	3508d4 <_start-0xbfcb772c>
  cc:	420d0d6e 	andmi	r0, sp, #7040	; 0x1b80
  d0:	00000ecb 	andeq	r0, r0, fp, asr #29
  d4:	00000020 	andeq	r0, r0, r0, lsr #32
  d8:	00000000 	andeq	r0, r0, r0
  dc:	c0008ab4 			; <UNDEFINED> instruction: 0xc0008ab4
  e0:	000008c8 	andeq	r0, r0, r8, asr #17
  e4:	8b080e42 	blhi	2039f4 <_start-0xbfe0460c>
  e8:	42018e02 	andmi	r8, r1, #2, 28
  ec:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  f0:	0d0c045e 	cfstrseq	mvf0, [ip, #-376]	; 0xfffffe88
  f4:	00000008 	andeq	r0, r0, r8
  f8:	00000030 	andeq	r0, r0, r0, lsr r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	c000937c 	andgt	r9, r0, ip, ror r3
 104:	0000004c 	andeq	r0, r0, ip, asr #32
 108:	810c0e42 	tsthi	ip, r2, asr #28
 10c:	83028203 	movwhi	r8, #8707	; 0x2203
 110:	140e4201 	strne	r4, [lr], #-513	; 0xfffffdff
 114:	048e058b 	streq	r0, [lr], #1419	; 0x58b
 118:	100b0c42 	andne	r0, fp, r2, asr #24
 11c:	140d0c5a 	strne	r0, [sp], #-3162	; 0xfffff3a6
 120:	0ecbce42 	cdpeq	14, 12, cr12, cr11, cr2, {2}
 124:	c2c3420c 	sbcgt	r4, r3, #12, 4	; 0xc0000000
 128:	00000ec1 	andeq	r0, r0, r1, asr #29
 12c:	00000034 	andeq	r0, r0, r4, lsr r0
 130:	00000000 	andeq	r0, r0, r0
 134:	c00093c8 	andgt	r9, r0, r8, asr #7
 138:	0000004c 	andeq	r0, r0, ip, asr #32
 13c:	80100e42 	andshi	r0, r0, r2, asr #28
 140:	82038104 	andhi	r8, r3, #4, 2
 144:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 148:	068b180e 	streq	r1, [fp], lr, lsl #16
 14c:	0c42058e 	cfstr64eq	mvdx0, [r2], {142}	; 0x8e
 150:	0c5a140b 	cfldrdeq	mvd1, [sl], {11}
 154:	ce42180d 	cdpgt	8, 4, cr1, cr2, cr13, {0}
 158:	42100ecb 	andsmi	r0, r0, #3248	; 0xcb0
 15c:	c0c1c2c3 	sbcgt	ip, r1, r3, asr #5
 160:	0000000e 	andeq	r0, r0, lr
 164:	0000000c 	andeq	r0, r0, ip
 168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 16c:	7c020001 	stcvc	0, cr0, [r2], {1}
 170:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000164 	andeq	r0, r0, r4, ror #2
 17c:	c0009414 	andgt	r9, r0, r4, lsl r4
 180:	000001e8 	andeq	r0, r0, r8, ror #3
 184:	8b040e42 	blhi	103a94 <_start-0xbff0456c>
 188:	0b0d4201 	bleq	350994 <_start-0xbfcb766c>
 18c:	0d0dec02 	stceq	12, cr14, [sp, #-8]
 190:	000ecb42 	andeq	ip, lr, r2, asr #22
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000164 	andeq	r0, r0, r4, ror #2
 19c:	c00095fc 	strdgt	r9, [r0], -ip
 1a0:	00000060 	andeq	r0, r0, r0, rrx
 1a4:	8b080e42 	blhi	203ab4 <_start-0xbfe0454c>
 1a8:	42018e02 	andmi	r8, r1, #2, 28
 1ac:	6a040b0c 	bvs	102de4 <_start-0xbff0521c>
 1b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000164 	andeq	r0, r0, r4, ror #2
 1bc:	c000965c 	andgt	r9, r0, ip, asr r6
 1c0:	00000048 	andeq	r0, r0, r8, asr #32
 1c4:	8b080e42 	blhi	203ad4 <_start-0xbfe0452c>
 1c8:	42018e02 	andmi	r8, r1, #2, 28
 1cc:	5e040b0c 	vmlapl.f64	d0, d4, d12
 1d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000164 	andeq	r0, r0, r4, ror #2
 1dc:	c00096a4 	andgt	r9, r0, r4, lsr #13
 1e0:	0000004c 	andeq	r0, r0, ip, asr #32
 1e4:	8b040e42 	blhi	103af4 <_start-0xbff0450c>
 1e8:	0b0d4201 	bleq	3509f4 <_start-0xbfcb760c>
 1ec:	420d0d5e 	andmi	r0, sp, #6016	; 0x1780
 1f0:	00000ecb 	andeq	r0, r0, fp, asr #29
 1f4:	0000000c 	andeq	r0, r0, ip
 1f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 200:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
 208:	000001f4 	strdeq	r0, [r0], -r4
 20c:	c00096f0 	strdgt	r9, [r0], -r0
 210:	00000018 	andeq	r0, r0, r8, lsl r0
 214:	8b040e42 	blhi	103b24 <_start-0xbff044dc>
 218:	0b0d4201 	bleq	350a24 <_start-0xbfcb75dc>
 21c:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
 220:	00000ecb 	andeq	r0, r0, fp, asr #29
 224:	0000000c 	andeq	r0, r0, ip
 228:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 22c:	7c020001 	stcvc	0, cr0, [r2], {1}
 230:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 234:	00000020 	andeq	r0, r0, r0, lsr #32
 238:	00000224 	andeq	r0, r0, r4, lsr #4
 23c:	c0009708 	andgt	r9, r0, r8, lsl #14
 240:	00000254 	andeq	r0, r0, r4, asr r2
 244:	8b040e42 	blhi	103b54 <_start-0xbff044ac>
 248:	0b0d4201 	bleq	350a54 <_start-0xbfcb75ac>
 24c:	0d012203 	sfmeq	f2, 4, [r1, #-12]
 250:	0ecb420d 	cdpeq	2, 12, cr4, cr11, cr13, {0}
 254:	00000000 	andeq	r0, r0, r0
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000224 	andeq	r0, r0, r4, lsr #4
 260:	c000995c 	andgt	r9, r0, ip, asr r9
 264:	000001d8 	ldrdeq	r0, [r0], -r8
 268:	8b040e42 	blhi	103b78 <_start-0xbff04488>
 26c:	0b0d4201 	bleq	350a78 <_start-0xbfcb7588>
 270:	0d0de402 	cfstrseq	mvf14, [sp, #-8]
 274:	000ecb42 	andeq	ip, lr, r2, asr #22
 278:	00000020 	andeq	r0, r0, r0, lsr #32
 27c:	00000224 	andeq	r0, r0, r4, lsr #4
 280:	c0009b34 	andgt	r9, r0, r4, lsr fp
 284:	00000230 	andeq	r0, r0, r0, lsr r2
 288:	8b040e42 	blhi	103b98 <_start-0xbff04468>
 28c:	0b0d4201 	bleq	350a98 <_start-0xbfcb7568>
 290:	0d011003 	stceq	0, cr1, [r1, #-12]
 294:	0ecb420d 	cdpeq	2, 12, cr4, cr11, cr13, {0}
 298:	00000000 	andeq	r0, r0, r0
 29c:	0000000c 	andeq	r0, r0, ip
 2a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2ac:	00000018 	andeq	r0, r0, r8, lsl r0
 2b0:	0000029c 	muleq	r0, ip, r2
 2b4:	c0009d64 	andgt	r9, r0, r4, ror #26
 2b8:	00000040 	andeq	r0, r0, r0, asr #32
 2bc:	8b080e42 	blhi	203bcc <_start-0xbfe04434>
 2c0:	42018e02 	andmi	r8, r1, #2, 28
 2c4:	00040b0c 	andeq	r0, r4, ip, lsl #22
 2c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2cc:	0000029c 	muleq	r0, ip, r2
 2d0:	c0009da4 	andgt	r9, r0, r4, lsr #27
 2d4:	000000d8 	ldrdeq	r0, [r0], -r8
 2d8:	8b080e42 	blhi	203be8 <_start-0xbfe04418>
 2dc:	42018e02 	andmi	r8, r1, #2, 28
 2e0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 2e4:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
 2e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2ec:	0000029c 	muleq	r0, ip, r2
 2f0:	c0009e7c 	andgt	r9, r0, ip, ror lr
 2f4:	000000d8 	ldrdeq	r0, [r0], -r8
 2f8:	8b080e42 	blhi	203c08 <_start-0xbfe043f8>
 2fc:	42018e02 	andmi	r8, r1, #2, 28
 300:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 304:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
 308:	0000000c 	andeq	r0, r0, ip
 30c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 310:	7c020001 	stcvc	0, cr0, [r2], {1}
 314:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	00000308 	andeq	r0, r0, r8, lsl #6
 320:	c0009f54 	andgt	r9, r0, r4, asr pc
 324:	0000003c 	andeq	r0, r0, ip, lsr r0
 328:	8b040e42 	blhi	103c38 <_start-0xbff043c8>
 32c:	0b0d4201 	bleq	350b38 <_start-0xbfcb74c8>
 330:	420d0d56 	andmi	r0, sp, #5504	; 0x1580
 334:	00000ecb 	andeq	r0, r0, fp, asr #29
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	00000308 	andeq	r0, r0, r8, lsl #6
 340:	c0009f90 	mulgt	r0, r0, pc	; <UNPREDICTABLE>
 344:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 348:	8b040e42 	blhi	103c58 <_start-0xbff043a8>
 34c:	0b0d4201 	bleq	350b58 <_start-0xbfcb74a8>
 350:	0d0d7002 	stceq	0, cr7, [sp, #-8]
 354:	000ecb42 	andeq	ip, lr, r2, asr #22
 358:	00000018 	andeq	r0, r0, r8, lsl r0
 35c:	00000308 	andeq	r0, r0, r8, lsl #6
 360:	c000a080 	andgt	sl, r0, r0, lsl #1
 364:	000000c0 	andeq	r0, r0, r0, asr #1
 368:	8b080e42 	blhi	203c78 <_start-0xbfe04388>
 36c:	42018e02 	andmi	r8, r1, #2, 28
 370:	00040b0c 	andeq	r0, r4, ip, lsl #22
 374:	00000018 	andeq	r0, r0, r8, lsl r0
 378:	00000308 	andeq	r0, r0, r8, lsl #6
 37c:	c000a140 	andgt	sl, r0, r0, asr #2
 380:	000000c8 	andeq	r0, r0, r8, asr #1
 384:	8b080e42 	blhi	203c94 <_start-0xbfe0436c>
 388:	42018e02 	andmi	r8, r1, #2, 28
 38c:	00040b0c 	andeq	r0, r4, ip, lsl #22
 390:	0000001c 	andeq	r0, r0, ip, lsl r0
 394:	00000308 	andeq	r0, r0, r8, lsl #6
 398:	c000a208 	andgt	sl, r0, r8, lsl #4
 39c:	00000118 	andeq	r0, r0, r8, lsl r1
 3a0:	8b080e42 	blhi	203cb0 <_start-0xbfe04350>
 3a4:	42018e02 	andmi	r8, r1, #2, 28
 3a8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 3ac:	080d0c86 	stmdaeq	sp, {r1, r2, r7, sl, fp}
 3b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b4:	00000308 	andeq	r0, r0, r8, lsl #6
 3b8:	c000a320 	andgt	sl, r0, r0, lsr #6
 3bc:	000000f4 	strdeq	r0, [r0], -r4
 3c0:	8b080e42 	blhi	203cd0 <_start-0xbfe04330>
 3c4:	42018e02 	andmi	r8, r1, #2, 28
 3c8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 3cc:	080d0c74 	stmdaeq	sp, {r2, r4, r5, r6, sl, fp}
 3d0:	00000018 	andeq	r0, r0, r8, lsl r0
 3d4:	00000308 	andeq	r0, r0, r8, lsl #6
 3d8:	c000a414 	andgt	sl, r0, r4, lsl r4
 3dc:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3e0:	8b080e42 	blhi	203cf0 <_start-0xbfe04310>
 3e4:	42018e02 	andmi	r8, r1, #2, 28
 3e8:	00040b0c 	andeq	r0, r4, ip, lsl #22
 3ec:	00000018 	andeq	r0, r0, r8, lsl r0
 3f0:	00000308 	andeq	r0, r0, r8, lsl #6
 3f4:	c000a4e4 	andgt	sl, r0, r4, ror #9
 3f8:	000000c8 	andeq	r0, r0, r8, asr #1
 3fc:	8b080e42 	blhi	203d0c <_start-0xbfe042f4>
 400:	42018e02 	andmi	r8, r1, #2, 28
 404:	00040b0c 	andeq	r0, r4, ip, lsl #22
 408:	00000018 	andeq	r0, r0, r8, lsl r0
 40c:	00000308 	andeq	r0, r0, r8, lsl #6
 410:	c000a5ac 	andgt	sl, r0, ip, lsr #11
 414:	000000c8 	andeq	r0, r0, r8, asr #1
 418:	8b080e42 	blhi	203d28 <_start-0xbfe042d8>
 41c:	42018e02 	andmi	r8, r1, #2, 28
 420:	00040b0c 	andeq	r0, r4, ip, lsl #22
 424:	0000000c 	andeq	r0, r0, ip
 428:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 42c:	7c020001 	stcvc	0, cr0, [r2], {1}
 430:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 434:	0000001c 	andeq	r0, r0, ip, lsl r0
 438:	00000424 	andeq	r0, r0, r4, lsr #8
 43c:	c000a674 	andgt	sl, r0, r4, ror r6
 440:	00000070 	andeq	r0, r0, r0, ror r0
 444:	8b040e42 	blhi	103d54 <_start-0xbff042ac>
 448:	0b0d4201 	bleq	350c54 <_start-0xbfcb73ac>
 44c:	420d0d70 	andmi	r0, sp, #112, 26	; 0x1c00
 450:	00000ecb 	andeq	r0, r0, fp, asr #29
 454:	00000018 	andeq	r0, r0, r8, lsl r0
 458:	00000424 	andeq	r0, r0, r4, lsr #8
 45c:	c000a6e4 	andgt	sl, r0, r4, ror #13
 460:	00000010 	andeq	r0, r0, r0, lsl r0
 464:	8b080e42 	blhi	203d74 <_start-0xbfe0428c>
 468:	42018e02 	andmi	r8, r1, #2, 28
 46c:	00040b0c 	andeq	r0, r4, ip, lsl #22
