
interface.elf:     file format elf32-littlearm


Disassembly of section .text:

c0008000 <_start>:
.text

	.global	_start
_start:
@ 异常向量表
	b reset
c0008000:	ea00000d 	b	c000803c <reset>
	ldr pc, _undefined_instruction
c0008004:	e59ff014 	ldr	pc, [pc, #20]	; c0008020 <_undefined_instruction>
	ldr pc, _software_interrupt
c0008008:	e59ff014 	ldr	pc, [pc, #20]	; c0008024 <_software_interrupt>
	ldr pc, _prefetch_abort
c000800c:	e59ff014 	ldr	pc, [pc, #20]	; c0008028 <_prefetch_abort>
	ldr pc, _data_abort
c0008010:	e59ff014 	ldr	pc, [pc, #20]	; c000802c <_data_abort>
	ldr pc, _not_used
c0008014:	e59ff014 	ldr	pc, [pc, #20]	; c0008030 <_not_used>
	ldr pc, _irq
c0008018:	e59ff014 	ldr	pc, [pc, #20]	; c0008034 <_irq>
	ldr pc, _fiq
c000801c:	e59ff014 	ldr	pc, [pc, #20]	; c0008038 <_fiq>

c0008020 <_undefined_instruction>:
c0008020:	c0008140 	andgt	r8, r0, r0, asr #2

c0008024 <_software_interrupt>:
c0008024:	c0008160 	andgt	r8, r0, r0, ror #2

c0008028 <_prefetch_abort>:
c0008028:	c0008180 	andgt	r8, r0, r0, lsl #3

c000802c <_data_abort>:
c000802c:	c00081a0 	andgt	r8, r0, r0, lsr #3

c0008030 <_not_used>:
c0008030:	c00081c0 	andgt	r8, r0, r0, asr #3

c0008034 <_irq>:
c0008034:	c00081e0 	andgt	r8, r0, r0, ror #3

c0008038 <_fiq>:
c0008038:	c0008200 	andgt	r8, r0, r0, lsl #4

c000803c <reset>:

 /* The actual reset code */
reset:
	@ 重新映射异常向量表的入口地址
	/* Set Vector Base Address Register */
	mrc p15, 0, r0, c1, c0, 0
c000803c:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic r0, #(1<<13)
c0008040:	e3c00a02 	bic	r0, r0, #8192	; 0x2000
	mcr p15, 0, r0, c1, c0, 0
c0008044:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	ldr	r0,=0xc0008000
c0008048:	e59f01b8 	ldr	r0, [pc, #440]	; c0008208 <stacktop+0x4>
	mcr	p15,0,r0,c12,c0,0		@ Vector Base Address Register
c000804c:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}

	/* Set the cpu to svc32 mode */
	mrs r0, cpsr
c0008050:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #0x1f
c0008054:	e3c0001f 	bic	r0, r0, #31
	orr r0, r0, #0xd3
c0008058:	e38000d3 	orr	r0, r0, #211	; 0xd3
	msr cpsr, r0
c000805c:	e129f000 	msr	CPSR_fc, r0

	/* Enable NEON/VFP unit */
	mrc p15, #0, r1, c1, c0, #2
c0008060:	ee111f50 	mrc	15, 0, r1, cr1, cr0, {2}
	orr r1, r1, #(0xf << 20)
c0008064:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
	mcr p15, #0, r1, c1, c0, #2
c0008068:	ee011f50 	mcr	15, 0, r1, cr1, cr0, {2}
	mov r1, #0
c000806c:	e3a01000 	mov	r1, #0
	mcr p15, #0, r1, c7, c5, #4
c0008070:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
	mov r0, #0x40000000
c0008074:	e3a00101 	mov	r0, #1073741824	; 0x40000000
	fmxr fpexc, r0
c0008078:	eee80a10 	vmsr	fpexc, r0

	/* Cache init */
	mrc	p15, 0, r0, c0, c0, 0
c000807c:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
	and	r1, r0, #0x00f00000
c0008080:	e200160f 	and	r1, r0, #15728640	; 0xf00000
	and	r2, r0, #0x0000000f
c0008084:	e200200f 	and	r2, r0, #15
	orr r2, r2, r1, lsr #20-4
c0008088:	e1822821 	orr	r2, r2, r1, lsr #16
	cmp r2, #0x30
c000808c:	e3520030 	cmp	r2, #48	; 0x30
	mrceq p15, 0, r0, c1, c0, 1
c0008090:	0e110f30 	mrceq	15, 0, r0, cr1, cr0, {1}
	orreq r0, r0, #0x6
c0008094:	03800006 	orreq	r0, r0, #6
	mcreq p15, 0, r0, c1, c0, 1
c0008098:	0e010f30 	mcreq	15, 0, r0, cr1, cr0, {1}

	/* Invalidate L1 I/D */
	mov r0, #0
c000809c:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c8, c7, 0
c00080a0:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
	mcr	p15, 0, r0, c7, c5, 0
c00080a4:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}

	/* Disable mmu stuff and caches */
	mrc p15, 0, r0, c1, c0, 0
c00080a8:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic r0, r0, #0x00002000
c00080ac:	e3c00a02 	bic	r0, r0, #8192	; 0x2000
	bic r0, r0, #0x00000007
c00080b0:	e3c00007 	bic	r0, r0, #7
	orr r0, r0, #0x00001000
c00080b4:	e3800a01 	orr	r0, r0, #4096	; 0x1000
	orr r0, r0, #0x00000002
c00080b8:	e3800002 	orr	r0, r0, #2
	orr r0, r0, #0x00000800
c00080bc:	e3800b02 	orr	r0, r0, #2048	; 0x800
	mcr p15, 0, r0, c1, c0, 0
c00080c0:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

c00080c4 <init_stack>:

	/* Initialize stacks */
	@ 初始化各种模式下的占空间
init_stack:
	ldr	r0, stacktop        /*get stack top pointer*/
c00080c4:	e59f0138 	ldr	r0, [pc, #312]	; c0008204 <stacktop>

	/********svc mode stack********/
	mov	sp, r0
c00080c8:	e1a0d000 	mov	sp, r0
	sub	r0, #128*4          /*512 byte  for irq mode of stack*/
c00080cc:	e2400c02 	sub	r0, r0, #512	; 0x200
	/********irq mode stack********/
	msr	cpsr, #0xd2
c00080d0:	e329f0d2 	msr	CPSR_fc, #210	; 0xd2
	mov	sp, r0
c00080d4:	e1a0d000 	mov	sp, r0
	sub	r0, #128*4          /*512 byte  for fiq mode of stack*/
c00080d8:	e2400c02 	sub	r0, r0, #512	; 0x200
	/********fiq mode stack********/
	msr	cpsr, #0xd1
c00080dc:	e329f0d1 	msr	CPSR_fc, #209	; 0xd1
	mov	sp, r0
c00080e0:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080e4:	e2400000 	sub	r0, r0, #0
	/********abort mode stack******/
	msr	cpsr, #0xd7
c00080e8:	e329f0d7 	msr	CPSR_fc, #215	; 0xd7
	mov	sp, r0
c00080ec:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080f0:	e2400000 	sub	r0, r0, #0
	/********undefine mode stack**/
	msr	cpsr, #0xdb
c00080f4:	e329f0db 	msr	CPSR_fc, #219	; 0xdb
	mov	sp, r0
c00080f8:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080fc:	e2400000 	sub	r0, r0, #0
    /***sys mode and usr mode stack***/
	msr	cpsr, #0x10
c0008100:	e329f010 	msr	CPSR_fc, #16
	mov	sp, r0             /*1024 byte  for user mode of stack*/
c0008104:	e1a0d000 	mov	sp, r0

    /******clear bss section********/
	@ 清除BSS段
	ldr	r0, =__bss_start	/* this is auto-relocated! */
c0008108:	e59f00fc 	ldr	r0, [pc, #252]	; c000820c <stacktop+0x8>
	ldr	r1, =__bss_end__	/* this is auto-relocated! */
c000810c:	e59f10fc 	ldr	r1, [pc, #252]	; c0008210 <stacktop+0xc>
	mov	r2, #0x00000000		/* prepare zero to clear BSS */
c0008110:	e3a02000 	mov	r2, #0

c0008114 <clbss_l>:

clbss_l: cmp r0, r1			/* while not at end of BSS */
c0008114:	e1500001 	cmp	r0, r1
	strlo r2, [r0]			/* clear 32-bit BSS word */
c0008118:	35802000 	strcc	r2, [r0]
	addlo r0, r0, #4		/* move to next */
c000811c:	32800004 	addcc	r0, r0, #4
	blo	clbss_l
c0008120:	3afffffb 	bcc	c0008114 <clbss_l>

	/* Call _main */
	ldr pc, =main     @ 汇编调用C  跳转到main.c文件的main函数中
c0008124:	e59ff0e8 	ldr	pc, [pc, #232]	; c0008214 <stacktop+0x10>
c0008128:	e320f000 	nop	{0}
c000812c:	e320f000 	nop	{0}
c0008130:	e320f000 	nop	{0}
c0008134:	e320f000 	nop	{0}
c0008138:	e320f000 	nop	{0}
c000813c:	e320f000 	nop	{0}

c0008140 <undefined_instruction>:
/*
 * Exception handlers
 */
	.align 5  // 2的5次方，=32bit 也就是4字节对其
undefined_instruction:
	b	.
c0008140:	eafffffe 	b	c0008140 <undefined_instruction>
c0008144:	e320f000 	nop	{0}
c0008148:	e320f000 	nop	{0}
c000814c:	e320f000 	nop	{0}
c0008150:	e320f000 	nop	{0}
c0008154:	e320f000 	nop	{0}
c0008158:	e320f000 	nop	{0}
c000815c:	e320f000 	nop	{0}

c0008160 <software_interrupt>:

	.align 5
software_interrupt:
	b	.
c0008160:	eafffffe 	b	c0008160 <software_interrupt>
c0008164:	e320f000 	nop	{0}
c0008168:	e320f000 	nop	{0}
c000816c:	e320f000 	nop	{0}
c0008170:	e320f000 	nop	{0}
c0008174:	e320f000 	nop	{0}
c0008178:	e320f000 	nop	{0}
c000817c:	e320f000 	nop	{0}

c0008180 <prefetch_abort>:

	.align 5
prefetch_abort:
	b	.
c0008180:	eafffffe 	b	c0008180 <prefetch_abort>
c0008184:	e320f000 	nop	{0}
c0008188:	e320f000 	nop	{0}
c000818c:	e320f000 	nop	{0}
c0008190:	e320f000 	nop	{0}
c0008194:	e320f000 	nop	{0}
c0008198:	e320f000 	nop	{0}
c000819c:	e320f000 	nop	{0}

c00081a0 <data_abort>:

	.align 5
data_abort:
	b	.
c00081a0:	eafffffe 	b	c00081a0 <data_abort>
c00081a4:	e320f000 	nop	{0}
c00081a8:	e320f000 	nop	{0}
c00081ac:	e320f000 	nop	{0}
c00081b0:	e320f000 	nop	{0}
c00081b4:	e320f000 	nop	{0}
c00081b8:	e320f000 	nop	{0}
c00081bc:	e320f000 	nop	{0}

c00081c0 <not_used>:

	.align 5
not_used:
	b	.
c00081c0:	eafffffe 	b	c00081c0 <not_used>
c00081c4:	e320f000 	nop	{0}
c00081c8:	e320f000 	nop	{0}
c00081cc:	e320f000 	nop	{0}
c00081d0:	e320f000 	nop	{0}
c00081d4:	e320f000 	nop	{0}
c00081d8:	e320f000 	nop	{0}
c00081dc:	e320f000 	nop	{0}

c00081e0 <irq>:

	.align 5
	.global irq
irq:
	sub  lr, lr, #4
c00081e0:	e24ee004 	sub	lr, lr, #4
	stmfd sp!, {r0-r12, lr}
c00081e4:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	bl do_irq
c00081e8:	eb000540 	bl	c00096f0 <do_irq>
	ldmfd sp!, {r0-r12, pc}^
c00081ec:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
c00081f0:	e320f000 	nop	{0}
c00081f4:	e320f000 	nop	{0}
c00081f8:	e320f000 	nop	{0}
c00081fc:	e320f000 	nop	{0}

c0008200 <fiq>:

	.align 5
	.global fiq
fiq:
	b .
c0008200:	eafffffe 	b	c0008200 <fiq>

c0008204 <stacktop>:
c0008204:	c000a588 	andgt	sl, r0, r8, lsl #11
	ldr	r0,=0xc0008000
c0008208:	c0008000 	andgt	r8, r0, r0
	ldr	r0, =__bss_start	/* this is auto-relocated! */
c000820c:	c000a688 	andgt	sl, r0, r8, lsl #13
	ldr	r1, =__bss_end__	/* this is auto-relocated! */
c0008210:	c000a696 	mulgt	r0, r6, r6
	ldr pc, =main     @ 汇编调用C  跳转到main.c文件的main函数中
c0008214:	c0009ce4 	andgt	r9, r0, r4, ror #25

c0008218 <__umodsi3>:
	.text
	.globl	 __umodsi3
	.type  __umodsi3       ,function
	.align 0
 __umodsi3      :
	cmp	divisor, #0
c0008218:	e3510000 	cmp	r1, #0
	beq	Ldiv0
c000821c:	0a000026 	beq	c00082bc <Ldiv0>
	mov	curbit, #1
c0008220:	e3a03001 	mov	r3, #1
	cmp	dividend, divisor
c0008224:	e1500001 	cmp	r0, r1
	movcc	pc, lr
c0008228:	31a0f00e 	movcc	pc, lr

c000822c <Loop1>:
Loop1:
	@ Unless the divisor is very big, shift it up in multiples of
	@ four bits, since this is the amount of unwinding in the main
	@ division loop.  Continue shifting until the divisor is
	@ larger than the dividend.
	cmp	divisor, #0x10000000
c000822c:	e3510201 	cmp	r1, #268435456	; 0x10000000
	cmpcc	divisor, dividend
c0008230:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #4
c0008234:	31a01201 	lslcc	r1, r1, #4
	movcc	curbit, curbit, lsl #4
c0008238:	31a03203 	lslcc	r3, r3, #4
	bcc	Loop1
c000823c:	3afffffa 	bcc	c000822c <Loop1>

c0008240 <Lbignum>:
Lbignum:
	@ For very big divisors, we must shift it a bit at a time, or
	@ we will be in danger of overflowing.
	cmp	divisor, #0x80000000
c0008240:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
	cmpcc	divisor, dividend
c0008244:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #1
c0008248:	31a01081 	lslcc	r1, r1, #1
	movcc	curbit, curbit, lsl #1
c000824c:	31a03083 	lslcc	r3, r3, #1
	bcc	Lbignum
c0008250:	3afffffa 	bcc	c0008240 <Lbignum>

c0008254 <Loop3>:
Loop3:
	@ Test for possible subtractions.  On the final pass, this may
	@ subtract too much from the dividend, so keep track of which
	@ subtractions are done, we can fix them up afterwards...
	mov	overdone, #0
c0008254:	e3a02000 	mov	r2, #0
	cmp	dividend, divisor
c0008258:	e1500001 	cmp	r0, r1
	subcs	dividend, dividend, divisor
c000825c:	20400001 	subcs	r0, r0, r1
	cmp	dividend, divisor, lsr #1
c0008260:	e15000a1 	cmp	r0, r1, lsr #1
	subcs	dividend, dividend, divisor, lsr #1
c0008264:	204000a1 	subcs	r0, r0, r1, lsr #1
	orrcs	overdone, overdone, curbit, ror #1
c0008268:	218220e3 	orrcs	r2, r2, r3, ror #1
	cmp	dividend, divisor, lsr #2
c000826c:	e1500121 	cmp	r0, r1, lsr #2
	subcs	dividend, dividend, divisor, lsr #2
c0008270:	20400121 	subcs	r0, r0, r1, lsr #2
	orrcs	overdone, overdone, curbit, ror #2
c0008274:	21822163 	orrcs	r2, r2, r3, ror #2
	cmp	dividend, divisor, lsr #3
c0008278:	e15001a1 	cmp	r0, r1, lsr #3
	subcs	dividend, dividend, divisor, lsr #3
c000827c:	204001a1 	subcs	r0, r0, r1, lsr #3
	orrcs	overdone, overdone, curbit, ror #3
c0008280:	218221e3 	orrcs	r2, r2, r3, ror #3
	mov	ip, curbit
c0008284:	e1a0c003 	mov	ip, r3
	cmp	dividend, #0			@ Early termination?
c0008288:	e3500000 	cmp	r0, #0
	movnes	curbit, curbit, lsr #4		@ No, any more bits to do?
c000828c:	11b03223 	lsrsne	r3, r3, #4
	movne	divisor, divisor, lsr #4
c0008290:	11a01221 	lsrne	r1, r1, #4
	bne	Loop3
c0008294:	1affffee 	bne	c0008254 <Loop3>
	@ the top three bits of "overdone".  Exactly which were not needed
	@ are governed by the position of the bit, stored in ip.
	@ If we terminated early, because dividend became zero,
	@ then none of the below will match, since the bit in ip will not be
	@ in the bottom nibble.
	ands	overdone, overdone, #0xe0000000
c0008298:	e212220e 	ands	r2, r2, #-536870912	; 0xe0000000
	moveq	pc, lr				@ No fixups needed
c000829c:	01a0f00e 	moveq	pc, lr
	tst	overdone, ip, ror #3
c00082a0:	e11201ec 	tst	r2, ip, ror #3
	addne	dividend, dividend, divisor, lsr #3
c00082a4:	108001a1 	addne	r0, r0, r1, lsr #3
	tst	overdone, ip, ror #2
c00082a8:	e112016c 	tst	r2, ip, ror #2
	addne	dividend, dividend, divisor, lsr #2
c00082ac:	10800121 	addne	r0, r0, r1, lsr #2
	tst	overdone, ip, ror #1
c00082b0:	e11200ec 	tst	r2, ip, ror #1
	addne	dividend, dividend, divisor, lsr #1
c00082b4:	108000a1 	addne	r0, r0, r1, lsr #1
	mov	pc, lr
c00082b8:	e1a0f00e 	mov	pc, lr

c00082bc <Ldiv0>:
Ldiv0:
	str	lr, [sp, #-4]!
c00082bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
@	bl	 __div0       (PLT)
	mov	r0, #0			@ about as wrong as it could be
c00082c0:	e3a00000 	mov	r0, #0
	ldmia	sp!, {pc}
c00082c4:	e8bd8000 	ldmfd	sp!, {pc}

c00082c8 <__udivsi3>:
	.text
	.globl	 __udivsi3
	.type  __udivsi3       ,function
	.align	0
 __udivsi3      :
	cmp	divisor, #0
c00082c8:	e3510000 	cmp	r1, #0
	beq	Ldiv0
c00082cc:	0a00001f 	beq	c0008350 <Ldiv0>
	mov	curbit, #1
c00082d0:	e3a03001 	mov	r3, #1
	mov	result, #0
c00082d4:	e3a02000 	mov	r2, #0
	cmp	dividend, divisor
c00082d8:	e1500001 	cmp	r0, r1
	bcc	Lgot_result
c00082dc:	3a000019 	bcc	c0008348 <Lgot_result>

c00082e0 <Loop1>:
Loop1:
	@ Unless the divisor is very big, shift it up in multiples of
	@ four bits, since this is the amount of unwinding in the main
	@ division loop.  Continue shifting until the divisor is
	@ larger than the dividend.
	cmp	divisor, #0x10000000
c00082e0:	e3510201 	cmp	r1, #268435456	; 0x10000000
	cmpcc	divisor, dividend
c00082e4:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #4
c00082e8:	31a01201 	lslcc	r1, r1, #4
	movcc	curbit, curbit, lsl #4
c00082ec:	31a03203 	lslcc	r3, r3, #4
	bcc	Loop1
c00082f0:	3afffffa 	bcc	c00082e0 <Loop1>

c00082f4 <Lbignum>:
Lbignum:
	@ For very big divisors, we must shift it a bit at a time, or
	@ we will be in danger of overflowing.
	cmp	divisor, #0x80000000
c00082f4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
	cmpcc	divisor, dividend
c00082f8:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #1
c00082fc:	31a01081 	lslcc	r1, r1, #1
	movcc	curbit, curbit, lsl #1
c0008300:	31a03083 	lslcc	r3, r3, #1
	bcc	Lbignum
c0008304:	3afffffa 	bcc	c00082f4 <Lbignum>

c0008308 <Loop3>:
Loop3:
	@ Test for possible subtractions, and note which bits
	@ are done in the result.  On the final pass, this may subtract
	@ too much from the dividend, but the result will be ok, since the
	@ "bit" will have been shifted out at the bottom.
	cmp	dividend, divisor
c0008308:	e1500001 	cmp	r0, r1
	subcs	dividend, dividend, divisor
c000830c:	20400001 	subcs	r0, r0, r1
	orrcs	result, result, curbit
c0008310:	21822003 	orrcs	r2, r2, r3
	cmp	dividend, divisor, lsr #1
c0008314:	e15000a1 	cmp	r0, r1, lsr #1
	subcs	dividend, dividend, divisor, lsr #1
c0008318:	204000a1 	subcs	r0, r0, r1, lsr #1
	orrcs	result, result, curbit, lsr #1
c000831c:	218220a3 	orrcs	r2, r2, r3, lsr #1
	cmp	dividend, divisor, lsr #2
c0008320:	e1500121 	cmp	r0, r1, lsr #2
	subcs	dividend, dividend, divisor, lsr #2
c0008324:	20400121 	subcs	r0, r0, r1, lsr #2
	orrcs	result, result, curbit, lsr #2
c0008328:	21822123 	orrcs	r2, r2, r3, lsr #2
	cmp	dividend, divisor, lsr #3
c000832c:	e15001a1 	cmp	r0, r1, lsr #3
	subcs	dividend, dividend, divisor, lsr #3
c0008330:	204001a1 	subcs	r0, r0, r1, lsr #3
	orrcs	result, result, curbit, lsr #3
c0008334:	218221a3 	orrcs	r2, r2, r3, lsr #3
	cmp	dividend, #0			@ Early termination?
c0008338:	e3500000 	cmp	r0, #0
	movnes	curbit, curbit, lsr #4		@ No, any more bits to do?
c000833c:	11b03223 	lsrsne	r3, r3, #4
	movne	divisor, divisor, lsr #4
c0008340:	11a01221 	lsrne	r1, r1, #4
	bne	Loop3
c0008344:	1affffef 	bne	c0008308 <Loop3>

c0008348 <Lgot_result>:
Lgot_result:
	mov	r0, result
c0008348:	e1a00002 	mov	r0, r2
	mov	pc, lr
c000834c:	e1a0f00e 	mov	pc, lr

c0008350 <Ldiv0>:
Ldiv0:
	str	lr, [sp, #-4]!
c0008350:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	@bl	 __div0       (PLT)
	mov	r0, #0			@ about as wrong as it could be
c0008354:	e3a00000 	mov	r0, #0
	ldmia	sp!, {pc}
c0008358:	e8bd8000 	ldmfd	sp!, {pc}

c000835c <__toupper>:
		c -= 'A'-'a';
	return c;
}

static inline unsigned char __toupper(unsigned char c)
{
c000835c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0008360:	e28db000 	add	fp, sp, #0
c0008364:	e24dd004 	sub	sp, sp, #4
c0008368:	e1a03000 	mov	r3, r0
c000836c:	e54b3004 	strb	r3, [fp, #-4]
	if (islower(c))
c0008370:	e55b2004 	ldrb	r2, [fp, #-4]
c0008374:	e30a3588 	movw	r3, #42376	; 0xa588
c0008378:	e34c3000 	movt	r3, #49152	; 0xc000
c000837c:	e7d33002 	ldrb	r3, [r3, r2]
c0008380:	e2033002 	and	r3, r3, #2
c0008384:	e3530000 	cmp	r3, #0
c0008388:	0a000002 	beq	c0008398 <__toupper+0x3c>
		c -= 'a'-'A';
c000838c:	e55b3004 	ldrb	r3, [fp, #-4]
c0008390:	e2433020 	sub	r3, r3, #32
c0008394:	e54b3004 	strb	r3, [fp, #-4]
	return c;
c0008398:	e55b3004 	ldrb	r3, [fp, #-4]
}
c000839c:	e1a00003 	mov	r0, r3
c00083a0:	e28bd000 	add	sp, fp, #0
c00083a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00083a8:	e12fff1e 	bx	lr

c00083ac <simple_strtoul>:
#include <ctype.h>
#include "uart.h"
#define size_t unsigned int

unsigned long simple_strtoul(const char *cp,char **endp,unsigned int base)
{
c00083ac:	e92d4800 	push	{fp, lr}
c00083b0:	e28db004 	add	fp, sp, #4
c00083b4:	e24dd014 	sub	sp, sp, #20
c00083b8:	e50b0010 	str	r0, [fp, #-16]
c00083bc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c00083c0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
	unsigned long result = 0,value;
c00083c4:	e3a03000 	mov	r3, #0
c00083c8:	e50b3008 	str	r3, [fp, #-8]

	if (*cp == '0') {
c00083cc:	e51b3010 	ldr	r3, [fp, #-16]
c00083d0:	e5d33000 	ldrb	r3, [r3]
c00083d4:	e3530030 	cmp	r3, #48	; 0x30
c00083d8:	1a00001a 	bne	c0008448 <simple_strtoul+0x9c>
		cp++;
c00083dc:	e51b3010 	ldr	r3, [fp, #-16]
c00083e0:	e2833001 	add	r3, r3, #1
c00083e4:	e50b3010 	str	r3, [fp, #-16]
		if ((*cp == 'x') && isxdigit(cp[1])) {
c00083e8:	e51b3010 	ldr	r3, [fp, #-16]
c00083ec:	e5d33000 	ldrb	r3, [r3]
c00083f0:	e3530078 	cmp	r3, #120	; 0x78
c00083f4:	1a00000e 	bne	c0008434 <simple_strtoul+0x88>
c00083f8:	e51b3010 	ldr	r3, [fp, #-16]
c00083fc:	e2833001 	add	r3, r3, #1
c0008400:	e5d33000 	ldrb	r3, [r3]
c0008404:	e1a02003 	mov	r2, r3
c0008408:	e30a3588 	movw	r3, #42376	; 0xa588
c000840c:	e34c3000 	movt	r3, #49152	; 0xc000
c0008410:	e7d33002 	ldrb	r3, [r3, r2]
c0008414:	e2033044 	and	r3, r3, #68	; 0x44
c0008418:	e3530000 	cmp	r3, #0
c000841c:	0a000004 	beq	c0008434 <simple_strtoul+0x88>
			base = 16;
c0008420:	e3a03010 	mov	r3, #16
c0008424:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			cp++;
c0008428:	e51b3010 	ldr	r3, [fp, #-16]
c000842c:	e2833001 	add	r3, r3, #1
c0008430:	e50b3010 	str	r3, [fp, #-16]
		}
		if (!base) {
c0008434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008438:	e3530000 	cmp	r3, #0
c000843c:	1a000001 	bne	c0008448 <simple_strtoul+0x9c>
			base = 8;
c0008440:	e3a03008 	mov	r3, #8
c0008444:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		}
	}
	if (!base) {
c0008448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c000844c:	e3530000 	cmp	r3, #0
c0008450:	1a00000b 	bne	c0008484 <simple_strtoul+0xd8>
		base = 10;
c0008454:	e3a0300a 	mov	r3, #10
c0008458:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	}
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c000845c:	ea000008 	b	c0008484 <simple_strtoul+0xd8>
	    ? toupper(*cp) : *cp)-'A'+10) < base) {
		result = result*base + value;
c0008460:	e51b3008 	ldr	r3, [fp, #-8]
c0008464:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
c0008468:	e0030392 	mul	r3, r2, r3
c000846c:	e51b200c 	ldr	r2, [fp, #-12]
c0008470:	e0823003 	add	r3, r2, r3
c0008474:	e50b3008 	str	r3, [fp, #-8]
		cp++;
c0008478:	e51b3010 	ldr	r3, [fp, #-16]
c000847c:	e2833001 	add	r3, r3, #1
c0008480:	e50b3010 	str	r3, [fp, #-16]
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c0008484:	e51b3010 	ldr	r3, [fp, #-16]
c0008488:	e5d33000 	ldrb	r3, [r3]
c000848c:	e1a02003 	mov	r2, r3
c0008490:	e30a3588 	movw	r3, #42376	; 0xa588
c0008494:	e34c3000 	movt	r3, #49152	; 0xc000
c0008498:	e7d33002 	ldrb	r3, [r3, r2]
c000849c:	e2033044 	and	r3, r3, #68	; 0x44
c00084a0:	e3530000 	cmp	r3, #0
c00084a4:	0a000024 	beq	c000853c <simple_strtoul+0x190>
c00084a8:	e51b3010 	ldr	r3, [fp, #-16]
c00084ac:	e5d33000 	ldrb	r3, [r3]
c00084b0:	e1a02003 	mov	r2, r3
c00084b4:	e30a3588 	movw	r3, #42376	; 0xa588
c00084b8:	e34c3000 	movt	r3, #49152	; 0xc000
c00084bc:	e7d33002 	ldrb	r3, [r3, r2]
c00084c0:	e2033004 	and	r3, r3, #4
c00084c4:	e3530000 	cmp	r3, #0
c00084c8:	0a000003 	beq	c00084dc <simple_strtoul+0x130>
c00084cc:	e51b3010 	ldr	r3, [fp, #-16]
c00084d0:	e5d33000 	ldrb	r3, [r3]
c00084d4:	e2433030 	sub	r3, r3, #48	; 0x30
c00084d8:	ea000012 	b	c0008528 <simple_strtoul+0x17c>
c00084dc:	e51b3010 	ldr	r3, [fp, #-16]
c00084e0:	e5d33000 	ldrb	r3, [r3]
c00084e4:	e1a02003 	mov	r2, r3
c00084e8:	e30a3588 	movw	r3, #42376	; 0xa588
c00084ec:	e34c3000 	movt	r3, #49152	; 0xc000
c00084f0:	e7d33002 	ldrb	r3, [r3, r2]
c00084f4:	e2033002 	and	r3, r3, #2
c00084f8:	e3530000 	cmp	r3, #0
c00084fc:	0a000006 	beq	c000851c <simple_strtoul+0x170>
	    ? toupper(*cp) : *cp)-'A'+10) < base) {
c0008500:	e51b3010 	ldr	r3, [fp, #-16]
c0008504:	e5d33000 	ldrb	r3, [r3]
c0008508:	e1a00003 	mov	r0, r3
c000850c:	ebffff92 	bl	c000835c <__toupper>
c0008510:	e1a03000 	mov	r3, r0
c0008514:	e2433037 	sub	r3, r3, #55	; 0x37
c0008518:	ea000002 	b	c0008528 <simple_strtoul+0x17c>
c000851c:	e51b3010 	ldr	r3, [fp, #-16]
c0008520:	e5d33000 	ldrb	r3, [r3]
c0008524:	e2433037 	sub	r3, r3, #55	; 0x37
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c0008528:	e50b300c 	str	r3, [fp, #-12]
c000852c:	e51b200c 	ldr	r2, [fp, #-12]
c0008530:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008534:	e1520003 	cmp	r2, r3
c0008538:	3affffc8 	bcc	c0008460 <simple_strtoul+0xb4>
	}
	if (endp)
c000853c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008540:	e3530000 	cmp	r3, #0
c0008544:	0a000002 	beq	c0008554 <simple_strtoul+0x1a8>
		*endp = (char *)cp;
c0008548:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000854c:	e51b2010 	ldr	r2, [fp, #-16]
c0008550:	e5832000 	str	r2, [r3]
	return result;
c0008554:	e51b3008 	ldr	r3, [fp, #-8]
}
c0008558:	e1a00003 	mov	r0, r3
c000855c:	e24bd004 	sub	sp, fp, #4
c0008560:	e8bd8800 	pop	{fp, pc}

c0008564 <simple_strtol>:

long simple_strtol(const char *cp,char **endp,unsigned int base)
{
c0008564:	e92d4800 	push	{fp, lr}
c0008568:	e28db004 	add	fp, sp, #4
c000856c:	e24dd00c 	sub	sp, sp, #12
c0008570:	e50b0008 	str	r0, [fp, #-8]
c0008574:	e50b100c 	str	r1, [fp, #-12]
c0008578:	e50b2010 	str	r2, [fp, #-16]
	if(*cp=='-')
c000857c:	e51b3008 	ldr	r3, [fp, #-8]
c0008580:	e5d33000 	ldrb	r3, [r3]
c0008584:	e353002d 	cmp	r3, #45	; 0x2d
c0008588:	1a000008 	bne	c00085b0 <simple_strtol+0x4c>
		return -simple_strtoul(cp+1,endp,base);
c000858c:	e51b3008 	ldr	r3, [fp, #-8]
c0008590:	e2833001 	add	r3, r3, #1
c0008594:	e51b2010 	ldr	r2, [fp, #-16]
c0008598:	e51b100c 	ldr	r1, [fp, #-12]
c000859c:	e1a00003 	mov	r0, r3
c00085a0:	ebffff81 	bl	c00083ac <simple_strtoul>
c00085a4:	e1a03000 	mov	r3, r0
c00085a8:	e2633000 	rsb	r3, r3, #0
c00085ac:	ea000004 	b	c00085c4 <simple_strtol+0x60>
	return simple_strtoul(cp,endp,base);
c00085b0:	e51b2010 	ldr	r2, [fp, #-16]
c00085b4:	e51b100c 	ldr	r1, [fp, #-12]
c00085b8:	e51b0008 	ldr	r0, [fp, #-8]
c00085bc:	ebffff7a 	bl	c00083ac <simple_strtoul>
c00085c0:	e1a03000 	mov	r3, r0
}
c00085c4:	e1a00003 	mov	r0, r3
c00085c8:	e24bd004 	sub	sp, fp, #4
c00085cc:	e8bd8800 	pop	{fp, pc}

c00085d0 <skip_atoi>:

/* we use this so that we can do without the ctype library */
#define is_digit(c)	((c) >= '0' && (c) <= '9')

static int skip_atoi(const char **s)
{
c00085d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00085d4:	e28db000 	add	fp, sp, #0
c00085d8:	e24dd008 	sub	sp, sp, #8
c00085dc:	e50b0008 	str	r0, [fp, #-8]
	int i=0;
c00085e0:	e3a03000 	mov	r3, #0
c00085e4:	e50b3004 	str	r3, [fp, #-4]

	while (is_digit(**s))
c00085e8:	ea00000e 	b	c0008628 <skip_atoi+0x58>
		i = i*10 + *((*s)++) - '0';
c00085ec:	e51b2004 	ldr	r2, [fp, #-4]
c00085f0:	e1a03002 	mov	r3, r2
c00085f4:	e1a03103 	lsl	r3, r3, #2
c00085f8:	e0833002 	add	r3, r3, r2
c00085fc:	e1a03083 	lsl	r3, r3, #1
c0008600:	e1a00003 	mov	r0, r3
c0008604:	e51b3008 	ldr	r3, [fp, #-8]
c0008608:	e5933000 	ldr	r3, [r3]
c000860c:	e2831001 	add	r1, r3, #1
c0008610:	e51b2008 	ldr	r2, [fp, #-8]
c0008614:	e5821000 	str	r1, [r2]
c0008618:	e5d33000 	ldrb	r3, [r3]
c000861c:	e0803003 	add	r3, r0, r3
c0008620:	e2433030 	sub	r3, r3, #48	; 0x30
c0008624:	e50b3004 	str	r3, [fp, #-4]
	while (is_digit(**s))
c0008628:	e51b3008 	ldr	r3, [fp, #-8]
c000862c:	e5933000 	ldr	r3, [r3]
c0008630:	e5d33000 	ldrb	r3, [r3]
c0008634:	e353002f 	cmp	r3, #47	; 0x2f
c0008638:	9a000004 	bls	c0008650 <skip_atoi+0x80>
c000863c:	e51b3008 	ldr	r3, [fp, #-8]
c0008640:	e5933000 	ldr	r3, [r3]
c0008644:	e5d33000 	ldrb	r3, [r3]
c0008648:	e3530039 	cmp	r3, #57	; 0x39
c000864c:	9affffe6 	bls	c00085ec <skip_atoi+0x1c>
	return i;
c0008650:	e51b3004 	ldr	r3, [fp, #-4]
}
c0008654:	e1a00003 	mov	r0, r3
c0008658:	e28bd000 	add	sp, fp, #0
c000865c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0008660:	e12fff1e 	bx	lr

c0008664 <number>:
#ifdef CFG_64BIT_VSPRINTF
static char * number(char * str, long long num, unsigned int base, int size, int precision ,int type)
#else
static char * number(char * str, long num, unsigned int base, int size, int precision ,int type)
#endif
{
c0008664:	e92d4800 	push	{fp, lr}
c0008668:	e28db004 	add	fp, sp, #4
c000866c:	e24dd068 	sub	sp, sp, #104	; 0x68
c0008670:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
c0008674:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
c0008678:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
c000867c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	char c,sign,tmp[66];
	const char *digits="0123456789abcdefghijklmnopqrstuvwxyz";
c0008680:	e3093d10 	movw	r3, #40208	; 0x9d10
c0008684:	e34c3000 	movt	r3, #49152	; 0xc000
c0008688:	e50b300c 	str	r3, [fp, #-12]
	int i;

	if (type & LARGE)
c000868c:	e59b3008 	ldr	r3, [fp, #8]
c0008690:	e2033040 	and	r3, r3, #64	; 0x40
c0008694:	e3530000 	cmp	r3, #0
c0008698:	0a000002 	beq	c00086a8 <number+0x44>
		digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
c000869c:	e3093d38 	movw	r3, #40248	; 0x9d38
c00086a0:	e34c3000 	movt	r3, #49152	; 0xc000
c00086a4:	e50b300c 	str	r3, [fp, #-12]
	if (type & LEFT)
c00086a8:	e59b3008 	ldr	r3, [fp, #8]
c00086ac:	e2033010 	and	r3, r3, #16
c00086b0:	e3530000 	cmp	r3, #0
c00086b4:	0a000002 	beq	c00086c4 <number+0x60>
		type &= ~ZEROPAD;
c00086b8:	e59b3008 	ldr	r3, [fp, #8]
c00086bc:	e3c33001 	bic	r3, r3, #1
c00086c0:	e58b3008 	str	r3, [fp, #8]
	if (base < 2 || base > 36)
c00086c4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00086c8:	e3530001 	cmp	r3, #1
c00086cc:	9a000002 	bls	c00086dc <number+0x78>
c00086d0:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00086d4:	e3530024 	cmp	r3, #36	; 0x24
c00086d8:	9a000001 	bls	c00086e4 <number+0x80>
		return 0;
c00086dc:	e3a03000 	mov	r3, #0
c00086e0:	ea0000d5 	b	c0008a3c <number+0x3d8>
	c = (type & ZEROPAD) ? '0' : ' ';
c00086e4:	e59b3008 	ldr	r3, [fp, #8]
c00086e8:	e2033001 	and	r3, r3, #1
c00086ec:	e3530000 	cmp	r3, #0
c00086f0:	0a000001 	beq	c00086fc <number+0x98>
c00086f4:	e3a03030 	mov	r3, #48	; 0x30
c00086f8:	ea000000 	b	c0008700 <number+0x9c>
c00086fc:	e3a03020 	mov	r3, #32
c0008700:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	sign = 0;
c0008704:	e3a03000 	mov	r3, #0
c0008708:	e54b3005 	strb	r3, [fp, #-5]
	if (type & SIGN) {
c000870c:	e59b3008 	ldr	r3, [fp, #8]
c0008710:	e2033002 	and	r3, r3, #2
c0008714:	e3530000 	cmp	r3, #0
c0008718:	0a00001e 	beq	c0008798 <number+0x134>
		if (num < 0) {
c000871c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008720:	e3530000 	cmp	r3, #0
c0008724:	aa000008 	bge	c000874c <number+0xe8>
			sign = '-';
c0008728:	e3a0302d 	mov	r3, #45	; 0x2d
c000872c:	e54b3005 	strb	r3, [fp, #-5]
			num = -num;
c0008730:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008734:	e2633000 	rsb	r3, r3, #0
c0008738:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
			size--;
c000873c:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008740:	e2433001 	sub	r3, r3, #1
c0008744:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c0008748:	ea000012 	b	c0008798 <number+0x134>
		} else if (type & PLUS) {
c000874c:	e59b3008 	ldr	r3, [fp, #8]
c0008750:	e2033004 	and	r3, r3, #4
c0008754:	e3530000 	cmp	r3, #0
c0008758:	0a000005 	beq	c0008774 <number+0x110>
			sign = '+';
c000875c:	e3a0302b 	mov	r3, #43	; 0x2b
c0008760:	e54b3005 	strb	r3, [fp, #-5]
			size--;
c0008764:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008768:	e2433001 	sub	r3, r3, #1
c000876c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c0008770:	ea000008 	b	c0008798 <number+0x134>
		} else if (type & SPACE) {
c0008774:	e59b3008 	ldr	r3, [fp, #8]
c0008778:	e2033008 	and	r3, r3, #8
c000877c:	e3530000 	cmp	r3, #0
c0008780:	0a000004 	beq	c0008798 <number+0x134>
			sign = ' ';
c0008784:	e3a03020 	mov	r3, #32
c0008788:	e54b3005 	strb	r3, [fp, #-5]
			size--;
c000878c:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008790:	e2433001 	sub	r3, r3, #1
c0008794:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
		}
	}
	if (type & SPECIAL) {
c0008798:	e59b3008 	ldr	r3, [fp, #8]
c000879c:	e2033020 	and	r3, r3, #32
c00087a0:	e3530000 	cmp	r3, #0
c00087a4:	0a00000c 	beq	c00087dc <number+0x178>
		if (base == 16)
c00087a8:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00087ac:	e3530010 	cmp	r3, #16
c00087b0:	1a000003 	bne	c00087c4 <number+0x160>
			size -= 2;
c00087b4:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00087b8:	e2433002 	sub	r3, r3, #2
c00087bc:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c00087c0:	ea000005 	b	c00087dc <number+0x178>
		else if (base == 8)
c00087c4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00087c8:	e3530008 	cmp	r3, #8
c00087cc:	1a000002 	bne	c00087dc <number+0x178>
			size--;
c00087d0:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00087d4:	e2433001 	sub	r3, r3, #1
c00087d8:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	}
	i = 0;
c00087dc:	e3a03000 	mov	r3, #0
c00087e0:	e50b3010 	str	r3, [fp, #-16]
	if (num == 0)
c00087e4:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c00087e8:	e3530000 	cmp	r3, #0
c00087ec:	1a000022 	bne	c000887c <number+0x218>
		tmp[i++]='0';
c00087f0:	e51b3010 	ldr	r3, [fp, #-16]
c00087f4:	e2832001 	add	r2, r3, #1
c00087f8:	e50b2010 	str	r2, [fp, #-16]
c00087fc:	e24b2004 	sub	r2, fp, #4
c0008800:	e0823003 	add	r3, r2, r3
c0008804:	e3a02030 	mov	r2, #48	; 0x30
c0008808:	e5432058 	strb	r2, [r3, #-88]	; 0xffffffa8
c000880c:	ea00001d 	b	c0008888 <number+0x224>
	else while (num != 0)
	if (i > precision)
c0008810:	e51b2010 	ldr	r2, [fp, #-16]
c0008814:	e59b3004 	ldr	r3, [fp, #4]
c0008818:	e1520003 	cmp	r2, r3
c000881c:	da000016 	ble	c000887c <number+0x218>
		tmp[i++] = digits[do_div(num,base)];
c0008820:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008824:	e51b1068 	ldr	r1, [fp, #-104]	; 0xffffff98
c0008828:	e1a00003 	mov	r0, r3
c000882c:	ebfffe79 	bl	c0008218 <__umodsi3>
c0008830:	e1a03000 	mov	r3, r0
c0008834:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
c0008838:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c000883c:	e51b1068 	ldr	r1, [fp, #-104]	; 0xffffff98
c0008840:	e1a00003 	mov	r0, r3
c0008844:	ebfffe9f 	bl	c00082c8 <__udivsi3>
c0008848:	e1a03000 	mov	r3, r0
c000884c:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
c0008850:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008854:	e1a02003 	mov	r2, r3
c0008858:	e51b300c 	ldr	r3, [fp, #-12]
c000885c:	e0832002 	add	r2, r3, r2
c0008860:	e51b3010 	ldr	r3, [fp, #-16]
c0008864:	e2831001 	add	r1, r3, #1
c0008868:	e50b1010 	str	r1, [fp, #-16]
c000886c:	e5d22000 	ldrb	r2, [r2]
c0008870:	e24b1004 	sub	r1, fp, #4
c0008874:	e0813003 	add	r3, r1, r3
c0008878:	e5432058 	strb	r2, [r3, #-88]	; 0xffffffa8
	else while (num != 0)
c000887c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008880:	e3530000 	cmp	r3, #0
c0008884:	1affffe1 	bne	c0008810 <number+0x1ac>
	precision = i;
c0008888:	e51b3010 	ldr	r3, [fp, #-16]
c000888c:	e58b3004 	str	r3, [fp, #4]
	size -= precision;
c0008890:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
c0008894:	e59b3004 	ldr	r3, [fp, #4]
c0008898:	e0423003 	sub	r3, r2, r3
c000889c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	if (!(type&(ZEROPAD+LEFT)))
c00088a0:	e59b3008 	ldr	r3, [fp, #8]
c00088a4:	e2033011 	and	r3, r3, #17
c00088a8:	e3530000 	cmp	r3, #0
c00088ac:	1a00000a 	bne	c00088dc <number+0x278>
		while(size-->0)
c00088b0:	ea000004 	b	c00088c8 <number+0x264>
			*str++ = ' ';
c00088b4:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00088b8:	e2832001 	add	r2, r3, #1
c00088bc:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00088c0:	e3a02020 	mov	r2, #32
c00088c4:	e5c32000 	strb	r2, [r3]
		while(size-->0)
c00088c8:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00088cc:	e2432001 	sub	r2, r3, #1
c00088d0:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c00088d4:	e3530000 	cmp	r3, #0
c00088d8:	cafffff5 	bgt	c00088b4 <number+0x250>
	if (sign)
c00088dc:	e55b3005 	ldrb	r3, [fp, #-5]
c00088e0:	e3530000 	cmp	r3, #0
c00088e4:	0a000004 	beq	c00088fc <number+0x298>
		*str++ = sign;
c00088e8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00088ec:	e2832001 	add	r2, r3, #1
c00088f0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00088f4:	e55b2005 	ldrb	r2, [fp, #-5]
c00088f8:	e5c32000 	strb	r2, [r3]
	if (type & SPECIAL) {
c00088fc:	e59b3008 	ldr	r3, [fp, #8]
c0008900:	e2033020 	and	r3, r3, #32
c0008904:	e3530000 	cmp	r3, #0
c0008908:	0a000016 	beq	c0008968 <number+0x304>
		if (base==8)
c000890c:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c0008910:	e3530008 	cmp	r3, #8
c0008914:	1a000005 	bne	c0008930 <number+0x2cc>
			*str++ = '0';
c0008918:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c000891c:	e2832001 	add	r2, r3, #1
c0008920:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008924:	e3a02030 	mov	r2, #48	; 0x30
c0008928:	e5c32000 	strb	r2, [r3]
c000892c:	ea00000d 	b	c0008968 <number+0x304>
		else if (base==16) {
c0008930:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c0008934:	e3530010 	cmp	r3, #16
c0008938:	1a00000a 	bne	c0008968 <number+0x304>
			*str++ = '0';
c000893c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008940:	e2832001 	add	r2, r3, #1
c0008944:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008948:	e3a02030 	mov	r2, #48	; 0x30
c000894c:	e5c32000 	strb	r2, [r3]
			*str++ = digits[33];
c0008950:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008954:	e2832001 	add	r2, r3, #1
c0008958:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c000895c:	e51b200c 	ldr	r2, [fp, #-12]
c0008960:	e5d22021 	ldrb	r2, [r2, #33]	; 0x21
c0008964:	e5c32000 	strb	r2, [r3]
		}
	}
	if (!(type & LEFT))
c0008968:	e59b3008 	ldr	r3, [fp, #8]
c000896c:	e2033010 	and	r3, r3, #16
c0008970:	e3530000 	cmp	r3, #0
c0008974:	1a000010 	bne	c00089bc <number+0x358>
		while (size-- > 0)
c0008978:	ea000004 	b	c0008990 <number+0x32c>
			*str++ = c;
c000897c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008980:	e2832001 	add	r2, r3, #1
c0008984:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008988:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
c000898c:	e5c32000 	strb	r2, [r3]
		while (size-- > 0)
c0008990:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008994:	e2432001 	sub	r2, r3, #1
c0008998:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c000899c:	e3530000 	cmp	r3, #0
c00089a0:	cafffff5 	bgt	c000897c <number+0x318>
	while (i < precision--)
c00089a4:	ea000004 	b	c00089bc <number+0x358>
		*str++ = '0';
c00089a8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00089ac:	e2832001 	add	r2, r3, #1
c00089b0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00089b4:	e3a02030 	mov	r2, #48	; 0x30
c00089b8:	e5c32000 	strb	r2, [r3]
	while (i < precision--)
c00089bc:	e59b3004 	ldr	r3, [fp, #4]
c00089c0:	e2432001 	sub	r2, r3, #1
c00089c4:	e58b2004 	str	r2, [fp, #4]
c00089c8:	e51b2010 	ldr	r2, [fp, #-16]
c00089cc:	e1520003 	cmp	r2, r3
c00089d0:	bafffff4 	blt	c00089a8 <number+0x344>
	while (i-- > 0)
c00089d4:	ea000007 	b	c00089f8 <number+0x394>
		*str++ = tmp[i];
c00089d8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00089dc:	e2832001 	add	r2, r3, #1
c00089e0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00089e4:	e24b105c 	sub	r1, fp, #92	; 0x5c
c00089e8:	e51b2010 	ldr	r2, [fp, #-16]
c00089ec:	e0812002 	add	r2, r1, r2
c00089f0:	e5d22000 	ldrb	r2, [r2]
c00089f4:	e5c32000 	strb	r2, [r3]
	while (i-- > 0)
c00089f8:	e51b3010 	ldr	r3, [fp, #-16]
c00089fc:	e2432001 	sub	r2, r3, #1
c0008a00:	e50b2010 	str	r2, [fp, #-16]
c0008a04:	e3530000 	cmp	r3, #0
c0008a08:	cafffff2 	bgt	c00089d8 <number+0x374>
	while (size-- > 0)
c0008a0c:	ea000004 	b	c0008a24 <number+0x3c0>
		*str++ = ' ';
c0008a10:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008a14:	e2832001 	add	r2, r3, #1
c0008a18:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008a1c:	e3a02020 	mov	r2, #32
c0008a20:	e5c32000 	strb	r2, [r3]
	while (size-- > 0)
c0008a24:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008a28:	e2432001 	sub	r2, r3, #1
c0008a2c:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c0008a30:	e3530000 	cmp	r3, #0
c0008a34:	cafffff5 	bgt	c0008a10 <number+0x3ac>
	return str;
c0008a38:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
}
c0008a3c:	e1a00003 	mov	r0, r3
c0008a40:	e24bd004 	sub	sp, fp, #4
c0008a44:	e8bd8800 	pop	{fp, pc}

c0008a48 <strnlen>:

/* Forward decl. needed for IP address printing stuff... */
int sprintf(char * buf, const char *fmt, ...);
size_t strnlen(const char * s, size_t count)
{
c0008a48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0008a4c:	e28db000 	add	fp, sp, #0
c0008a50:	e24dd00c 	sub	sp, sp, #12
c0008a54:	e50b0008 	str	r0, [fp, #-8]
c0008a58:	e50b100c 	str	r1, [fp, #-12]
	const char *sc;

	for (sc = s; count-- && *sc != '\0'; ++sc)
c0008a5c:	e51b3008 	ldr	r3, [fp, #-8]
c0008a60:	e50b3004 	str	r3, [fp, #-4]
c0008a64:	ea000002 	b	c0008a74 <strnlen+0x2c>
c0008a68:	e51b3004 	ldr	r3, [fp, #-4]
c0008a6c:	e2833001 	add	r3, r3, #1
c0008a70:	e50b3004 	str	r3, [fp, #-4]
c0008a74:	e51b300c 	ldr	r3, [fp, #-12]
c0008a78:	e2432001 	sub	r2, r3, #1
c0008a7c:	e50b200c 	str	r2, [fp, #-12]
c0008a80:	e3530000 	cmp	r3, #0
c0008a84:	0a000003 	beq	c0008a98 <strnlen+0x50>
c0008a88:	e51b3004 	ldr	r3, [fp, #-4]
c0008a8c:	e5d33000 	ldrb	r3, [r3]
c0008a90:	e3530000 	cmp	r3, #0
c0008a94:	1afffff3 	bne	c0008a68 <strnlen+0x20>
		/* nothing */;
	return sc - s;
c0008a98:	e51b2004 	ldr	r2, [fp, #-4]
c0008a9c:	e51b3008 	ldr	r3, [fp, #-8]
c0008aa0:	e0423003 	sub	r3, r2, r3
}
c0008aa4:	e1a00003 	mov	r0, r3
c0008aa8:	e28bd000 	add	sp, fp, #0
c0008aac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0008ab0:	e12fff1e 	bx	lr

c0008ab4 <vsprintf>:
int vsprintf(char *buf, const char *fmt, va_list args)
{
c0008ab4:	e92d4800 	push	{fp, lr}
c0008ab8:	e28db004 	add	fp, sp, #4
c0008abc:	e24dd044 	sub	sp, sp, #68	; 0x44
c0008ac0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
c0008ac4:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
c0008ac8:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'q' for integer fields */

	for (str=buf ; *fmt ; ++fmt) {
c0008acc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c0008ad0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
c0008ad4:	ea00021b 	b	c0009348 <vsprintf+0x894>
		if (*fmt != '%') {
c0008ad8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008adc:	e5d33000 	ldrb	r3, [r3]
c0008ae0:	e3530025 	cmp	r3, #37	; 0x25
c0008ae4:	0a000006 	beq	c0008b04 <vsprintf+0x50>
			*str++ = *fmt;
c0008ae8:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
c0008aec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008af0:	e2831001 	add	r1, r3, #1
c0008af4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c0008af8:	e5d22000 	ldrb	r2, [r2]
c0008afc:	e5c32000 	strb	r2, [r3]
			continue;
c0008b00:	ea00020d 	b	c000933c <vsprintf+0x888>
		}

		/* process flags */
		flags = 0;
c0008b04:	e3a03000 	mov	r3, #0
c0008b08:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		repeat:
			++fmt;		/* this also skips first '%' */
c0008b0c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008b10:	e2833001 	add	r3, r3, #1
c0008b14:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			switch (*fmt) {
c0008b18:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008b1c:	e5d33000 	ldrb	r3, [r3]
c0008b20:	e2433020 	sub	r3, r3, #32
c0008b24:	e3530010 	cmp	r3, #16
c0008b28:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c0008b2c:	ea000024 	b	c0008bc4 <vsprintf+0x110>
c0008b30:	c0008b94 	mulgt	r0, r4, fp
c0008b34:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b38:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b3c:	c0008ba4 	andgt	r8, r0, r4, lsr #23
c0008b40:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b44:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b48:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b4c:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b50:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b54:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b58:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b5c:	c0008b84 	andgt	r8, r0, r4, lsl #23
c0008b60:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b64:	c0008b74 	andgt	r8, r0, r4, ror fp
c0008b68:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b6c:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b70:	c0008bb4 			; <UNDEFINED> instruction: 0xc0008bb4
				case '-': flags |= LEFT; goto repeat;
c0008b74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b78:	e3833010 	orr	r3, r3, #16
c0008b7c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008b80:	eaffffe1 	b	c0008b0c <vsprintf+0x58>
				case '+': flags |= PLUS; goto repeat;
c0008b84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b88:	e3833004 	orr	r3, r3, #4
c0008b8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008b90:	eaffffdd 	b	c0008b0c <vsprintf+0x58>
				case ' ': flags |= SPACE; goto repeat;
c0008b94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b98:	e3833008 	orr	r3, r3, #8
c0008b9c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008ba0:	eaffffd9 	b	c0008b0c <vsprintf+0x58>
				case '#': flags |= SPECIAL; goto repeat;
c0008ba4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008ba8:	e3833020 	orr	r3, r3, #32
c0008bac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008bb0:	eaffffd5 	b	c0008b0c <vsprintf+0x58>
				case '0': flags |= ZEROPAD; goto repeat;
c0008bb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008bb8:	e3833001 	orr	r3, r3, #1
c0008bbc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008bc0:	eaffffd1 	b	c0008b0c <vsprintf+0x58>
				}

		/* get field width */
		field_width = -1;
c0008bc4:	e3e03000 	mvn	r3, #0
c0008bc8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		if (is_digit(*fmt))
c0008bcc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008bd0:	e5d33000 	ldrb	r3, [r3]
c0008bd4:	e353002f 	cmp	r3, #47	; 0x2f
c0008bd8:	9a000008 	bls	c0008c00 <vsprintf+0x14c>
c0008bdc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008be0:	e5d33000 	ldrb	r3, [r3]
c0008be4:	e3530039 	cmp	r3, #57	; 0x39
c0008be8:	8a000004 	bhi	c0008c00 <vsprintf+0x14c>
			field_width = skip_atoi(&fmt);
c0008bec:	e24b303c 	sub	r3, fp, #60	; 0x3c
c0008bf0:	e1a00003 	mov	r0, r3
c0008bf4:	ebfffe75 	bl	c00085d0 <skip_atoi>
c0008bf8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
c0008bfc:	ea000014 	b	c0008c54 <vsprintf+0x1a0>
		else if (*fmt == '*') {
c0008c00:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c04:	e5d33000 	ldrb	r3, [r3]
c0008c08:	e353002a 	cmp	r3, #42	; 0x2a
c0008c0c:	1a000010 	bne	c0008c54 <vsprintf+0x1a0>
			++fmt;
c0008c10:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c14:	e2833001 	add	r3, r3, #1
c0008c18:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			/* it's the next argument */
			field_width = va_arg(args, int);
c0008c1c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008c20:	e2832004 	add	r2, r3, #4
c0008c24:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008c28:	e5933000 	ldr	r3, [r3]
c0008c2c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			if (field_width < 0) {
c0008c30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008c34:	e3530000 	cmp	r3, #0
c0008c38:	aa000005 	bge	c0008c54 <vsprintf+0x1a0>
				field_width = -field_width;
c0008c3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008c40:	e2633000 	rsb	r3, r3, #0
c0008c44:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
				flags |= LEFT;
c0008c48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008c4c:	e3833010 	orr	r3, r3, #16
c0008c50:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			}
		}

		/* get the precision */
		precision = -1;
c0008c54:	e3e03000 	mvn	r3, #0
c0008c58:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		if (*fmt == '.') {
c0008c5c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c60:	e5d33000 	ldrb	r3, [r3]
c0008c64:	e353002e 	cmp	r3, #46	; 0x2e
c0008c68:	1a000020 	bne	c0008cf0 <vsprintf+0x23c>
			++fmt;
c0008c6c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c70:	e2833001 	add	r3, r3, #1
c0008c74:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			if (is_digit(*fmt))
c0008c78:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c7c:	e5d33000 	ldrb	r3, [r3]
c0008c80:	e353002f 	cmp	r3, #47	; 0x2f
c0008c84:	9a000008 	bls	c0008cac <vsprintf+0x1f8>
c0008c88:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c8c:	e5d33000 	ldrb	r3, [r3]
c0008c90:	e3530039 	cmp	r3, #57	; 0x39
c0008c94:	8a000004 	bhi	c0008cac <vsprintf+0x1f8>
				precision = skip_atoi(&fmt);
c0008c98:	e24b303c 	sub	r3, fp, #60	; 0x3c
c0008c9c:	e1a00003 	mov	r0, r3
c0008ca0:	ebfffe4a 	bl	c00085d0 <skip_atoi>
c0008ca4:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
c0008ca8:	ea00000b 	b	c0008cdc <vsprintf+0x228>
			else if (*fmt == '*') {
c0008cac:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cb0:	e5d33000 	ldrb	r3, [r3]
c0008cb4:	e353002a 	cmp	r3, #42	; 0x2a
c0008cb8:	1a000007 	bne	c0008cdc <vsprintf+0x228>
				++fmt;
c0008cbc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cc0:	e2833001 	add	r3, r3, #1
c0008cc4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
				/* it's the next argument */
				precision = va_arg(args, int);
c0008cc8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008ccc:	e2832004 	add	r2, r3, #4
c0008cd0:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008cd4:	e5933000 	ldr	r3, [r3]
c0008cd8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
			}
			if (precision < 0)
c0008cdc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0008ce0:	e3530000 	cmp	r3, #0
c0008ce4:	aa000001 	bge	c0008cf0 <vsprintf+0x23c>
				precision = 0;
c0008ce8:	e3a03000 	mov	r3, #0
c0008cec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		}

		/* get the conversion qualifier */
		qualifier = -1;
c0008cf0:	e3e03000 	mvn	r3, #0
c0008cf4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
c0008cf8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cfc:	e5d33000 	ldrb	r3, [r3]
c0008d00:	e3530068 	cmp	r3, #104	; 0x68
c0008d04:	0a000017 	beq	c0008d68 <vsprintf+0x2b4>
c0008d08:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d0c:	e5d33000 	ldrb	r3, [r3]
c0008d10:	e353006c 	cmp	r3, #108	; 0x6c
c0008d14:	0a000013 	beq	c0008d68 <vsprintf+0x2b4>
c0008d18:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d1c:	e5d33000 	ldrb	r3, [r3]
c0008d20:	e353004c 	cmp	r3, #76	; 0x4c
c0008d24:	0a00000f 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d28:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d2c:	e5d33000 	ldrb	r3, [r3]
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
c0008d30:	e353005a 	cmp	r3, #90	; 0x5a
c0008d34:	0a00000b 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d38:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d3c:	e5d33000 	ldrb	r3, [r3]
c0008d40:	e353007a 	cmp	r3, #122	; 0x7a
c0008d44:	0a000007 	beq	c0008d68 <vsprintf+0x2b4>
c0008d48:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d4c:	e5d33000 	ldrb	r3, [r3]
c0008d50:	e3530074 	cmp	r3, #116	; 0x74
c0008d54:	0a000003 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'q' ) {
c0008d58:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d5c:	e5d33000 	ldrb	r3, [r3]
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d60:	e3530071 	cmp	r3, #113	; 0x71
c0008d64:	1a000012 	bne	c0008db4 <vsprintf+0x300>
			qualifier = *fmt;
c0008d68:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d6c:	e5d33000 	ldrb	r3, [r3]
c0008d70:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
			if (qualifier == 'l' && *(fmt+1) == 'l') {
c0008d74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0008d78:	e353006c 	cmp	r3, #108	; 0x6c
c0008d7c:	1a000009 	bne	c0008da8 <vsprintf+0x2f4>
c0008d80:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d84:	e2833001 	add	r3, r3, #1
c0008d88:	e5d33000 	ldrb	r3, [r3]
c0008d8c:	e353006c 	cmp	r3, #108	; 0x6c
c0008d90:	1a000004 	bne	c0008da8 <vsprintf+0x2f4>
				qualifier = 'q';
c0008d94:	e3a03071 	mov	r3, #113	; 0x71
c0008d98:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
				++fmt;
c0008d9c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008da0:	e2833001 	add	r3, r3, #1
c0008da4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			}
			++fmt;
c0008da8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008dac:	e2833001 	add	r3, r3, #1
c0008db0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
		}

		/* default base */
		base = 10;
c0008db4:	e3a0300a 	mov	r3, #10
c0008db8:	e50b3010 	str	r3, [fp, #-16]

		switch (*fmt) {
c0008dbc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008dc0:	e5d33000 	ldrb	r3, [r3]
c0008dc4:	e2433025 	sub	r3, r3, #37	; 0x25
c0008dc8:	e3530053 	cmp	r3, #83	; 0x53
c0008dcc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c0008dd0:	ea0000fc 	b	c00091c8 <vsprintf+0x714>
c0008dd4:	c000917c 	andgt	r9, r0, ip, ror r1
c0008dd8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ddc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008dec:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008dfc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e00:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e04:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e08:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e0c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e10:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e14:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e18:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e1c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e20:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e24:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e28:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e2c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e30:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e34:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e38:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e3c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e40:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e44:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e48:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e4c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e50:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e54:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e58:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e5c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e60:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e64:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e68:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e6c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e70:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e74:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e78:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e7c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e80:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e84:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e88:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e8c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e90:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e94:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e98:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e9c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ea0:	c00091a0 	andgt	r9, r0, r0, lsr #3
c0008ea4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ea8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eac:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ebc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ecc:	c0008f24 	andgt	r8, r0, r4, lsr #30
c0008ed0:	c00091b8 			; <UNDEFINED> instruction: 0xc00091b8
c0008ed4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ed8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008edc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ee0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ee4:	c00091b8 			; <UNDEFINED> instruction: 0xc00091b8
c0008ee8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eec:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef8:	c0009118 	andgt	r9, r0, r8, lsl r1
c0008efc:	c0009194 	mulgt	r0, r4, r1
c0008f00:	c00090bc 	strhgt	r9, [r0], -ip
c0008f04:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f08:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f0c:	c0008fbc 			; <UNDEFINED> instruction: 0xc0008fbc
c0008f10:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f14:	c0009218 	andgt	r9, r0, r8, lsl r2
c0008f18:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f1c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f20:	c00091ac 	andgt	r9, r0, ip, lsr #3
		case 'c':
			if (!(flags & LEFT))
c0008f24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008f28:	e2033010 	and	r3, r3, #16
c0008f2c:	e3530000 	cmp	r3, #0
c0008f30:	1a00000b 	bne	c0008f64 <vsprintf+0x4b0>
				while (--field_width > 0)
c0008f34:	ea000004 	b	c0008f4c <vsprintf+0x498>
					*str++ = ' ';
c0008f38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f3c:	e2832001 	add	r2, r3, #1
c0008f40:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f44:	e3a02020 	mov	r2, #32
c0008f48:	e5c32000 	strb	r2, [r3]
				while (--field_width > 0)
c0008f4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008f50:	e2433001 	sub	r3, r3, #1
c0008f54:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
c0008f58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008f5c:	e3530000 	cmp	r3, #0
c0008f60:	cafffff4 	bgt	c0008f38 <vsprintf+0x484>
			*str++ = (unsigned char) va_arg(args, int);
c0008f64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008f68:	e2832004 	add	r2, r3, #4
c0008f6c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008f70:	e5931000 	ldr	r1, [r3]
c0008f74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f78:	e2832001 	add	r2, r3, #1
c0008f7c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f80:	e6ef2071 	uxtb	r2, r1
c0008f84:	e5c32000 	strb	r2, [r3]
			while (--field_width > 0)
c0008f88:	ea000004 	b	c0008fa0 <vsprintf+0x4ec>
				*str++ = ' ';
c0008f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f90:	e2832001 	add	r2, r3, #1
c0008f94:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f98:	e3a02020 	mov	r2, #32
c0008f9c:	e5c32000 	strb	r2, [r3]
			while (--field_width > 0)
c0008fa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008fa4:	e2433001 	sub	r3, r3, #1
c0008fa8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
c0008fac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008fb0:	e3530000 	cmp	r3, #0
c0008fb4:	cafffff4 	bgt	c0008f8c <vsprintf+0x4d8>
			continue;
c0008fb8:	ea0000df 	b	c000933c <vsprintf+0x888>

		case 's':
			s = va_arg(args, char *);
c0008fbc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008fc0:	e2832004 	add	r2, r3, #4
c0008fc4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008fc8:	e5933000 	ldr	r3, [r3]
c0008fcc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			if (!s)
c0008fd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008fd4:	e3530000 	cmp	r3, #0
c0008fd8:	1a000002 	bne	c0008fe8 <vsprintf+0x534>
				s = "<NULL>";
c0008fdc:	e3093d60 	movw	r3, #40288	; 0x9d60
c0008fe0:	e34c3000 	movt	r3, #49152	; 0xc000
c0008fe4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

			len = strnlen(s, precision);
c0008fe8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0008fec:	e1a01003 	mov	r1, r3
c0008ff0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
c0008ff4:	ebfffe93 	bl	c0008a48 <strnlen>
c0008ff8:	e1a03000 	mov	r3, r0
c0008ffc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

			if (!(flags & LEFT))
c0009000:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0009004:	e2033010 	and	r3, r3, #16
c0009008:	e3530000 	cmp	r3, #0
c000900c:	1a00000b 	bne	c0009040 <vsprintf+0x58c>
				while (len < field_width--)
c0009010:	ea000004 	b	c0009028 <vsprintf+0x574>
					*str++ = ' ';
c0009014:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009018:	e2832001 	add	r2, r3, #1
c000901c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009020:	e3a02020 	mov	r2, #32
c0009024:	e5c32000 	strb	r2, [r3]
				while (len < field_width--)
c0009028:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c000902c:	e2432001 	sub	r2, r3, #1
c0009030:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
c0009034:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
c0009038:	e1520003 	cmp	r2, r3
c000903c:	bafffff4 	blt	c0009014 <vsprintf+0x560>
			for (i = 0; i < len; ++i)
c0009040:	e3a03000 	mov	r3, #0
c0009044:	e50b300c 	str	r3, [fp, #-12]
c0009048:	ea00000a 	b	c0009078 <vsprintf+0x5c4>
				*str++ = *s++;
c000904c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
c0009050:	e2823001 	add	r3, r2, #1
c0009054:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
c0009058:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000905c:	e2831001 	add	r1, r3, #1
c0009060:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c0009064:	e5d22000 	ldrb	r2, [r2]
c0009068:	e5c32000 	strb	r2, [r3]
			for (i = 0; i < len; ++i)
c000906c:	e51b300c 	ldr	r3, [fp, #-12]
c0009070:	e2833001 	add	r3, r3, #1
c0009074:	e50b300c 	str	r3, [fp, #-12]
c0009078:	e51b200c 	ldr	r2, [fp, #-12]
c000907c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
c0009080:	e1520003 	cmp	r2, r3
c0009084:	bafffff0 	blt	c000904c <vsprintf+0x598>
			while (len < field_width--)
c0009088:	ea000004 	b	c00090a0 <vsprintf+0x5ec>
				*str++ = ' ';
c000908c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009090:	e2832001 	add	r2, r3, #1
c0009094:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009098:	e3a02020 	mov	r2, #32
c000909c:	e5c32000 	strb	r2, [r3]
			while (len < field_width--)
c00090a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c00090a4:	e2432001 	sub	r2, r3, #1
c00090a8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
c00090ac:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
c00090b0:	e1520003 	cmp	r2, r3
c00090b4:	bafffff4 	blt	c000908c <vsprintf+0x5d8>
			continue;
c00090b8:	ea00009f 	b	c000933c <vsprintf+0x888>

		case 'p':
			if (field_width == -1) {
c00090bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c00090c0:	e3730001 	cmn	r3, #1
c00090c4:	1a000004 	bne	c00090dc <vsprintf+0x628>
				field_width = 2*sizeof(void *);
c00090c8:	e3a03008 	mov	r3, #8
c00090cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
				flags |= ZEROPAD;
c00090d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00090d4:	e3833001 	orr	r3, r3, #1
c00090d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			}
			str = number(str,
				(unsigned long) va_arg(args, void *), 16,
c00090dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00090e0:	e2832004 	add	r2, r3, #4
c00090e4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00090e8:	e5933000 	ldr	r3, [r3]
			str = number(str,
c00090ec:	e1a01003 	mov	r1, r3
c00090f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00090f4:	e58d3004 	str	r3, [sp, #4]
c00090f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c00090fc:	e58d3000 	str	r3, [sp]
c0009100:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0009104:	e3a02010 	mov	r2, #16
c0009108:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
c000910c:	ebfffd54 	bl	c0008664 <number>
c0009110:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
				field_width, precision, flags);
			continue;
c0009114:	ea000088 	b	c000933c <vsprintf+0x888>


		case 'n':
			if (qualifier == 'l') {
c0009118:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c000911c:	e353006c 	cmp	r3, #108	; 0x6c
c0009120:	1a00000a 	bne	c0009150 <vsprintf+0x69c>
				long * ip = va_arg(args, long *);
c0009124:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009128:	e2832004 	add	r2, r3, #4
c000912c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009130:	e5933000 	ldr	r3, [r3]
c0009134:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
				*ip = (str - buf);
c0009138:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c000913c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c0009140:	e0422003 	sub	r2, r2, r3
c0009144:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
c0009148:	e5832000 	str	r2, [r3]
			} else {
				int * ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
c000914c:	ea00007a 	b	c000933c <vsprintf+0x888>
				int * ip = va_arg(args, int *);
c0009150:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009154:	e2832004 	add	r2, r3, #4
c0009158:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c000915c:	e5933000 	ldr	r3, [r3]
c0009160:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
				*ip = (str - buf);
c0009164:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c0009168:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c000916c:	e0422003 	sub	r2, r2, r3
c0009170:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
c0009174:	e5832000 	str	r2, [r3]
			continue;
c0009178:	ea00006f 	b	c000933c <vsprintf+0x888>

		case '%':
			*str++ = '%';
c000917c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009180:	e2832001 	add	r2, r3, #1
c0009184:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009188:	e3a02025 	mov	r2, #37	; 0x25
c000918c:	e5c32000 	strb	r2, [r3]
			continue;
c0009190:	ea000069 	b	c000933c <vsprintf+0x888>

		/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
c0009194:	e3a03008 	mov	r3, #8
c0009198:	e50b3010 	str	r3, [fp, #-16]
			break;
c000919c:	ea00001e 	b	c000921c <vsprintf+0x768>

		case 'X':
			flags |= LARGE;
c00091a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00091a4:	e3833040 	orr	r3, r3, #64	; 0x40
c00091a8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		case 'x':
			base = 16;
c00091ac:	e3a03010 	mov	r3, #16
c00091b0:	e50b3010 	str	r3, [fp, #-16]
			break;
c00091b4:	ea000018 	b	c000921c <vsprintf+0x768>

		case 'd':
		case 'i':
			flags |= SIGN;
c00091b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00091bc:	e3833002 	orr	r3, r3, #2
c00091c0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		case 'u':
			break;
c00091c4:	ea000013 	b	c0009218 <vsprintf+0x764>

		default:
			*str++ = '%';
c00091c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c00091cc:	e2832001 	add	r2, r3, #1
c00091d0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c00091d4:	e3a02025 	mov	r2, #37	; 0x25
c00091d8:	e5c32000 	strb	r2, [r3]
			if (*fmt)
c00091dc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c00091e0:	e5d33000 	ldrb	r3, [r3]
c00091e4:	e3530000 	cmp	r3, #0
c00091e8:	0a000006 	beq	c0009208 <vsprintf+0x754>
				*str++ = *fmt;
c00091ec:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
c00091f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c00091f4:	e2831001 	add	r1, r3, #1
c00091f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c00091fc:	e5d22000 	ldrb	r2, [r2]
c0009200:	e5c32000 	strb	r2, [r3]
			else
				--fmt;
			continue;
c0009204:	ea00004c 	b	c000933c <vsprintf+0x888>
				--fmt;
c0009208:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c000920c:	e2433001 	sub	r3, r3, #1
c0009210:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			continue;
c0009214:	ea000048 	b	c000933c <vsprintf+0x888>
			break;
c0009218:	e320f000 	nop	{0}
#ifdef CFG_64BIT_VSPRINTF
		if (qualifier == 'q')  /* "quad" for 64 bit variables */
			num = va_arg(args, unsigned long long);
		else
#endif
		if (qualifier == 'l') {
c000921c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009220:	e353006c 	cmp	r3, #108	; 0x6c
c0009224:	1a000005 	bne	c0009240 <vsprintf+0x78c>
			num = va_arg(args, unsigned long);
c0009228:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c000922c:	e2832004 	add	r2, r3, #4
c0009230:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009234:	e5933000 	ldr	r3, [r3]
c0009238:	e50b3008 	str	r3, [fp, #-8]
c000923c:	ea000034 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 'Z' || qualifier == 'z') {
c0009240:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009244:	e353005a 	cmp	r3, #90	; 0x5a
c0009248:	0a000002 	beq	c0009258 <vsprintf+0x7a4>
c000924c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009250:	e353007a 	cmp	r3, #122	; 0x7a
c0009254:	1a000005 	bne	c0009270 <vsprintf+0x7bc>
			num = va_arg(args, size_t);
c0009258:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c000925c:	e2832004 	add	r2, r3, #4
c0009260:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009264:	e5933000 	ldr	r3, [r3]
c0009268:	e50b3008 	str	r3, [fp, #-8]
c000926c:	ea000028 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 't') {
c0009270:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009274:	e3530074 	cmp	r3, #116	; 0x74
c0009278:	1a000005 	bne	c0009294 <vsprintf+0x7e0>
			num = va_arg(args, long);
c000927c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009280:	e2832004 	add	r2, r3, #4
c0009284:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009288:	e5933000 	ldr	r3, [r3]
c000928c:	e50b3008 	str	r3, [fp, #-8]
c0009290:	ea00001f 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 'h') {
c0009294:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009298:	e3530068 	cmp	r3, #104	; 0x68
c000929c:	1a00000d 	bne	c00092d8 <vsprintf+0x824>
			num = (unsigned short) va_arg(args, int);
c00092a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00092a4:	e2832004 	add	r2, r3, #4
c00092a8:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00092ac:	e5933000 	ldr	r3, [r3]
c00092b0:	e6ff3073 	uxth	r3, r3
c00092b4:	e50b3008 	str	r3, [fp, #-8]
			if (flags & SIGN)
c00092b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00092bc:	e2033002 	and	r3, r3, #2
c00092c0:	e3530000 	cmp	r3, #0
c00092c4:	0a000012 	beq	c0009314 <vsprintf+0x860>
				num = (short) num;
c00092c8:	e51b3008 	ldr	r3, [fp, #-8]
c00092cc:	e6bf3073 	sxth	r3, r3
c00092d0:	e50b3008 	str	r3, [fp, #-8]
c00092d4:	ea00000e 	b	c0009314 <vsprintf+0x860>
		} else if (flags & SIGN)
c00092d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00092dc:	e2033002 	and	r3, r3, #2
c00092e0:	e3530000 	cmp	r3, #0
c00092e4:	0a000005 	beq	c0009300 <vsprintf+0x84c>
			num = va_arg(args, int);
c00092e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00092ec:	e2832004 	add	r2, r3, #4
c00092f0:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00092f4:	e5933000 	ldr	r3, [r3]
c00092f8:	e50b3008 	str	r3, [fp, #-8]
c00092fc:	ea000004 	b	c0009314 <vsprintf+0x860>
		else
			num = va_arg(args, unsigned int);
c0009300:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009304:	e2832004 	add	r2, r3, #4
c0009308:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c000930c:	e5933000 	ldr	r3, [r3]
c0009310:	e50b3008 	str	r3, [fp, #-8]
		str = number(str, num, base, field_width, precision, flags);
c0009314:	e51b1008 	ldr	r1, [fp, #-8]
c0009318:	e51b2010 	ldr	r2, [fp, #-16]
c000931c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0009320:	e58d3004 	str	r3, [sp, #4]
c0009324:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0009328:	e58d3000 	str	r3, [sp]
c000932c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0009330:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
c0009334:	ebfffcca 	bl	c0008664 <number>
c0009338:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
	for (str=buf ; *fmt ; ++fmt) {
c000933c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0009340:	e2833001 	add	r3, r3, #1
c0009344:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
c0009348:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c000934c:	e5d33000 	ldrb	r3, [r3]
c0009350:	e3530000 	cmp	r3, #0
c0009354:	1afffddf 	bne	c0008ad8 <vsprintf+0x24>
	}
	*str = '\0';
c0009358:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000935c:	e3a02000 	mov	r2, #0
c0009360:	e5c32000 	strb	r2, [r3]
	return str-buf;
c0009364:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c0009368:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c000936c:	e0423003 	sub	r3, r2, r3
}
c0009370:	e1a00003 	mov	r0, r3
c0009374:	e24bd004 	sub	sp, fp, #4
c0009378:	e8bd8800 	pop	{fp, pc}

c000937c <sprintf>:

int sprintf(char * buf, const char *fmt, ...)
{
c000937c:	e92d000e 	push	{r1, r2, r3}
c0009380:	e92d4800 	push	{fp, lr}
c0009384:	e28db004 	add	fp, sp, #4
c0009388:	e24dd00c 	sub	sp, sp, #12
c000938c:	e50b0010 	str	r0, [fp, #-16]
	va_list args;
	int i;

	va_start(args, fmt);
c0009390:	e28b3008 	add	r3, fp, #8
c0009394:	e50b300c 	str	r3, [fp, #-12]
	i=vsprintf(buf,fmt,args);
c0009398:	e51b300c 	ldr	r3, [fp, #-12]
c000939c:	e1a02003 	mov	r2, r3
c00093a0:	e59b1004 	ldr	r1, [fp, #4]
c00093a4:	e51b0010 	ldr	r0, [fp, #-16]
c00093a8:	ebfffdc1 	bl	c0008ab4 <vsprintf>
c00093ac:	e50b0008 	str	r0, [fp, #-8]
	va_end(args);
	return i;
c00093b0:	e51b3008 	ldr	r3, [fp, #-8]
}
c00093b4:	e1a00003 	mov	r0, r3
c00093b8:	e24bd004 	sub	sp, fp, #4
c00093bc:	e8bd4800 	pop	{fp, lr}
c00093c0:	e28dd00c 	add	sp, sp, #12
c00093c4:	e12fff1e 	bx	lr

c00093c8 <printf>:

void printf (const char *fmt, ...)
{
c00093c8:	e92d000f 	push	{r0, r1, r2, r3}
c00093cc:	e92d4800 	push	{fp, lr}
c00093d0:	e28db004 	add	fp, sp, #4
c00093d4:	e24dd068 	sub	sp, sp, #104	; 0x68
	va_list args;
	char printbuffer[100];
	va_start (args, fmt);
c00093d8:	e28b3008 	add	r3, fp, #8
c00093dc:	e50b3008 	str	r3, [fp, #-8]

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	vsprintf (printbuffer, fmt, args);
c00093e0:	e51b2008 	ldr	r2, [fp, #-8]
c00093e4:	e24b306c 	sub	r3, fp, #108	; 0x6c
c00093e8:	e59b1004 	ldr	r1, [fp, #4]
c00093ec:	e1a00003 	mov	r0, r3
c00093f0:	ebfffdaf 	bl	c0008ab4 <vsprintf>
	va_end (args);
	__uart_puts (printbuffer);
c00093f4:	e24b306c 	sub	r3, fp, #108	; 0x6c
c00093f8:	e1a00003 	mov	r0, r3
c00093fc:	eb000096 	bl	c000965c <__uart_puts>
}
c0009400:	e320f000 	nop	{0}
c0009404:	e24bd004 	sub	sp, fp, #4
c0009408:	e8bd4800 	pop	{fp, lr}
c000940c:	e28dd010 	add	sp, sp, #16
c0009410:	e12fff1e 	bx	lr

c0009414 <__uart_init>:
#include "stm32mp1xx_gpio.h"
#include "stm32mp1xx_uart.h"
// UART4_TX : PG11  AF6
// UART4_RX : PB2   AF8
void __uart_init()
{
c0009414:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009418:	e28db000 	add	fp, sp, #0
   	// GPIOB2 设置为复用功能
   	GPIOB->MODER &= (~(0x3 << 4));
c000941c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009420:	e3453000 	movt	r3, #20480	; 0x5000
c0009424:	e5932000 	ldr	r2, [r3]
c0009428:	e3a03a03 	mov	r3, #12288	; 0x3000
c000942c:	e3453000 	movt	r3, #20480	; 0x5000
c0009430:	e3c22030 	bic	r2, r2, #48	; 0x30
c0009434:	e5832000 	str	r2, [r3]
   	GPIOB->MODER |= (0x2 << 4);
c0009438:	e3a03a03 	mov	r3, #12288	; 0x3000
c000943c:	e3453000 	movt	r3, #20480	; 0x5000
c0009440:	e5932000 	ldr	r2, [r3]
c0009444:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009448:	e3453000 	movt	r3, #20480	; 0x5000
c000944c:	e3822020 	orr	r2, r2, #32
c0009450:	e5832000 	str	r2, [r3]
	GPIOB->AFRL &= (~(0xF << 8));
c0009454:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009458:	e3453000 	movt	r3, #20480	; 0x5000
c000945c:	e5932020 	ldr	r2, [r3, #32]
c0009460:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009464:	e3453000 	movt	r3, #20480	; 0x5000
c0009468:	e3c22c0f 	bic	r2, r2, #3840	; 0xf00
c000946c:	e5832020 	str	r2, [r3, #32]
	GPIOB->AFRL |= (0x8 << 8);
c0009470:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009474:	e3453000 	movt	r3, #20480	; 0x5000
c0009478:	e5932020 	ldr	r2, [r3, #32]
c000947c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009480:	e3453000 	movt	r3, #20480	; 0x5000
c0009484:	e3822b02 	orr	r2, r2, #2048	; 0x800
c0009488:	e5832020 	str	r2, [r3, #32]
	// GPIOG11 设置为复用功能 
	GPIOG->MODER &= (~(0x3 << 22));
c000948c:	e3a03902 	mov	r3, #32768	; 0x8000
c0009490:	e3453000 	movt	r3, #20480	; 0x5000
c0009494:	e5932000 	ldr	r2, [r3]
c0009498:	e3a03902 	mov	r3, #32768	; 0x8000
c000949c:	e3453000 	movt	r3, #20480	; 0x5000
c00094a0:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
c00094a4:	e5832000 	str	r2, [r3]
	GPIOG->MODER |= (0x2 << 4);
c00094a8:	e3a03902 	mov	r3, #32768	; 0x8000
c00094ac:	e3453000 	movt	r3, #20480	; 0x5000
c00094b0:	e5932000 	ldr	r2, [r3]
c00094b4:	e3a03902 	mov	r3, #32768	; 0x8000
c00094b8:	e3453000 	movt	r3, #20480	; 0x5000
c00094bc:	e3822020 	orr	r2, r2, #32
c00094c0:	e5832000 	str	r2, [r3]
	GPIOG->AFRH &= (~(0xF << 12));
c00094c4:	e3a03902 	mov	r3, #32768	; 0x8000
c00094c8:	e3453000 	movt	r3, #20480	; 0x5000
c00094cc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00094d0:	e3a03902 	mov	r3, #32768	; 0x8000
c00094d4:	e3453000 	movt	r3, #20480	; 0x5000
c00094d8:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
c00094dc:	e5832024 	str	r2, [r3, #36]	; 0x24
	GPIOG->AFRH |= (0x6 << 12);
c00094e0:	e3a03902 	mov	r3, #32768	; 0x8000
c00094e4:	e3453000 	movt	r3, #20480	; 0x5000
c00094e8:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00094ec:	e3a03902 	mov	r3, #32768	; 0x8000
c00094f0:	e3453000 	movt	r3, #20480	; 0x5000
c00094f4:	e3822a06 	orr	r2, r2, #24576	; 0x6000
c00094f8:	e5832024 	str	r2, [r3, #36]	; 0x24
	// 设置数据长度为8位   USART_CR1  
	USART4->CR1 &= (~(0x1 << 28));
c00094fc:	e3a03000 	mov	r3, #0
c0009500:	e3443001 	movt	r3, #16385	; 0x4001
c0009504:	e5932000 	ldr	r2, [r3]
c0009508:	e3a03000 	mov	r3, #0
c000950c:	e3443001 	movt	r3, #16385	; 0x4001
c0009510:	e3c22201 	bic	r2, r2, #268435456	; 0x10000000
c0009514:	e5832000 	str	r2, [r3]
	USART4->CR1 &= (~(0x1 << 12));
c0009518:	e3a03000 	mov	r3, #0
c000951c:	e3443001 	movt	r3, #16385	; 0x4001
c0009520:	e5932000 	ldr	r2, [r3]
c0009524:	e3a03000 	mov	r3, #0
c0009528:	e3443001 	movt	r3, #16385	; 0x4001
c000952c:	e3c22a01 	bic	r2, r2, #4096	; 0x1000
c0009530:	e5832000 	str	r2, [r3]
	// 采样率为16位 
	USART4->CR1 &= (~(0x1 << 15));
c0009534:	e3a03000 	mov	r3, #0
c0009538:	e3443001 	movt	r3, #16385	; 0x4001
c000953c:	e5932000 	ldr	r2, [r3]
c0009540:	e3a03000 	mov	r3, #0
c0009544:	e3443001 	movt	r3, #16385	; 0x4001
c0009548:	e3c22902 	bic	r2, r2, #32768	; 0x8000
c000954c:	e5832000 	str	r2, [r3]
	// 设置波特率为115200bps 
	USART4->PRESC &= (~(0xF << 0));
c0009550:	e3a03000 	mov	r3, #0
c0009554:	e3443001 	movt	r3, #16385	; 0x4001
c0009558:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
c000955c:	e3a03000 	mov	r3, #0
c0009560:	e3443001 	movt	r3, #16385	; 0x4001
c0009564:	e3c2200f 	bic	r2, r2, #15
c0009568:	e583202c 	str	r2, [r3, #44]	; 0x2c
	USART4->BRR = 0xD0;
c000956c:	e3a03000 	mov	r3, #0
c0009570:	e3443001 	movt	r3, #16385	; 0x4001
c0009574:	e3a020d0 	mov	r2, #208	; 0xd0
c0009578:	e583200c 	str	r2, [r3, #12]
	// 停止位1位
	USART4->CR2 &= (~(0x3 << 12));
c000957c:	e3a03000 	mov	r3, #0
c0009580:	e3443001 	movt	r3, #16385	; 0x4001
c0009584:	e5932004 	ldr	r2, [r3, #4]
c0009588:	e3a03000 	mov	r3, #0
c000958c:	e3443001 	movt	r3, #16385	; 0x4001
c0009590:	e3c22a03 	bic	r2, r2, #12288	; 0x3000
c0009594:	e5832004 	str	r2, [r3, #4]
	// 使能USART串口 
	USART4->CR1 |= (0x1 << 0);
c0009598:	e3a03000 	mov	r3, #0
c000959c:	e3443001 	movt	r3, #16385	; 0x4001
c00095a0:	e5932000 	ldr	r2, [r3]
c00095a4:	e3a03000 	mov	r3, #0
c00095a8:	e3443001 	movt	r3, #16385	; 0x4001
c00095ac:	e3822001 	orr	r2, r2, #1
c00095b0:	e5832000 	str	r2, [r3]
	// 使能USART的发送或者接收功能 
	USART4->CR1 |= (0x1 << 3);
c00095b4:	e3a03000 	mov	r3, #0
c00095b8:	e3443001 	movt	r3, #16385	; 0x4001
c00095bc:	e5932000 	ldr	r2, [r3]
c00095c0:	e3a03000 	mov	r3, #0
c00095c4:	e3443001 	movt	r3, #16385	; 0x4001
c00095c8:	e3822008 	orr	r2, r2, #8
c00095cc:	e5832000 	str	r2, [r3]
	USART4->CR1 |= (0x1 << 2);
c00095d0:	e3a03000 	mov	r3, #0
c00095d4:	e3443001 	movt	r3, #16385	; 0x4001
c00095d8:	e5932000 	ldr	r2, [r3]
c00095dc:	e3a03000 	mov	r3, #0
c00095e0:	e3443001 	movt	r3, #16385	; 0x4001
c00095e4:	e3822004 	orr	r2, r2, #4
c00095e8:	e5832000 	str	r2, [r3]

}
c00095ec:	e320f000 	nop	{0}
c00095f0:	e28bd000 	add	sp, fp, #0
c00095f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00095f8:	e12fff1e 	bx	lr

c00095fc <__uart_putc>:

void __uart_putc(const char data)
{
c00095fc:	e92d4800 	push	{fp, lr}
c0009600:	e28db004 	add	fp, sp, #4
c0009604:	e24dd004 	sub	sp, sp, #4
c0009608:	e1a03000 	mov	r3, r0
c000960c:	e54b3008 	strb	r3, [fp, #-8]
	while (!(USART4->ISR & (0x1 << 7)));
c0009610:	e320f000 	nop	{0}
c0009614:	e3a03000 	mov	r3, #0
c0009618:	e3443001 	movt	r3, #16385	; 0x4001
c000961c:	e593301c 	ldr	r3, [r3, #28]
c0009620:	e2033080 	and	r3, r3, #128	; 0x80
c0009624:	e3530000 	cmp	r3, #0
c0009628:	0afffff9 	beq	c0009614 <__uart_putc+0x18>
	USART4->TDR = data;
c000962c:	e3a03000 	mov	r3, #0
c0009630:	e3443001 	movt	r3, #16385	; 0x4001
c0009634:	e55b2008 	ldrb	r2, [fp, #-8]
c0009638:	e5832028 	str	r2, [r3, #40]	; 0x28
	if (data == '\n')
c000963c:	e55b3008 	ldrb	r3, [fp, #-8]
c0009640:	e353000a 	cmp	r3, #10
c0009644:	1a000001 	bne	c0009650 <__uart_putc+0x54>
		__uart_putc('\r');
c0009648:	e3a0000d 	mov	r0, #13
c000964c:	ebffffea 	bl	c00095fc <__uart_putc>
}
c0009650:	e320f000 	nop	{0}
c0009654:	e24bd004 	sub	sp, fp, #4
c0009658:	e8bd8800 	pop	{fp, pc}

c000965c <__uart_puts>:
void __uart_puts(const  char  *pstr)
{
c000965c:	e92d4800 	push	{fp, lr}
c0009660:	e28db004 	add	fp, sp, #4
c0009664:	e24dd004 	sub	sp, sp, #4
c0009668:	e50b0008 	str	r0, [fp, #-8]
	while(*pstr != '\0')
c000966c:	ea000005 	b	c0009688 <__uart_puts+0x2c>
		__uart_putc(*pstr++);
c0009670:	e51b3008 	ldr	r3, [fp, #-8]
c0009674:	e2832001 	add	r2, r3, #1
c0009678:	e50b2008 	str	r2, [fp, #-8]
c000967c:	e5d33000 	ldrb	r3, [r3]
c0009680:	e1a00003 	mov	r0, r3
c0009684:	ebffffdc 	bl	c00095fc <__uart_putc>
	while(*pstr != '\0')
c0009688:	e51b3008 	ldr	r3, [fp, #-8]
c000968c:	e5d33000 	ldrb	r3, [r3]
c0009690:	e3530000 	cmp	r3, #0
c0009694:	1afffff5 	bne	c0009670 <__uart_puts+0x14>
}
c0009698:	e320f000 	nop	{0}
c000969c:	e24bd004 	sub	sp, fp, #4
c00096a0:	e8bd8800 	pop	{fp, pc}

c00096a4 <__uart_getc>:

char __uart_getc(void)
{
c00096a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00096a8:	e28db000 	add	fp, sp, #0
c00096ac:	e24dd004 	sub	sp, sp, #4
	char ch;
	while(!(USART4->ISR & (0x1 << 5)));
c00096b0:	e320f000 	nop	{0}
c00096b4:	e3a03000 	mov	r3, #0
c00096b8:	e3443001 	movt	r3, #16385	; 0x4001
c00096bc:	e593301c 	ldr	r3, [r3, #28]
c00096c0:	e2033020 	and	r3, r3, #32
c00096c4:	e3530000 	cmp	r3, #0
c00096c8:	0afffff9 	beq	c00096b4 <__uart_getc+0x10>
	ch = (char)USART4->RDR;
c00096cc:	e3a03000 	mov	r3, #0
c00096d0:	e3443001 	movt	r3, #16385	; 0x4001
c00096d4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
c00096d8:	e54b3001 	strb	r3, [fp, #-1]
	return ch;
c00096dc:	e55b3001 	ldrb	r3, [fp, #-1]
}
c00096e0:	e1a00003 	mov	r0, r3
c00096e4:	e28bd000 	add	sp, fp, #0
c00096e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00096ec:	e12fff1e 	bx	lr

c00096f0 <do_irq>:
extern void printf(const char *fmt, ...);
unsigned int i = 0;
void do_irq(void) 
{
c00096f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00096f4:	e28db000 	add	fp, sp, #0
}
c00096f8:	e320f000 	nop	{0}
c00096fc:	e28bd000 	add	sp, fp, #0
c0009700:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009704:	e12fff1e 	bx	lr

c0009708 <hal_gpio_init>:
#include "gpio.h"

void hal_gpio_init(gpio_t * gpiox,unsigned int pin,gpio_init_t* init)
{
c0009708:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c000970c:	e28db000 	add	fp, sp, #0
c0009710:	e24dd00c 	sub	sp, sp, #12
c0009714:	e50b0004 	str	r0, [fp, #-4]
c0009718:	e50b1008 	str	r1, [fp, #-8]
c000971c:	e50b200c 	str	r2, [fp, #-12]
	//1.mode 
    gpiox->MODER &=(~(0x3 << 2*pin));
c0009720:	e51b3004 	ldr	r3, [fp, #-4]
c0009724:	e5933000 	ldr	r3, [r3]
c0009728:	e51b2008 	ldr	r2, [fp, #-8]
c000972c:	e1a02082 	lsl	r2, r2, #1
c0009730:	e3a01003 	mov	r1, #3
c0009734:	e1a02211 	lsl	r2, r1, r2
c0009738:	e1e02002 	mvn	r2, r2
c000973c:	e0022003 	and	r2, r2, r3
c0009740:	e51b3004 	ldr	r3, [fp, #-4]
c0009744:	e5832000 	str	r2, [r3]
	gpiox->MODER |= (init->moder << 2*pin);
c0009748:	e51b3004 	ldr	r3, [fp, #-4]
c000974c:	e5932000 	ldr	r2, [r3]
c0009750:	e51b300c 	ldr	r3, [fp, #-12]
c0009754:	e5931000 	ldr	r1, [r3]
c0009758:	e51b3008 	ldr	r3, [fp, #-8]
c000975c:	e1a03083 	lsl	r3, r3, #1
c0009760:	e1a03311 	lsl	r3, r1, r3
c0009764:	e1822003 	orr	r2, r2, r3
c0009768:	e51b3004 	ldr	r3, [fp, #-4]
c000976c:	e5832000 	str	r2, [r3]

	//2.type
	gpiox->OTYPER &= (0x1<<pin);
c0009770:	e51b3004 	ldr	r3, [fp, #-4]
c0009774:	e5933004 	ldr	r3, [r3, #4]
c0009778:	e3a01001 	mov	r1, #1
c000977c:	e51b2008 	ldr	r2, [fp, #-8]
c0009780:	e1a02211 	lsl	r2, r1, r2
c0009784:	e0022003 	and	r2, r2, r3
c0009788:	e51b3004 	ldr	r3, [fp, #-4]
c000978c:	e5832004 	str	r2, [r3, #4]
	gpiox->OTYPER |= (init->otyper << pin);
c0009790:	e51b3004 	ldr	r3, [fp, #-4]
c0009794:	e5932004 	ldr	r2, [r3, #4]
c0009798:	e51b300c 	ldr	r3, [fp, #-12]
c000979c:	e5931004 	ldr	r1, [r3, #4]
c00097a0:	e51b3008 	ldr	r3, [fp, #-8]
c00097a4:	e1a03311 	lsl	r3, r1, r3
c00097a8:	e1822003 	orr	r2, r2, r3
c00097ac:	e51b3004 	ldr	r3, [fp, #-4]
c00097b0:	e5832004 	str	r2, [r3, #4]

	//3.speed 
	gpiox->OSPEEDR &= (~(0x3 << 2*pin));
c00097b4:	e51b3004 	ldr	r3, [fp, #-4]
c00097b8:	e5933008 	ldr	r3, [r3, #8]
c00097bc:	e51b2008 	ldr	r2, [fp, #-8]
c00097c0:	e1a02082 	lsl	r2, r2, #1
c00097c4:	e3a01003 	mov	r1, #3
c00097c8:	e1a02211 	lsl	r2, r1, r2
c00097cc:	e1e02002 	mvn	r2, r2
c00097d0:	e0022003 	and	r2, r2, r3
c00097d4:	e51b3004 	ldr	r3, [fp, #-4]
c00097d8:	e5832008 	str	r2, [r3, #8]
	gpiox->OSPEEDR |= (init->ospeedr <<2*pin);
c00097dc:	e51b3004 	ldr	r3, [fp, #-4]
c00097e0:	e5932008 	ldr	r2, [r3, #8]
c00097e4:	e51b300c 	ldr	r3, [fp, #-12]
c00097e8:	e5931008 	ldr	r1, [r3, #8]
c00097ec:	e51b3008 	ldr	r3, [fp, #-8]
c00097f0:	e1a03083 	lsl	r3, r3, #1
c00097f4:	e1a03311 	lsl	r3, r1, r3
c00097f8:	e1822003 	orr	r2, r2, r3
c00097fc:	e51b3004 	ldr	r3, [fp, #-4]
c0009800:	e5832008 	str	r2, [r3, #8]

	//4.push pull 
	gpiox->PUPDR &= (~(0x3<<2*pin));
c0009804:	e51b3004 	ldr	r3, [fp, #-4]
c0009808:	e593300c 	ldr	r3, [r3, #12]
c000980c:	e51b2008 	ldr	r2, [fp, #-8]
c0009810:	e1a02082 	lsl	r2, r2, #1
c0009814:	e3a01003 	mov	r1, #3
c0009818:	e1a02211 	lsl	r2, r1, r2
c000981c:	e1e02002 	mvn	r2, r2
c0009820:	e0022003 	and	r2, r2, r3
c0009824:	e51b3004 	ldr	r3, [fp, #-4]
c0009828:	e583200c 	str	r2, [r3, #12]
	gpiox->PUPDR |= (init->pupdr << 2*pin);
c000982c:	e51b3004 	ldr	r3, [fp, #-4]
c0009830:	e593200c 	ldr	r2, [r3, #12]
c0009834:	e51b300c 	ldr	r3, [fp, #-12]
c0009838:	e593100c 	ldr	r1, [r3, #12]
c000983c:	e51b3008 	ldr	r3, [fp, #-8]
c0009840:	e1a03083 	lsl	r3, r3, #1
c0009844:	e1a03311 	lsl	r3, r1, r3
c0009848:	e1822003 	orr	r2, r2, r3
c000984c:	e51b3004 	ldr	r3, [fp, #-4]
c0009850:	e583200c 	str	r2, [r3, #12]

}
c0009854:	e320f000 	nop	{0}
c0009858:	e28bd000 	add	sp, fp, #0
c000985c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009860:	e12fff1e 	bx	lr

c0009864 <hal_gpio_write>:




void hal_gpio_write(gpio_t * gpiox,unsigned int pin,gpio_odr_t status)
{
c0009864:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009868:	e28db000 	add	fp, sp, #0
c000986c:	e24dd00c 	sub	sp, sp, #12
c0009870:	e50b0004 	str	r0, [fp, #-4]
c0009874:	e50b1008 	str	r1, [fp, #-8]
c0009878:	e50b200c 	str	r2, [fp, #-12]

	if(status == GPIO_SET_T)
c000987c:	e51b300c 	ldr	r3, [fp, #-12]
c0009880:	e3530001 	cmp	r3, #1
c0009884:	1a000008 	bne	c00098ac <hal_gpio_write+0x48>
	{
		gpiox->ODR |= (0x1<<pin);
c0009888:	e51b3004 	ldr	r3, [fp, #-4]
c000988c:	e5933014 	ldr	r3, [r3, #20]
c0009890:	e3a01001 	mov	r1, #1
c0009894:	e51b2008 	ldr	r2, [fp, #-8]
c0009898:	e1a02211 	lsl	r2, r1, r2
c000989c:	e1832002 	orr	r2, r3, r2
c00098a0:	e51b3004 	ldr	r3, [fp, #-4]
c00098a4:	e5832014 	str	r2, [r3, #20]
	} else if(status == GPIO_RESET_T)
	{
		gpiox->ODR &= (~(0x1<<pin));
	}
}
c00098a8:	ea00000b 	b	c00098dc <hal_gpio_write+0x78>
	} else if(status == GPIO_RESET_T)
c00098ac:	e51b300c 	ldr	r3, [fp, #-12]
c00098b0:	e3530000 	cmp	r3, #0
c00098b4:	1a000008 	bne	c00098dc <hal_gpio_write+0x78>
		gpiox->ODR &= (~(0x1<<pin));
c00098b8:	e51b3004 	ldr	r3, [fp, #-4]
c00098bc:	e5933014 	ldr	r3, [r3, #20]
c00098c0:	e3a01001 	mov	r1, #1
c00098c4:	e51b2008 	ldr	r2, [fp, #-8]
c00098c8:	e1a02211 	lsl	r2, r1, r2
c00098cc:	e1e02002 	mvn	r2, r2
c00098d0:	e0022003 	and	r2, r2, r3
c00098d4:	e51b3004 	ldr	r3, [fp, #-4]
c00098d8:	e5832014 	str	r2, [r3, #20]
}
c00098dc:	e320f000 	nop	{0}
c00098e0:	e28bd000 	add	sp, fp, #0
c00098e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00098e8:	e12fff1e 	bx	lr

c00098ec <hal_uart4_init>:
#include "uart4.h"
//init uart 
extern char buff[10];
void hal_uart4_init()
{
c00098ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00098f0:	e28db000 	add	fp, sp, #0
	/******RCC init**************/
	RCC->MP_AHB4ENSETR |= (0x1<<1 | 0x1<<6);
c00098f4:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c00098f8:	e5933a28 	ldr	r3, [r3, #2600]	; 0xa28
c00098fc:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c0009900:	e3833042 	orr	r3, r3, #66	; 0x42
c0009904:	e5823a28 	str	r3, [r2, #2600]	; 0xa28
	RCC->MP_APB1ENSETR |= (0x1<<16);
c0009908:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c000990c:	e5933a00 	ldr	r3, [r3, #2560]	; 0xa00
c0009910:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c0009914:	e3833801 	orr	r3, r3, #65536	; 0x10000
c0009918:	e5823a00 	str	r3, [r2, #2560]	; 0xa00
	/********GPIO init***********/
	//PB2----> UART4_RX
	GPIOB->MODER &= (~(0b11<<4));
c000991c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009920:	e3453000 	movt	r3, #20480	; 0x5000
c0009924:	e5932000 	ldr	r2, [r3]
c0009928:	e3a03a03 	mov	r3, #12288	; 0x3000
c000992c:	e3453000 	movt	r3, #20480	; 0x5000
c0009930:	e3c22030 	bic	r2, r2, #48	; 0x30
c0009934:	e5832000 	str	r2, [r3]
	GPIOB->MODER |= (0b10<<4);
c0009938:	e3a03a03 	mov	r3, #12288	; 0x3000
c000993c:	e3453000 	movt	r3, #20480	; 0x5000
c0009940:	e5932000 	ldr	r2, [r3]
c0009944:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009948:	e3453000 	movt	r3, #20480	; 0x5000
c000994c:	e3822020 	orr	r2, r2, #32
c0009950:	e5832000 	str	r2, [r3]
	GPIOB->AFRL &= (~(0b1111<<8));
c0009954:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009958:	e3453000 	movt	r3, #20480	; 0x5000
c000995c:	e5932020 	ldr	r2, [r3, #32]
c0009960:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009964:	e3453000 	movt	r3, #20480	; 0x5000
c0009968:	e3c22c0f 	bic	r2, r2, #3840	; 0xf00
c000996c:	e5832020 	str	r2, [r3, #32]
	GPIOB->AFRL |= (0b1000<<8);
c0009970:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009974:	e3453000 	movt	r3, #20480	; 0x5000
c0009978:	e5932020 	ldr	r2, [r3, #32]
c000997c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009980:	e3453000 	movt	r3, #20480	; 0x5000
c0009984:	e3822b02 	orr	r2, r2, #2048	; 0x800
c0009988:	e5832020 	str	r2, [r3, #32]
	//PG11---->UART4_TX
	GPIOG->MODER &= (~(0b11<<22));
c000998c:	e3a03902 	mov	r3, #32768	; 0x8000
c0009990:	e3453000 	movt	r3, #20480	; 0x5000
c0009994:	e5932000 	ldr	r2, [r3]
c0009998:	e3a03902 	mov	r3, #32768	; 0x8000
c000999c:	e3453000 	movt	r3, #20480	; 0x5000
c00099a0:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
c00099a4:	e5832000 	str	r2, [r3]
	GPIOG->MODER |= (0b10<<22);
c00099a8:	e3a03902 	mov	r3, #32768	; 0x8000
c00099ac:	e3453000 	movt	r3, #20480	; 0x5000
c00099b0:	e5932000 	ldr	r2, [r3]
c00099b4:	e3a03902 	mov	r3, #32768	; 0x8000
c00099b8:	e3453000 	movt	r3, #20480	; 0x5000
c00099bc:	e3822502 	orr	r2, r2, #8388608	; 0x800000
c00099c0:	e5832000 	str	r2, [r3]
	GPIOG->AFRH &= (~(0b1111<<12));
c00099c4:	e3a03902 	mov	r3, #32768	; 0x8000
c00099c8:	e3453000 	movt	r3, #20480	; 0x5000
c00099cc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00099d0:	e3a03902 	mov	r3, #32768	; 0x8000
c00099d4:	e3453000 	movt	r3, #20480	; 0x5000
c00099d8:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
c00099dc:	e5832024 	str	r2, [r3, #36]	; 0x24
	GPIOG->AFRH |= (0b0110<<12);
c00099e0:	e3a03902 	mov	r3, #32768	; 0x8000
c00099e4:	e3453000 	movt	r3, #20480	; 0x5000
c00099e8:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00099ec:	e3a03902 	mov	r3, #32768	; 0x8000
c00099f0:	e3453000 	movt	r3, #20480	; 0x5000
c00099f4:	e3822a06 	orr	r2, r2, #24576	; 0x6000
c00099f8:	e5832024 	str	r2, [r3, #36]	; 0x24
	/********UART init***********/
	//M bit init(M1 M0) , sampling 16(OVER8), no even odd parity(PCE)
	USART4->CR1 &= (~(0x1<<28 | 0x1<<12 | 0x1<<15 | 0x1<<10));
c00099fc:	e3a03000 	mov	r3, #0
c0009a00:	e3443001 	movt	r3, #16385	; 0x4001
c0009a04:	e5933000 	ldr	r3, [r3]
c0009a08:	e3a02000 	mov	r2, #0
c0009a0c:	e3442001 	movt	r2, #16385	; 0x4001
c0009a10:	e3c33201 	bic	r3, r3, #268435456	; 0x10000000
c0009a14:	e3c33b25 	bic	r3, r3, #37888	; 0x9400
c0009a18:	e5823000 	str	r3, [r2]
	//TE RE UE
	USART4->CR1 |= (0x1<<3 | 0x1<<2 | 0x1<<0);
c0009a1c:	e3a03000 	mov	r3, #0
c0009a20:	e3443001 	movt	r3, #16385	; 0x4001
c0009a24:	e5932000 	ldr	r2, [r3]
c0009a28:	e3a03000 	mov	r3, #0
c0009a2c:	e3443001 	movt	r3, #16385	; 0x4001
c0009a30:	e382200d 	orr	r2, r2, #13
c0009a34:	e5832000 	str	r2, [r3]
	//1 stop bit
	USART4->CR2 &= (~(0b11<<12));
c0009a38:	e3a03000 	mov	r3, #0
c0009a3c:	e3443001 	movt	r3, #16385	; 0x4001
c0009a40:	e5932004 	ldr	r2, [r3, #4]
c0009a44:	e3a03000 	mov	r3, #0
c0009a48:	e3443001 	movt	r3, #16385	; 0x4001
c0009a4c:	e3c22a03 	bic	r2, r2, #12288	; 0x3000
c0009a50:	e5832004 	str	r2, [r3, #4]
	//BRR= 64MHz/115200 = 0x22B
	USART4->BRR =  0x22B;
c0009a54:	e3a03000 	mov	r3, #0
c0009a58:	e3443001 	movt	r3, #16385	; 0x4001
c0009a5c:	e300222b 	movw	r2, #555	; 0x22b
c0009a60:	e583200c 	str	r2, [r3, #12]
	//no prescaling
	USART4->PRESC &= 0b0000;
c0009a64:	e3a03000 	mov	r3, #0
c0009a68:	e3443001 	movt	r3, #16385	; 0x4001
c0009a6c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
c0009a70:	e3a03000 	mov	r3, #0
c0009a74:	e3443001 	movt	r3, #16385	; 0x4001
c0009a78:	e3a02000 	mov	r2, #0
c0009a7c:	e583202c 	str	r2, [r3, #44]	; 0x2c
}
c0009a80:	e320f000 	nop	{0}
c0009a84:	e28bd000 	add	sp, fp, #0
c0009a88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009a8c:	e12fff1e 	bx	lr

c0009a90 <put_char>:

//send a char
void put_char(const char str)
{
c0009a90:	e92d4800 	push	{fp, lr}
c0009a94:	e28db004 	add	fp, sp, #4
c0009a98:	e24dd004 	sub	sp, sp, #4
c0009a9c:	e1a03000 	mov	r3, r0
c0009aa0:	e54b3008 	strb	r3, [fp, #-8]
	//judge if the TXE==>UART_ISR[7]   is 1,if it's 1,then the next byte could be sent
	//1:empty  0:not empty
	while(!(USART4->ISR & (0x1<<7)));
c0009aa4:	e320f000 	nop	{0}
c0009aa8:	e3a03000 	mov	r3, #0
c0009aac:	e3443001 	movt	r3, #16385	; 0x4001
c0009ab0:	e593301c 	ldr	r3, [r3, #28]
c0009ab4:	e2033080 	and	r3, r3, #128	; 0x80
c0009ab8:	e3530000 	cmp	r3, #0
c0009abc:	0afffff9 	beq	c0009aa8 <put_char+0x18>
	USART4->TDR = str;
c0009ac0:	e3a03000 	mov	r3, #0
c0009ac4:	e3443001 	movt	r3, #16385	; 0x4001
c0009ac8:	e55b2008 	ldrb	r2, [fp, #-8]
c0009acc:	e5832028 	str	r2, [r3, #40]	; 0x28
	//judge if sending is finished     0 not finshed 1 finshed
	while (!(USART4->ISR & (0x1<<6)));
c0009ad0:	e320f000 	nop	{0}
c0009ad4:	e3a03000 	mov	r3, #0
c0009ad8:	e3443001 	movt	r3, #16385	; 0x4001
c0009adc:	e593301c 	ldr	r3, [r3, #28]
c0009ae0:	e2033040 	and	r3, r3, #64	; 0x40
c0009ae4:	e3530000 	cmp	r3, #0
c0009ae8:	0afffff9 	beq	c0009ad4 <put_char+0x44>
	if ('\r'==str)
c0009aec:	e55b3008 	ldrb	r3, [fp, #-8]
c0009af0:	e353000d 	cmp	r3, #13
c0009af4:	1a000001 	bne	c0009b00 <put_char+0x70>
	{
		put_char('\n');
c0009af8:	e3a0000a 	mov	r0, #10
c0009afc:	ebffffe3 	bl	c0009a90 <put_char>
	}
	
	
	
}
c0009b00:	e320f000 	nop	{0}
c0009b04:	e24bd004 	sub	sp, fp, #4
c0009b08:	e8bd8800 	pop	{fp, pc}

c0009b0c <put_string>:


//send a string 
void put_string(const char* string)
{
c0009b0c:	e92d4800 	push	{fp, lr}
c0009b10:	e28db004 	add	fp, sp, #4
c0009b14:	e24dd008 	sub	sp, sp, #8
c0009b18:	e50b000c 	str	r0, [fp, #-12]
	//the sign of the end of a string '\0' 
	const char *p = string;
c0009b1c:	e51b300c 	ldr	r3, [fp, #-12]
c0009b20:	e50b3008 	str	r3, [fp, #-8]
	while (*p!='\0')
c0009b24:	ea000006 	b	c0009b44 <put_string+0x38>
	{
		put_char(*p);
c0009b28:	e51b3008 	ldr	r3, [fp, #-8]
c0009b2c:	e5d33000 	ldrb	r3, [r3]
c0009b30:	e1a00003 	mov	r0, r3
c0009b34:	ebffffd5 	bl	c0009a90 <put_char>
		p++;
c0009b38:	e51b3008 	ldr	r3, [fp, #-8]
c0009b3c:	e2833001 	add	r3, r3, #1
c0009b40:	e50b3008 	str	r3, [fp, #-8]
	while (*p!='\0')
c0009b44:	e51b3008 	ldr	r3, [fp, #-8]
c0009b48:	e5d33000 	ldrb	r3, [r3]
c0009b4c:	e3530000 	cmp	r3, #0
c0009b50:	1afffff4 	bne	c0009b28 <put_string+0x1c>
	}
}
c0009b54:	e320f000 	nop	{0}
c0009b58:	e24bd004 	sub	sp, fp, #4
c0009b5c:	e8bd8800 	pop	{fp, pc}

c0009b60 <get_char>:


//recv a char 
char get_char()
{
c0009b60:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009b64:	e28db000 	add	fp, sp, #0
c0009b68:	e24dd004 	sub	sp, sp, #4
	char ret;
	//1. judge if RXNE is 1,data received,0 data not received
	while (!(USART4->ISR & (0x1<<5)));
c0009b6c:	e320f000 	nop	{0}
c0009b70:	e3a03000 	mov	r3, #0
c0009b74:	e3443001 	movt	r3, #16385	; 0x4001
c0009b78:	e593301c 	ldr	r3, [r3, #28]
c0009b7c:	e2033020 	and	r3, r3, #32
c0009b80:	e3530000 	cmp	r3, #0
c0009b84:	0afffff9 	beq	c0009b70 <get_char+0x10>
	//call put_char
	ret = USART4->RDR;
c0009b88:	e3a03000 	mov	r3, #0
c0009b8c:	e3443001 	movt	r3, #16385	; 0x4001
c0009b90:	e5933024 	ldr	r3, [r3, #36]	; 0x24
c0009b94:	e54b3001 	strb	r3, [fp, #-1]
	return ret;
c0009b98:	e55b3001 	ldrb	r3, [fp, #-1]
}
c0009b9c:	e1a00003 	mov	r0, r3
c0009ba0:	e28bd000 	add	sp, fp, #0
c0009ba4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009ba8:	e12fff1e 	bx	lr

c0009bac <get_string>:


//recv a string 
char* get_string()
{
c0009bac:	e92d4800 	push	{fp, lr}
c0009bb0:	e28db004 	add	fp, sp, #4
c0009bb4:	e24dd004 	sub	sp, sp, #4
	//loop: recv a char,then display

	//enter===> '\r'

	int i;
	for(i = 0; i < sizeof(buff)-1;i++)
c0009bb8:	e3a03000 	mov	r3, #0
c0009bbc:	e50b3008 	str	r3, [fp, #-8]
c0009bc0:	ea000019 	b	c0009c2c <get_string+0x80>
	{
		// receive a char
		buff[i] = get_char();
c0009bc4:	ebffffe5 	bl	c0009b60 <get_char>
c0009bc8:	e1a03000 	mov	r3, r0
c0009bcc:	e1a01003 	mov	r1, r3
c0009bd0:	e30a368c 	movw	r3, #42636	; 0xa68c
c0009bd4:	e34c3000 	movt	r3, #49152	; 0xc000
c0009bd8:	e51b2008 	ldr	r2, [fp, #-8]
c0009bdc:	e0833002 	add	r3, r3, r2
c0009be0:	e1a02001 	mov	r2, r1
c0009be4:	e5c32000 	strb	r2, [r3]
		// display the char 
		put_char(buff[i]);
c0009be8:	e30a368c 	movw	r3, #42636	; 0xa68c
c0009bec:	e34c3000 	movt	r3, #49152	; 0xc000
c0009bf0:	e51b2008 	ldr	r2, [fp, #-8]
c0009bf4:	e0833002 	add	r3, r3, r2
c0009bf8:	e5d33000 	ldrb	r3, [r3]
c0009bfc:	e1a00003 	mov	r0, r3
c0009c00:	ebffffa2 	bl	c0009a90 <put_char>
		if ('\r'==buff[i])
c0009c04:	e30a368c 	movw	r3, #42636	; 0xa68c
c0009c08:	e34c3000 	movt	r3, #49152	; 0xc000
c0009c0c:	e51b2008 	ldr	r2, [fp, #-8]
c0009c10:	e0833002 	add	r3, r3, r2
c0009c14:	e5d33000 	ldrb	r3, [r3]
c0009c18:	e353000d 	cmp	r3, #13
c0009c1c:	0a000006 	beq	c0009c3c <get_string+0x90>
	for(i = 0; i < sizeof(buff)-1;i++)
c0009c20:	e51b3008 	ldr	r3, [fp, #-8]
c0009c24:	e2833001 	add	r3, r3, #1
c0009c28:	e50b3008 	str	r3, [fp, #-8]
c0009c2c:	e51b3008 	ldr	r3, [fp, #-8]
c0009c30:	e3530008 	cmp	r3, #8
c0009c34:	9affffe2 	bls	c0009bc4 <get_string+0x18>
c0009c38:	ea000000 	b	c0009c40 <get_string+0x94>
		{
			break;
c0009c3c:	e320f000 	nop	{0}
		}
	}
	buff[i] = '\0';
c0009c40:	e30a368c 	movw	r3, #42636	; 0xa68c
c0009c44:	e34c3000 	movt	r3, #49152	; 0xc000
c0009c48:	e51b2008 	ldr	r2, [fp, #-8]
c0009c4c:	e0833002 	add	r3, r3, r2
c0009c50:	e3a02000 	mov	r2, #0
c0009c54:	e5c32000 	strb	r2, [r3]
	put_char('\n');
c0009c58:	e3a0000a 	mov	r0, #10
c0009c5c:	ebffff8b 	bl	c0009a90 <put_char>
	return buff;
c0009c60:	e30a368c 	movw	r3, #42636	; 0xa68c
c0009c64:	e34c3000 	movt	r3, #49152	; 0xc000
}
c0009c68:	e1a00003 	mov	r0, r3
c0009c6c:	e24bd004 	sub	sp, fp, #4
c0009c70:	e8bd8800 	pop	{fp, pc}

c0009c74 <delay_ms>:
#include "uart4.h"
extern void printf(const char *fmt, ...);
void delay_ms(int ms)
{
c0009c74:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009c78:	e28db000 	add	fp, sp, #0
c0009c7c:	e24dd00c 	sub	sp, sp, #12
c0009c80:	e50b000c 	str	r0, [fp, #-12]
	int i,j;
	for(i = 0; i < ms;i++)
c0009c84:	e3a03000 	mov	r3, #0
c0009c88:	e50b3004 	str	r3, [fp, #-4]
c0009c8c:	ea00000c 	b	c0009cc4 <delay_ms+0x50>
		for (j = 0; j < 1800; j++);
c0009c90:	e3a03000 	mov	r3, #0
c0009c94:	e50b3008 	str	r3, [fp, #-8]
c0009c98:	ea000002 	b	c0009ca8 <delay_ms+0x34>
c0009c9c:	e51b3008 	ldr	r3, [fp, #-8]
c0009ca0:	e2833001 	add	r3, r3, #1
c0009ca4:	e50b3008 	str	r3, [fp, #-8]
c0009ca8:	e51b3008 	ldr	r3, [fp, #-8]
c0009cac:	e3002707 	movw	r2, #1799	; 0x707
c0009cb0:	e1530002 	cmp	r3, r2
c0009cb4:	dafffff8 	ble	c0009c9c <delay_ms+0x28>
	for(i = 0; i < ms;i++)
c0009cb8:	e51b3004 	ldr	r3, [fp, #-4]
c0009cbc:	e2833001 	add	r3, r3, #1
c0009cc0:	e50b3004 	str	r3, [fp, #-4]
c0009cc4:	e51b2004 	ldr	r2, [fp, #-4]
c0009cc8:	e51b300c 	ldr	r3, [fp, #-12]
c0009ccc:	e1520003 	cmp	r2, r3
c0009cd0:	baffffee 	blt	c0009c90 <delay_ms+0x1c>
}
c0009cd4:	e320f000 	nop	{0}
c0009cd8:	e28bd000 	add	sp, fp, #0
c0009cdc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009ce0:	e12fff1e 	bx	lr

c0009ce4 <main>:


char buff[10]={0};

int main()
{
c0009ce4:	e92d4800 	push	{fp, lr}
c0009ce8:	e28db004 	add	fp, sp, #4
	hal_uart4_init();
c0009cec:	ebfffefe 	bl	c00098ec <hal_uart4_init>
	//put_char('A');
	//put_string("uart4test*****************");
	//put_string("12345678");
	put_string("uart4 test*****************\r");
c0009cf0:	e3090d68 	movw	r0, #40296	; 0x9d68
c0009cf4:	e34c0000 	movt	r0, #49152	; 0xc000
c0009cf8:	ebffff83 	bl	c0009b0c <put_string>
	*/
	while (1)
	{
		
		//put_string(get_string()); 会出错
		get_string();
c0009cfc:	ebffffaa 	bl	c0009bac <get_string>
		put_string(buff);
c0009d00:	e30a068c 	movw	r0, #42636	; 0xa68c
c0009d04:	e34c0000 	movt	r0, #49152	; 0xc000
c0009d08:	ebffff7f 	bl	c0009b0c <put_string>
		get_string();
c0009d0c:	eafffffa 	b	c0009cfc <main+0x18>

Disassembly of section .rodata:

c0009d10 <.LC0>:
c0009d10:	33323130 	teqcc	r2, #48, 2
c0009d14:	37363534 			; <UNDEFINED> instruction: 0x37363534
c0009d18:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
c0009d1c:	66656463 	strbtvs	r6, [r5], -r3, ror #8
c0009d20:	6a696867 	bvs	c1a63ec4 <__bss_end__+0x1a5982e>
c0009d24:	6e6d6c6b 	cdpvs	12, 6, cr6, cr13, cr11, {3}
c0009d28:	7271706f 	rsbsvc	r7, r1, #111	; 0x6f
c0009d2c:	76757473 			; <UNDEFINED> instruction: 0x76757473
c0009d30:	7a797877 	bvc	c1e67f14 <__bss_end__+0x1e5d87e>
c0009d34:	00000000 	andeq	r0, r0, r0

c0009d38 <.LC1>:
c0009d38:	33323130 	teqcc	r2, #48, 2
c0009d3c:	37363534 			; <UNDEFINED> instruction: 0x37363534
c0009d40:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
c0009d44:	46454443 	strbmi	r4, [r5], -r3, asr #8
c0009d48:	4a494847 	bmi	c125be6c <__bss_end__+0x12517d6>
c0009d4c:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
c0009d50:	5251504f 	subspl	r5, r1, #79	; 0x4f
c0009d54:	56555453 			; <UNDEFINED> instruction: 0x56555453
c0009d58:	5a595857 	bpl	c165febc <__bss_end__+0x1655826>
c0009d5c:	00000000 	andeq	r0, r0, r0

c0009d60 <.LC2>:
c0009d60:	4c554e3c 	mrrcmi	14, 3, r4, r5, cr12
c0009d64:	00003e4c 	andeq	r3, r0, ip, asr #28

c0009d68 <.LC0>:
c0009d68:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
c0009d6c:	65742034 	ldrbvs	r2, [r4, #-52]!	; 0xffffffcc
c0009d70:	2a2a7473 	bcs	c0aa6f44 <__bss_end__+0xa9c8ae>
c0009d74:	2a2a2a2a 	bcs	c0a94624 <__bss_end__+0xa89f8e>
c0009d78:	2a2a2a2a 	bcs	c0a94628 <__bss_end__+0xa89f92>
c0009d7c:	2a2a2a2a 	bcs	c0a9462c <__bss_end__+0xa89f96>
c0009d80:	0d2a2a2a 	vstmdbeq	sl!, {s4-s45}
	...

Disassembly of section .data:

c0009d88 <stack>:
	...

c000a588 <_ctype>:
c000a588:	08080808 	stmdaeq	r8, {r3, fp}
c000a58c:	08080808 	stmdaeq	r8, {r3, fp}
c000a590:	28282808 	stmdacs	r8!, {r3, fp, sp}
c000a594:	08082828 	stmdaeq	r8, {r3, r5, fp, sp}
c000a598:	08080808 	stmdaeq	r8, {r3, fp}
c000a59c:	08080808 	stmdaeq	r8, {r3, fp}
c000a5a0:	08080808 	stmdaeq	r8, {r3, fp}
c000a5a4:	08080808 	stmdaeq	r8, {r3, fp}
c000a5a8:	101010a0 	andsne	r1, r0, r0, lsr #1
c000a5ac:	10101010 	andsne	r1, r0, r0, lsl r0
c000a5b0:	10101010 	andsne	r1, r0, r0, lsl r0
c000a5b4:	10101010 	andsne	r1, r0, r0, lsl r0
c000a5b8:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
c000a5bc:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
c000a5c0:	10100404 	andsne	r0, r0, r4, lsl #8
c000a5c4:	10101010 	andsne	r1, r0, r0, lsl r0
c000a5c8:	41414110 	cmpmi	r1, r0, lsl r1
c000a5cc:	01414141 	cmpeq	r1, r1, asr #2
c000a5d0:	01010101 	tsteq	r1, r1, lsl #2
c000a5d4:	01010101 	tsteq	r1, r1, lsl #2
c000a5d8:	01010101 	tsteq	r1, r1, lsl #2
c000a5dc:	01010101 	tsteq	r1, r1, lsl #2
c000a5e0:	10010101 	andne	r0, r1, r1, lsl #2
c000a5e4:	10101010 	andsne	r1, r0, r0, lsl r0
c000a5e8:	42424210 	submi	r4, r2, #16, 4
c000a5ec:	02424242 	subeq	r4, r2, #536870916	; 0x20000004
c000a5f0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a5f4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a5f8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a5fc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a600:	10020202 	andne	r0, r2, r2, lsl #4
c000a604:	08101010 	ldmdaeq	r0, {r4, ip}
	...
c000a628:	101010a0 	andsne	r1, r0, r0, lsr #1
c000a62c:	10101010 	andsne	r1, r0, r0, lsl r0
c000a630:	10101010 	andsne	r1, r0, r0, lsl r0
c000a634:	10101010 	andsne	r1, r0, r0, lsl r0
c000a638:	10101010 	andsne	r1, r0, r0, lsl r0
c000a63c:	10101010 	andsne	r1, r0, r0, lsl r0
c000a640:	10101010 	andsne	r1, r0, r0, lsl r0
c000a644:	10101010 	andsne	r1, r0, r0, lsl r0
c000a648:	01010101 	tsteq	r1, r1, lsl #2
c000a64c:	01010101 	tsteq	r1, r1, lsl #2
c000a650:	01010101 	tsteq	r1, r1, lsl #2
c000a654:	01010101 	tsteq	r1, r1, lsl #2
c000a658:	01010101 	tsteq	r1, r1, lsl #2
c000a65c:	10010101 	andne	r0, r1, r1, lsl #2
c000a660:	01010101 	tsteq	r1, r1, lsl #2
c000a664:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
c000a668:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a66c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a670:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a674:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a678:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a67c:	10020202 	andne	r0, r2, r2, lsl #4
c000a680:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a684:	02020202 	andeq	r0, r2, #536870912	; 0x20000000

Disassembly of section .bss:

c000a688 <i>:
c000a688:	00000000 	andeq	r0, r0, r0

c000a68c <buff>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002041 	andeq	r2, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000016 	andeq	r0, r0, r6, lsl r0
  10:	412d3705 			; <UNDEFINED> instruction: 0x412d3705
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	09010841 	stmdbeq	r1, {r0, r6, fp}
  1c:	0c030a02 			; <UNDEFINED> instruction: 0x0c030a02
  20:	Address 0x00000020 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_start-0xbef372dc>
   4:	694c2820 	stmdbvs	ip, {r5, fp, sp}^
   8:	6f72616e 	svcvs	0x0072616e
   c:	43434720 	movtmi	r4, #14112	; 0x3720
  10:	352e3720 	strcc	r3, [lr, #-1824]!	; 0xfffff8e0
  14:	3130322d 	teqcc	r0, sp, lsr #4
  18:	32312e39 	eorscc	r2, r1, #912	; 0x390
  1c:	2e372029 	cdpcs	0, 3, cr2, cr7, cr9, {1}
  20:	00302e35 	eorseq	r2, r0, r5, lsr lr

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000093 	muleq	r0, r3, r0
   4:	00240002 	eoreq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	73010000 	movwvc	r0, #4096	; 0x1000
  1c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  20:	74730000 	ldrbtvc	r0, [r3], #-0
  24:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
  28:	00010053 	andeq	r0, r1, r3, asr r0
  2c:	05000000 	streq	r0, [r0, #-0]
  30:	00800002 	addeq	r0, r0, r2
  34:	011b03c0 	tsteq	fp, r0, asr #7
  38:	2f2f2f2f 	svccs	0x002f2f2f
  3c:	032f2f2f 			; <UNDEFINED> instruction: 0x032f2f2f
  40:	2f2ff215 	svccs	0x002ff215
  44:	2f312f2f 	svccs	0x00312f2f
  48:	2f312f2f 	svccs	0x00312f2f
  4c:	2f2f2f2f 	svccs	0x002f2f2f
  50:	2f2f312f 	svccs	0x002f312f
  54:	2f2f2f2f 	svccs	0x002f2f2f
  58:	2f2f312f 	svccs	0x002f312f
  5c:	2f2f2f31 	svccs	0x002f2f31
  60:	332f2f2f 			; <UNDEFINED> instruction: 0x332f2f2f
  64:	2f302f31 	svccs	0x00302f31
  68:	2f2f302f 	svccs	0x002f302f
  6c:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
  70:	2f302f2f 	svccs	0x00302f2f
  74:	302f2f32 	eorcc	r2, pc, r2, lsr pc	; <UNPREDICTABLE>
  78:	312f2f2f 			; <UNDEFINED> instruction: 0x312f2f2f
  7c:	f6f6f6de 			; <UNDEFINED> instruction: 0xf6f6f6de
  80:	2f2ff7f6 	svccs	0x002ff7f6
  84:	8903a32f 	stmdbhi	r3, {r0, r1, r2, r3, r5, r8, r9, sp, pc}
  88:	c8034a7f 	stmdagt	r3, {r0, r1, r2, r3, r4, r5, r6, r9, fp, lr}
  8c:	032f2e00 			; <UNDEFINED> instruction: 0x032f2e00
  90:	02022e09 	andeq	r2, r2, #9, 28	; 0x90
  94:	6c010100 	stfvss	f0, [r1], {-0}
  98:	02000000 	andeq	r0, r0, #0
  9c:	00002c00 	andeq	r2, r0, r0, lsl #24
  a0:	fb010200 	blx	408aa <_start-0xbffc7756>
  a4:	01000d0e 	tsteq	r0, lr, lsl #26
  a8:	00010101 	andeq	r0, r1, r1, lsl #2
  ac:	00010000 	andeq	r0, r1, r0
  b0:	6f630100 	svcvs	0x00630100
  b4:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
  b8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
  bc:	755f0000 	ldrbvc	r0, [pc, #-0]	; c4 <_start-0xc0007f3c>
  c0:	73646f6d 	cmnvc	r4, #436	; 0x1b4
  c4:	532e3369 			; <UNDEFINED> instruction: 0x532e3369
  c8:	00000100 	andeq	r0, r0, r0, lsl #2
  cc:	02050000 	andeq	r0, r5, #0
  d0:	c0008218 	andgt	r8, r0, r8, lsl r2
  d4:	2f011203 	svccs	0x00011203
  d8:	342f2f2f 	strtcc	r2, [pc], #-3887	; e0 <_start-0xc0007f20>
  dc:	2f2f2f2f 	svccs	0x002f2f2f
  e0:	2f2f2f32 	svccs	0x002f2f32
  e4:	2f2f332f 	svccs	0x002f332f
  e8:	2f2f2f2f 	svccs	0x002f2f2f
  ec:	2f2f2f2f 	svccs	0x002f2f2f
  f0:	2f2f2f2f 	svccs	0x002f2f2f
  f4:	2f352f2f 	svccs	0x00352f2f
  f8:	2f2f2f2f 	svccs	0x002f2f2f
  fc:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
 100:	02022f30 	andeq	r2, r2, #48, 30	; 0xc0
 104:	65010100 	strvs	r0, [r1, #-256]	; 0xffffff00
 108:	02000000 	andeq	r0, r0, #0
 10c:	00002c00 	andeq	r2, r0, r0, lsl #24
 110:	fb010200 	blx	4091a <_start-0xbffc76e6>
 114:	01000d0e 	tsteq	r0, lr, lsl #26
 118:	00010101 	andeq	r0, r1, r1, lsl #2
 11c:	00010000 	andeq	r0, r1, r0
 120:	6f630100 	svcvs	0x00630100
 124:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
 128:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 12c:	755f0000 	ldrbvc	r0, [pc, #-0]	; 134 <_start-0xc0007ecc>
 130:	73766964 	cmnvc	r6, #100, 18	; 0x190000
 134:	532e3369 			; <UNDEFINED> instruction: 0x532e3369
 138:	00000100 	andeq	r0, r0, r0, lsl #2
 13c:	02050000 	andeq	r0, r5, #0
 140:	c00082c8 	andgt	r8, r0, r8, asr #5
 144:	2f011103 	svccs	0x00011103
 148:	2f2f2f2f 	svccs	0x002f2f2f
 14c:	2f2f2f34 	svccs	0x002f2f34
 150:	2f2f322f 	svccs	0x002f322f
 154:	2f342f2f 	svccs	0x00342f2f
 158:	2f2f2f2f 	svccs	0x002f2f2f
 15c:	2f2f2f2f 	svccs	0x002f2f2f
 160:	2f2f2f2f 	svccs	0x002f2f2f
 164:	2f302f2f 	svccs	0x00302f2f
 168:	022f3030 	eoreq	r3, pc, #48	; 0x30
 16c:	01010002 	tsteq	r1, r2
 170:	0000022e 	andeq	r0, r0, lr, lsr #4
 174:	00520002 	subseq	r0, r2, r2
 178:	01020000 	mrseq	r0, (UNDEF: 2)
 17c:	000d0efb 	strdeq	r0, [sp], -fp
 180:	01010101 	tsteq	r1, r1, lsl #2
 184:	01000000 	mrseq	r0, (UNDEF: 0)
 188:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 18c:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; d8 <_start-0xc0007f28>
 190:	2f6e6f6d 	svccs	0x006e6f6d
 194:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 198:	00656475 	rsbeq	r6, r5, r5, ror r4
 19c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1a0:	732f6e6f 			; <UNDEFINED> instruction: 0x732f6e6f
 1a4:	00006372 	andeq	r6, r0, r2, ror r3
 1a8:	70797463 	rsbsvc	r7, r9, r3, ror #8
 1ac:	00682e65 	rsbeq	r2, r8, r5, ror #28
 1b0:	70000001 	andvc	r0, r0, r1
 1b4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 1b8:	00632e66 	rsbeq	r2, r3, r6, ror #28
 1bc:	73000002 	movwvc	r0, #2
 1c0:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
 1c4:	00682e67 	rsbeq	r2, r8, r7, ror #28
 1c8:	00000001 	andeq	r0, r0, r1
 1cc:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
 1d0:	03c00083 	biceq	r0, r0, #131	; 0x83
 1d4:	9f0100c4 	svcls	0x000100c4
 1d8:	042f67d7 	strteq	r6, [pc], #-2007	; 1e0 <_start-0xc0007e20>
 1dc:	7fbe0302 	svcvc	0x00be0302
 1e0:	834cbb82 	movthi	fp, #52098	; 0xcb82
 1e4:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 1e8:	06820601 	streq	r0, [r2], r1, lsl #12
 1ec:	684b3d08 	stmdavs	fp, {r3, r8, sl, fp, ip, sp}^
 1f0:	4c674d67 	stclmi	13, cr4, [r7], #-412	; 0xfffffe64
 1f4:	0063bb30 	rsbeq	fp, r3, r0, lsr fp
 1f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 1fc:	02002008 	andeq	r2, r0, #8
 200:	20080204 	andcs	r0, r8, r4, lsl #4
 204:	03040200 	movweq	r0, #16896	; 0x4200
 208:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
 20c:	21080605 	tstcs	r8, r5, lsl #12
 210:	06040200 	streq	r0, [r4], -r0, lsl #4
 214:	0200d606 	andeq	sp, r0, #6291456	; 0x600000
 218:	65060904 	strvs	r0, [r6, #-2308]	; 0xfffff6fc
 21c:	2f6767a3 	svccs	0x006767a3
 220:	0883bb69 	stmeq	r3, {r0, r3, r5, r6, r8, r9, fp, ip, sp, pc}
 224:	24039f21 	strcs	r9, [r3], #-3873	; 0xfffff0df
 228:	2f4c8366 	svccs	0x004c8366
 22c:	0200c708 	andeq	ip, r0, #8, 14	; 0x200000
 230:	9e060104 	adflss	f0, f6, f4
 234:	032fa006 			; <UNDEFINED> instruction: 0x032fa006
 238:	69d88220 	ldmibvs	r8, {r5, r9, pc}^
 23c:	67836783 	strvs	r6, [r3, r3, lsl #15]
 240:	01040200 	mrseq	r0, R12_usr
 244:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 248:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 24c:	00820601 	addeq	r0, r2, r1, lsl #12
 250:	4a020402 	bmi	81260 <_start-0xbff86da0>
 254:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 258:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 25c:	002f0604 	eoreq	r0, pc, r4, lsl #12
 260:	4b040402 	blmi	101270 <_start-0xbff06d90>
 264:	674b6783 	strbvs	r6, [fp, -r3, lsl #15]
 268:	834b8383 	movthi	r8, #45955	; 0xb383
 26c:	83694b83 	cmnhi	r9, #134144	; 0x20c00
 270:	68678367 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, pc}^
 274:	83f4674b 	mvnshi	r6, #19660800	; 0x12c0000
 278:	69102e02 	ldmdbvs	r0, {r1, r9, sl, fp, sp}
 27c:	2f83834b 	svccs	0x0083834b
 280:	9f67a09d 	svcls	0x0067a09d
 284:	67bb6783 	ldrvs	r6, [fp, r3, lsl #15]!
 288:	2f83bd9f 	svccs	0x0083bd9f
 28c:	9d2fa09d 	stcls	0, cr10, [pc, #-628]!	; 20 <_start-0xc0007fe0>
 290:	a0f12fbc 	ldrhtge	r2, [r1], #252	; 0xfc
 294:	00a09d2f 	adceq	r9, r0, pc, lsr #26
 298:	2f010402 	svccs	0x00010402
 29c:	0200a16b 	andeq	sl, r0, #-1073741798	; 0xc000001a
 2a0:	66060404 	strvs	r0, [r6], -r4, lsl #8
 2a4:	01040200 	mrseq	r0, R12_usr
 2a8:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 2ac:	84069e03 	strhi	r9, [r6], #-3587	; 0xfffff1fd
 2b0:	12038467 	andne	r8, r3, #1728053248	; 0x67000000
 2b4:	bb8367ba 	bllt	fe0da1a4 <__bss_end__+0x3e0cfb0e>
 2b8:	02674c32 	rsbeq	r4, r7, #12800	; 0x3200
 2bc:	8383132e 	orrhi	r1, r3, #-1207959552	; 0xb8000000
 2c0:	4b868383 	blmi	fe1a10d4 <__bss_end__+0x3e196a3e>
 2c4:	01040200 	mrseq	r0, R12_usr
 2c8:	83068206 	movwhi	r8, #25094	; 0x6206
 2cc:	9f68839f 	svcls	0x0068839f
 2d0:	4b6b6767 	blmi	1ada074 <_start-0xbe52df8c>
 2d4:	02006783 	andeq	r6, r0, #34340864	; 0x20c0000
 2d8:	82060104 	andhi	r0, r6, #4, 2
 2dc:	839f8306 	orrshi	r8, pc, #402653184	; 0x18000000
 2e0:	4e67a068 	cdpmi	0, 6, cr10, cr7, cr8, {3}
 2e4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2e8:	00820601 	addeq	r0, r2, r1, lsl #12
 2ec:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 2f0:	03040200 	movweq	r0, #16896	; 0x4200
 2f4:	02008306 	andeq	r8, r0, #402653184	; 0x18000000
 2f8:	4b490304 	blmi	1240f10 <_start-0xbedc70f0>
 2fc:	01040200 	mrseq	r0, R12_usr
 300:	02008206 	andeq	r8, r0, #1610612736	; 0x60000000
 304:	83060204 	movwhi	r0, #25092	; 0x6204
 308:	02040200 	andeq	r0, r4, #0, 4
 30c:	00674c49 	rsbeq	r4, r7, r9, asr #24
 310:	06010402 	streq	r0, [r1], -r2, lsl #8
 314:	4b9f0666 	blmi	fe7c1cb4 <__bss_end__+0x3e7b761e>
 318:	024c6a68 	subeq	r6, ip, #104, 20	; 0x68000
 31c:	831401b4 	tsthi	r4, #180, 2	; 0x2d
 320:	08bc9d2f 	ldmeq	ip!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, pc}
 324:	bc9d2f21 	ldclt	15, cr2, [sp], {33}	; 0x21
 328:	68679f31 	stmdavs	r7!, {r0, r4, r5, r8, r9, sl, fp, ip, pc}^
 32c:	9d2f83bc 	stcls	3, cr8, [pc, #-752]!	; 44 <_start-0xc0007fbc>
 330:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 334:	02006703 	andeq	r6, r0, #786432	; 0xc0000
 338:	00f10304 	rscseq	r0, r1, r4, lsl #6
 33c:	06010402 	streq	r0, [r1], -r2, lsl #8
 340:	2f840666 	svccs	0x00840666
 344:	6731bc9d 			; <UNDEFINED> instruction: 0x6731bc9d
 348:	0881694b 	stmeq	r1, {r0, r1, r3, r6, r8, fp, sp, lr}
 34c:	9f67323f 	svcls	0x0067323f
 350:	a09f2ba3 	addsge	r2, pc, r3, lsr #23
 354:	4b329f31 	blmi	ca8020 <_start-0xbf35ffe0>
 358:	324b6831 	subcc	r6, fp, #3211264	; 0x310000
 35c:	839f3168 	orrshi	r3, pc, #104, 2
 360:	03672dbd 	cmneq	r7, #12096	; 0x2f40
 364:	0f032e78 	svceq	0x00032e78
 368:	00bb672e 	adcseq	r6, fp, lr, lsr #14
 36c:	06010402 	streq	r0, [r1], -r2, lsl #8
 370:	bb670666 	bllt	19c1d10 <_start-0xbe6462f0>
 374:	bb67bb67 	bllt	19ef118 <_start-0xbe618ee8>
 378:	bc838383 	stclt	3, cr8, [r3], {131}	; 0x83
 37c:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 380:	7ee20302 	cdpvc	3, 14, cr0, cr2, cr2, {0}
 384:	02003c08 	andeq	r3, r0, #8, 24	; 0x800
 388:	66060104 	strvs	r0, [r6], -r4, lsl #2
 38c:	01a00306 	lsleq	r0, r6, #6
 390:	69676782 	stmdbvs	r7!, {r1, r7, r8, r9, sl, sp, lr}^
 394:	2fbc4ba2 	svccs	0x00bc4ba2
 398:	a04f85a1 	subge	r8, pc, r1, lsr #11
 39c:	000a0267 	andeq	r0, sl, r7, ror #4
 3a0:	00a60101 	adceq	r0, r6, r1, lsl #2
 3a4:	00020000 	andeq	r0, r2, r0
 3a8:	00000063 	andeq	r0, r0, r3, rrx
 3ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 3b0:	0101000d 	tsteq	r1, sp
 3b4:	00000101 	andeq	r0, r0, r1, lsl #2
 3b8:	00000100 	andeq	r0, r0, r0, lsl #2
 3bc:	6d6f6301 	stclvs	3, cr6, [pc, #-4]!	; 3c0 <_start-0xc0007c40>
 3c0:	2f6e6f6d 	svccs	0x006e6f6d
 3c4:	00637273 	rsbeq	r7, r3, r3, ror r2
 3c8:	6f632f2e 	svcvs	0x00632f2e
 3cc:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
 3d0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 3d4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 3d8:	61750000 	cmnvs	r5, r0
 3dc:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
 3e0:	00000100 	andeq	r0, r0, r0, lsl #2
 3e4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 3e8:	31706d32 	cmncc	r0, r2, lsr sp
 3ec:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 3f0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 3f4:	00020068 	andeq	r0, r2, r8, rrx
 3f8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 3fc:	706d3233 	rsbvc	r3, sp, r3, lsr r2
 400:	5f787831 	svcpl	0x00787831
 404:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 408:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 40c:	00000000 	andeq	r0, r0, r0
 410:	94140205 	ldrls	r0, [r4], #-517	; 0xfffffdfb
 414:	4c17c000 	ldcmi	0, cr12, [r7], {-0}
 418:	d8d7d7d7 	ldmle	r7, {r0, r1, r2, r4, r6, r7, r8, r9, sl, ip, lr, pc}^
 41c:	d8d7d7d7 	ldmle	r7, {r0, r1, r2, r4, r6, r7, r8, r9, sl, ip, lr, pc}^
 420:	d7d8d8d7 			; <UNDEFINED> instruction: 0xd7d8d8d7
 424:	d7d8d884 	ldrble	sp, [r8, r4, lsl #17]
 428:	009f85d8 			; <UNDEFINED> instruction: 0x009f85d8
 42c:	06010402 	streq	r0, [r1], -r2, lsl #8
 430:	83bb062e 			; <UNDEFINED> instruction: 0x83bb062e
 434:	83684b67 	cmnhi	r8, #105472	; 0x19c00
 438:	6984b92f 	stmibvs	r4, {r0, r1, r2, r3, r5, r8, fp, ip, sp, pc}
 43c:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
 440:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 444:	022f83bb 	eoreq	r8, pc, #-335544318	; 0xec000002
 448:	01010008 	tsteq	r1, r8
 44c:	00000037 	andeq	r0, r0, r7, lsr r0
 450:	00230002 	eoreq	r0, r3, r2
 454:	01020000 	mrseq	r0, (UNDEF: 2)
 458:	000d0efb 	strdeq	r0, [sp], -fp
 45c:	01010101 	tsteq	r1, r1, lsl #2
 460:	01000000 	mrseq	r0, (UNDEF: 0)
 464:	73010000 	movwvc	r0, #4096	; 0x1000
 468:	00006372 	andeq	r6, r0, r2, ror r3
 46c:	695f6f64 	ldmdbvs	pc, {r2, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 470:	632e7172 			; <UNDEFINED> instruction: 0x632e7172
 474:	00000100 	andeq	r0, r0, r0, lsl #2
 478:	02050000 	andeq	r0, r5, #0
 47c:	c00096f0 	strdgt	r9, [r0], -r0
 480:	08024b15 	stmdaeq	r2, {r0, r2, r4, r8, r9, fp, lr}
 484:	60010100 	andvs	r0, r1, r0, lsl #2
 488:	02000000 	andeq	r0, r0, #0
 48c:	00003500 	andeq	r3, r0, r0, lsl #10
 490:	fb010200 	blx	40c9a <_start-0xbffc7366>
 494:	01000d0e 	tsteq	r0, lr, lsl #26
 498:	00010101 	andeq	r0, r1, r1, lsl #2
 49c:	00010000 	andeq	r0, r1, r0
 4a0:	72730100 	rsbsvc	r0, r3, #0, 2
 4a4:	2f2e0063 	svccs	0x002e0063
 4a8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 4ac:	00656475 	rsbeq	r6, r5, r5, ror r4
 4b0:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 4b4:	00632e6f 	rsbeq	r2, r3, pc, ror #28
 4b8:	67000001 	strvs	r0, [r0, -r1]
 4bc:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 4c0:	00020068 	andeq	r0, r2, r8, rrx
 4c4:	05000000 	streq	r0, [r0, #-0]
 4c8:	00970802 	addseq	r0, r7, r2, lsl #16
 4cc:	08bc15c0 	ldmeq	ip!, {r6, r7, r8, sl, ip}
 4d0:	f33f083d 	vceq.i<illegal width 64>	d0, d15, d29
 4d4:	3d082308 	stccc	3, cr2, [r8, #-32]	; 0xffffffe0
 4d8:	3d083f08 	stccc	15, cr3, [r8, #-32]	; 0xffffffe0
 4dc:	bc883e08 	stclt	14, cr3, [r8], {8}
 4e0:	682af768 	stmdavs	sl!, {r3, r5, r6, r8, r9, sl, ip, sp, lr, pc}
 4e4:	08022208 	stmdaeq	r2, {r3, r9, sp}
 4e8:	d5010100 	strle	r0, [r1, #-256]	; 0xffffff00
 4ec:	02000000 	andeq	r0, r0, #0
 4f0:	00007100 	andeq	r7, r0, r0, lsl #2
 4f4:	fb010200 	blx	40cfe <_start-0xbffc7302>
 4f8:	01000d0e 	tsteq	r0, lr, lsl #26
 4fc:	00010101 	andeq	r0, r1, r1, lsl #2
 500:	00010000 	andeq	r0, r1, r0
 504:	72730100 	rsbsvc	r0, r3, #0, 2
 508:	2f2e0063 	svccs	0x002e0063
 50c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 510:	692f6e6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}	; <UNPREDICTABLE>
 514:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 518:	00006564 	andeq	r6, r0, r4, ror #10
 51c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 520:	00632e34 	rsbeq	r2, r3, r4, lsr lr
 524:	73000001 	movwvc	r0, #1
 528:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
 52c:	7831706d 	ldmdavc	r1!, {r0, r2, r3, r5, r6, ip, sp, lr}
 530:	61755f78 	cmnvs	r5, r8, ror pc
 534:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
 538:	00000200 	andeq	r0, r0, r0, lsl #4
 53c:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 540:	31706d32 	cmncc	r0, r2, lsr sp
 544:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 548:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 54c:	00020068 	andeq	r0, r2, r8, rrx
 550:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 554:	706d3233 	rsbvc	r3, sp, r3, lsr r2
 558:	5f787831 	svcpl	0x00787831
 55c:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 560:	00020068 	andeq	r0, r2, r8, rrx
 564:	05000000 	streq	r0, [r0, #-0]
 568:	0098ec02 	addseq	lr, r8, r2, lsl #24
 56c:	9f4c16c0 	svcls	0x004c16c0
 570:	d7d7d7a1 	ldrble	sp, [r7, r1, lsr #15]
 574:	d7d7d7d8 			; <UNDEFINED> instruction: 0xd7d7d7d8
 578:	d8d8f4d9 	ldmle	r8, {r0, r3, r4, r6, r7, sl, ip, sp, lr, pc}^
 57c:	a186d784 	orrge	sp, r6, r4, lsl #15
 580:	01040200 	mrseq	r0, R12_usr
 584:	bb062e06 	bllt	18bda4 <_start-0xbfe7c25c>
 588:	04020084 	streq	r0, [r2], #-132	; 0xffffff7c
 58c:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 590:	6b4f68bb 	blvs	13da884 <_start-0xbec2d77c>
 594:	83304b84 	teqhi	r0, #132, 22	; 0x21000
 598:	696b8763 	stmdbvs	fp!, {r0, r1, r5, r6, r8, r9, sl, pc}^
 59c:	01040200 	mrseq	r0, R12_usr
 5a0:	bc062e06 	stclt	14, cr2, [r6], {6}
 5a4:	6e872f83 	cdpvs	15, 8, cr2, cr7, cr3, {4}
 5a8:	d7220869 	strle	r0, [r2, -r9, ror #16]!
 5ac:	02040200 	andeq	r0, r4, #0, 4
 5b0:	00d67a03 	sbcseq	r7, r6, r3, lsl #20
 5b4:	06010402 	streq	r0, [r1], -r2, lsl #8
 5b8:	318a0666 	orrcc	r0, sl, r6, ror #12
 5bc:	024b4bbb 	subeq	r4, fp, #191488	; 0x2ec00
 5c0:	01010006 	tsteq	r1, r6
 5c4:	0000005f 	andeq	r0, r0, pc, asr r0
 5c8:	001d0002 	andseq	r0, sp, r2
 5cc:	01020000 	mrseq	r0, (UNDEF: 2)
 5d0:	000d0efb 	strdeq	r0, [sp], -fp
 5d4:	01010101 	tsteq	r1, r1, lsl #2
 5d8:	01000000 	mrseq	r0, (UNDEF: 0)
 5dc:	00010000 	andeq	r0, r1, r0
 5e0:	6e69616d 	powvsez	f6, f1, #5.0
 5e4:	0000632e 	andeq	r6, r0, lr, lsr #6
 5e8:	00000000 	andeq	r0, r0, r0
 5ec:	9c740205 	lfmls	f0, 2, [r4], #-20	; 0xffffffec
 5f0:	8415c000 	ldrhi	ip, [r5], #-0
 5f4:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 5f8:	00660603 	rsbeq	r0, r6, r3, lsl #12
 5fc:	66010402 	strvs	r0, [r1], -r2, lsl #8
 600:	02040200 	andeq	r0, r4, #0, 4
 604:	02008106 	andeq	r8, r0, #-2147483647	; 0x80000001
 608:	66060104 	strvs	r0, [r6], -r4, lsl #2
 60c:	4b888406 	blmi	fe22162c <__bss_end__+0x3e216f96>
 610:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 614:	660c0301 	strvs	r0, [ip], -r1, lsl #6
 618:	01040200 	mrseq	r0, R12_usr
 61c:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 620:	02026501 	andeq	r6, r2, #4194304	; 0x400000
 624:	Address 0x00000624 is out of bounds.


Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000063 	andeq	r0, r0, r3, rrx
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000000 	andeq	r0, r0, r0
      10:	c0008000 	andgt	r8, r0, r0
      14:	c0008218 	andgt	r8, r0, r8, lsl r2
      18:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
      1c:	74732f74 	ldrbtvc	r2, [r3], #-3956	; 0xfffff08c
      20:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
      24:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
      28:	2f656d6f 	svccs	0x00656d6f
      2c:	756e696c 	strbvc	r6, [lr, #-2412]!	; 0xfffff694
      30:	61662f78 	smcvs	25336	; 0x62f8
      34:	67697372 			; <UNDEFINED> instruction: 0x67697372
      38:	412f7468 			; <UNDEFINED> instruction: 0x412f7468
      3c:	442f4d52 	strtmi	r4, [pc], #-3410	; 44 <_start-0xc0007fbc>
      40:	31323243 	teqcc	r2, r3, asr #4
      44:	642f3131 	strtvs	r3, [pc], #-305	; 4c <_start-0xc0007fb4>
      48:	36307961 	ldrtcc	r7, [r0], -r1, ror #18
      4c:	2d33302f 	ldccs	0, cr3, [r3, #-188]!	; 0xffffff44
      50:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
      54:	4700632d 	strmi	r6, [r0, -sp, lsr #6]
      58:	4120554e 			; <UNDEFINED> instruction: 0x4120554e
      5c:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
      60:	322e3832 	eorcc	r3, lr, #3276800	; 0x320000
      64:	6b800100 	blvs	fe00046c <__bss_end__+0x3dff5dd6>
      68:	02000000 	andeq	r0, r0, #0
      6c:	00001400 	andeq	r1, r0, r0, lsl #8
      70:	97010400 	strls	r0, [r1, -r0, lsl #8]
      74:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
      78:	c8c00082 	stmiagt	r0, {r1, r7}^
      7c:	63c00082 	bicvs	r0, r0, #130	; 0x82
      80:	6f6d6d6f 	svcvs	0x006d6d6f
      84:	72732f6e 	rsbsvc	r2, r3, #440	; 0x1b8
      88:	755f2f63 	ldrbvc	r2, [pc, #-3939]	; fffff12d <__bss_end__+0x3fff4a97>
      8c:	73646f6d 	cmnvc	r4, #436	; 0x1b4
      90:	532e3369 			; <UNDEFINED> instruction: 0x532e3369
      94:	6f682f00 	svcvs	0x00682f00
      98:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; fffffeec <__bss_end__+0x3fff5856>
      9c:	78756e69 	ldmdavc	r5!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
      a0:	7261662f 	rsbvc	r6, r1, #49283072	; 0x2f00000
      a4:	68676973 	stmdavs	r7!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
      a8:	52412f74 	subpl	r2, r1, #116, 30	; 0x1d0
      ac:	43442f4d 	movtmi	r2, #20301	; 0x4f4d
      b0:	31313232 	teqcc	r1, r2, lsr r2
      b4:	61642f31 	cmnvs	r4, r1, lsr pc
      b8:	2f363079 	svccs	0x00363079
      bc:	752d3330 	strvc	r3, [sp, #-816]!	; 0xfffffcd0
      c0:	2d747261 	lfmcs	f7, 2, [r4, #-388]!	; 0xfffffe7c
      c4:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
      c8:	53412055 	movtpl	r2, #4181	; 0x1055
      cc:	322e3220 	eorcc	r3, lr, #32, 4
      d0:	00322e38 	eorseq	r2, r2, r8, lsr lr
      d4:	006b8001 	rsbeq	r8, fp, r1
      d8:	00020000 	andeq	r0, r2, r0
      dc:	00000028 	andeq	r0, r0, r8, lsr #32
      e0:	01070104 	tsteq	r7, r4, lsl #2
      e4:	82c80000 	sbchi	r0, r8, #0
      e8:	835cc000 	cmphi	ip, #0
      ec:	6f63c000 	svcvs	0x0063c000
      f0:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
      f4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
      f8:	64755f2f 	ldrbtvs	r5, [r5], #-3887	; 0xfffff0d1
      fc:	69737669 	ldmdbvs	r3!, {r0, r3, r5, r6, r9, sl, ip, sp, lr}^
     100:	00532e33 	subseq	r2, r3, r3, lsr lr
     104:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 50 <_start-0xc0007fb0>
     108:	696c2f65 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     10c:	2f78756e 	svccs	0x0078756e
     110:	73726166 	cmnvc	r2, #-2147483623	; 0x80000019
     114:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
     118:	4d52412f 	ldfmie	f4, [r2, #-188]	; 0xffffff44
     11c:	3243442f 	subcc	r4, r3, #788529152	; 0x2f000000
     120:	31313132 	teqcc	r1, r2, lsr r1
     124:	7961642f 	stmdbvc	r1!, {r0, r1, r2, r3, r5, sl, sp, lr}^
     128:	302f3630 	eorcc	r3, pc, r0, lsr r6	; <UNPREDICTABLE>
     12c:	61752d33 	cmnvs	r5, r3, lsr sp
     130:	632d7472 			; <UNDEFINED> instruction: 0x632d7472
     134:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
     138:	20534120 	subscs	r4, r3, r0, lsr #2
     13c:	38322e32 	ldmdacc	r2!, {r1, r4, r5, r9, sl, fp, sp}
     140:	0100322e 	tsteq	r0, lr, lsr #4
     144:	00047e80 	andeq	r7, r4, r0, lsl #29
     148:	3c000400 	cfstrscc	mvf0, [r0], {-0}
     14c:	04000000 	streq	r0, [r0], #-0
     150:	00005201 	andeq	r5, r0, r1, lsl #4
     154:	01110c00 	tsteq	r1, r0, lsl #24
     158:	019e0000 	orrseq	r0, lr, r0
     15c:	835c0000 	cmphi	ip, #0
     160:	10b8c000 	adcsne	ip, r8, r0
     164:	01700000 	cmneq	r0, r0
     168:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
     16c:	03000000 	movweq	r0, #0
     170:	00003028 	andeq	r3, r0, r8, lsr #32
     174:	07040300 	streq	r0, [r4, -r0, lsl #6]
     178:	02000000 	andeq	r0, r0, #0
     17c:	00000040 	andeq	r0, r0, r0, asr #32
     180:	00256603 	eoreq	r6, r5, r3, lsl #12
     184:	58040000 	stmdapl	r4, {}	; <UNPREDICTABLE>
     188:	51000000 	mrspl	r0, (UNDEF: 0)
     18c:	05000000 	streq	r0, [r0, #-0]
     190:	00000051 	andeq	r0, r0, r1, asr r0
     194:	040600ff 	streq	r0, [r6], #-255	; 0xffffff01
     198:	0000f107 	andeq	pc, r0, r7, lsl #2
     19c:	08010600 	stmdaeq	r1, {r9, sl}
     1a0:	000000de 	ldrdeq	r0, [r0], -lr
     1a4:	00016607 	andeq	r6, r1, r7, lsl #12
     1a8:	41110100 	tstmi	r1, r0, lsl #2
     1ac:	05000000 	streq	r0, [r0, #-0]
     1b0:	00a58803 	adceq	r8, r5, r3, lsl #16
     1b4:	01d108c0 	bicseq	r0, r1, r0, asr #17
     1b8:	7d020000 	stcvc	0, cr0, [r2, #-0]
     1bc:	0093c801 	addseq	ip, r3, r1, lsl #16
     1c0:	00004cc0 	andeq	r4, r0, r0, asr #25
     1c4:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
     1c8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     1cc:	00746d66 	rsbseq	r6, r4, r6, ror #26
     1d0:	b6017d02 	strlt	r7, [r1], -r2, lsl #26
     1d4:	02000000 	andeq	r0, r0, #0
     1d8:	0b0a7091 	bleq	29c424 <_start-0xbfd6bbdc>
     1dc:	00000185 	andeq	r0, r0, r5, lsl #3
     1e0:	36017f02 	strcc	r7, [r1], -r2, lsl #30
     1e4:	02000000 	andeq	r0, r0, #0
     1e8:	6d0b6491 	cfstrsvs	mvf6, [fp, #-580]	; 0xfffffdbc
     1ec:	02000001 	andeq	r0, r0, #1
     1f0:	00c80180 	sbceq	r0, r8, r0, lsl #3
     1f4:	91030000 	mrsls	r0, (UNDEF: 3)
     1f8:	0c007f80 	stceq	15, cr7, [r0], {128}	; 0x80
     1fc:	0000c304 	andeq	ip, r0, r4, lsl #6
     200:	08010600 	stmdaeq	r1, {r9, sl}
     204:	000000e7 	andeq	r0, r0, r7, ror #1
     208:	0000bc0d 	andeq	fp, r0, sp, lsl #24
     20c:	00bc0400 	adcseq	r0, ip, r0, lsl #8
     210:	00d80000 	sbcseq	r0, r8, r0
     214:	51050000 	mrspl	r0, (UNDEF: 5)
     218:	63000000 	movwvs	r0, #0
     21c:	01d00e00 	bicseq	r0, r0, r0, lsl #28
     220:	72020000 	andvc	r0, r2, #0
     224:	00012e01 	andeq	r2, r1, r1, lsl #28
     228:	00937c00 	addseq	r7, r3, r0, lsl #24
     22c:	00004cc0 	andeq	r4, r0, r0, asr #25
     230:	2e9c0100 	fmlcse	f0, f4, f0
     234:	09000001 	stmdbeq	r0, {r0}
     238:	00667562 	rsbeq	r7, r6, r2, ror #10
     23c:	35017202 	strcc	r7, [r1, #-514]	; 0xfffffdfe
     240:	02000001 	andeq	r0, r0, #1
     244:	66096091 			; <UNDEFINED> instruction: 0x66096091
     248:	0200746d 	andeq	r7, r0, #1828716544	; 0x6d000000
     24c:	00b60172 	adcseq	r0, r6, r2, ror r1
     250:	91020000 	mrsls	r0, (UNDEF: 2)
     254:	850b0a74 	strhi	r0, [fp, #-2676]	; 0xfffff58c
     258:	02000001 	andeq	r0, r0, #1
     25c:	00360174 	eorseq	r0, r6, r4, ror r1
     260:	91020000 	mrsls	r0, (UNDEF: 2)
     264:	00690f64 	rsbeq	r0, r9, r4, ror #30
     268:	2e017502 	cfsh32cs	mvfx7, mvfx1, #2
     26c:	02000001 	andeq	r0, r0, #1
     270:	10006891 	mulne	r0, r1, r8
     274:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     278:	040c0074 	streq	r0, [ip], #-116	; 0xffffff8c
     27c:	000000bc 	strheq	r0, [r0], -ip
     280:	0001cf11 	andeq	ip, r1, r1, lsl pc
     284:	2ebb0200 	cdpcs	2, 11, cr0, cr11, cr0, {0}
     288:	b4000001 	strlt	r0, [r0], #-1
     28c:	c8c0008a 	stmiagt	r0, {r1, r3, r7}^
     290:	01000008 	tsteq	r0, r8
     294:	0002479c 	muleq	r2, ip, r7
     298:	75621200 	strbvc	r1, [r2, #-512]!	; 0xfffffe00
     29c:	bb020066 	bllt	8043c <_start-0xbff87bc4>
     2a0:	00000135 	andeq	r0, r0, r5, lsr r1
     2a4:	12449102 	subne	r9, r4, #-2147483648	; 0x80000000
     2a8:	00746d66 	rsbseq	r6, r4, r6, ror #26
     2ac:	00b6bb02 	adcseq	fp, r6, r2, lsl #22
     2b0:	91020000 	mrsls	r0, (UNDEF: 2)
     2b4:	01851340 	orreq	r1, r5, r0, asr #6
     2b8:	bb020000 	bllt	802c0 <_start-0xbff87d40>
     2bc:	00000036 	andeq	r0, r0, r6, lsr r0
     2c0:	7fbc9103 	svcvc	0x00bc9103
     2c4:	6e656c14 	mcrvs	12, 3, r6, cr5, cr4, {0}
     2c8:	2ebd0200 	cdpcs	2, 11, cr0, cr13, cr0, {0}
     2cc:	02000001 	andeq	r0, r0, #1
     2d0:	6e145091 	mrcvs	0, 0, r5, cr4, cr1, {4}
     2d4:	02006d75 	andeq	r6, r0, #7488	; 0x1d40
     2d8:	000247c1 	andeq	r4, r2, r1, asr #15
     2dc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     2e0:	02006914 	andeq	r6, r0, #20, 18	; 0x50000
     2e4:	00012ec3 	andeq	r2, r1, r3, asr #29
     2e8:	70910200 	addsvc	r0, r1, r0, lsl #4
     2ec:	0000d915 	andeq	sp, r0, r5, lsl r9
     2f0:	2ec30200 	cdpcs	2, 12, cr0, cr3, cr0, {0}
     2f4:	02000001 	andeq	r0, r0, #1
     2f8:	73146c91 	tstvc	r4, #37120	; 0x9100
     2fc:	02007274 	andeq	r7, r0, #116, 4	; 0x40000007
     300:	000135c4 	andeq	r3, r1, r4, asr #11
     304:	68910200 	ldmvs	r1, {r9}
     308:	02007314 	andeq	r7, r0, #20, 6	; 0x50000000
     30c:	0000b6c5 	andeq	fp, r0, r5, asr #13
     310:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     314:	00012515 	andeq	r2, r1, r5, lsl r5
     318:	2ec70200 	cdpcs	2, 12, cr0, cr7, cr0, {0}
     31c:	02000001 	andeq	r0, r0, #1
     320:	79156091 	ldmdbvc	r5, {r0, r4, r7, sp, lr}
     324:	02000001 	andeq	r0, r0, #1
     328:	00012ec9 	andeq	r2, r1, r9, asr #29
     32c:	5c910200 	lfmpl	f0, 4, [r1], {0}
     330:	00004815 	andeq	r4, r0, r5, lsl r8
     334:	2eca0200 	cdpcs	2, 12, cr0, cr10, cr0, {0}
     338:	02000001 	andeq	r0, r0, #1
     33c:	30155891 	mulscc	r5, r1, r8
     340:	02000001 	andeq	r0, r0, #1
     344:	00012ecc 	andeq	r2, r1, ip, asr #29
     348:	54910200 	ldrpl	r0, [r1], #512	; 0x200
     34c:	00015016 	andeq	r5, r1, r6, lsl r0
     350:	0cd60200 	lfmeq	f0, 2, [r6], {0}
     354:	17c0008b 	strbne	r0, [r0, fp, lsl #1]
     358:	c0009124 	andgt	r9, r0, r4, lsr #2
     35c:	00000028 	andeq	r0, r0, r8, lsr #32
     360:	0000022e 	andeq	r0, r0, lr, lsr #4
     364:	0070690f 	rsbseq	r6, r0, pc, lsl #18
     368:	4e013402 	cdpmi	4, 0, cr3, cr1, cr2, {0}
     36c:	02000002 	andeq	r0, r0, #2
     370:	18004891 	stmdane	r0, {r0, r4, r7, fp, lr}
     374:	c0009150 	andgt	r9, r0, r0, asr r1
     378:	00000028 	andeq	r0, r0, r8, lsr #32
     37c:	0070690f 	rsbseq	r6, r0, pc, lsl #18
     380:	5b013702 	blpl	4df90 <_start-0xbffba070>
     384:	02000002 	andeq	r0, r0, #2
     388:	00004c91 	muleq	r0, r1, ip
     38c:	ec070406 	cfstrs	mvf0, [r7], {6}
     390:	0c000000 	stceq	0, cr0, [r0], {-0}
     394:	00025404 	andeq	r5, r2, r4, lsl #8
     398:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
     39c:	0000018a 	andeq	r0, r0, sl, lsl #3
     3a0:	012e040c 			; <UNDEFINED> instruction: 0x012e040c
     3a4:	57190000 	ldrpl	r0, [r9, -r0]
     3a8:	02000001 	andeq	r0, r0, #1
     3ac:	000051b3 			; <UNDEFINED> instruction: 0x000051b3
     3b0:	008a4800 	addeq	r4, sl, r0, lsl #16
     3b4:	00006cc0 	andeq	r6, r0, r0, asr #25
     3b8:	a29c0100 	addsge	r0, ip, #0, 2
     3bc:	12000002 	andne	r0, r0, #2
     3c0:	b3020073 	movwlt	r0, #8307	; 0x2073
     3c4:	000000b6 	strheq	r0, [r0], -r6
     3c8:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
     3cc:	00000029 	andeq	r0, r0, r9, lsr #32
     3d0:	0051b302 	subseq	fp, r1, r2, lsl #6
     3d4:	91020000 	mrsls	r0, (UNDEF: 2)
     3d8:	63731470 	cmnvs	r3, #112, 8	; 0x70000000
     3dc:	b6b50200 	ldrtlt	r0, [r5], r0, lsl #4
     3e0:	02000000 	andeq	r0, r0, #0
     3e4:	1a007891 	bne	1e630 <_start-0xbffe99d0>
     3e8:	0000015f 	andeq	r0, r0, pc, asr r1
     3ec:	01356e02 	teqeq	r5, r2, lsl #28
     3f0:	86640000 	strbthi	r0, [r4], -r0
     3f4:	03e4c000 	mvneq	ip, #0
     3f8:	9c010000 	stcls	0, cr0, [r1], {-0}
     3fc:	0000036f 	andeq	r0, r0, pc, ror #6
     400:	72747312 	rsbsvc	r7, r4, #1207959552	; 0x48000000
     404:	356e0200 	strbcc	r0, [lr, #-512]!	; 0xfffffe00
     408:	03000001 	movweq	r0, #1
     40c:	127f9c91 	rsbsne	r9, pc, #37120	; 0x9100
     410:	006d756e 	rsbeq	r7, sp, lr, ror #10
     414:	02546e02 	subseq	r6, r4, #2, 28
     418:	91030000 	mrsls	r0, (UNDEF: 3)
     41c:	d9137f98 	ldmdble	r3, {r3, r4, r7, r8, r9, sl, fp, ip, sp, lr}
     420:	02000000 	andeq	r0, r0, #0
     424:	0000516e 	andeq	r5, r0, lr, ror #2
     428:	94910300 	ldrls	r0, [r1], #768	; 0x300
     42c:	012b137f 			; <UNDEFINED> instruction: 0x012b137f
     430:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
     434:	0000012e 	andeq	r0, r0, lr, lsr #2
     438:	7f909103 	svcvc	0x00909103
     43c:	00004813 	andeq	r4, r0, r3, lsl r8
     440:	2e6e0200 	cdpcs	2, 6, cr0, cr14, cr0, {0}
     444:	02000001 	andeq	r0, r0, #1
     448:	68130091 	ldmdavs	r3, {r0, r4, r7}
     44c:	02000001 	andeq	r0, r0, #1
     450:	00012e6e 	andeq	r2, r1, lr, ror #28
     454:	04910200 	ldreq	r0, [r1], #512	; 0x200
     458:	02006314 	andeq	r6, r0, #20, 6	; 0x50000000
     45c:	0000bc71 	andeq	fp, r0, r1, ror ip
     460:	6b910200 	blvs	fe440c68 <__bss_end__+0x3e4365d2>
     464:	00019315 	andeq	r9, r1, r5, lsl r3
     468:	bc710200 	lfmlt	f0, 2, [r1], #-0
     46c:	02000000 	andeq	r0, r0, #0
     470:	74147791 	ldrvc	r7, [r4], #-1937	; 0xfffff86f
     474:	0200706d 	andeq	r7, r0, #109	; 0x6d
     478:	00036f71 	andeq	r6, r3, r1, ror pc
     47c:	a0910300 	addsge	r0, r1, r0, lsl #6
     480:	0000157f 	andeq	r1, r0, pc, ror r5
     484:	72020000 	andvc	r0, r2, #0
     488:	000000b6 	strheq	r0, [r0], -r6
     48c:	14709102 	ldrbtne	r9, [r0], #-258	; 0xfffffefe
     490:	73020069 	movwvc	r0, #8297	; 0x2069
     494:	0000012e 	andeq	r0, r0, lr, lsr #2
     498:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     49c:	c0008820 	andgt	r8, r0, r0, lsr #16
     4a0:	00000034 	andeq	r0, r0, r4, lsr r0
     4a4:	00019815 	andeq	r9, r1, r5, lsl r8
     4a8:	2e950200 	cdpcs	2, 9, cr0, cr5, cr0, {0}
     4ac:	02000001 	andeq	r0, r0, #1
     4b0:	00006491 	muleq	r0, r1, r4
     4b4:	0000bc04 	andeq	fp, r0, r4, lsl #24
     4b8:	00037f00 	andeq	r7, r3, r0, lsl #30
     4bc:	00510500 	subseq	r0, r1, r0, lsl #10
     4c0:	00410000 	subeq	r0, r1, r0
     4c4:	0000191b 	andeq	r1, r0, fp, lsl r9
     4c8:	2e490200 	cdpcs	2, 4, cr0, cr9, cr0, {0}
     4cc:	d0000001 	andle	r0, r0, r1
     4d0:	94c00085 	strbls	r0, [r0], #133	; 0x85
     4d4:	01000000 	mrseq	r0, (UNDEF: 0)
     4d8:	0003b19c 	muleq	r3, ip, r1
     4dc:	00731200 	rsbseq	r1, r3, r0, lsl #4
     4e0:	03b14902 			; <UNDEFINED> instruction: 0x03b14902
     4e4:	91020000 	mrsls	r0, (UNDEF: 2)
     4e8:	00691474 	rsbeq	r1, r9, r4, ror r4
     4ec:	012e4b02 			; <UNDEFINED> instruction: 0x012e4b02
     4f0:	91020000 	mrsls	r0, (UNDEF: 2)
     4f4:	040c0078 	streq	r0, [ip], #-120	; 0xffffff88
     4f8:	000000b6 	strheq	r0, [r0], -r6
     4fc:	00010311 	andeq	r0, r1, r1, lsl r3
     500:	54210200 	strtpl	r0, [r1], #-512	; 0xfffffe00
     504:	64000002 	strvs	r0, [r0], #-2
     508:	6cc00085 	stclvs	0, cr0, [r0], {133}	; 0x85
     50c:	01000000 	mrseq	r0, (UNDEF: 0)
     510:	0003fa9c 	muleq	r3, ip, sl
     514:	70631200 	rsbvc	r1, r3, r0, lsl #4
     518:	b6210200 	strtlt	r0, [r1], -r0, lsl #4
     51c:	02000000 	andeq	r0, r0, #0
     520:	fe137491 	mrc2	4, 0, r7, cr3, cr1, {4}
     524:	02000000 	andeq	r0, r0, #0
     528:	0003fa21 	andeq	pc, r3, r1, lsr #20
     52c:	70910200 	addsvc	r0, r1, r0, lsl #4
     530:	0000d913 	andeq	sp, r0, r3, lsl r9
     534:	51210200 			; <UNDEFINED> instruction: 0x51210200
     538:	02000000 	andeq	r0, r0, #0
     53c:	0c006c91 	stceq	12, cr6, [r0], {145}	; 0x91
     540:	00013504 	andeq	r3, r1, r4, lsl #10
     544:	013a1100 	teqeq	sl, r0, lsl #2
     548:	06020000 	streq	r0, [r2], -r0
     54c:	00000247 	andeq	r0, r0, r7, asr #4
     550:	c00083ac 	andgt	r8, r0, ip, lsr #7
     554:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     558:	045f9c01 	ldrbeq	r9, [pc], #-3073	; 560 <_start-0xc0007aa0>
     55c:	63120000 	tstvs	r2, #0
     560:	06020070 			; <UNDEFINED> instruction: 0x06020070
     564:	000000b6 	strheq	r0, [r0], -r6
     568:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
     56c:	000000fe 	strdeq	r0, [r0], -lr
     570:	03fa0602 	mvnseq	r0, #2097152	; 0x200000
     574:	91020000 	mrsls	r0, (UNDEF: 2)
     578:	00d91368 	sbcseq	r1, r9, r8, ror #6
     57c:	06020000 	streq	r0, [r2], -r0
     580:	00000051 	andeq	r0, r0, r1, asr r0
     584:	15649102 	strbne	r9, [r4, #-258]!	; 0xfffffefe
     588:	00000149 	andeq	r0, r0, r9, asr #2
     58c:	02470802 	subeq	r0, r7, #131072	; 0x20000
     590:	91020000 	mrsls	r0, (UNDEF: 2)
     594:	00231574 	eoreq	r1, r3, r4, ror r5
     598:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     59c:	00000247 	andeq	r0, r0, r7, asr #4
     5a0:	00709102 	rsbseq	r9, r0, r2, lsl #2
     5a4:	00002f1c 	andeq	r2, r0, ip, lsl pc
     5a8:	58440100 	stmdapl	r4, {r8}^
     5ac:	5c000000 	stcpl	0, cr0, [r0], {-0}
     5b0:	50c00083 	sbcpl	r0, r0, r3, lsl #1
     5b4:	01000000 	mrseq	r0, (UNDEF: 0)
     5b8:	0063129c 	mlseq	r3, ip, r2, r1
     5bc:	00584401 	subseq	r4, r8, r1, lsl #8
     5c0:	91020000 	mrsls	r0, (UNDEF: 2)
     5c4:	14000078 	strne	r0, [r0], #-120	; 0xffffff88
     5c8:	04000002 	streq	r0, [r0], #-2
     5cc:	0001f800 	andeq	pc, r1, r0, lsl #16
     5d0:	52010400 	andpl	r0, r1, #0, 8
     5d4:	0c000000 	stceq	0, cr0, [r0], {-0}
     5d8:	00000267 	andeq	r0, r0, r7, ror #4
     5dc:	0000019e 	muleq	r0, lr, r1
     5e0:	c0009414 	andgt	r9, r0, r4, lsl r4
     5e4:	000002dc 	ldrdeq	r0, [r0], -ip
     5e8:	000003a2 	andeq	r0, r0, r2, lsr #7
     5ec:	04023402 	streq	r3, [r2], #-1026	; 0xfffffbfe
     5f0:	000000ca 	andeq	r0, r0, sl, asr #1
     5f4:	00023d03 	andeq	r3, r2, r3, lsl #26
     5f8:	d1050200 	mrsle	r0, SP_usr
     5fc:	00000000 	andeq	r0, r0, r0
     600:	00024a03 	andeq	r4, r2, r3, lsl #20
     604:	d1060200 	mrsle	r0, LR_usr
     608:	04000000 	streq	r0, [r0], #-0
     60c:	00020d03 	andeq	r0, r2, r3, lsl #26
     610:	d1070200 	mrsle	r0, (UNDEF: 39)
     614:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     618:	00020703 	andeq	r0, r2, r3, lsl #14
     61c:	d1080200 	mrsle	r0, R8_fiq
     620:	0c000000 	stceq	0, cr0, [r0], {-0}
     624:	52444904 	subpl	r4, r4, #4, 18	; 0x10000
     628:	d1090200 	mrsle	r0, R9_fiq
     62c:	10000000 	andne	r0, r0, r0
     630:	52444f04 	subpl	r4, r4, #4, 30
     634:	d10a0200 	mrsle	r0, R10_fiq
     638:	14000000 	strne	r0, [r0], #-0
     63c:	00020203 	andeq	r0, r2, r3, lsl #4
     640:	d10b0200 	mrsle	r0, R11_fiq
     644:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     648:	00023803 	andeq	r3, r2, r3, lsl #16
     64c:	d10c0200 	mrsle	r0, R12_fiq
     650:	1c000000 	stcne	0, cr0, [r0], {-0}
     654:	00025103 	andeq	r5, r2, r3, lsl #2
     658:	d10d0200 	mrsle	r0, SP_fiq
     65c:	20000000 	andcs	r0, r0, r0
     660:	00026203 	andeq	r6, r2, r3, lsl #4
     664:	d10e0200 	mrsle	r0, LR_fiq
     668:	24000000 	strcs	r0, [r0], #-0
     66c:	52524204 	subspl	r4, r2, #4, 4	; 0x40000000
     670:	d10f0200 	mrsle	r0, (UNDEF: 47)
     674:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     678:	73657204 	cmnvc	r5, #4, 4	; 0x40000000
     67c:	d1100200 	tstle	r0, r0, lsl #4
     680:	2c000000 	stccs	0, cr0, [r0], {-0}
     684:	0001e403 	andeq	lr, r1, r3, lsl #8
     688:	d1110200 	tstle	r1, r0, lsl #4
     68c:	30000000 	andcc	r0, r0, r0
     690:	07040500 	streq	r0, [r4, -r0, lsl #10]
     694:	000000f1 	strdeq	r0, [r0], -r1
     698:	0000ca06 	andeq	ip, r0, r6, lsl #20
     69c:	02310700 	eorseq	r0, r1, #0, 14
     6a0:	13020000 	movwne	r0, #8192	; 0x2000
     6a4:	00000025 	andeq	r0, r0, r5, lsr #32
     6a8:	04033002 	streq	r3, [r3], #-2
     6ac:	0000017a 	andeq	r0, r0, sl, ror r1
     6b0:	31524304 	cmpcc	r2, r4, lsl #6
     6b4:	d1050300 	mrsle	r0, SP_abt
     6b8:	00000000 	andeq	r0, r0, r0
     6bc:	32524304 	subscc	r4, r2, #4, 6	; 0x10000000
     6c0:	d1060300 	mrsle	r0, LR_und
     6c4:	04000000 	streq	r0, [r0], #-0
     6c8:	33524304 	cmpcc	r2, #4, 6	; 0x10000000
     6cc:	d1070300 	mrsle	r0, SP_und
     6d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     6d4:	52524204 	subspl	r4, r2, #4, 4	; 0x40000000
     6d8:	d1080300 	mrsle	r0, (UNDEF: 56)
     6dc:	0c000000 	stceq	0, cr0, [r0], {-0}
     6e0:	00021503 	andeq	r1, r2, r3, lsl #10
     6e4:	d1090300 	mrsle	r0, (UNDEF: 57)
     6e8:	10000000 	andne	r0, r0, r0
     6ec:	0001fd03 	andeq	pc, r1, r3, lsl #26
     6f0:	d10a0300 	mrsle	r0, (UNDEF: 58)
     6f4:	14000000 	strne	r0, [r0], #-0
     6f8:	52515204 	subspl	r5, r1, #4, 4	; 0x40000000
     6fc:	d10b0300 	mrsle	r0, (UNDEF: 59)
     700:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     704:	52534904 	subspl	r4, r3, #4, 18	; 0x10000
     708:	d10c0300 	mrsle	r0, LR_mon
     70c:	1c000000 	stcne	0, cr0, [r0], {-0}
     710:	52434904 	subpl	r4, r3, #4, 18	; 0x10000
     714:	d10d0300 	mrsle	r0, SP_mon
     718:	20000000 	andcs	r0, r0, r0
     71c:	52445204 	subpl	r5, r4, #4, 4	; 0x40000000
     720:	d10e0300 	mrsle	r0, ELR_hyp
     724:	24000000 	strcs	r0, [r0], #-0
     728:	52445404 	subpl	r5, r4, #4, 8	; 0x4000000
     72c:	d10f0300 	mrsle	r0, SP_hyp
     730:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     734:	00021a03 	andeq	r1, r2, r3, lsl #20
     738:	d1100300 	tstle	r0, r0, lsl #6
     73c:	2c000000 	stccs	0, cr0, [r0], {-0}
     740:	02430700 	subeq	r0, r3, #0, 14
     744:	11030000 	mrsne	r0, (UNDEF: 3)
     748:	000000e1 	andeq	r0, r0, r1, ror #1
     74c:	00025608 	andeq	r5, r2, r8, lsl #12
     750:	ac300100 	ldfges	f0, [r0], #-0
     754:	a4000001 	strge	r0, [r0], #-1
     758:	4cc00096 	stclmi	0, cr0, [r0], {150}	; 0x96
     75c:	01000000 	mrseq	r0, (UNDEF: 0)
     760:	0001ac9c 	muleq	r1, ip, ip
     764:	68630900 	stmdavs	r3!, {r8, fp}^
     768:	ac320100 	ldfges	f0, [r2], #-0
     76c:	02000001 	andeq	r0, r0, #1
     770:	05007b91 	streq	r7, [r0, #-2961]	; 0xfffff46f
     774:	00e70801 	rsceq	r0, r7, r1, lsl #16
     778:	ac0a0000 	stcge	0, cr0, [sl], {-0}
     77c:	0b000001 	bleq	788 <_start-0xc0007878>
     780:	000001ec 	andeq	r0, r0, ip, ror #3
     784:	965c2a01 	ldrbls	r2, [ip], -r1, lsl #20
     788:	0048c000 	subeq	ip, r8, r0
     78c:	9c010000 	stcls	0, cr0, [r1], {-0}
     790:	000001dc 	ldrdeq	r0, [r0], -ip
     794:	0002200c 	andeq	r2, r2, ip
     798:	dc2a0100 	stfles	f0, [sl], #-0
     79c:	02000001 	andeq	r0, r0, #1
     7a0:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
     7a4:	0001b304 	andeq	fp, r1, r4, lsl #6
     7a8:	01d80b00 	bicseq	r0, r8, r0, lsl #22
     7ac:	23010000 	movwcs	r0, #4096	; 0x1000
     7b0:	c00095fc 	strdgt	r9, [r0], -ip
     7b4:	00000060 	andeq	r0, r0, r0, rrx
     7b8:	02069c01 	andeq	r9, r6, #256	; 0x100
     7bc:	f80c0000 			; <UNDEFINED> instruction: 0xf80c0000
     7c0:	01000001 	tsteq	r0, r1
     7c4:	0001b323 	andeq	fp, r1, r3, lsr #6
     7c8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     7cc:	02250e00 	eoreq	r0, r5, #0, 28
     7d0:	05010000 	streq	r0, [r1, #-0]
     7d4:	c0009414 	andgt	r9, r0, r4, lsl r4
     7d8:	000001e8 	andeq	r0, r0, r8, ror #3
     7dc:	49009c01 	stmdbmi	r0, {r0, sl, fp, ip, pc}
     7e0:	04000000 	streq	r0, [r0], #-0
     7e4:	0002d000 	andeq	sp, r2, r0
     7e8:	52010400 	andpl	r0, r1, #0, 8
     7ec:	0c000000 	stceq	0, cr0, [r0], {-0}
     7f0:	00000280 	andeq	r0, r0, r0, lsl #5
     7f4:	0000019e 	muleq	r0, lr, r1
     7f8:	c00096f0 	strdgt	r9, [r0], -r0
     7fc:	00000018 	andeq	r0, r0, r8, lsl r0
     800:	0000044c 	andeq	r0, r0, ip, asr #8
     804:	01006902 	tsteq	r0, r2, lsl #18
     808:	00003402 	andeq	r3, r0, r2, lsl #8
     80c:	88030500 	stmdahi	r3, {r8, sl}
     810:	03c000a6 	biceq	r0, r0, #166	; 0xa6
     814:	00f10704 	rscseq	r0, r1, r4, lsl #14
     818:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
     81c:	01000002 	tsteq	r0, r2
     820:	0096f003 	addseq	pc, r6, r3
     824:	000018c0 	andeq	r1, r0, r0, asr #17
     828:	009c0100 	addseq	r0, ip, r0, lsl #2
     82c:	0000022d 	andeq	r0, r0, sp, lsr #4
     830:	03180004 	tsteq	r8, #4
     834:	01040000 	mrseq	r0, (UNDEF: 4)
     838:	00000052 	andeq	r0, r0, r2, asr r0
     83c:	0003040c 	andeq	r0, r3, ip, lsl #8
     840:	00019e00 	andeq	r9, r1, r0, lsl #28
     844:	00970800 	addseq	r0, r7, r0, lsl #16
     848:	0001e4c0 	andeq	lr, r1, r0, asr #9
     84c:	00048700 	andeq	r8, r4, r0, lsl #14
     850:	02180200 	andseq	r0, r8, #0, 4
     854:	00007605 	andeq	r7, r0, r5, lsl #12
     858:	023d0300 	eorseq	r0, sp, #0, 6
     85c:	07020000 	streq	r0, [r2, -r0]
     860:	0000007d 	andeq	r0, r0, sp, ror r0
     864:	024a0300 	subeq	r0, sl, #0, 6
     868:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     86c:	0000007d 	andeq	r0, r0, sp, ror r0
     870:	020d0304 	andeq	r0, sp, #4, 6	; 0x10000000
     874:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     878:	0000007d 	andeq	r0, r0, sp, ror r0
     87c:	02070308 	andeq	r0, r7, #8, 6	; 0x20000000
     880:	0a020000 	beq	80888 <_start-0xbff87778>
     884:	0000007d 	andeq	r0, r0, sp, ror r0
     888:	4449040c 	strbmi	r0, [r9], #-1036	; 0xfffffbf4
     88c:	0b020052 	bleq	809dc <_start-0xbff87624>
     890:	0000007d 	andeq	r0, r0, sp, ror r0
     894:	444f0410 	strbmi	r0, [pc], #-1040	; 89c <_start-0xc0007764>
     898:	0c020052 	stceq	0, cr0, [r2], {82}	; 0x52
     89c:	0000007d 	andeq	r0, r0, sp, ror r0
     8a0:	04050014 	streq	r0, [r5], #-20	; 0xffffffec
     8a4:	0000f107 	andeq	pc, r0, r7, lsl #2
     8a8:	00760600 	rsbseq	r0, r6, r0, lsl #12
     8ac:	31070000 	mrscc	r0, (UNDEF: 7)
     8b0:	02000002 	andeq	r0, r0, #2
     8b4:	0000250d 	andeq	r2, r0, sp, lsl #10
     8b8:	04070800 	streq	r0, [r7], #-2048	; 0xfffff800
     8bc:	00000076 	andeq	r0, r0, r6, ror r0
     8c0:	00b33702 	adcseq	r3, r3, r2, lsl #14
     8c4:	e8090000 	stmda	r9, {}	; <UNPREDICTABLE>
     8c8:	00000002 	andeq	r0, r0, r2
     8cc:	00034b09 	andeq	r4, r3, r9, lsl #22
     8d0:	410a0100 	mrsmi	r0, (UNDEF: 26)
     8d4:	0200464c 	andeq	r4, r0, #76, 12	; 0x4c00000
     8d8:	00036909 	andeq	r6, r3, r9, lsl #18
     8dc:	07000300 	streq	r0, [r0, -r0, lsl #6]
     8e0:	0000028d 	andeq	r0, r0, sp, lsl #5
     8e4:	008d3c02 	addeq	r3, sp, r2, lsl #24
     8e8:	07080000 	streq	r0, [r8, -r0]
     8ec:	00007604 	andeq	r7, r0, r4, lsl #12
     8f0:	d6410200 	strble	r0, [r1], -r0, lsl #4
     8f4:	0a000000 	beq	8fc <_start-0xc0007704>
     8f8:	00005050 	andeq	r5, r0, r0, asr r0
     8fc:	00444f0a 	subeq	r4, r4, sl, lsl #30
     900:	32070001 	andcc	r0, r7, #1
     904:	02000003 	andeq	r0, r0, #3
     908:	0000be44 	andeq	fp, r0, r4, asr #28
     90c:	04070800 	streq	r0, [r7], #-2048	; 0xfffff800
     910:	00000076 	andeq	r0, r0, r6, ror r0
     914:	01074802 	tsteq	r7, r2, lsl #16
     918:	4c0a0000 	stcmi	0, cr0, [sl], {-0}
     91c:	0000574f 	andeq	r5, r0, pc, asr #14
     920:	0002d209 	andeq	sp, r2, r9, lsl #4
     924:	64090100 	strvs	r0, [r9], #-256	; 0xffffff00
     928:	02000003 	andeq	r0, r0, #3
     92c:	00035f09 	andeq	r5, r3, r9, lsl #30
     930:	07000300 	streq	r0, [r0, -r0, lsl #6]
     934:	0000030f 	andeq	r0, r0, pc, lsl #6
     938:	00e14e02 	rsceq	r4, r1, r2, lsl #28
     93c:	07080000 	streq	r0, [r8, -r0]
     940:	00007604 	andeq	r7, r0, r4, lsl #12
     944:	30520200 	subscc	r0, r2, r0, lsl #4
     948:	09000001 	stmdbeq	r0, {r0}
     94c:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
     950:	55500a00 	ldrbpl	r0, [r0, #-2560]	; 0xfffff600
     954:	500a0100 	andpl	r0, sl, r0, lsl #2
     958:	00020044 	andeq	r0, r2, r4, asr #32
     95c:	00035207 	andeq	r5, r3, r7, lsl #4
     960:	12570200 	subsne	r0, r7, #0, 4
     964:	08000001 	stmdaeq	r0, {r0}
     968:	00760407 	rsbseq	r0, r6, r7, lsl #8
     96c:	5b020000 	blpl	80974 <_start-0xbff8768c>
     970:	00000155 	andeq	r0, r0, r5, asr r1
     974:	0002b909 	andeq	fp, r2, r9, lsl #18
     978:	a0090000 	andge	r0, r9, r0
     97c:	01000002 	tsteq	r0, r2
     980:	03400700 	movteq	r0, #1792	; 0x700
     984:	5f020000 	svcpl	0x00020000
     988:	0000013b 	andeq	r0, r0, fp, lsr r1
     98c:	62021002 	andvs	r1, r2, #2
     990:	00000199 	muleq	r0, r9, r1
     994:	00029a03 	andeq	r9, r2, r3, lsl #20
     998:	b3640200 	cmnlt	r4, #0, 4
     99c:	00000000 	andeq	r0, r0, r0
     9a0:	0002ee03 	andeq	lr, r2, r3, lsl #28
     9a4:	d6650200 	strbtle	r0, [r5], -r0, lsl #4
     9a8:	04000000 	streq	r0, [r0], #-0
     9ac:	0002d903 	andeq	sp, r2, r3, lsl #18
     9b0:	07660200 	strbeq	r0, [r6, -r0, lsl #4]!
     9b4:	08000001 	stmdaeq	r0, {r0}
     9b8:	00031e03 	andeq	r1, r3, r3, lsl #28
     9bc:	30670200 	rsbcc	r0, r7, r0, lsl #4
     9c0:	0c000001 	stceq	0, cr0, [r0], {1}
     9c4:	02c60700 	sbceq	r0, r6, #0, 14
     9c8:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
     9cc:	00000160 	andeq	r0, r0, r0, ror #2
     9d0:	0002f50b 	andeq	pc, r2, fp, lsl #10
     9d4:	641a0100 	ldrvs	r0, [sl], #-256	; 0xffffff00
     9d8:	88c00098 	stmiahi	r0, {r3, r4, r7}^
     9dc:	01000000 	mrseq	r0, (UNDEF: 0)
     9e0:	0001e49c 	muleq	r1, ip, r4
     9e4:	02ab0c00 	adceq	r0, fp, #0, 24
     9e8:	1a010000 	bne	409f0 <_start-0xbffc7610>
     9ec:	000001e4 	andeq	r0, r0, r4, ror #3
     9f0:	0d789102 	ldfeqp	f1, [r8, #-8]!
     9f4:	006e6970 	rsbeq	r6, lr, r0, ror r9
     9f8:	00761a01 	rsbseq	r1, r6, r1, lsl #20
     9fc:	91020000 	mrsls	r0, (UNDEF: 2)
     a00:	02e10c74 	rsceq	r0, r1, #116, 24	; 0x7400
     a04:	1a010000 	bne	40a0c <_start-0xbffc75f4>
     a08:	00000155 	andeq	r0, r0, r5, asr r1
     a0c:	00709102 	rsbseq	r9, r0, r2, lsl #2
     a10:	0082040e 	addeq	r0, r2, lr, lsl #8
     a14:	240b0000 	strcs	r0, [fp], #-0
     a18:	01000003 	tsteq	r0, r3
     a1c:	00970803 	addseq	r0, r7, r3, lsl #16
     a20:	00015cc0 	andeq	r5, r1, r0, asr #25
     a24:	2a9c0100 	bcs	fe700e2c <__bss_end__+0x3e6f6796>
     a28:	0c000002 	stceq	0, cr0, [r0], {2}
     a2c:	000002ab 	andeq	r0, r0, fp, lsr #5
     a30:	01e40301 	mvneq	r0, r1, lsl #6
     a34:	91020000 	mrsls	r0, (UNDEF: 2)
     a38:	69700d78 	ldmdbvs	r0!, {r3, r4, r5, r6, r8, sl, fp}^
     a3c:	0301006e 	movweq	r0, #4206	; 0x106e
     a40:	00000076 	andeq	r0, r0, r6, ror r0
     a44:	0c749102 	ldfeqp	f1, [r4], #-8
     a48:	00000eaf 	andeq	r0, r0, pc, lsr #29
     a4c:	022a0301 	eoreq	r0, sl, #67108864	; 0x4000000
     a50:	91020000 	mrsls	r0, (UNDEF: 2)
     a54:	040e0070 	streq	r0, [lr], #-112	; 0xffffff90
     a58:	00000199 	muleq	r0, r9, r1
     a5c:	00106800 	andseq	r6, r0, r0, lsl #16
     a60:	da000400 	ble	1a68 <_start-0xc0006598>
     a64:	04000003 	streq	r0, [r0], #-3
     a68:	00005201 	andeq	r5, r0, r1, lsl #4
     a6c:	08350c00 	ldmdaeq	r5!, {sl, fp}
     a70:	019e0000 	orrseq	r0, lr, r0
     a74:	98ec0000 	stmials	ip!, {}^	; <UNPREDICTABLE>
     a78:	0388c000 	orreq	ip, r8, #0
     a7c:	04eb0000 	strbteq	r0, [fp], #0
     a80:	30020000 	andcc	r0, r2, r0
     a84:	00be0402 	adcseq	r0, lr, r2, lsl #8
     a88:	43030000 	movwmi	r0, #12288	; 0x3000
     a8c:	02003152 	andeq	r3, r0, #-2147483628	; 0x80000014
     a90:	0000c505 	andeq	ip, r0, r5, lsl #10
     a94:	43030000 	movwmi	r0, #12288	; 0x3000
     a98:	02003252 	andeq	r3, r0, #536870917	; 0x20000005
     a9c:	0000c506 	andeq	ip, r0, r6, lsl #10
     aa0:	43030400 	movwmi	r0, #13312	; 0x3400
     aa4:	02003352 	andeq	r3, r0, #1207959553	; 0x48000001
     aa8:	0000c507 	andeq	ip, r0, r7, lsl #10
     aac:	42030800 	andmi	r0, r3, #0, 16
     ab0:	02005252 	andeq	r5, r0, #536870917	; 0x20000005
     ab4:	0000c508 	andeq	ip, r0, r8, lsl #10
     ab8:	15040c00 	strne	r0, [r4, #-3072]	; 0xfffff400
     abc:	02000002 	andeq	r0, r0, #2
     ac0:	0000c509 	andeq	ip, r0, r9, lsl #10
     ac4:	fd041000 	stc2	0, cr1, [r4, #-0]
     ac8:	02000001 	andeq	r0, r0, #1
     acc:	0000c50a 	andeq	ip, r0, sl, lsl #10
     ad0:	52031400 	andpl	r1, r3, #0, 8
     ad4:	02005251 	andeq	r5, r0, #268435461	; 0x10000005
     ad8:	0000c50b 	andeq	ip, r0, fp, lsl #10
     adc:	49031800 	stmdbmi	r3, {fp, ip}
     ae0:	02005253 	andeq	r5, r0, #805306373	; 0x30000005
     ae4:	0000c50c 	andeq	ip, r0, ip, lsl #10
     ae8:	49031c00 	stmdbmi	r3, {sl, fp, ip}
     aec:	02005243 	andeq	r5, r0, #805306372	; 0x30000004
     af0:	0000c50d 	andeq	ip, r0, sp, lsl #10
     af4:	52032000 	andpl	r2, r3, #0
     af8:	02005244 	andeq	r5, r0, #68, 4	; 0x40000004
     afc:	0000c50e 	andeq	ip, r0, lr, lsl #10
     b00:	54032400 	strpl	r2, [r3], #-1024	; 0xfffffc00
     b04:	02005244 	andeq	r5, r0, #68, 4	; 0x40000004
     b08:	0000c50f 	andeq	ip, r0, pc, lsl #10
     b0c:	1a042800 	bne	10ab14 <_start-0xbfefd4ec>
     b10:	02000002 	andeq	r0, r0, #2
     b14:	0000c510 	andeq	ip, r0, r0, lsl r5
     b18:	05002c00 	streq	r2, [r0, #-3072]	; 0xfffff400
     b1c:	00f10704 	rscseq	r0, r1, r4, lsl #14
     b20:	be060000 	cdplt	0, 0, cr0, cr6, cr0, {0}
     b24:	07000000 	streq	r0, [r0, -r0]
     b28:	00000243 	andeq	r0, r0, r3, asr #4
     b2c:	00251102 	eoreq	r1, r5, r2, lsl #2
     b30:	34020000 	strcc	r0, [r2], #-0
     b34:	017a0403 	cmneq	sl, r3, lsl #8
     b38:	3d040000 	stccc	0, cr0, [r4, #-0]
     b3c:	03000002 	movweq	r0, #2
     b40:	0000c505 	andeq	ip, r0, r5, lsl #10
     b44:	4a040000 	bmi	100b4c <_start-0xbff074b4>
     b48:	03000002 	movweq	r0, #2
     b4c:	0000c506 	andeq	ip, r0, r6, lsl #10
     b50:	0d040400 	cfstrseq	mvf0, [r4, #-0]
     b54:	03000002 	movweq	r0, #2
     b58:	0000c507 	andeq	ip, r0, r7, lsl #10
     b5c:	07040800 	streq	r0, [r4, -r0, lsl #16]
     b60:	03000002 	movweq	r0, #2
     b64:	0000c508 	andeq	ip, r0, r8, lsl #10
     b68:	49030c00 	stmdbmi	r3, {sl, fp}
     b6c:	03005244 	movweq	r5, #580	; 0x244
     b70:	0000c509 	andeq	ip, r0, r9, lsl #10
     b74:	4f031000 	svcmi	0x00031000
     b78:	03005244 	movweq	r5, #580	; 0x244
     b7c:	0000c50a 	andeq	ip, r0, sl, lsl #10
     b80:	02041400 	andeq	r1, r4, #0, 8
     b84:	03000002 	movweq	r0, #2
     b88:	0000c50b 	andeq	ip, r0, fp, lsl #10
     b8c:	38041800 	stmdacc	r4, {fp, ip}
     b90:	03000002 	movweq	r0, #2
     b94:	0000c50c 	andeq	ip, r0, ip, lsl #10
     b98:	51041c00 	tstpl	r4, r0, lsl #24
     b9c:	03000002 	movweq	r0, #2
     ba0:	0000c50d 	andeq	ip, r0, sp, lsl #10
     ba4:	62042000 	andvs	r2, r4, #0
     ba8:	03000002 	movweq	r0, #2
     bac:	0000c50e 	andeq	ip, r0, lr, lsl #10
     bb0:	42032400 	andmi	r2, r3, #0, 8
     bb4:	03005252 	movweq	r5, #594	; 0x252
     bb8:	0000c50f 	andeq	ip, r0, pc, lsl #10
     bbc:	72032800 	andvc	r2, r3, #0, 16
     bc0:	03007365 	movweq	r7, #869	; 0x365
     bc4:	0000c510 	andeq	ip, r0, r0, lsl r5
     bc8:	e4042c00 	str	r2, [r4], #-3072	; 0xfffff400
     bcc:	03000001 	movweq	r0, #1
     bd0:	0000c511 	andeq	ip, r0, r1, lsl r5
     bd4:	07003000 	streq	r3, [r0, -r0]
     bd8:	00000231 	andeq	r0, r0, r1, lsr r2
     bdc:	00d51303 	sbcseq	r1, r5, r3, lsl #6
     be0:	00080000 	andeq	r0, r8, r0
     be4:	37040410 	smladcc	r4, r0, r4, r0
     be8:	0400000e 	streq	r0, [r0], #-14
     bec:	00000e99 	muleq	r0, r9, lr
     bf0:	00c50504 	sbceq	r0, r5, r4, lsl #10
     bf4:	04000000 	streq	r0, [r0], #-0
     bf8:	00000581 	andeq	r0, r0, r1, lsl #11
     bfc:	0e470604 	cdpeq	6, 4, cr0, cr7, cr4, {0}
     c00:	04040000 	streq	r0, [r4], #-0
     c04:	0000063d 	andeq	r0, r0, sp, lsr r6
     c08:	00c50704 	sbceq	r0, r5, r4, lsl #14
     c0c:	040c0000 	streq	r0, [ip], #-0
     c10:	00000934 	andeq	r0, r0, r4, lsr r9
     c14:	00c50804 	sbceq	r0, r5, r4, lsl #16
     c18:	04100000 	ldreq	r0, [r0], #-0
     c1c:	00000586 	andeq	r0, r0, r6, lsl #11
     c20:	0e5c0904 	vnmlseq.f16	s1, s24, s8	; <UNPREDICTABLE>
     c24:	04140000 	ldreq	r0, [r4], #-0
     c28:	000007c2 	andeq	r0, r0, r2, asr #15
     c2c:	00c50a04 	sbceq	r0, r5, r4, lsl #20
     c30:	04180000 	ldreq	r0, [r8], #-0
     c34:	00000d59 	andeq	r0, r0, r9, asr sp
     c38:	00c50b04 	sbceq	r0, r5, r4, lsl #22
     c3c:	041c0000 	ldreq	r0, [ip], #-0
     c40:	0000079a 	muleq	r0, sl, r7
     c44:	00c50c04 	sbceq	r0, r5, r4, lsl #24
     c48:	04200000 	strteq	r0, [r0], #-0
     c4c:	00000e64 	andeq	r0, r0, r4, ror #28
     c50:	00c50d04 	sbceq	r0, r5, r4, lsl #26
     c54:	04240000 	strteq	r0, [r4], #-0
     c58:	00000a36 	andeq	r0, r0, r6, lsr sl
     c5c:	00c50e04 	sbceq	r0, r5, r4, lsl #28
     c60:	04280000 	strteq	r0, [r8], #-0
     c64:	00000ada 	ldrdeq	r0, [r0], -sl
     c68:	00c50f04 	sbceq	r0, r5, r4, lsl #30
     c6c:	042c0000 	strteq	r0, [ip], #-0
     c70:	000003c6 	andeq	r0, r0, r6, asr #7
     c74:	00c51004 	sbceq	r1, r5, r4
     c78:	04300000 	ldrteq	r0, [r0], #-0
     c7c:	0000058b 	andeq	r0, r0, fp, lsl #11
     c80:	0e471104 	dvfeqs	f1, f7, f4
     c84:	04340000 	ldrteq	r0, [r4], #-0
     c88:	00000408 	andeq	r0, r0, r8, lsl #8
     c8c:	00c51204 	sbceq	r1, r5, r4, lsl #4
     c90:	043c0000 	ldrteq	r0, [ip], #-0
     c94:	00000bc7 	andeq	r0, r0, r7, asr #23
     c98:	00c51304 	sbceq	r1, r5, r4, lsl #6
     c9c:	04400000 	strbeq	r0, [r0], #-0
     ca0:	0000096c 	andeq	r0, r0, ip, ror #18
     ca4:	00c51404 	sbceq	r1, r5, r4, lsl #8
     ca8:	04440000 	strbeq	r0, [r4], #-0
     cac:	00000c43 	andeq	r0, r0, r3, asr #24
     cb0:	00c51504 	sbceq	r1, r5, r4, lsl #10
     cb4:	04480000 	strbeq	r0, [r8], #-0
     cb8:	00000590 	muleq	r0, r0, r5
     cbc:	0e711604 	cdpeq	6, 7, cr1, cr1, cr4, {0}
     cc0:	044c0000 	strbeq	r0, [ip], #-0
     cc4:	00000e7e 	andeq	r0, r0, lr, ror lr
     cc8:	00c51704 	sbceq	r1, r5, r4, lsl #14
     ccc:	04800000 	streq	r0, [r0], #0
     cd0:	000008a7 	andeq	r0, r0, r7, lsr #17
     cd4:	00c51804 	sbceq	r1, r5, r4, lsl #16
     cd8:	04840000 	streq	r0, [r4], #0
     cdc:	000008b1 			; <UNDEFINED> instruction: 0x000008b1
     ce0:	00c51904 	sbceq	r1, r5, r4, lsl #18
     ce4:	04880000 	streq	r0, [r8], #0
     ce8:	00000577 	andeq	r0, r0, r7, ror r5
     cec:	00c51a04 	sbceq	r1, r5, r4, lsl #20
     cf0:	048c0000 	streq	r0, [ip], #0
     cf4:	0000071b 	andeq	r0, r0, fp, lsl r7
     cf8:	00c51b04 	sbceq	r1, r5, r4, lsl #22
     cfc:	04900000 	ldreq	r0, [r0], #0
     d00:	00000c3c 	andeq	r0, r0, ip, lsr ip
     d04:	00c51c04 	sbceq	r1, r5, r4, lsl #24
     d08:	04940000 	ldreq	r0, [r4], #0
     d0c:	000004d5 	ldrdeq	r0, [r0], -r5
     d10:	00c51d04 	sbceq	r1, r5, r4, lsl #26
     d14:	04980000 	ldreq	r0, [r8], #0
     d18:	00000a40 	andeq	r0, r0, r0, asr #20
     d1c:	00c51e04 	sbceq	r1, r5, r4, lsl #28
     d20:	049c0000 	ldreq	r0, [ip], #0
     d24:	00000e42 	andeq	r0, r0, r2, asr #28
     d28:	00c51f04 	sbceq	r1, r5, r4, lsl #30
     d2c:	04a00000 	strteq	r0, [r0], #0
     d30:	00000ef8 	strdeq	r0, [r0], -r8
     d34:	00c52004 	sbceq	r2, r5, r4
     d38:	04a40000 	strteq	r0, [r4], #0
     d3c:	00000595 	muleq	r0, r5, r5
     d40:	0e862104 	rmfeqs	f2, f6, f4
     d44:	04a80000 	strteq	r0, [r8], #0
     d48:	00000e36 	andeq	r0, r0, r6, lsr lr
     d4c:	00c52204 	sbceq	r2, r5, r4, lsl #4
     d50:	04c00000 	strbeq	r0, [r0], #0
     d54:	000004f9 	strdeq	r0, [r0], -r9
     d58:	00c52304 	sbceq	r2, r5, r4, lsl #6
     d5c:	04c40000 	strbeq	r0, [r4], #0
     d60:	000004a0 	andeq	r0, r0, r0, lsr #9
     d64:	00c52404 	sbceq	r2, r5, r4, lsl #8
     d68:	04c80000 	strbeq	r0, [r8], #0
     d6c:	00000e20 	andeq	r0, r0, r0, lsr #28
     d70:	00c52504 	sbceq	r2, r5, r4, lsl #10
     d74:	04cc0000 	strbeq	r0, [ip], #0
     d78:	00000aec 	andeq	r0, r0, ip, ror #21
     d7c:	00c52604 	sbceq	r2, r5, r4, lsl #12
     d80:	04d00000 	ldrbeq	r0, [r0], #0
     d84:	00000974 	andeq	r0, r0, r4, ror r9
     d88:	00c52704 	sbceq	r2, r5, r4, lsl #14
     d8c:	04d40000 	ldrbeq	r0, [r4], #0
     d90:	00000ae3 	andeq	r0, r0, r3, ror #21
     d94:	00c52804 	sbceq	r2, r5, r4, lsl #16
     d98:	04d80000 	ldrbeq	r0, [r8], #0
     d9c:	0000059a 	muleq	r0, sl, r5
     da0:	0e9b2904 	vfnmseq.f16	s4, s22, s8	; <UNPREDICTABLE>
     da4:	09dc0000 	ldmibeq	ip, {}^	; <UNPREDICTABLE>
     da8:	000003fe 	strdeq	r0, [r0], -lr
     dac:	00c52a04 	sbceq	r2, r5, r4, lsl #20
     db0:	01000000 	mrseq	r0, (UNDEF: 0)
     db4:	000a8b09 	andeq	r8, sl, r9, lsl #22
     db8:	c52b0400 	strgt	r0, [fp, #-1024]!	; 0xfffffc00
     dbc:	04000000 	streq	r0, [r0], #-0
     dc0:	0d610901 			; <UNDEFINED> instruction: 0x0d610901
     dc4:	2c040000 	stccs	0, cr0, [r4], {-0}
     dc8:	000000c5 	andeq	r0, r0, r5, asr #1
     dcc:	b3090108 	movwlt	r0, #37128	; 0x9108
     dd0:	0400000b 	streq	r0, [r0], #-11
     dd4:	0000c52d 	andeq	ip, r0, sp, lsr #10
     dd8:	09010c00 	stmdbeq	r1, {sl, fp}
     ddc:	00000b3d 	andeq	r0, r0, sp, lsr fp
     de0:	00c52e04 	sbceq	r2, r5, r4, lsl #28
     de4:	01100000 	tsteq	r0, r0
     de8:	000ca509 	andeq	sl, ip, r9, lsl #10
     dec:	c52f0400 	strgt	r0, [pc, #-1024]!	; 9f4 <_start-0xc000760c>
     df0:	14000000 	strne	r0, [r0], #-0
     df4:	059f0901 	ldreq	r0, [pc, #2305]	; 16fd <_start-0xc0006903>
     df8:	30040000 	andcc	r0, r4, r0
     dfc:	00000eb0 			; <UNDEFINED> instruction: 0x00000eb0
     e00:	0f090118 	svceq	0x00090118
     e04:	0400000e 	streq	r0, [r0], #-14
     e08:	0000c531 	andeq	ip, r0, r1, lsr r5
     e0c:	09014000 	stmdbeq	r1, {lr}
     e10:	00000a27 	andeq	r0, r0, r7, lsr #20
     e14:	00c53204 	sbceq	r3, r5, r4, lsl #4
     e18:	01440000 	mrseq	r0, (UNDEF: 68)
     e1c:	0005a409 	andeq	sl, r5, r9, lsl #8
     e20:	c5330400 	ldrgt	r0, [r3, #-1024]!	; 0xfffffc00
     e24:	4800000e 	stmdami	r0, {r1, r2, r3}
     e28:	0ed40901 	vfnmseq.f16	s1, s8, s2	; <UNPREDICTABLE>
     e2c:	34040000 	strcc	r0, [r4], #-0
     e30:	000000c5 	andeq	r0, r0, r5, asr #1
     e34:	6b090180 	blvs	24143c <_start-0xbfdc6bc4>
     e38:	04000005 	streq	r0, [r0], #-5
     e3c:	0000c535 	andeq	ip, r0, r5, lsr r5
     e40:	09018400 	stmdbeq	r1, {sl, pc}
     e44:	00000b48 	andeq	r0, r0, r8, asr #22
     e48:	00c53604 	sbceq	r3, r5, r4, lsl #12
     e4c:	01880000 	orreq	r0, r8, r0
     e50:	000e1409 	andeq	r1, lr, r9, lsl #8
     e54:	c5370400 	ldrgt	r0, [r7, #-1024]!	; 0xfffffc00
     e58:	8c000000 	stchi	0, cr0, [r0], {-0}
     e5c:	07e40901 	strbeq	r0, [r4, r1, lsl #18]!
     e60:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
     e64:	000000c5 	andeq	r0, r0, r5, asr #1
     e68:	ed090190 	stfs	f0, [r9, #-576]	; 0xfffffdc0
     e6c:	04000004 	streq	r0, [r0], #-4
     e70:	0000c539 	andeq	ip, r0, r9, lsr r5
     e74:	09019400 	stmdbeq	r1, {sl, ip, pc}
     e78:	00000b31 	andeq	r0, r0, r1, lsr fp
     e7c:	00c53a04 	sbceq	r3, r5, r4, lsl #20
     e80:	01980000 	orrseq	r0, r8, r0
     e84:	0008cb09 	andeq	ip, r8, r9, lsl #22
     e88:	c53b0400 	ldrgt	r0, [fp, #-1024]!	; 0xfffffc00
     e8c:	9c000000 	stcls	0, cr0, [r0], {-0}
     e90:	05230901 	streq	r0, [r3, #-2305]!	; 0xfffff6ff
     e94:	3c040000 	stccc	0, cr0, [r4], {-0}
     e98:	000000c5 	andeq	r0, r0, r5, asr #1
     e9c:	c90901a0 	stmdbgt	r9, {r5, r7, r8}
     ea0:	04000008 	streq	r0, [r0], #-8
     ea4:	0000c53d 	andeq	ip, r0, sp, lsr r5
     ea8:	0901a400 	stmdbeq	r1, {sl, sp, pc}
     eac:	000005a9 	andeq	r0, r0, r9, lsr #11
     eb0:	0eda3e04 	cdpeq	14, 13, cr3, cr10, cr4, {0}
     eb4:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
     eb8:	0006b509 	andeq	fp, r6, r9, lsl #10
     ebc:	c53f0400 	ldrgt	r0, [pc, #-1024]!	; ac4 <_start-0xc000753c>
     ec0:	00000000 	andeq	r0, r0, r0
     ec4:	099d0902 	ldmibeq	sp, {r1, r8, fp}
     ec8:	40040000 	andmi	r0, r4, r0
     ecc:	000000c5 	andeq	r0, r0, r5, asr #1
     ed0:	18090204 	stmdane	r9, {r2, r9}
     ed4:	0400000d 	streq	r0, [r0], #-13
     ed8:	0000c541 	andeq	ip, r0, r1, asr #10
     edc:	09020800 	stmdbeq	r2, {fp}
     ee0:	0000044a 	andeq	r0, r0, sl, asr #8
     ee4:	00c54204 	sbceq	r4, r5, r4, lsl #4
     ee8:	020c0000 	andeq	r0, ip, #0
     eec:	0003a409 	andeq	sl, r3, r9, lsl #8
     ef0:	c5430400 	strbgt	r0, [r3, #-1024]	; 0xfffffc00
     ef4:	10000000 	andne	r0, r0, r0
     ef8:	0d830902 	vstreq.16	s0, [r3, #4]	; <UNPREDICTABLE>
     efc:	44040000 	strmi	r0, [r4], #-0
     f00:	000000c5 	andeq	r0, r0, r5, asr #1
     f04:	ac090214 	sfmge	f0, 4, [r9], {20}
     f08:	04000004 	streq	r0, [r0], #-4
     f0c:	0000c545 	andeq	ip, r0, r5, asr #10
     f10:	09021800 	stmdbeq	r2, {fp, ip}
     f14:	00000763 	andeq	r0, r0, r3, ror #14
     f18:	00c54604 	sbceq	r4, r5, r4, lsl #12
     f1c:	021c0000 	andseq	r0, ip, #0
     f20:	000c1e09 	andeq	r1, ip, r9, lsl #28
     f24:	c5470400 	strbgt	r0, [r7, #-1024]	; 0xfffffc00
     f28:	20000000 	andcs	r0, r0, r0
     f2c:	03760902 	cmneq	r6, #32768	; 0x8000
     f30:	48040000 	stmdami	r4, {}	; <UNPREDICTABLE>
     f34:	000000c5 	andeq	r0, r0, r5, asr #1
     f38:	c3090224 	movwgt	r0, #37412	; 0x9224
     f3c:	04000006 	streq	r0, [r0], #-6
     f40:	000eda49 	andeq	sp, lr, r9, asr #20
     f44:	09022800 	stmdbeq	r2, {fp, sp}
     f48:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     f4c:	00c54a04 	sbceq	r4, r5, r4, lsl #20
     f50:	02800000 	addeq	r0, r0, #0
     f54:	0007b409 	andeq	fp, r7, r9, lsl #8
     f58:	c54b0400 	strbgt	r0, [fp, #-1024]	; 0xfffffc00
     f5c:	84000000 	strhi	r0, [r0], #-0
     f60:	0b750902 	bleq	1d43370 <_start-0xbe2c4c90>
     f64:	4c040000 	stcmi	0, cr0, [r4], {-0}
     f68:	000000c5 	andeq	r0, r0, r5, asr #1
     f6c:	4c090288 	sfmmi	f0, 4, [r9], {136}	; 0x88
     f70:	0400000e 	streq	r0, [r0], #-14
     f74:	0000c54d 	andeq	ip, r0, sp, asr #10
     f78:	09028c00 	stmdbeq	r2, {sl, fp, pc}
     f7c:	000008fe 	strdeq	r0, [r0], -lr
     f80:	00c54e04 	sbceq	r4, r5, r4, lsl #28
     f84:	02900000 	addseq	r0, r0, #0
     f88:	000c0009 	andeq	r0, ip, r9
     f8c:	c54f0400 	strbgt	r0, [pc, #-1024]	; b94 <_start-0xc000746c>
     f90:	94000000 	strls	r0, [r0], #-0
     f94:	0f280902 	svceq	0x00280902
     f98:	50040000 	andpl	r0, r4, r0
     f9c:	000000c5 	andeq	r0, r0, r5, asr #1
     fa0:	ca090298 	bgt	241a08 <_start-0xbfdc65f8>
     fa4:	04000005 	streq	r0, [r0], #-5
     fa8:	0000c551 	andeq	ip, r0, r1, asr r5
     fac:	09029c00 	stmdbeq	r2, {sl, fp, ip, pc}
     fb0:	000003ce 	andeq	r0, r0, lr, asr #7
     fb4:	0eef5204 	cdpeq	2, 14, cr5, cr15, cr4, {0}
     fb8:	02a00000 	adceq	r0, r0, #0
     fbc:	000d9109 	andeq	r9, sp, r9, lsl #2
     fc0:	c5530400 	ldrbgt	r0, [r3, #-1024]	; 0xfffffc00
     fc4:	00000000 	andeq	r0, r0, r0
     fc8:	0da10903 			; <UNDEFINED> instruction: 0x0da10903
     fcc:	54040000 	strpl	r0, [r4], #-0
     fd0:	000000c5 	andeq	r0, r0, r5, asr #1
     fd4:	ee090304 	cdp	3, 0, cr0, cr9, cr4, {0}
     fd8:	0400000c 	streq	r0, [r0], #-12
     fdc:	0000c555 	andeq	ip, r0, r5, asr r5
     fe0:	09030800 	stmdbeq	r3, {fp}
     fe4:	00000c87 	andeq	r0, r0, r7, lsl #25
     fe8:	00c55604 	sbceq	r5, r5, r4, lsl #12
     fec:	030c0000 	movweq	r0, #49152	; 0xc000
     ff0:	000a5409 	andeq	r5, sl, r9, lsl #8
     ff4:	c5570400 	ldrbgt	r0, [r7, #-1024]	; 0xfffffc00
     ff8:	10000000 	andne	r0, r0, r0
     ffc:	0d260903 			; <UNDEFINED> instruction: 0x0d260903
    1000:	58040000 	stmdapl	r4, {}	; <UNPREDICTABLE>
    1004:	000000c5 	andeq	r0, r0, r5, asr #1
    1008:	67090314 	smladvs	r9, r4, r3, r0
    100c:	0400000c 	streq	r0, [r0], #-12
    1010:	0000c559 	andeq	ip, r0, r9, asr r5
    1014:	09031800 	stmdbeq	r3, {fp, ip}
    1018:	00000f01 	andeq	r0, r0, r1, lsl #30
    101c:	00c55a04 	sbceq	r5, r5, r4, lsl #20
    1020:	031c0000 	tsteq	ip, #0
    1024:	0005fe09 	andeq	pc, r5, r9, lsl #28
    1028:	c55b0400 	ldrbgt	r0, [fp, #-1024]	; 0xfffffc00
    102c:	20000000 	andcs	r0, r0, r0
    1030:	08ec0903 	stmiaeq	ip!, {r0, r1, r8, fp}^
    1034:	5c040000 	stcpl	0, cr0, [r4], {-0}
    1038:	000000c5 	andeq	r0, r0, r5, asr #1
    103c:	d4090324 	strle	r0, [r9], #-804	; 0xfffffcdc
    1040:	04000003 	streq	r0, [r0], #-3
    1044:	000eda5d 	andeq	sp, lr, sp, asr sl
    1048:	09032800 	stmdbeq	r3, {fp, sp}
    104c:	00000980 	andeq	r0, r0, r0, lsl #19
    1050:	00c55e04 	sbceq	r5, r5, r4, lsl #28
    1054:	03800000 	orreq	r0, r0, #0
    1058:	000cb009 	andeq	fp, ip, r9
    105c:	c55f0400 	ldrbgt	r0, [pc, #-1024]	; c64 <_start-0xc000739c>
    1060:	84000000 	strhi	r0, [r0], #-0
    1064:	0b910903 	bleq	fe443478 <__bss_end__+0x3e438de2>
    1068:	60040000 	andvs	r0, r4, r0
    106c:	000000c5 	andeq	r0, r0, r5, asr #1
    1070:	6e090388 	cdpvs	3, 0, cr0, cr9, cr8, {4}
    1074:	0400000e 	streq	r0, [r0], #-14
    1078:	0000c561 	andeq	ip, r0, r1, ror #10
    107c:	09038c00 	stmdbeq	r3, {sl, fp, pc}
    1080:	0000055b 	andeq	r0, r0, fp, asr r5
    1084:	00c56204 	sbceq	r6, r5, r4, lsl #4
    1088:	03900000 	orrseq	r0, r0, #0
    108c:	0007fc09 	andeq	pc, r7, r9, lsl #24
    1090:	c5630400 	strbgt	r0, [r3, #-1024]!	; 0xfffffc00
    1094:	94000000 	strls	r0, [r0], #-0
    1098:	07050903 	streq	r0, [r5, -r3, lsl #18]
    109c:	64040000 	strvs	r0, [r4], #-0
    10a0:	000000c5 	andeq	r0, r0, r5, asr #1
    10a4:	17090398 			; <UNDEFINED> instruction: 0x17090398
    10a8:	0400000a 	streq	r0, [r0], #-10
    10ac:	0000c565 	andeq	ip, r0, r5, ror #10
    10b0:	09039c00 	stmdbeq	r3, {sl, fp, ip, pc}
    10b4:	000003da 	ldrdeq	r0, [r0], -sl
    10b8:	0eef6604 	cdpeq	6, 14, cr6, cr15, cr4, {0}
    10bc:	03a00000 	moveq	r0, #0
    10c0:	00045809 	andeq	r5, r4, r9, lsl #16
    10c4:	c5670400 	strbgt	r0, [r7, #-1024]!	; 0xfffffc00
    10c8:	00000000 	andeq	r0, r0, r0
    10cc:	084d0904 	stmdaeq	sp, {r2, r8, fp}^
    10d0:	68040000 	stmdavs	r4, {}	; <UNPREDICTABLE>
    10d4:	000000c5 	andeq	r0, r0, r5, asr #1
    10d8:	1f090404 	svcne	0x00090404
    10dc:	0400000f 	streq	r0, [r0], #-15
    10e0:	0000c569 	andeq	ip, r0, r9, ror #10
    10e4:	09040800 	stmdbeq	r4, {fp}
    10e8:	0000095e 	andeq	r0, r0, lr, asr r9
    10ec:	00c56a04 	sbceq	r6, r5, r4, lsl #20
    10f0:	040c0000 	streq	r0, [ip], #-0
    10f4:	000c9709 	andeq	r9, ip, r9, lsl #14
    10f8:	c56b0400 	strbgt	r0, [fp, #-1024]!	; 0xfffffc00
    10fc:	10000000 	andne	r0, r0, r0
    1100:	0b010904 	bleq	43518 <_start-0xbffc4ae8>
    1104:	6c040000 	stcvs	0, cr0, [r4], {-0}
    1108:	000000c5 	andeq	r0, r0, r5, asr #1
    110c:	d8090414 	stmdale	r9, {r2, r4, sl}
    1110:	0400000c 	streq	r0, [r0], #-12
    1114:	0000c56d 	andeq	ip, r0, sp, ror #10
    1118:	09041800 	stmdbeq	r4, {fp, ip}
    111c:	0000080c 	andeq	r0, r0, ip, lsl #16
    1120:	00c56e04 	sbceq	r6, r5, r4, lsl #28
    1124:	041c0000 	ldreq	r0, [ip], #-0
    1128:	000d3609 	andeq	r3, sp, r9, lsl #12
    112c:	c56f0400 	strbgt	r0, [pc, #-1024]!	; d34 <_start-0xc00072cc>
    1130:	20000000 	andcs	r0, r0, r0
    1134:	03e00904 	mvneq	r0, #4, 18	; 0x10000
    1138:	70040000 	andvc	r0, r4, r0
    113c:	00000f04 	andeq	r0, r0, r4, lsl #30
    1140:	e6090424 	str	r0, [r9], -r4, lsr #8
    1144:	04000006 	streq	r0, [r0], #-6
    1148:	0000c571 	andeq	ip, r0, r1, ror r5
    114c:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    1150:	00000955 	andeq	r0, r0, r5, asr r9
    1154:	00c57204 	sbceq	r7, r5, r4, lsl #4
    1158:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    115c:	000e9e09 	andeq	r9, lr, r9, lsl #28
    1160:	c5730400 	ldrbgt	r0, [r3, #-1024]!	; 0xfffffc00
    1164:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1168:	093d0908 	ldmdbeq	sp!, {r3, r8, fp}
    116c:	74040000 	strvc	r0, [r4], #-0
    1170:	000000c5 	andeq	r0, r0, r5, asr #1
    1174:	e609080c 	str	r0, [r9], -ip, lsl #16
    1178:	04000003 	streq	r0, [r0], #-3
    117c:	000f1975 	andeq	r1, pc, r5, ror r9	; <UNPREDICTABLE>
    1180:	09081000 	stmdbeq	r8, {ip}
    1184:	00000b62 	andeq	r0, r0, r2, ror #22
    1188:	00c57604 	sbceq	r7, r5, r4, lsl #12
    118c:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    1190:	0006ac09 	andeq	sl, r6, r9, lsl #24
    1194:	c5770400 	ldrbgt	r0, [r7, #-1024]!	; 0xfffffc00
    1198:	24000000 	strcs	r0, [r0], #-0
    119c:	0ba90908 	bleq	fea435c4 <__bss_end__+0x3ea38f2e>
    11a0:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    11a4:	000000c5 	andeq	r0, r0, r5, asr #1
    11a8:	c2090828 	andgt	r0, r9, #40, 16	; 0x280000
    11ac:	04000009 	streq	r0, [r0], #-9
    11b0:	0000c579 	andeq	ip, r0, r9, ror r5
    11b4:	09082c00 	stmdbeq	r8, {sl, fp, sp}
    11b8:	00000ba1 	andeq	r0, r0, r1, lsr #23
    11bc:	00c57a04 	sbceq	r7, r5, r4, lsl #20
    11c0:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    11c4:	00055209 	andeq	r5, r5, r9, lsl #4
    11c8:	c57b0400 	ldrbgt	r0, [fp, #-1024]!	; 0xfffffc00
    11cc:	34000000 	strcc	r0, [r0], #-0
    11d0:	09ab0908 	stmibeq	fp!, {r3, r8, fp}
    11d4:	7c040000 	stcvc	0, cr0, [r4], {-0}
    11d8:	000000c5 	andeq	r0, r0, r5, asr #1
    11dc:	5a090838 	bpl	2432c4 <_start-0xbfdc4d3c>
    11e0:	04000008 	streq	r0, [r0], #-8
    11e4:	0000c57d 	andeq	ip, r0, sp, ror r5
    11e8:	09083c00 	stmdbeq	r8, {sl, fp, ip, sp}
    11ec:	000003ec 	andeq	r0, r0, ip, ror #7
    11f0:	0f2e7e04 	svceq	0x002e7e04
    11f4:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
    11f8:	0009cc09 	andeq	ip, r9, r9, lsl #24
    11fc:	c57f0400 	ldrbgt	r0, [pc, #-1024]!	; e04 <_start-0xc00071fc>
    1200:	80000000 	andhi	r0, r0, r0
    1204:	0e8f0908 	vdiveq.f16	s0, s30, s16	; <UNPREDICTABLE>
    1208:	80040000 	andhi	r0, r4, r0
    120c:	000000c5 	andeq	r0, r0, r5, asr #1
    1210:	d0090884 	andle	r0, r9, r4, lsl #17
    1214:	0400000b 	streq	r0, [r0], #-11
    1218:	0000c581 	andeq	ip, r0, r1, lsl #11
    121c:	09088800 	stmdbeq	r8, {fp, pc}
    1220:	00000e85 	andeq	r0, r0, r5, lsl #29
    1224:	00c58204 	sbceq	r8, r5, r4, lsl #4
    1228:	088c0000 	stmeq	ip, {}	; <UNPREDICTABLE>
    122c:	000a8209 	andeq	r8, sl, r9, lsl #4
    1230:	c5830400 	strgt	r0, [r3, #1024]	; 0x400
    1234:	90000000 	andls	r0, r0, r0
    1238:	0a2f0908 	beq	bc3660 <_start-0xbf4449a0>
    123c:	84040000 	strhi	r0, [r4], #-0
    1240:	000000c5 	andeq	r0, r0, r5, asr #1
    1244:	4a090894 	bmi	24349c <_start-0xbfdc4b64>
    1248:	0400000a 	streq	r0, [r0], #-10
    124c:	0000c585 	andeq	ip, r0, r5, lsl #11
    1250:	09089800 	stmdbeq	r8, {fp, ip, pc}
    1254:	00000bea 	andeq	r0, r0, sl, ror #23
    1258:	00c58604 	sbceq	r8, r5, r4, lsl #12
    125c:	089c0000 	ldmeq	ip, {}	; <UNPREDICTABLE>
    1260:	0009e109 	andeq	lr, r9, r9, lsl #2
    1264:	c5870400 	strgt	r0, [r7, #1024]	; 0x400
    1268:	a0000000 	andge	r0, r0, r0
    126c:	05d80908 	ldrbeq	r0, [r8, #2312]	; 0x908
    1270:	88040000 	stmdahi	r4, {}	; <UNPREDICTABLE>
    1274:	000000c5 	andeq	r0, r0, r5, asr #1
    1278:	f20908a4 	vadd.i8	d0, d25, d20
    127c:	04000003 	streq	r0, [r0], #-3
    1280:	000e8689 	andeq	r8, lr, r9, lsl #13
    1284:	0908a800 	stmdbeq	r8, {fp, sp, pc}
    1288:	00000873 	andeq	r0, r0, r3, ror r8
    128c:	00c58a04 	sbceq	r8, r5, r4, lsl #20
    1290:	08c00000 	stmiaeq	r0, {}^	; <UNPREDICTABLE>
    1294:	00084109 	andeq	r4, r8, r9, lsl #2
    1298:	c58b0400 	strgt	r0, [fp, #1024]	; 0x400
    129c:	c4000000 	strgt	r0, [r0], #-0
    12a0:	07300908 	ldreq	r0, [r0, -r8, lsl #18]!
    12a4:	8c040000 	stchi	0, cr0, [r4], {-0}
    12a8:	000000c5 	andeq	r0, r0, r5, asr #1
    12ac:	b10908c8 	smlabtlt	r9, r8, r8, r0
    12b0:	0400000d 	streq	r0, [r0], #-13
    12b4:	0000c58d 	andeq	ip, r0, sp, lsl #11
    12b8:	0908cc00 	stmdbeq	r8, {sl, fp, lr, pc}
    12bc:	0000078f 	andeq	r0, r0, pc, lsl #15
    12c0:	00c58e04 	sbceq	r8, r5, r4, lsl #28
    12c4:	08d00000 	ldmeq	r0, {}^	; <UNPREDICTABLE>
    12c8:	000e2b09 	andeq	r2, lr, r9, lsl #22
    12cc:	c58f0400 	strgt	r0, [pc, #1024]	; 16d4 <_start-0xc000692c>
    12d0:	d4000000 	strle	r0, [r0], #-0
    12d4:	0bba0908 	bleq	fee836fc <__bss_end__+0x3ee79066>
    12d8:	90040000 	andls	r0, r4, r0
    12dc:	000000c5 	andeq	r0, r0, r5, asr #1
    12e0:	260908d8 			; <UNDEFINED> instruction: 0x260908d8
    12e4:	04000009 	streq	r0, [r0], #-9
    12e8:	0000c591 	muleq	r0, r1, r5
    12ec:	0908dc00 	stmdbeq	r8, {sl, fp, ip, lr, pc}
    12f0:	00000df3 	strdeq	r0, [r0], -r3
    12f4:	00c59204 	sbceq	r9, r5, r4, lsl #4
    12f8:	08e00000 	stmiaeq	r0!, {}^	; <UNPREDICTABLE>
    12fc:	000bf409 	andeq	pc, fp, r9, lsl #8
    1300:	c5930400 	ldrgt	r0, [r3, #1024]	; 0x400
    1304:	e4000000 	str	r0, [r0], #-0
    1308:	06d90908 	ldrbeq	r0, [r9], r8, lsl #18
    130c:	94040000 	strls	r0, [r4], #-0
    1310:	000000c5 	andeq	r0, r0, r5, asr #1
    1314:	900908e8 	andls	r0, r9, r8, ror #17
    1318:	04000009 	streq	r0, [r0], #-9
    131c:	0000c595 	muleq	r0, r5, r5
    1320:	0908ec00 	stmdbeq	r8, {sl, fp, sp, lr, pc}
    1324:	00000510 	andeq	r0, r0, r0, lsl r5
    1328:	00c59604 	sbceq	r9, r5, r4, lsl #12
    132c:	08f00000 	ldmeq	r0!, {}^	; <UNPREDICTABLE>
    1330:	000dbc09 	andeq	fp, sp, r9, lsl #24
    1334:	c5970400 	ldrgt	r0, [r7, #1024]	; 0x400
    1338:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    133c:	043d0908 	ldrteq	r0, [sp], #-2312	; 0xfffff6f8
    1340:	98040000 	stmdals	r4, {}	; <UNPREDICTABLE>
    1344:	000000c5 	andeq	r0, r0, r5, asr #1
    1348:	160908f8 			; <UNDEFINED> instruction: 0x160908f8
    134c:	04000006 	streq	r0, [r0], #-6
    1350:	0000c599 	muleq	r0, r9, r5
    1354:	0908fc00 	stmdbeq	r8, {sl, fp, ip, sp, lr, pc}
    1358:	00000dda 	ldrdeq	r0, [r0], -sl
    135c:	00c59a04 	sbceq	r9, r5, r4, lsl #20
    1360:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1364:	000eee09 	andeq	lr, lr, r9, lsl #28
    1368:	c59b0400 	ldrgt	r0, [fp, #1024]	; 0x400
    136c:	04000000 	streq	r0, [r0], #-0
    1370:	07150909 	ldreq	r0, [r5, -r9, lsl #18]
    1374:	9c040000 	stcls	0, cr0, [r4], {-0}
    1378:	00000e5c 	andeq	r0, r0, ip, asr lr
    137c:	24090908 	strcs	r0, [r9], #-2312	; 0xfffff6f8
    1380:	04000007 	streq	r0, [r0], #-7
    1384:	0000c59d 	muleq	r0, sp, r5
    1388:	09090c00 	stmdbeq	r9, {sl, fp}
    138c:	000003f8 	strdeq	r0, [r0], -r8
    1390:	0e5c9e04 	cdpeq	14, 5, cr9, cr12, cr4, {0}
    1394:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    1398:	000c4d09 	andeq	r4, ip, r9, lsl #26
    139c:	c59f0400 	ldrgt	r0, [pc, #1024]	; 17a4 <_start-0xc000685c>
    13a0:	14000000 	strne	r0, [r0], #-0
    13a4:	0af70909 	beq	ffdc37d0 <__bss_end__+0x3fdb913a>
    13a8:	a0040000 	andge	r0, r4, r0
    13ac:	000000c5 	andeq	r0, r0, r5, asr #1
    13b0:	5a090918 	bpl	243818 <_start-0xbfdc47e8>
    13b4:	0400000e 	streq	r0, [r0], #-14
    13b8:	0000c5a1 	andeq	ip, r0, r1, lsr #11
    13bc:	09091c00 	stmdbeq	r9, {sl, fp, ip}
    13c0:	000007ca 	andeq	r0, r0, sl, asr #15
    13c4:	00c5a204 	sbceq	sl, r5, r4, lsl #4
    13c8:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    13cc:	00091c09 	andeq	r1, r9, r9, lsl #24
    13d0:	c5a30400 	strgt	r0, [r3, #1024]!	; 0x400
    13d4:	24000000 	strcs	r0, [r0], #-0
    13d8:	0b090909 	bleq	243804 <_start-0xbfdc47fc>
    13dc:	a4040000 	strge	r0, [r4], #-0
    13e0:	000000c5 	andeq	r0, r0, r5, asr #1
    13e4:	e1090928 	tst	r9, r8, lsr #18
    13e8:	04000005 	streq	r0, [r0], #-5
    13ec:	0000c5a5 	andeq	ip, r0, r5, lsr #11
    13f0:	09092c00 	stmdbeq	r9, {sl, fp, sp}
    13f4:	00000c59 	andeq	r0, r0, r9, asr ip
    13f8:	00c5a604 	sbceq	sl, r5, r4, lsl #12
    13fc:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    1400:	00048509 	andeq	r8, r4, r9, lsl #10
    1404:	c5a70400 	strgt	r0, [r7, #1024]!	; 0x400
    1408:	34000000 	strcc	r0, [r0], #-0
    140c:	05040909 	streq	r0, [r4, #-2313]	; 0xfffff6f7
    1410:	a8040000 	stmdage	r4, {}	; <UNPREDICTABLE>
    1414:	00000f43 	andeq	r0, r0, r3, asr #30
    1418:	fb090938 	blx	243902 <_start-0xbfdc46fe>
    141c:	04000009 	streq	r0, [r0], #-9
    1420:	0000c5a9 	andeq	ip, r0, r9, lsr #11
    1424:	09098000 	stmdbeq	r9, {pc}
    1428:	00000d0c 	andeq	r0, r0, ip, lsl #26
    142c:	00c5aa04 	sbceq	sl, r5, r4, lsl #20
    1430:	09840000 	stmibeq	r4, {}	; <UNPREDICTABLE>
    1434:	00063109 	andeq	r3, r6, r9, lsl #2
    1438:	c5ab0400 	strgt	r0, [fp, #1024]!	; 0x400
    143c:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    1440:	05400909 	strbeq	r0, [r0, #-2313]	; 0xfffff6f7
    1444:	ac040000 	stcge	0, cr0, [r4], {-0}
    1448:	000000c5 	andeq	r0, r0, r5, asr #1
    144c:	f009098c 			; <UNDEFINED> instruction: 0xf009098c
    1450:	04000007 	streq	r0, [r0], #-7
    1454:	0000c5ad 	andeq	ip, r0, sp, lsr #11
    1458:	09099000 	stmdbeq	r9, {ip, pc}
    145c:	00000d4d 	andeq	r0, r0, sp, asr #26
    1460:	00c5ae04 	sbceq	sl, r5, r4, lsl #28
    1464:	09940000 	ldmibeq	r4, {}	; <UNPREDICTABLE>
    1468:	0006a009 	andeq	sl, r6, r9
    146c:	c5af0400 	strgt	r0, [pc, #1024]!	; 1874 <_start-0xc000678c>
    1470:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    1474:	0ccc0909 			; <UNDEFINED> instruction: 0x0ccc0909
    1478:	b0040000 	andlt	r0, r4, r0
    147c:	000000c5 	andeq	r0, r0, r5, asr #1
    1480:	1709099c 			; <UNDEFINED> instruction: 0x1709099c
    1484:	04000008 	streq	r0, [r0], #-8
    1488:	0000c5b1 			; <UNDEFINED> instruction: 0x0000c5b1
    148c:	0909a000 	stmdbeq	r9, {sp, pc}
    1490:	000008d7 	ldrdeq	r0, [r0], -r7
    1494:	00c5b204 	sbceq	fp, r5, r4, lsl #4
    1498:	09a40000 	stmibeq	r4!, {}	; <UNPREDICTABLE>
    149c:	000cc009 	andeq	ip, ip, r9
    14a0:	c5b30400 	ldrgt	r0, [r3, #1024]!	; 0x400
    14a4:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
    14a8:	05ae0909 	streq	r0, [lr, #2313]!	; 0x909
    14ac:	b4040000 	strlt	r0, [r4], #-0
    14b0:	000000c5 	andeq	r0, r0, r5, asr #1
    14b4:	0a0909ac 	beq	243b6c <_start-0xbfdc4494>
    14b8:	04000005 	streq	r0, [r0], #-5
    14bc:	000f58b5 			; <UNDEFINED> instruction: 0x000f58b5
    14c0:	0909b000 	stmdbeq	r9, {ip, sp, pc}
    14c4:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    14c8:	00c5b604 	sbceq	fp, r5, r4, lsl #12
    14cc:	0a000000 	beq	14d4 <_start-0xc0006b2c>
    14d0:	00042f09 	andeq	r2, r4, r9, lsl #30
    14d4:	c5b70400 	ldrgt	r0, [r7, #1024]!	; 0x400
    14d8:	04000000 	streq	r0, [r0], #-0
    14dc:	09d3090a 	ldmibeq	r3, {r1, r3, r8, fp}^
    14e0:	b8040000 	stmdalt	r4, {}	; <UNPREDICTABLE>
    14e4:	000000c5 	andeq	r0, r0, r5, asr #1
    14e8:	2e090a08 	vmlacs.f32	s0, s18, s16
    14ec:	0400000c 	streq	r0, [r0], #-12
    14f0:	0000c5b9 			; <UNDEFINED> instruction: 0x0000c5b9
    14f4:	090a0c00 	stmdbeq	sl, {sl, fp}
    14f8:	00000cfe 	strdeq	r0, [r0], -lr
    14fc:	00c5ba04 	sbceq	fp, r5, r4, lsl #20
    1500:	0a100000 	beq	401508 <_start-0xbfc06af8>
    1504:	0003b209 	andeq	fp, r3, r9, lsl #4
    1508:	c5bb0400 	ldrgt	r0, [fp, #1024]!	; 0x400
    150c:	14000000 	strne	r0, [r0], #-0
    1510:	0ce0090a 			; <UNDEFINED> instruction: 0x0ce0090a
    1514:	bc040000 	stclt	0, cr0, [r4], {-0}
    1518:	000000c5 	andeq	r0, r0, r5, asr #1
    151c:	96090a18 			; <UNDEFINED> instruction: 0x96090a18
    1520:	04000003 	streq	r0, [r0], #-3
    1524:	0000c5bd 			; <UNDEFINED> instruction: 0x0000c5bd
    1528:	090a1c00 	stmdbeq	sl, {sl, fp, ip}
    152c:	00000a74 	andeq	r0, r0, r4, ror sl
    1530:	00c5be04 	sbceq	fp, r5, r4, lsl #28
    1534:	0a200000 	beq	80153c <_start-0xbf806ac4>
    1538:	000d3f09 	andeq	r3, sp, r9, lsl #30
    153c:	c5bf0400 	ldrgt	r0, [pc, #1024]!	; 1944 <_start-0xc00066bc>
    1540:	24000000 	strcs	r0, [r0], #-0
    1544:	0781090a 	streq	r0, [r1, sl, lsl #18]
    1548:	c0040000 	andgt	r0, r4, r0
    154c:	000000c5 	andeq	r0, r0, r5, asr #1
    1550:	56090a28 	strpl	r0, [r9], -r8, lsr #20
    1554:	04000006 	streq	r0, [r0], #-6
    1558:	0000c5c1 	andeq	ip, r0, r1, asr #11
    155c:	090a2c00 	stmdbeq	sl, {sl, fp, sp}
    1560:	00000f19 	andeq	r0, r0, r9, lsl pc
    1564:	0e47c204 	cdpeq	2, 4, cr12, cr7, cr4, {0}
    1568:	0a300000 	beq	c01570 <_start-0xbf406a90>
    156c:	00053109 	andeq	r3, r5, r9, lsl #2
    1570:	c5c30400 	strbgt	r0, [r3, #1024]	; 0x400
    1574:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    1578:	07d5090a 	ldrbeq	r0, [r5, sl, lsl #18]
    157c:	c4040000 	strgt	r0, [r4], #-0
    1580:	000000c5 	andeq	r0, r0, r5, asr #1
    1584:	1d090a3c 	vstrne	s0, [r9, #-240]	; 0xffffff10
    1588:	04000005 	streq	r0, [r0], #-5
    158c:	000f2ec5 	andeq	r2, pc, r5, asr #29
    1590:	090a4000 	stmdbeq	sl, {lr}
    1594:	00000ac7 	andeq	r0, r0, r7, asr #21
    1598:	00c5c604 	sbceq	ip, r5, r4, lsl #12
    159c:	0a800000 	beq	fe0015a4 <__bss_end__+0x3dff6f0e>
    15a0:	000d7509 	andeq	r7, sp, r9, lsl #10
    15a4:	c5c70400 	strbgt	r0, [r7, #1024]	; 0x400
    15a8:	84000000 	strhi	r0, [r0], #-0
    15ac:	0492090a 	ldreq	r0, [r2], #2314	; 0x90a
    15b0:	c8040000 	stmdagt	r4, {}	; <UNPREDICTABLE>
    15b4:	000000c5 	andeq	r0, r0, r5, asr #1
    15b8:	55090a88 	strpl	r0, [r9, #-2696]	; 0xfffff578
    15bc:	04000007 	streq	r0, [r0], #-7
    15c0:	0000c5c9 	andeq	ip, r0, r9, asr #11
    15c4:	090a8c00 	stmdbeq	sl, {sl, fp, pc}
    15c8:	00000b13 	andeq	r0, r0, r3, lsl fp
    15cc:	00c5ca04 	sbceq	ip, r5, r4, lsl #20
    15d0:	0a900000 	beq	fe4015d8 <__bss_end__+0x3e3f6f42>
    15d4:	0009b409 	andeq	fp, r9, r9, lsl #8
    15d8:	c5cb0400 	strbgt	r0, [fp, #1024]	; 0x400
    15dc:	94000000 	strls	r0, [r0], #-0
    15e0:	0b83090a 	bleq	fe0c3a10 <__bss_end__+0x3e0b937a>
    15e4:	cc040000 	stcgt	0, cr0, [r4], {-0}
    15e8:	000000c5 	andeq	r0, r0, r5, asr #1
    15ec:	21090a98 			; <UNDEFINED> instruction: 0x21090a98
    15f0:	04000004 	streq	r0, [r0], #-4
    15f4:	0000c5cd 	andeq	ip, r0, sp, asr #11
    15f8:	090a9c00 	stmdbeq	sl, {sl, fp, ip, pc}
    15fc:	00000899 	muleq	r0, r9, r8
    1600:	00c5ce04 	sbceq	ip, r5, r4, lsl #28
    1604:	0aa00000 	beq	fe80160c <__bss_end__+0x3e7f6f76>
    1608:	000b5409 	andeq	r5, fp, r9, lsl #8
    160c:	c5cf0400 	strbgt	r0, [pc, #1024]	; 1a14 <_start-0xc00065ec>
    1610:	a4000000 	strge	r0, [r0], #-0
    1614:	0ee0090a 	vfmaeq.f16	s1, s0, s20	; <UNPREDICTABLE>
    1618:	d0040000 	andle	r0, r4, r0
    161c:	000000c5 	andeq	r0, r0, r5, asr #1
    1620:	92090aa8 	andls	r0, r9, #168, 20	; 0xa8000
    1624:	04000006 	streq	r0, [r0], #-6
    1628:	0000c5d1 	ldrdeq	ip, [r0], -r1
    162c:	090aac00 	stmdbeq	sl, {sl, fp, sp, pc}
    1630:	00000de5 	andeq	r0, r0, r5, ror #27
    1634:	00c5d204 	sbceq	sp, r5, r4, lsl #4
    1638:	0ab00000 	beq	fec01640 <__bss_end__+0x3ebf6faa>
    163c:	00068409 	andeq	r8, r6, r9, lsl #8
    1640:	c5d30400 	ldrbgt	r0, [r3, #1024]	; 0x400
    1644:	b4000000 	strlt	r0, [r0], #-0
    1648:	087f090a 	ldmdaeq	pc!, {r1, r3, r8, fp}^	; <UNPREDICTABLE>
    164c:	d4040000 	strle	r0, [r4], #-0
    1650:	000000c5 	andeq	r0, r0, r5, asr #1
    1654:	ef090ab8 	svc	0x00090ab8
    1658:	04000005 	streq	r0, [r0], #-5
    165c:	0000c5d5 	ldrdeq	ip, [r0], -r5
    1660:	090abc00 	stmdbeq	sl, {sl, fp, ip, sp, pc}
    1664:	00000370 	andeq	r0, r0, r0, ror r3
    1668:	0f2ed604 	svceq	0x002ed604
    166c:	0ac00000 	beq	ff001674 <__bss_end__+0x3eff6fde>
    1670:	000dff09 	andeq	pc, sp, r9, lsl #30
    1674:	c5d70400 	ldrbgt	r0, [r7, #1024]	; 0x400
    1678:	00000000 	andeq	r0, r0, r0
    167c:	0eb4090b 	vmoveq.f16	s0, #75	; 0x3e580000  0.2109375	; <UNPREDICTABLE>
    1680:	d8040000 	stmdale	r4, {}	; <UNPREDICTABLE>
    1684:	000000c5 	andeq	r0, r0, r5, asr #1
    1688:	c4090b04 	strgt	r0, [r9], #-2820	; 0xfffff4fc
    168c:	0400000e 	streq	r0, [r0], #-14
    1690:	0000c5d9 	ldrdeq	ip, [r0], -r9
    1694:	090b0800 	stmdbeq	fp, {fp}
    1698:	000009eb 	andeq	r0, r0, fp, ror #19
    169c:	00c5da04 	sbceq	sp, r5, r4, lsl #20
    16a0:	0b0c0000 	bleq	3016a8 <_start-0xbfd06958>
    16a4:	00090c09 	andeq	r0, r9, r9, lsl #24
    16a8:	c5db0400 	ldrbgt	r0, [fp, #1024]	; 0x400
    16ac:	10000000 	andne	r0, r0, r0
    16b0:	0c0e090b 			; <UNDEFINED> instruction: 0x0c0e090b
    16b4:	dc040000 	stcle	0, cr0, [r4], {-0}
    16b8:	000000c5 	andeq	r0, r0, r5, asr #1
    16bc:	ba090b14 	blt	244314 <_start-0xbfdc3cec>
    16c0:	04000004 	streq	r0, [r0], #-4
    16c4:	0000c5dd 	ldrdeq	ip, [r0], -sp
    16c8:	090b1800 	stmdbeq	fp, {fp, ip}
    16cc:	00000771 	andeq	r0, r0, r1, ror r7
    16d0:	00c5de04 	sbceq	sp, r5, r4, lsl #28
    16d4:	0b1c0000 	bleq	7016dc <_start-0xbf906924>
    16d8:	00067409 	andeq	r7, r6, r9, lsl #8
    16dc:	c5df0400 	ldrbgt	r0, [pc, #1024]	; 1ae4 <_start-0xc000651c>
    16e0:	20000000 	andcs	r0, r0, r0
    16e4:	0bda090b 	bleq	ff683b18 <__bss_end__+0x3f679482>
    16e8:	e0040000 	and	r0, r4, r0
    16ec:	000000c5 	andeq	r0, r0, r5, asr #1
    16f0:	63090b24 	movwvs	r0, #39716	; 0x9b24
    16f4:	04000008 	streq	r0, [r0], #-8
    16f8:	0000c5e1 	andeq	ip, r0, r1, ror #11
    16fc:	090b2800 	stmdbeq	fp, {fp, sp}
    1700:	000005ba 			; <UNDEFINED> instruction: 0x000005ba
    1704:	00c5e204 	sbceq	lr, r5, r4, lsl #4
    1708:	0b2c0000 	bleq	b01710 <_start-0xbf5068f0>
    170c:	000aa709 	andeq	sl, sl, r9, lsl #14
    1710:	c5e30400 	strbgt	r0, [r3, #1024]!	; 0x400
    1714:	30000000 	andcc	r0, r0, r0
    1718:	0386090b 	orreq	r0, r6, #180224	; 0x2c000
    171c:	e4040000 	str	r0, [r4], #-0
    1720:	000000c5 	andeq	r0, r0, r5, asr #1
    1724:	74090b34 	strvc	r0, [r9], #-2868	; 0xfffff4cc
    1728:	04000004 	streq	r0, [r0], #-4
    172c:	0000c5e5 	andeq	ip, r0, r5, ror #11
    1730:	090b3800 	stmdbeq	fp, {fp, ip, sp}
    1734:	00000744 	andeq	r0, r0, r4, asr #14
    1738:	00c5e604 	sbceq	lr, r5, r4, lsl #12
    173c:	0b3c0000 	bleq	f01744 <_start-0xbf1068bc>
    1740:	00061009 	andeq	r1, r6, r9
    1744:	2ee70400 	cdpcs	4, 14, cr0, cr7, cr0, {0}
    1748:	4000000f 	andmi	r0, r0, pc
    174c:	0411090b 	ldreq	r0, [r1], #-2315	; 0xfffff6f5
    1750:	e8040000 	stmda	r4, {}	; <UNPREDICTABLE>
    1754:	000000c5 	andeq	r0, r0, r5, asr #1
    1758:	c9090b80 	stmdbgt	r9, {r7, r8, r9, fp}
    175c:	04000006 	streq	r0, [r0], #-6
    1760:	0000c5e9 	andeq	ip, r0, r9, ror #11
    1764:	090b8400 	stmdbeq	fp, {sl, pc}
    1768:	000006ef 	andeq	r0, r0, pc, ror #13
    176c:	00c5ea04 	sbceq	lr, r5, r4, lsl #20
    1770:	0b880000 	bleq	fe201778 <__bss_end__+0x3e1f70e2>
    1774:	000c7709 	andeq	r7, ip, r9, lsl #14
    1778:	c5eb0400 	strbgt	r0, [fp, #1024]!	; 0x400
    177c:	8c000000 	stchi	0, cr0, [r0], {-0}
    1780:	0945090b 	stmdbeq	r5, {r0, r1, r3, r8, fp}^
    1784:	ec040000 	stc	0, cr0, [r4], {-0}
    1788:	000000c5 	andeq	r0, r0, r5, asr #1
    178c:	b7090b90 			; <UNDEFINED> instruction: 0xb7090b90
    1790:	0400000a 	streq	r0, [r0], #-10
    1794:	0000c5ed 	andeq	ip, r0, sp, ror #11
    1798:	090b9400 	stmdbeq	fp, {sl, ip, pc}
    179c:	00000a97 	muleq	r0, r7, sl
    17a0:	00c5ee04 	sbceq	lr, r5, r4, lsl #28
    17a4:	0b980000 	bleq	fe6017ac <__bss_end__+0x3e5f7116>
    17a8:	000dca09 	andeq	ip, sp, r9, lsl #20
    17ac:	c5ef0400 	strbgt	r0, [pc, #1024]!	; 1bb4 <_start-0xc000644c>
    17b0:	9c000000 	stcls	0, cr0, [r0], {-0}
    17b4:	0a07090b 	beq	1c3be8 <_start-0xbfe44418>
    17b8:	f0040000 			; <UNDEFINED> instruction: 0xf0040000
    17bc:	000000c5 	andeq	r0, r0, r5, asr #1
    17c0:	64090ba0 	strvs	r0, [r9], #-2976	; 0xfffff460
    17c4:	04000004 	streq	r0, [r0], #-4
    17c8:	0000c5f1 	strdeq	ip, [r0], -r1
    17cc:	090ba400 	stmdbeq	fp, {sl, sp, pc}
    17d0:	00000a64 	andeq	r0, r0, r4, ror #20
    17d4:	00c5f204 	sbceq	pc, r5, r4, lsl #4
    17d8:	0ba80000 	bleq	fea017e0 <__bss_end__+0x3e9f714a>
    17dc:	00064609 	andeq	r4, r6, r9, lsl #12
    17e0:	c5f30400 	ldrbgt	r0, [r3, #1024]!	; 0x400
    17e4:	ac000000 	stcge	0, cr0, [r0], {-0}
    17e8:	0664090b 	strbteq	r0, [r4], -fp, lsl #18
    17ec:	f4040000 	vst4.8	{d0-d3}, [r4], r0
    17f0:	000000c5 	andeq	r0, r0, r5, asr #1
    17f4:	21090bb0 			; <UNDEFINED> instruction: 0x21090bb0
    17f8:	0400000b 	streq	r0, [r0], #-11
    17fc:	0000c5f5 	strdeq	ip, [r0], -r5
    1800:	090bb400 	stmdbeq	fp, {sl, ip, sp, pc}
    1804:	00000620 	andeq	r0, r0, r0, lsr #12
    1808:	00c5f604 	sbceq	pc, r5, r4, lsl #12
    180c:	0bb80000 	bleq	fee01814 <__bss_end__+0x3edf717e>
    1810:	0007a309 	andeq	sl, r7, r9, lsl #6
    1814:	c5f70400 	ldrbgt	r0, [r7, #1024]!	; 0x400
    1818:	bc000000 	stclt	0, cr0, [r0], {-0}
    181c:	0823090b 	stmdaeq	r3!, {r0, r1, r3, r8, fp}
    1820:	f8040000 			; <UNDEFINED> instruction: 0xf8040000
    1824:	00000f2e 	andeq	r0, r0, lr, lsr #30
    1828:	29090bc0 	stmdbcs	r9, {r6, r7, r8, r9, fp}
    182c:	04000008 	streq	r0, [r0], #-8
    1830:	0000c5f9 	strdeq	ip, [r0], -r9
    1834:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    1838:	0000054c 	andeq	r0, r0, ip, asr #10
    183c:	0f19fa04 	svceq	0x0019fa04
    1840:	0c040000 	stceq	0, cr0, [r4], {-0}
    1844:	000d6d09 	andeq	r6, sp, r9, lsl #26
    1848:	c5fb0400 	ldrbgt	r0, [fp, #1024]!	; 0x400
    184c:	14000000 	strne	r0, [r0], #-0
    1850:	0f11090c 	svceq	0x0011090c
    1854:	fc040000 	stc2	0, cr0, [r4], {-0}
    1858:	000000c5 	andeq	r0, r0, r5, asr #1
    185c:	c0090c18 	andgt	r0, r9, r8, lsl ip
    1860:	04000003 	streq	r0, [r0], #-3
    1864:	000f6dfd 	strdeq	r6, [pc], -sp
    1868:	090c1c00 	stmdbeq	ip, {sl, fp, ip}
    186c:	00000b6b 	andeq	r0, r0, fp, ror #22
    1870:	00c5fe04 	sbceq	pc, r5, r4, lsl #28
    1874:	0ff40000 	svceq	0x00f40000
    1878:	5244490a 	subpl	r4, r4, #163840	; 0x28000
    187c:	c5ff0400 	ldrbgt	r0, [pc, #1024]!	; 1c84 <_start-0xc000637c>
    1880:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    1884:	0ad50b0f 	beq	ff5444c8 <__bss_end__+0x3f539e32>
    1888:	00040000 	andeq	r0, r4, r0
    188c:	0000c501 	andeq	ip, r0, r1, lsl #10
    1890:	000ffc00 	andeq	pc, pc, r0, lsl #24
    1894:	0000c50c 	andeq	ip, r0, ip, lsl #10
    1898:	000e4700 	andeq	r4, lr, r0, lsl #14
    189c:	00be0d00 	adcseq	r0, lr, r0, lsl #26
    18a0:	00010000 	andeq	r0, r1, r0
    18a4:	000e3706 	andeq	r3, lr, r6, lsl #14
    18a8:	00c50c00 	sbceq	r0, r5, r0, lsl #24
    18ac:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    18b0:	be0d0000 	cdplt	0, 0, cr0, cr13, cr0, {0}
    18b4:	00000000 	andeq	r0, r0, r0
    18b8:	0e4c0600 	cdpeq	6, 4, cr0, cr12, cr0, {0}
    18bc:	c50c0000 	strgt	r0, [ip, #-0]
    18c0:	71000000 	mrsvc	r0, (UNDEF: 0)
    18c4:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    18c8:	000000be 	strheq	r0, [r0], -lr
    18cc:	6106000c 	tstvs	r6, ip
    18d0:	0c00000e 	stceq	0, cr0, [r0], {14}
    18d4:	000000c5 	andeq	r0, r0, r5, asr #1
    18d8:	00000e86 	andeq	r0, r0, r6, lsl #29
    18dc:	0000be0d 	andeq	fp, r0, sp, lsl #28
    18e0:	06000500 	streq	r0, [r0], -r0, lsl #10
    18e4:	00000e76 	andeq	r0, r0, r6, ror lr
    18e8:	0000c50c 	andeq	ip, r0, ip, lsl #10
    18ec:	000e9b00 	andeq	r9, lr, r0, lsl #22
    18f0:	00be0d00 	adcseq	r0, lr, r0, lsl #26
    18f4:	00080000 	andeq	r0, r8, r0
    18f8:	000e8b06 	andeq	r8, lr, r6, lsl #22
    18fc:	00c50c00 	sbceq	r0, r5, r0, lsl #24
    1900:	0eb00000 	cdpeq	0, 11, cr0, cr0, cr0, {0}
    1904:	be0d0000 	cdplt	0, 0, cr0, cr13, cr0, {0}
    1908:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    190c:	0ea00600 	cdpeq	6, 10, cr0, cr0, cr0, {0}
    1910:	c50c0000 	strgt	r0, [ip, #-0]
    1914:	c5000000 	strgt	r0, [r0, #-0]
    1918:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    191c:	000000be 	strheq	r0, [r0], -lr
    1920:	b506000d 	strlt	r0, [r6, #-13]
    1924:	0c00000e 	stceq	0, cr0, [r0], {14}
    1928:	000000c5 	andeq	r0, r0, r5, asr #1
    192c:	00000eda 	ldrdeq	r0, [r0], -sl
    1930:	0000be0d 	andeq	fp, r0, sp, lsl #28
    1934:	06001500 	streq	r1, [r0], -r0, lsl #10
    1938:	00000eca 	andeq	r0, r0, sl, asr #29
    193c:	0000c50c 	andeq	ip, r0, ip, lsl #10
    1940:	000eef00 	andeq	lr, lr, r0, lsl #30
    1944:	00be0d00 	adcseq	r0, lr, r0, lsl #26
    1948:	00170000 	andseq	r0, r7, r0
    194c:	000edf06 	andeq	sp, lr, r6, lsl #30
    1950:	00c50c00 	sbceq	r0, r5, r0, lsl #24
    1954:	0f040000 	svceq	0x00040000
    1958:	be0d0000 	cdplt	0, 0, cr0, cr13, cr0, {0}
    195c:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    1960:	0ef40600 	cdpeq	6, 15, cr0, cr4, cr0, {0}
    1964:	c50c0000 	strgt	r0, [ip, #-0]
    1968:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    196c:	0d00000f 	stceq	0, cr0, [r0, #-60]	; 0xffffffc4
    1970:	000000be 	strheq	r0, [r0], -lr
    1974:	09060003 	stmdbeq	r6, {r0, r1}
    1978:	0c00000f 	stceq	0, cr0, [r0], {15}
    197c:	000000c5 	andeq	r0, r0, r5, asr #1
    1980:	00000f2e 	andeq	r0, r0, lr, lsr #30
    1984:	0000be0d 	andeq	fp, r0, sp, lsl #28
    1988:	06000f00 	streq	r0, [r0], -r0, lsl #30
    198c:	00000f1e 	andeq	r0, r0, lr, lsl pc
    1990:	0000c50c 	andeq	ip, r0, ip, lsl #10
    1994:	000f4300 	andeq	r4, pc, r0, lsl #6
    1998:	00be0d00 	adcseq	r0, lr, r0, lsl #26
    199c:	00110000 	andseq	r0, r1, r0
    19a0:	000f3306 	andeq	r3, pc, r6, lsl #6
    19a4:	00c50c00 	sbceq	r0, r5, r0, lsl #24
    19a8:	0f580000 	svceq	0x00580000
    19ac:	be0d0000 	cdplt	0, 0, cr0, cr13, cr0, {0}
    19b0:	13000000 	movwne	r0, #0
    19b4:	0f480600 	svceq	0x00480600
    19b8:	c50c0000 	strgt	r0, [ip, #-0]
    19bc:	6d000000 	stcvs	0, cr0, [r0, #-0]
    19c0:	0d00000f 	stceq	0, cr0, [r0, #-60]	; 0xffffffc4
    19c4:	000000be 	strheq	r0, [r0], -lr
    19c8:	5d0600f5 	stcpl	0, cr0, [r6, #-980]	; 0xfffffc2c
    19cc:	0e00000f 	cdpeq	0, 0, cr0, cr0, cr15, {0}
    19d0:	000006ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    19d4:	85010104 	strhi	r0, [r1, #-260]	; 0xfffffefc
    19d8:	0c000001 	stceq	0, cr0, [r0], {1}
    19dc:	00000f8e 	andeq	r0, r0, lr, lsl #31
    19e0:	00000f8e 	andeq	r0, r0, lr, lsl #31
    19e4:	0000be0d 	andeq	fp, r0, sp, lsl #28
    19e8:	05000900 	streq	r0, [r0, #-2304]	; 0xfffff700
    19ec:	00e70801 	rsceq	r0, r7, r1, lsl #16
    19f0:	8e0f0000 	cdphi	0, 0, cr0, cr15, cr0, {0}
    19f4:	1000000f 	andne	r0, r0, pc
    19f8:	00000b70 	andeq	r0, r0, r0, ror fp
    19fc:	0f7e0301 	svceq	0x007e0301
    1a00:	ca110000 	bgt	441a08 <_start-0xbfbc65f8>
    1a04:	01000004 	tsteq	r0, r4
    1a08:	000fcb4e 	andeq	ip, pc, lr, asr #22
    1a0c:	009bac00 	addseq	sl, fp, r0, lsl #24
    1a10:	0000c8c0 	andeq	ip, r0, r0, asr #17
    1a14:	cb9c0100 	blgt	fe701e1c <__bss_end__+0x3e6f7786>
    1a18:	1200000f 	andne	r0, r0, #15
    1a1c:	56010069 	strpl	r0, [r1], -r9, rrx
    1a20:	00000fd1 	ldrdeq	r0, [r0], -r1
    1a24:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1a28:	0f8e0413 	svceq	0x008e0413
    1a2c:	04140000 	ldreq	r0, [r4], #-0
    1a30:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1a34:	073b1500 	ldreq	r1, [fp, -r0, lsl #10]!
    1a38:	42010000 	andmi	r0, r1, #0
    1a3c:	00000f8e 	andeq	r0, r0, lr, lsl #31
    1a40:	c0009b60 	andgt	r9, r0, r0, ror #22
    1a44:	0000004c 	andeq	r0, r0, ip, asr #32
    1a48:	10009c01 	andne	r9, r0, r1, lsl #24
    1a4c:	72120000 	andsvc	r0, r2, #0
    1a50:	01007465 	tsteq	r0, r5, ror #8
    1a54:	000f8e44 	andeq	r8, pc, r4, asr #28
    1a58:	7b910200 	blvc	fe442260 <__bss_end__+0x3e437bca>
    1a5c:	088e1600 	stmeq	lr, {r9, sl, ip}
    1a60:	35010000 	strcc	r0, [r1, #-0]
    1a64:	c0009b0c 	andgt	r9, r0, ip, lsl #22
    1a68:	00000054 	andeq	r0, r0, r4, asr r0
    1a6c:	10309c01 	eorsne	r9, r0, r1, lsl #24
    1a70:	ce170000 	cdpgt	0, 1, cr0, cr7, cr0, {0}
    1a74:	01000004 	tsteq	r0, r4
    1a78:	00103035 	andseq	r3, r0, r5, lsr r0
    1a7c:	70910200 	addsvc	r0, r1, r0, lsl #4
    1a80:	01007012 	tsteq	r0, r2, lsl r0
    1a84:	00103038 	andseq	r3, r0, r8, lsr r0
    1a88:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1a8c:	95041300 	strls	r1, [r4, #-768]	; 0xfffffd00
    1a90:	1600000f 	strne	r0, [r0], -pc
    1a94:	000008e3 	andeq	r0, r0, r3, ror #17
    1a98:	9a902201 	bls	fe40a2a4 <__bss_end__+0x3e3ffc0e>
    1a9c:	007cc000 	rsbseq	ip, ip, r0
    1aa0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1aa4:	0000105a 	andeq	r1, r0, sl, asr r0
    1aa8:	72747318 	rsbsvc	r7, r4, #24, 6	; 0x60000000
    1aac:	95220100 	strls	r0, [r2, #-256]!	; 0xffffff00
    1ab0:	0200000f 	andeq	r0, r0, #15
    1ab4:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    1ab8:	00000ea5 	andeq	r0, r0, r5, lsr #29
    1abc:	98ec0401 	stmials	ip!, {r0, sl}^
    1ac0:	01a4c000 			; <UNDEFINED> instruction: 0x01a4c000
    1ac4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ac8:	0000a400 	andeq	sl, r0, r0, lsl #8
    1acc:	4e000400 	cfcpysmi	mvf0, mvf0
    1ad0:	04000005 	streq	r0, [r0], #-5
    1ad4:	00005201 	andeq	r5, r0, r1, lsl #4
    1ad8:	0f360c00 	svceq	0x00360c00
    1adc:	019e0000 	orrseq	r0, lr, r0
    1ae0:	9c740000 	ldclls	0, cr0, [r4], #-0
    1ae4:	009cc000 	addseq	ip, ip, r0
    1ae8:	05c40000 	strbeq	r0, [r4]
    1aec:	04020000 	streq	r0, [r2], #-0
    1af0:	0000f107 	andeq	pc, r0, r7, lsl #2
    1af4:	003c0300 	eorseq	r0, ip, r0, lsl #6
    1af8:	003c0000 	eorseq	r0, ip, r0
    1afc:	25040000 	strcs	r0, [r4, #-0]
    1b00:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1b04:	08010200 	stmdaeq	r1, {r9}
    1b08:	000000e7 	andeq	r0, r0, r7, ror #1
    1b0c:	000b7005 	andeq	r7, fp, r5
    1b10:	2c0b0100 	stfcss	f0, [fp], {-0}
    1b14:	05000000 	streq	r0, [r0, #-0]
    1b18:	00a68c03 	adceq	r8, r6, r3, lsl #24
    1b1c:	0f3d06c0 	svceq	0x003d06c0
    1b20:	0d010000 	stceq	0, cr0, [r1, #-0]
    1b24:	00000069 	andeq	r0, r0, r9, rrx
    1b28:	c0009ce4 	andgt	r9, r0, r4, ror #25
    1b2c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1b30:	04079c01 	streq	r9, [r7], #-3073	; 0xfffff3ff
    1b34:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1b38:	0f420800 	svceq	0x00420800
    1b3c:	03010000 	movweq	r0, #4096	; 0x1000
    1b40:	c0009c74 	andgt	r9, r0, r4, ror ip
    1b44:	00000070 	andeq	r0, r0, r0, ror r0
    1b48:	6d099c01 	stcvs	12, cr9, [r9, #-4]
    1b4c:	03010073 	movweq	r0, #4211	; 0x1073
    1b50:	00000069 	andeq	r0, r0, r9, rrx
    1b54:	0a709102 	beq	1c25f64 <_start-0xbe3e209c>
    1b58:	05010069 	streq	r0, [r1, #-105]	; 0xffffff97
    1b5c:	00000069 	andeq	r0, r0, r9, rrx
    1b60:	0a789102 	beq	1e25f70 <_start-0xbe1e2090>
    1b64:	0501006a 	streq	r0, [r1, #-106]	; 0xffffff96
    1b68:	00000069 	andeq	r0, r0, r9, rrx
    1b6c:	00749102 	rsbseq	r9, r4, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	10001101 	andne	r1, r0, r1, lsl #2
   4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
   8:	1b080301 	blne	200c14 <_start-0xbfe073ec>
   c:	13082508 	movwne	r2, #34056	; 0x8508
  10:	00000005 	andeq	r0, r0, r5
  14:	10001101 	andne	r1, r0, r1, lsl #2
  18:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
  1c:	1b080301 	blne	200c28 <_start-0xbfe073d8>
  20:	13082508 	movwne	r2, #34056	; 0x8508
  24:	00000005 	andeq	r0, r0, r5
  28:	10001101 	andne	r1, r0, r1, lsl #2
  2c:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
  30:	1b080301 	blne	200c3c <_start-0xbfe073c4>
  34:	13082508 	movwne	r2, #34056	; 0x8508
  38:	00000005 	andeq	r0, r0, r5
  3c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  40:	030b130e 	movweq	r1, #45838	; 0xb30e
  44:	110e1b0e 	tstne	lr, lr, lsl #22
  48:	10061201 	andne	r1, r6, r1, lsl #4
  4c:	02000017 	andeq	r0, r0, #23
  50:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <_start-0xbf1452bc>
  58:	00001349 	andeq	r1, r0, r9, asr #6
  5c:	0b000f03 	bleq	3c70 <_start-0xc0004390>
  60:	000e030b 	andeq	r0, lr, fp, lsl #6
  64:	01010400 	tsteq	r1, r0, lsl #8
  68:	13011349 	movwne	r1, #4937	; 0x1349
  6c:	21050000 	mrscs	r0, (UNDEF: 5)
  70:	2f134900 	svccs	0x00134900
  74:	0600000b 	streq	r0, [r0], -fp
  78:	0b0b0024 	bleq	2c0110 <_start-0xbfd47ef0>
  7c:	0e030b3e 	vmoveq.16	d3[0], r0
  80:	34070000 	strcc	r0, [r7], #-0
  84:	3a0e0300 	bcc	380c8c <_start-0xbfc87374>
  88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  8c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  90:	08000018 	stmdaeq	r0, {r3, r4}
  94:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  98:	0b3a0e03 	bleq	e838ac <_start-0xbf184754>
  9c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  a4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  a8:	00130119 	andseq	r0, r3, r9, lsl r1
  ac:	00050900 	andeq	r0, r5, r0, lsl #18
  b0:	0b3a0803 	bleq	e820c4 <_start-0xbf185f3c>
  b4:	1349053b 	movtne	r0, #38203	; 0x953b
  b8:	00001802 	andeq	r1, r0, r2, lsl #16
  bc:	0000180a 	andeq	r1, r0, sl, lsl #16
  c0:	00340b00 	eorseq	r0, r4, r0, lsl #22
  c4:	0b3a0e03 	bleq	e838d8 <_start-0xbf184728>
  c8:	1349053b 	movtne	r0, #38203	; 0x953b
  cc:	00001802 	andeq	r1, r0, r2, lsl #16
  d0:	0b000f0c 	bleq	3d08 <_start-0xc00042f8>
  d4:	0013490b 	andseq	r4, r3, fp, lsl #18
  d8:	00260d00 	eoreq	r0, r6, r0, lsl #26
  dc:	00001349 	andeq	r1, r0, r9, asr #6
  e0:	3f012e0e 	svccc	0x00012e0e
  e4:	3a0e0319 	bcc	380d50 <_start-0xbfc872b0>
  e8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  ec:	11134919 	tstne	r3, r9, lsl r9
  f0:	40061201 	andmi	r1, r6, r1, lsl #4
  f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f8:	00001301 	andeq	r1, r0, r1, lsl #6
  fc:	0300340f 	movweq	r3, #1039	; 0x40f
 100:	3b0b3a08 	blcc	2ce928 <_start-0xbfd396d8>
 104:	02134905 	andseq	r4, r3, #81920	; 0x14000
 108:	10000018 	andne	r0, r0, r8, lsl r0
 10c:	0b0b0024 	bleq	2c01a4 <_start-0xbfd47e5c>
 110:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 114:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 118:	03193f01 	tsteq	r9, #1, 30
 11c:	3b0b3a0e 	blcc	2ce95c <_start-0xbfd396a4>
 120:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 124:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 128:	96184006 	ldrls	r4, [r8], -r6
 12c:	13011942 	movwne	r1, #6466	; 0x1942
 130:	05120000 	ldreq	r0, [r2, #-0]
 134:	3a080300 	bcc	200d3c <_start-0xbfe072c4>
 138:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 13c:	00180213 	andseq	r0, r8, r3, lsl r2
 140:	00051300 	andeq	r1, r5, r0, lsl #6
 144:	0b3a0e03 	bleq	e83958 <_start-0xbf1846a8>
 148:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 14c:	00001802 	andeq	r1, r0, r2, lsl #16
 150:	03003414 	movweq	r3, #1044	; 0x414
 154:	3b0b3a08 	blcc	2ce97c <_start-0xbfd39684>
 158:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 15c:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 164:	0b3b0b3a 	bleq	ec2e54 <_start-0xbf1451ac>
 168:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 16c:	0a160000 	beq	580174 <_start-0xbfa87e8c>
 170:	3a0e0300 	bcc	380d78 <_start-0xbfc87288>
 174:	110b3b0b 	tstne	fp, fp, lsl #22
 178:	17000001 	strne	r0, [r0, -r1]
 17c:	0111010b 	tsteq	r1, fp, lsl #2
 180:	13010612 	movwne	r0, #5650	; 0x1612
 184:	0b180000 	bleq	60018c <_start-0xbfa07e74>
 188:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 18c:	19000006 	stmdbne	r0, {r1, r2}
 190:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 194:	0b3a0e03 	bleq	e839a8 <_start-0xbf184658>
 198:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 19c:	01111349 	tsteq	r1, r9, asr #6
 1a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1a8:	1a000013 	bne	1fc <_start-0xc0007e04>
 1ac:	0e03012e 	adfeqsp	f0, f3, #0.5
 1b0:	0b3b0b3a 	bleq	ec2ea0 <_start-0xbf145160>
 1b4:	13491927 	movtne	r1, #39207	; 0x9927
 1b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1c0:	00130119 	andseq	r0, r3, r9, lsl r1
 1c4:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 1c8:	0b3a0e03 	bleq	e839dc <_start-0xbf184624>
 1cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1d0:	01111349 	tsteq	r1, r9, asr #6
 1d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1d8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1dc:	1c000013 	stcne	0, cr0, [r0], {19}
 1e0:	0e03012e 	adfeqsp	f0, f3, #0.5
 1e4:	0b3b0b3a 	bleq	ec2ed4 <_start-0xbf14512c>
 1e8:	13491927 	movtne	r1, #39207	; 0x9927
 1ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1f4:	00000019 	andeq	r0, r0, r9, lsl r0
 1f8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1fc:	030b130e 	movweq	r1, #45838	; 0xb30e
 200:	110e1b0e 	tstne	lr, lr, lsl #22
 204:	10061201 	andne	r1, r6, r1, lsl #4
 208:	02000017 	andeq	r0, r0, #23
 20c:	0b0b0113 	bleq	2c0660 <_start-0xbfd479a0>
 210:	0b3b0b3a 	bleq	ec2f00 <_start-0xbf145100>
 214:	00001301 	andeq	r1, r0, r1, lsl #6
 218:	03000d03 	movweq	r0, #3331	; 0xd03
 21c:	3b0b3a0e 	blcc	2cea5c <_start-0xbfd395a4>
 220:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 224:	0400000b 	streq	r0, [r0], #-11
 228:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 22c:	0b3b0b3a 	bleq	ec2f1c <_start-0xbf1450e4>
 230:	0b381349 	bleq	e04f5c <_start-0xbf2030a4>
 234:	24050000 	strcs	r0, [r5], #-0
 238:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 23c:	000e030b 	andeq	r0, lr, fp, lsl #6
 240:	00350600 	eorseq	r0, r5, r0, lsl #12
 244:	00001349 	andeq	r1, r0, r9, asr #6
 248:	03001607 	movweq	r1, #1543	; 0x607
 24c:	3b0b3a0e 	blcc	2cea8c <_start-0xbfd39574>
 250:	0013490b 	andseq	r4, r3, fp, lsl #18
 254:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 258:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 25c:	0b3b0b3a 	bleq	ec2f4c <_start-0xbf1450b4>
 260:	13491927 	movtne	r1, #39207	; 0x9927
 264:	06120111 			; <UNDEFINED> instruction: 0x06120111
 268:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 26c:	00130119 	andseq	r0, r3, r9, lsl r1
 270:	00340900 	eorseq	r0, r4, r0, lsl #18
 274:	0b3a0803 	bleq	e82288 <_start-0xbf185d78>
 278:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 27c:	00001802 	andeq	r1, r0, r2, lsl #16
 280:	4900260a 	stmdbmi	r0, {r1, r3, r9, sl, sp}
 284:	0b000013 	bleq	2d8 <_start-0xc0007d28>
 288:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 28c:	0b3a0e03 	bleq	e83aa0 <_start-0xbf184560>
 290:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 294:	06120111 			; <UNDEFINED> instruction: 0x06120111
 298:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 29c:	00130119 	andseq	r0, r3, r9, lsl r1
 2a0:	00050c00 	andeq	r0, r5, r0, lsl #24
 2a4:	0b3a0e03 	bleq	e83ab8 <_start-0xbf184548>
 2a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2ac:	00001802 	andeq	r1, r0, r2, lsl #16
 2b0:	0b000f0d 	bleq	3eec <_start-0xc0004114>
 2b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 2b8:	002e0e00 	eoreq	r0, lr, r0, lsl #28
 2bc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2c0:	0b3b0b3a 	bleq	ec2fb0 <_start-0xbf145050>
 2c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2cc:	00000019 	andeq	r0, r0, r9, lsl r0
 2d0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 2d4:	030b130e 	movweq	r1, #45838	; 0xb30e
 2d8:	110e1b0e 	tstne	lr, lr, lsl #22
 2dc:	10061201 	andne	r1, r6, r1, lsl #4
 2e0:	02000017 	andeq	r0, r0, #23
 2e4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 2e8:	0b3b0b3a 	bleq	ec2fd8 <_start-0xbf145028>
 2ec:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 2f0:	00001802 	andeq	r1, r0, r2, lsl #16
 2f4:	0b002403 	bleq	9308 <_start-0xbfffecf8>
 2f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2fc:	0400000e 	streq	r0, [r0], #-14
 300:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 304:	0b3a0e03 	bleq	e83b18 <_start-0xbf1844e8>
 308:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 30c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 310:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 314:	00000019 	andeq	r0, r0, r9, lsl r0
 318:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 31c:	030b130e 	movweq	r1, #45838	; 0xb30e
 320:	110e1b0e 	tstne	lr, lr, lsl #22
 324:	10061201 	andne	r1, r6, r1, lsl #4
 328:	02000017 	andeq	r0, r0, #23
 32c:	0b0b0113 	bleq	2c0780 <_start-0xbfd47880>
 330:	0b3b0b3a 	bleq	ec3020 <_start-0xbf144fe0>
 334:	00001301 	andeq	r1, r0, r1, lsl #6
 338:	03000d03 	movweq	r0, #3331	; 0xd03
 33c:	3b0b3a0e 	blcc	2ceb7c <_start-0xbfd39484>
 340:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 344:	0400000b 	streq	r0, [r0], #-11
 348:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 34c:	0b3b0b3a 	bleq	ec303c <_start-0xbf144fc4>
 350:	0b381349 	bleq	e0507c <_start-0xbf202f84>
 354:	24050000 	strcs	r0, [r5], #-0
 358:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 35c:	000e030b 	andeq	r0, lr, fp, lsl #6
 360:	00350600 	eorseq	r0, r5, r0, lsl #12
 364:	00001349 	andeq	r1, r0, r9, asr #6
 368:	03001607 	movweq	r1, #1543	; 0x607
 36c:	3b0b3a0e 	blcc	2cebac <_start-0xbfd39454>
 370:	0013490b 	andseq	r4, r3, fp, lsl #18
 374:	01040800 	tsteq	r4, r0, lsl #16
 378:	0b0b0b3e 	bleq	2c3078 <_start-0xbfd44f88>
 37c:	0b3a1349 	bleq	e850a8 <_start-0xbf182f58>
 380:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 384:	28090000 	stmdacs	r9, {}	; <UNPREDICTABLE>
 388:	1c0e0300 	stcne	3, cr0, [lr], {-0}
 38c:	0a00000b 	beq	3c0 <_start-0xc0007c40>
 390:	08030028 	stmdaeq	r3, {r3, r5}
 394:	00000b1c 	andeq	r0, r0, ip, lsl fp
 398:	3f012e0b 	svccc	0x00012e0b
 39c:	3a0e0319 	bcc	381008 <_start-0xbfc86ff8>
 3a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 3a4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 3a8:	97184006 	ldrls	r4, [r8, -r6]
 3ac:	13011942 	movwne	r1, #6466	; 0x1942
 3b0:	050c0000 	streq	r0, [ip, #-0]
 3b4:	3a0e0300 	bcc	380fbc <_start-0xbfc87044>
 3b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3bc:	00180213 	andseq	r0, r8, r3, lsl r2
 3c0:	00050d00 	andeq	r0, r5, r0, lsl #26
 3c4:	0b3a0803 	bleq	e823d8 <_start-0xbf185c28>
 3c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3cc:	00001802 	andeq	r1, r0, r2, lsl #16
 3d0:	0b000f0e 	bleq	4010 <_start-0xc0003ff0>
 3d4:	0013490b 	andseq	r4, r3, fp, lsl #18
 3d8:	11010000 	mrsne	r0, (UNDEF: 1)
 3dc:	130e2501 	movwne	r2, #58625	; 0xe501
 3e0:	1b0e030b 	blne	381014 <_start-0xbfc86fec>
 3e4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3e8:	00171006 	andseq	r1, r7, r6
 3ec:	01130200 	tsteq	r3, r0, lsl #4
 3f0:	0b3a0b0b 	bleq	e83024 <_start-0xbf184fdc>
 3f4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3f8:	0d030000 	stceq	0, cr0, [r3, #-0]
 3fc:	3a080300 	bcc	201004 <_start-0xbfe06ffc>
 400:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 404:	000b3813 	andeq	r3, fp, r3, lsl r8
 408:	000d0400 	andeq	r0, sp, r0, lsl #8
 40c:	0b3a0e03 	bleq	e83c20 <_start-0xbf1843e0>
 410:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 414:	00000b38 	andeq	r0, r0, r8, lsr fp
 418:	0b002405 	bleq	9434 <_start-0xbfffebcc>
 41c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 420:	0600000e 	streq	r0, [r0], -lr
 424:	13490035 	movtne	r0, #36917	; 0x9035
 428:	16070000 	strne	r0, [r7], -r0
 42c:	3a0e0300 	bcc	381034 <_start-0xbfc86fcc>
 430:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 434:	08000013 	stmdaeq	r0, {r0, r1, r4}
 438:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
 43c:	0b3b0b3a 	bleq	ec312c <_start-0xbf144ed4>
 440:	00001301 	andeq	r1, r0, r1, lsl #6
 444:	03000d09 	movweq	r0, #3337	; 0xd09
 448:	3b0b3a0e 	blcc	2cec88 <_start-0xbfd39378>
 44c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 450:	0a000005 	beq	46c <_start-0xc0007b94>
 454:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 458:	0b3b0b3a 	bleq	ec3148 <_start-0xbf144eb8>
 45c:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 460:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 464:	3a0e0300 	bcc	38106c <_start-0xbfc86f94>
 468:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 46c:	00053813 	andeq	r3, r5, r3, lsl r8
 470:	01010c00 	tsteq	r1, r0, lsl #24
 474:	13011349 	movwne	r1, #4937	; 0x1349
 478:	210d0000 	mrscs	r0, (UNDEF: 13)
 47c:	2f134900 	svccs	0x00134900
 480:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 484:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 488:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 48c:	00001349 	andeq	r1, r0, r9, asr #6
 490:	4900260f 	stmdbmi	r0, {r0, r1, r2, r3, r9, sl, sp}
 494:	10000013 	andne	r0, r0, r3, lsl r0
 498:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 49c:	0b3b0b3a 	bleq	ec318c <_start-0xbf144e74>
 4a0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 4a4:	0000193c 	andeq	r1, r0, ip, lsr r9
 4a8:	3f012e11 	svccc	0x00012e11
 4ac:	3a0e0319 	bcc	381118 <_start-0xbfc86ee8>
 4b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 4b8:	96184006 	ldrls	r4, [r8], -r6
 4bc:	13011942 	movwne	r1, #6466	; 0x1942
 4c0:	34120000 	ldrcc	r0, [r2], #-0
 4c4:	3a080300 	bcc	2010cc <_start-0xbfe06f34>
 4c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4cc:	00180213 	andseq	r0, r8, r3, lsl r2
 4d0:	000f1300 	andeq	r1, pc, r0, lsl #6
 4d4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 4d8:	24140000 	ldrcs	r0, [r4], #-0
 4dc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 4e0:	0008030b 	andeq	r0, r8, fp, lsl #6
 4e4:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 4e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 4ec:	0b3b0b3a 	bleq	ec31dc <_start-0xbf144e24>
 4f0:	01111349 	tsteq	r1, r9, asr #6
 4f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 4f8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 4fc:	16000013 			; <UNDEFINED> instruction: 0x16000013
 500:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 504:	0b3a0e03 	bleq	e83d18 <_start-0xbf1842e8>
 508:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 50c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 510:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 514:	00130119 	andseq	r0, r3, r9, lsl r1
 518:	00051700 	andeq	r1, r5, r0, lsl #14
 51c:	0b3a0e03 	bleq	e83d30 <_start-0xbf1842d0>
 520:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 524:	00001802 	andeq	r1, r0, r2, lsl #16
 528:	03000518 	movweq	r0, #1304	; 0x518
 52c:	3b0b3a08 	blcc	2ced54 <_start-0xbfd392ac>
 530:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 534:	19000018 	stmdbne	r0, {r3, r4}
 538:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 53c:	0b3a0e03 	bleq	e83d50 <_start-0xbf1842b0>
 540:	01110b3b 	tsteq	r1, fp, lsr fp
 544:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 548:	00194297 	mulseq	r9, r7, r2
 54c:	11010000 	mrsne	r0, (UNDEF: 1)
 550:	130e2501 	movwne	r2, #58625	; 0xe501
 554:	1b0e030b 	blne	381188 <_start-0xbfc86e78>
 558:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 55c:	00171006 	andseq	r1, r7, r6
 560:	00240200 	eoreq	r0, r4, r0, lsl #4
 564:	0b3e0b0b 	bleq	f83198 <_start-0xbf084e68>
 568:	00000e03 	andeq	r0, r0, r3, lsl #28
 56c:	49010103 	stmdbmi	r1, {r0, r1, r8}
 570:	00130113 	andseq	r0, r3, r3, lsl r1
 574:	00210400 	eoreq	r0, r1, r0, lsl #8
 578:	0b2f1349 	bleq	bc52a4 <_start-0xbf442d5c>
 57c:	34050000 	strcc	r0, [r5], #-0
 580:	3a0e0300 	bcc	381188 <_start-0xbfc86e78>
 584:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 588:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 58c:	06000018 			; <UNDEFINED> instruction: 0x06000018
 590:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 594:	0b3a0e03 	bleq	e83da8 <_start-0xbf184258>
 598:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 59c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 5a0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 5a4:	07000019 	smladeq	r0, r9, r0, r0
 5a8:	0b0b0024 	bleq	2c0640 <_start-0xbfd479c0>
 5ac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 5b0:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
 5b4:	03193f01 	tsteq	r9, #1, 30
 5b8:	3b0b3a0e 	blcc	2cedf8 <_start-0xbfd39208>
 5bc:	1119270b 	tstne	r9, fp, lsl #14
 5c0:	40061201 	andmi	r1, r6, r1, lsl #4
 5c4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 5c8:	05090000 	streq	r0, [r9, #-0]
 5cc:	3a080300 	bcc	2011d4 <_start-0xbfe06e2c>
 5d0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5d4:	00180213 	andseq	r0, r8, r3, lsl r2
 5d8:	00340a00 	eorseq	r0, r4, r0, lsl #20
 5dc:	0b3a0803 	bleq	e825f0 <_start-0xbf185a10>
 5e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5e4:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	c0008000 	andgt	r8, r0, r0
  14:	00000218 	andeq	r0, r0, r8, lsl r2
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00670002 	rsbeq	r0, r7, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	c0008218 	andgt	r8, r0, r8, lsl r2
  34:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00d60002 	sbcseq	r0, r6, r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	c00082c8 	andgt	r8, r0, r8, asr #5
  54:	00000094 	muleq	r0, r4, r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	01450002 	cmpeq	r5, r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	c000835c 	andgt	r8, r0, ip, asr r3
  74:	000010b8 	strheq	r1, [r0], -r8
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	05c70002 	strbeq	r0, [r7, #2]
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	c0009414 	andgt	r9, r0, r4, lsl r4
  94:	000002dc 	ldrdeq	r0, [r0], -ip
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	07df0002 	ldrbeq	r0, [pc, r2]
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	c00096f0 	strdgt	r9, [r0], -r0
  b4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	082c0002 	stmdaeq	ip!, {r1}
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	c0009708 	andgt	r9, r0, r8, lsl #14
  d4:	000001e4 	andeq	r0, r0, r4, ror #3
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	0a5d0002 	beq	17400f4 <_start-0xbe8c7f0c>
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	c00098ec 	andgt	r9, r0, ip, ror #17
  f4:	00000388 	andeq	r0, r0, r8, lsl #7
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	1ac90002 	bne	ff240114 <__bss_end__+0x3f235a7e>
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	c0009c74 	andgt	r9, r0, r4, ror ip
 114:	0000009c 	muleq	r0, ip, r0
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	5f007374 	svcpl	0x00007374
   8:	6975625f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sp, lr}^
   c:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
  10:	5f61765f 	svcpl	0x0061765f
  14:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
  18:	696b7300 	stmdbvs	fp!, {r8, r9, ip, sp, lr}^
  1c:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
  20:	7600696f 	strvc	r6, [r0], -pc, ror #18
  24:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
  28:	756f6300 	strbvc	r6, [pc, #-768]!	; fffffd30 <__bss_end__+0x3fff569a>
  2c:	5f00746e 	svcpl	0x0000746e
  30:	756f745f 	strbvc	r7, [pc, #-1119]!	; fffffbd9 <__bss_end__+0x3fff5543>
  34:	72657070 	rsbvc	r7, r5, #112	; 0x70
  38:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
  3c:	5f63756e 	svcpl	0x0063756e
  40:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
  44:	00747369 	rsbseq	r7, r4, r9, ror #6
  48:	63657270 	cmnvs	r5, #112, 4
  4c:	6f697369 	svcvs	0x00697369
  50:	4e47006e 	cdpmi	0, 4, cr0, cr7, cr14, {3}
  54:	31432055 	qdaddcc	r2, r5, r3
  58:	2e372031 	mrccs	0, 1, r2, cr7, cr1, {1}
  5c:	20302e35 	eorscs	r2, r0, r5, lsr lr
  60:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  64:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
  68:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  6c:	73637061 	cmnvc	r3, #97	; 0x61
  70:	756e672d 	strbvc	r6, [lr, #-1837]!	; 0xfffff8d3
  74:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  78:	6e3d7570 	mrcvs	5, 1, r7, cr13, cr0, {3}
  7c:	206e6f65 	rsbcs	r6, lr, r5, ror #30
  80:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  84:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  88:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  8c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  90:	2d207066 	stccs	0, cr7, [r0, #-408]!	; 0xfffffe68
  94:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  98:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  9c:	2d37766d 	ldccs	6, cr7, [r7, #-436]!	; 0xfffffe4c
  a0:	6d2d2061 	stcvs	0, cr2, [sp, #-388]!	; 0xfffffe7c
  a4:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
  a8:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
  ac:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
  b0:	2d203961 			; <UNDEFINED> instruction: 0x2d203961
  b4:	736c746d 	cmnvc	ip, #1828716544	; 0x6d000000
  b8:	6169642d 	cmnvs	r9, sp, lsr #8
  bc:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  c0:	756e673d 	strbvc	r6, [lr, #-1853]!	; 0xfffff8c3
  c4:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c8:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  cc:	6f6e662d 	svcvs	0x006e662d
  d0:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
  d4:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
  d8:	73616200 	cmnvc	r1, #0, 4
  dc:	6e750065 	cdpvs	0, 7, cr0, cr5, cr5, {3}
  e0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  e4:	63206465 			; <UNDEFINED> instruction: 0x63206465
  e8:	00726168 	rsbseq	r6, r2, r8, ror #2
  ec:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
  f0:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
  f4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  f8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  fc:	6e650074 	mcrvs	0, 3, r0, cr5, cr4, {3}
 100:	73007064 	movwvc	r7, #100	; 0x64
 104:	6c706d69 	ldclvs	13, cr6, [r0], #-420	; 0xfffffe5c
 108:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
 10c:	6c6f7472 	cfstrdvs	mvd7, [pc], #-456	; ffffff4c <__bss_end__+0x3fff58b6>
 110:	6d6f6300 	stclvs	3, cr6, [pc, #-0]	; 118 <_start-0xc0007ee8>
 114:	2f6e6f6d 	svccs	0x006e6f6d
 118:	2f637273 	svccs	0x00637273
 11c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 120:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
 124:	616c6600 	cmnvs	ip, r0, lsl #12
 128:	73007367 	movwvc	r7, #871	; 0x367
 12c:	00657a69 	rsbeq	r7, r5, r9, ror #20
 130:	6c617571 	cfstr64vs	mvdx7, [r1], #-452	; 0xfffffe3c
 134:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
 138:	69730072 	ldmdbvs	r3!, {r1, r4, r5, r6}^
 13c:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
 140:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
 144:	6c756f74 	ldclvs	15, cr6, [r5], #-464	; 0xfffffe30
 148:	73657200 	cmnvc	r5, #0, 4
 14c:	00746c75 	rsbseq	r6, r4, r5, ror ip
 150:	65706572 	ldrbvs	r6, [r0, #-1394]!	; 0xfffffa8e
 154:	73007461 	movwvc	r7, #1121	; 0x461
 158:	6c6e7274 	sfmvs	f7, 2, [lr], #-464	; 0xfffffe30
 15c:	6e006e65 	cdpvs	14, 0, cr6, cr0, cr5, {3}
 160:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
 164:	635f0072 	cmpvs	pc, #114	; 0x72
 168:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 16c:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 170:	7562746e 	strbvc	r7, [r2, #-1134]!	; 0xfffffb92
 174:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 178:	65696600 	strbvs	r6, [r9, #-1536]!	; 0xfffffa00
 17c:	775f646c 	ldrbvc	r6, [pc, -ip, ror #8]
 180:	68746469 	ldmdavs	r4!, {r0, r3, r5, r6, sl, sp, lr}^
 184:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 188:	6f6c0073 	svcvs	0x006c0073
 18c:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 190:	7300746e 	movwvc	r7, #1134	; 0x46e
 194:	006e6769 	rsbeq	r6, lr, r9, ror #14
 198:	65725f5f 	ldrbvs	r5, [r2, #-3935]!	; 0xfffff0a1
 19c:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
 1a0:	2f656d6f 	svccs	0x00656d6f
 1a4:	756e696c 	strbvc	r6, [lr, #-2412]!	; 0xfffff694
 1a8:	61662f78 	smcvs	25336	; 0x62f8
 1ac:	67697372 			; <UNDEFINED> instruction: 0x67697372
 1b0:	412f7468 			; <UNDEFINED> instruction: 0x412f7468
 1b4:	442f4d52 	strtmi	r4, [pc], #-3410	; 1bc <_start-0xc0007e44>
 1b8:	31323243 	teqcc	r2, r3, asr #4
 1bc:	642f3131 	strtvs	r3, [pc], #-305	; 1c4 <_start-0xc0007e3c>
 1c0:	36307961 	ldrtcc	r7, [r0], -r1, ror #18
 1c4:	2d33302f 	ldccs	0, cr3, [r3, #-188]!	; 0xffffff44
 1c8:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 1cc:	7600632d 	strvc	r6, [r0], -sp, lsr #6
 1d0:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 1d4:	0066746e 	rsbeq	r7, r6, lr, ror #8
 1d8:	61755f5f 	cmnvs	r5, pc, asr pc
 1dc:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
 1e0:	00637475 	rsbeq	r7, r3, r5, ror r4
 1e4:	43434553 	movtmi	r4, #13651	; 0x3553
 1e8:	00524746 	subseq	r4, r2, r6, asr #14
 1ec:	61755f5f 	cmnvs	r5, pc, asr pc
 1f0:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
 1f4:	00737475 	rsbseq	r7, r3, r5, ror r4
 1f8:	61746164 	cmnvs	r4, r4, ror #2
 1fc:	4f545200 	svcmi	0x00545200
 200:	53420052 	movtpl	r0, #8274	; 0x2052
 204:	50005252 	andpl	r5, r0, r2, asr r2
 208:	52445055 	subpl	r5, r4, #85	; 0x55
 20c:	50534f00 	subspl	r4, r3, r0, lsl #30
 210:	52444545 	subpl	r4, r4, #289406976	; 0x11400000
 214:	50544700 	subspl	r4, r4, r0, lsl #14
 218:	52500052 	subspl	r0, r0, #82	; 0x52
 21c:	00435345 	subeq	r5, r3, r5, asr #6
 220:	72747370 	rsbsvc	r7, r4, #112, 6	; 0xc0000001
 224:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff32c <__bss_end__+0x3fff4c96>
 228:	5f747261 	svcpl	0x00747261
 22c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 230:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 234:	00745f6f 	rsbseq	r5, r4, pc, ror #30
 238:	524b434c 	subpl	r4, fp, #76, 6	; 0x30000001
 23c:	444f4d00 	strbmi	r4, [pc], #-3328	; 244 <_start-0xc0007dbc>
 240:	75005245 	strvc	r5, [r0, #-581]	; 0xfffffdbb
 244:	5f747261 	svcpl	0x00747261
 248:	544f0074 	strbpl	r0, [pc], #-116	; 250 <_start-0xc0007db0>
 24c:	52455059 	subpl	r5, r5, #89	; 0x59
 250:	52464100 	subpl	r4, r6, #0, 2
 254:	5f5f004c 	svcpl	0x005f004c
 258:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 25c:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
 260:	46410063 	strbmi	r0, [r1], -r3, rrx
 264:	63004852 	movwvs	r4, #2130	; 0x852
 268:	6f6d6d6f 	svcvs	0x006d6d6f
 26c:	72732f6e 	rsbsvc	r2, r3, #440	; 0x1b8
 270:	61752f63 	cmnvs	r5, r3, ror #30
 274:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
 278:	5f6f6400 	svcpl	0x006f6400
 27c:	00717269 	rsbseq	r7, r1, r9, ror #4
 280:	2f637273 	svccs	0x00637273
 284:	695f6f64 	ldmdbvs	pc, {r2, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 288:	632e7172 			; <UNDEFINED> instruction: 0x632e7172
 28c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 290:	6f6d5f6f 	svcvs	0x006d5f6f
 294:	5f726564 	svcpl	0x00726564
 298:	6f6d0074 	svcvs	0x006d0074
 29c:	00726564 	rsbseq	r6, r2, r4, ror #10
 2a0:	4f495047 	svcmi	0x00495047
 2a4:	5445535f 	strbpl	r5, [r5], #-863	; 0xfffffca1
 2a8:	6700545f 	smlsdvs	r0, pc, r4, r5	; <UNPREDICTABLE>
 2ac:	786f6970 	stmdavc	pc!, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 2b0:	5f4f4e00 	svcpl	0x004f4e00
 2b4:	44505550 	ldrbmi	r5, [r0], #-1360	; 0xfffffab0
 2b8:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 2bc:	45525f4f 	ldrbmi	r5, [r2, #-3919]	; 0xfffff0b1
 2c0:	5f544553 	svcpl	0x00544553
 2c4:	70670054 	rsbvc	r0, r7, r4, asr r0
 2c8:	695f6f69 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 2cc:	5f74696e 	svcpl	0x0074696e
 2d0:	454d0074 	strbmi	r0, [sp, #-116]	; 0xffffff8c
 2d4:	4d554944 	vldrmi.16	s9, [r5, #-136]	; 0xffffff78	; <UNPREDICTABLE>
 2d8:	70736f00 	rsbsvc	r6, r3, r0, lsl #30
 2dc:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
 2e0:	61747300 	cmnvs	r4, r0, lsl #6
 2e4:	00737574 	rsbseq	r7, r3, r4, ror r5
 2e8:	55504e49 	ldrbpl	r4, [r0, #-3657]	; 0xfffff1b7
 2ec:	746f0054 	strbtvc	r0, [pc], #-84	; 2f4 <_start-0xc0007d0c>
 2f0:	72657079 	rsbvc	r7, r5, #121	; 0x79
 2f4:	6c616800 	stclvs	8, cr6, [r1], #-0
 2f8:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
 2fc:	72775f6f 	rsbsvc	r5, r7, #444	; 0x1bc
 300:	00657469 	rsbeq	r7, r5, r9, ror #8
 304:	2f637273 	svccs	0x00637273
 308:	6f697067 	svcvs	0x00697067
 30c:	6700632e 	strvs	r6, [r0, -lr, lsr #6]
 310:	5f6f6970 	svcpl	0x006f6970
 314:	6570736f 	ldrbvs	r7, [r0, #-879]!	; 0xfffffc91
 318:	5f726465 	svcpl	0x00726465
 31c:	75700074 	ldrbvc	r0, [r0, #-116]!	; 0xffffff8c
 320:	00726470 	rsbseq	r6, r2, r0, ror r4
 324:	5f6c6168 	svcpl	0x006c6168
 328:	6f697067 	svcvs	0x00697067
 32c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 330:	70670074 	rsbvc	r0, r7, r4, ror r0
 334:	6f5f6f69 	svcvs	0x005f6f69
 338:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 33c:	00745f72 	rsbseq	r5, r4, r2, ror pc
 340:	6f697067 	svcvs	0x00697067
 344:	72646f5f 	rsbvc	r6, r4, #380	; 0x17c
 348:	4f00745f 	svcmi	0x0000745f
 34c:	55505455 	ldrbpl	r5, [r0, #-1109]	; 0xfffffbab
 350:	70670054 	rsbvc	r0, r7, r4, asr r0
 354:	705f6f69 	subsvc	r6, pc, r9, ror #30
 358:	72647075 	rsbvc	r7, r4, #117	; 0x75
 35c:	5600745f 			; <UNDEFINED> instruction: 0x5600745f
 360:	5f595245 	svcpl	0x00595245
 364:	48474948 	stmdami	r7, {r3, r6, r8, fp, lr}^
 368:	414e4100 	mrsmi	r4, (UNDEF: 94)
 36c:	00474f4c 	subeq	r4, r7, ip, asr #30
 370:	32736572 	rsbscc	r6, r3, #478150656	; 0x1c800000
 374:	504d0034 	subpl	r0, sp, r4, lsr r0
 378:	415a545f 	cmpmi	sl, pc, asr r4
 37c:	45364248 	ldrmi	r4, [r6, #-584]!	; 0xfffffdb8
 380:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 384:	504d0052 	subpl	r0, sp, r2, asr r0
 388:	4958415f 	ldmdbmi	r8, {r0, r1, r2, r3, r4, r6, r8, lr}^
 38c:	45504c4d 	ldrbmi	r4, [r0, #-3149]	; 0xfffff3b3
 390:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 394:	504d0052 	subpl	r0, sp, r2, asr r0
 398:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 39c:	434e4532 	movtmi	r4, #58674	; 0xe532
 3a0:	0052524c 	subseq	r5, r2, ip, asr #4
 3a4:	415f504d 	cmpmi	pc, sp, asr #32
 3a8:	45354248 	ldrmi	r4, [r5, #-584]!	; 0xfffffdb8
 3ac:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 3b0:	504d0052 	subpl	r0, sp, r2, asr r0
 3b4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 3b8:	434e4533 	movtmi	r4, #58675	; 0xe533
 3bc:	0052524c 	subseq	r5, r2, ip, asr #4
 3c0:	32736572 	rsbscc	r6, r3, #478150656	; 0x1c800000
 3c4:	58410038 	stmdapl	r1, {r3, r4, r5}^
 3c8:	56494449 	strbpl	r4, [r9], -r9, asr #8
 3cc:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0xffffffae
 3d0:	00313173 	eorseq	r3, r1, r3, ror r1
 3d4:	31736572 	cmncc	r3, r2, ror r5
 3d8:	65720032 	ldrbvs	r0, [r2, #-50]!	; 0xffffffce
 3dc:	00333173 	eorseq	r3, r3, r3, ror r1
 3e0:	31736572 	cmncc	r3, r2, ror r5
 3e4:	65720034 	ldrbvs	r0, [r2, #-52]!	; 0xffffffcc
 3e8:	00353173 	eorseq	r3, r5, r3, ror r1
 3ec:	31736572 	cmncc	r3, r2, ror r5
 3f0:	65720036 	ldrbvs	r0, [r2, #-54]!	; 0xffffffca
 3f4:	00373173 	eorseq	r3, r7, r3, ror r1
 3f8:	31736572 	cmncc	r3, r2, ror r5
 3fc:	504d0039 	subpl	r0, sp, r9, lsr r0
 400:	4f4f425f 	svcmi	0x004f425f
 404:	00524354 	subseq	r4, r2, r4, asr r3
 408:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 40c:	52564944 	subspl	r4, r6, #68, 18	; 0x110000
 410:	5f434d00 	svcpl	0x00434d00
 414:	31425041 	cmpcc	r2, r1, asr #32
 418:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 41c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 420:	5f434d00 	svcpl	0x00434d00
 424:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 428:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 42c:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 430:	50415f50 	subpl	r5, r1, r0, asr pc
 434:	4e453142 	dvfmism	f3, f5, f2
 438:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 43c:	4d445300 	stclmi	3, cr5, [r4, #-0]
 440:	4333434d 	teqmi	r3, #872415233	; 0x34000001
 444:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 448:	504d0052 	subpl	r0, sp, r2, asr r0
 44c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 450:	434e4535 	movtmi	r4, #58677	; 0xe535
 454:	0052524c 	subseq	r5, r2, ip, asr #4
 458:	525f5242 	subspl	r5, pc, #536870916	; 0x20000004
 45c:	43535453 	cmpmi	r3, #1392508928	; 0x53000000
 460:	0052524c 	subseq	r5, r2, ip, asr #4
 464:	415f434d 	cmpmi	pc, sp, asr #6
 468:	4c334248 	lfmmi	f4, 4, [r3], #-288	; 0xfffffee0
 46c:	434e4550 	movtmi	r4, #58704	; 0xe550
 470:	0052524c 	subseq	r5, r2, ip, asr #4
 474:	4d5f504d 	ldclmi	0, cr5, [pc, #-308]	; 348 <_start-0xc0007cb8>
 478:	4248414c 	submi	r4, r8, #76, 2
 47c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 480:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 484:	54504c00 	ldrbpl	r4, [r0], #-3072	; 0xfffff400
 488:	43314d49 	teqmi	r1, #4672	; 0x1240
 48c:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 490:	434d0052 	movtmi	r0, #53330	; 0xd052
 494:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 498:	534e4532 	movtpl	r4, #58674	; 0xe532
 49c:	00525445 	subseq	r5, r2, r5, asr #8
 4a0:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
 4a4:	534b4331 	movtpl	r4, #45873	; 0xb331
 4a8:	00524c45 	subseq	r4, r2, r5, asr #24
 4ac:	415f504d 	cmpmi	pc, sp, asr #32
 4b0:	45364248 	ldrmi	r4, [r6, #-584]!	; 0xfffffdb8
 4b4:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 4b8:	504d0052 	subpl	r0, sp, r2, asr r0
 4bc:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 4c0:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
 4c4:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 4c8:	65670052 	strbvs	r0, [r7, #-82]!	; 0xffffffae
 4cc:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
 4d0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 4d4:	4c4c5000 	marmi	acc0, r5, ip
 4d8:	47464332 	smlaldxmi	r4, r6, r2, r3
 4dc:	4d003152 	stfmis	f3, [r0, #-328]	; 0xfffffeb8
 4e0:	50415f43 	subpl	r5, r1, r3, asr #30
 4e4:	4e453442 	cdpmi	4, 4, cr3, cr5, cr2, {2}
 4e8:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 4ec:	42484100 	submi	r4, r8, #0, 2
 4f0:	54535235 	ldrbpl	r5, [r3], #-565	; 0xfffffdcb
 4f4:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 4f8:	49505300 	ldmdbmi	r0, {r8, r9, ip, lr}^
 4fc:	534b4336 	movtpl	r4, #45878	; 0xb336
 500:	00524c45 	subseq	r4, r2, r5, asr #24
 504:	32736572 	rsbscc	r6, r3, #478150656	; 0x1c800000
 508:	65720030 	ldrbvs	r0, [r2, #-48]!	; 0xffffffd0
 50c:	00313273 	eorseq	r3, r1, r3, ror r2
 510:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
 514:	4b433837 	blmi	10ce5f8 <_start-0xbef39a08>
 518:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 51c:	73657200 	cmnvc	r5, #0, 4
 520:	54003332 	strpl	r3, [r0], #-818	; 0xfffffcce
 524:	4248415a 	submi	r4, r8, #-2147483626	; 0x80000016
 528:	54535236 	ldrbpl	r5, [r3], #-566	; 0xfffffdca
 52c:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 530:	5f504d00 	svcpl	0x00504d00
 534:	48414c4d 	stmdami	r1, {r0, r2, r3, r6, sl, fp, lr}^
 538:	534e4542 	movtpl	r4, #58690	; 0xe542
 53c:	00525445 	subseq	r5, r2, r5, asr #8
 540:	32425041 	subcc	r5, r2, #65	; 0x41
 544:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 548:	0052524c 	subseq	r5, r2, ip, asr #4
 54c:	32736572 	rsbscc	r6, r3, #478150656	; 0x1c800000
 550:	50410037 	subpl	r0, r1, r7, lsr r0
 554:	49443142 	stmdbmi	r4, {r1, r6, r8, ip, sp}^
 558:	4d005256 	sfmmi	f5, 4, [r0, #-344]	; 0xfffffea8
 55c:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 560:	504c3542 	subpl	r3, ip, r2, asr #10
 564:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 568:	41005254 	tstmi	r0, r4, asr r2
 56c:	52344250 	eorspl	r4, r4, #80, 4
 570:	4c435453 	cfstrdmi	mvd5, [r3], {83}	; 0x53
 574:	50005252 	andpl	r5, r0, r2, asr r2
 578:	46314c4c 	ldrtmi	r4, [r1], -ip, asr #24
 57c:	52434152 	subpl	r4, r3, #-2147483628	; 0x80000014
 580:	73657200 	cmnvc	r5, #0, 4
 584:	65720031 	ldrbvs	r0, [r2, #-49]!	; 0xffffffcf
 588:	72003273 	andvc	r3, r0, #805306375	; 0x30000007
 58c:	00337365 	eorseq	r7, r3, r5, ror #6
 590:	34736572 	ldrbtcc	r6, [r3], #-1394	; 0xfffffa8e
 594:	73657200 	cmnvc	r5, #0, 4
 598:	65720035 	ldrbvs	r0, [r2, #-53]!	; 0xffffffcb
 59c:	72003673 	andvc	r3, r0, #120586240	; 0x7300000
 5a0:	00377365 	eorseq	r7, r7, r5, ror #6
 5a4:	38736572 	ldmdacc	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 5a8:	73657200 	cmnvc	r5, #0, 4
 5ac:	48410039 	stmdami	r1, {r0, r3, r4, r5}^
 5b0:	53523442 	cmppl	r2, #1107296256	; 0x42000000
 5b4:	524c4354 	subpl	r4, ip, #84, 6	; 0x50000001
 5b8:	504d0052 	subpl	r0, sp, r2, asr r0
 5bc:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 5c0:	45504c34 	ldrbmi	r4, [r0, #-3124]	; 0xfffff3cc
 5c4:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 5c8:	434d0052 	movtmi	r0, #53330	; 0xd052
 5cc:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 5d0:	434e4536 	movtmi	r4, #58678	; 0xe536
 5d4:	0052524c 	subseq	r5, r2, ip, asr #4
 5d8:	344c4c50 	strbcc	r4, [ip], #-3152	; 0xfffff3b0
 5dc:	52475343 	subpl	r5, r7, #201326593	; 0xc000001
 5e0:	54504c00 	ldrbpl	r4, [r0], #-3072	; 0xfffff400
 5e4:	35344d49 	ldrcc	r4, [r4, #-3401]!	; 0xfffff2b7
 5e8:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 5ec:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 5f0:	4c4d5f43 	mcrrmi	15, 4, r5, sp, cr3
 5f4:	45424841 	strbmi	r4, [r2, #-2113]	; 0xfffff7bf
 5f8:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 5fc:	504d0052 	subpl	r0, sp, r2, asr r0
 600:	415a545f 	cmpmi	sl, pc, asr r4
 604:	4c364248 	lfmmi	f4, 4, [r6], #-288	; 0xfffffee0
 608:	534e4550 	movtpl	r4, #58704	; 0xe550
 60c:	00525445 	subseq	r5, r2, r5, asr #8
 610:	32736572 	rsbscc	r6, r3, #478150656	; 0x1c800000
 614:	54450035 	strbpl	r0, [r5], #-53	; 0xffffffcb
 618:	534b4348 	movtpl	r4, #45896	; 0xb348
 61c:	00524c45 	subseq	r4, r2, r5, asr #24
 620:	4d5f434d 	ldclmi	3, cr4, [pc, #-308]	; 4f4 <_start-0xc0007b0c>
 624:	4248414c 	submi	r4, r8, #76, 2
 628:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 62c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 630:	42504100 	subsmi	r4, r0, #0, 2
 634:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
 638:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 63c:	45434f00 	strbmi	r4, [r3, #-3840]	; 0xfffff100
 640:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 644:	434d0052 	movtmi	r0, #53330	; 0xd052
 648:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 64c:	45504c34 	ldrbmi	r4, [r0, #-3124]	; 0xfffff3cc
 650:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 654:	504d0052 	subpl	r0, sp, r2, asr r0
 658:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 65c:	434e4534 	movtmi	r4, #58676	; 0xe534
 660:	0052524c 	subseq	r5, r2, ip, asr #4
 664:	415f434d 	cmpmi	pc, sp, asr #6
 668:	4c4d4958 	mcrrmi	9, 5, r4, sp, cr8	; <UNPREDICTABLE>
 66c:	534e4550 	movtpl	r4, #58704	; 0xe550
 670:	00525445 	subseq	r5, r2, r5, asr #8
 674:	415f504d 	cmpmi	pc, sp, asr #32
 678:	4c334248 	lfmmi	f4, 4, [r3], #-288	; 0xfffffee0
 67c:	534e4550 	movtpl	r4, #58704	; 0xe550
 680:	00525445 	subseq	r5, r2, r5, asr #8
 684:	415f434d 	cmpmi	pc, sp, asr #6
 688:	454d4958 	strbmi	r4, [sp, #-2392]	; 0xfffff6a8
 68c:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 690:	434d0052 	movtmi	r0, #53330	; 0xd052
 694:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 698:	434e4534 	movtmi	r4, #58676	; 0xe534
 69c:	0052524c 	subseq	r5, r2, ip, asr #4
 6a0:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 6a4:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 6a8:	00525445 	subseq	r5, r2, r5, asr #8
 6ac:	344b4352 	strbcc	r4, [fp], #-850	; 0xfffffcae
 6b0:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 6b4:	5f504d00 	svcpl	0x00504d00
 6b8:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 6bc:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 6c0:	72005254 	andvc	r5, r0, #84, 4	; 0x40000005
 6c4:	30317365 	eorscc	r7, r1, r5, ror #6
 6c8:	5f434d00 	svcpl	0x00434d00
 6cc:	31425041 	cmpcc	r2, r1, asr #32
 6d0:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 6d4:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 6d8:	52415500 	subpl	r5, r1, #0, 10
 6dc:	43343254 	teqmi	r4, #84, 4	; 0x40000005
 6e0:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 6e4:	434d0052 	movtmi	r0, #53330	; 0xd052
 6e8:	4643314f 	strbmi	r3, [r3], -pc, asr #2
 6ec:	4d005247 	sfmmi	f5, 4, [r0, #-284]	; 0xfffffee4
 6f0:	50415f43 	subpl	r5, r1, r3, asr #30
 6f4:	504c3242 	subpl	r3, ip, r2, asr #4
 6f8:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 6fc:	72005254 	andvc	r5, r0, #84, 4	; 0x40000005
 700:	745f6363 	ldrbvc	r6, [pc], #-867	; 708 <_start-0xc00078f8>
 704:	5f434d00 	svcpl	0x00434d00
 708:	36424841 	strbcc	r4, [r2], -r1, asr #16
 70c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 710:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 714:	73657200 	cmnvc	r5, #0, 4
 718:	50003831 	andpl	r3, r0, r1, lsr r8
 71c:	43314c4c 	teqmi	r1, #76, 24	; 0x4c00
 720:	00524753 	subseq	r4, r2, r3, asr r7
 724:	41434446 	cmpmi	r3, r6, asr #8
 728:	534b434e 	movtpl	r4, #45902	; 0xb34e
 72c:	00524c45 	subseq	r4, r2, r5, asr #24
 730:	31494153 	cmpcc	r9, r3, asr r1
 734:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 738:	6700524c 	strvs	r5, [r0, -ip, asr #4]
 73c:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
 740:	00726168 	rsbseq	r6, r2, r8, ror #2
 744:	4d5f504d 	ldclmi	0, cr5, [pc, #-308]	; 618 <_start-0xc00079e8>
 748:	4248414c 	submi	r4, r8, #76, 2
 74c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 750:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 754:	5f434d00 	svcpl	0x00434d00
 758:	32425041 	subcc	r5, r2, #65	; 0x41
 75c:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 760:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 764:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 768:	4e453642 	cdpmi	6, 4, cr3, cr5, cr2, {2}
 76c:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 770:	5f504d00 	svcpl	0x00504d00
 774:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 778:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 77c:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 780:	5f504d00 	svcpl	0x00504d00
 784:	34424841 	strbcc	r4, [r2], #-2113	; 0xfffff7bf
 788:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 78c:	53005254 	movwpl	r5, #596	; 0x254
 790:	43334941 	teqmi	r3, #1064960	; 0x104000
 794:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 798:	504d0052 	subpl	r0, sp, r2, asr r0
 79c:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 7a0:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 7a4:	4c4d5f43 	mcrrmi	15, 4, r5, sp, cr3
 7a8:	4c424841 	mcrrmi	8, 4, r4, r2, cr1
 7ac:	434e4550 	movtmi	r4, #58704	; 0xe550
 7b0:	0052524c 	subseq	r5, r2, ip, asr #4
 7b4:	415f434d 	cmpmi	pc, sp, asr #6
 7b8:	45344250 	ldrmi	r4, [r4, #-592]!	; 0xfffffdb0
 7bc:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 7c0:	53480052 	movtpl	r0, #32850	; 0x8052
 7c4:	47464349 	strbmi	r4, [r6, -r9, asr #6]
 7c8:	4e520052 	mrcmi	0, 2, r0, cr2, cr2, {2}
 7cc:	4b433247 	blmi	10cd0f0 <_start-0xbef3af10>
 7d0:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 7d4:	5f504d00 	svcpl	0x00504d00
 7d8:	48414c4d 	stmdami	r1, {r0, r2, r3, r6, sl, fp, lr}^
 7dc:	434e4542 	movtmi	r4, #58690	; 0xe542
 7e0:	0052524c 	subseq	r5, r2, ip, asr #4
 7e4:	35424841 	strbcc	r4, [r2, #-2113]	; 0xfffff7bf
 7e8:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 7ec:	00525445 	subseq	r5, r2, r5, asr #8
 7f0:	33425041 	movtcc	r5, #8257	; 0x2041
 7f4:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 7f8:	00525445 	subseq	r5, r2, r5, asr #8
 7fc:	415f434d 	cmpmi	pc, sp, asr #6
 800:	4c354248 	lfmmi	f4, 4, [r5], #-288	; 0xfffffee0
 804:	434e4550 	movtmi	r4, #58704	; 0xe550
 808:	0052524c 	subseq	r5, r2, ip, asr #4
 80c:	4c525750 	mrrcmi	7, 5, r5, r2, cr0
 810:	594c4450 	stmdbpl	ip, {r4, r6, sl, lr}^
 814:	41005243 	tstmi	r0, r3, asr #4
 818:	52334248 	eorspl	r4, r3, #72, 4	; 0x80000004
 81c:	45535453 	ldrbmi	r5, [r3, #-1107]	; 0xfffffbad
 820:	72005254 	andvc	r5, r0, #84, 4	; 0x40000005
 824:	36327365 	ldrtcc	r7, [r2], -r5, ror #6
 828:	5f434d00 	svcpl	0x00434d00
 82c:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 830:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 834:	63727300 	cmnvs	r2, #0, 6
 838:	7261752f 	rsbvc	r7, r1, #197132288	; 0xbc00000
 83c:	632e3474 			; <UNDEFINED> instruction: 0x632e3474
 840:	43324900 	teqmi	r2, #0, 18
 844:	4b433533 	blmi	10cdd18 <_start-0xbef3a2e8>
 848:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 84c:	5f504d00 	svcpl	0x00504d00
 850:	54535247 	ldrbpl	r5, [r3], #-583	; 0xfffffdb9
 854:	54455343 	strbpl	r5, [r5], #-835	; 0xfffffcbd
 858:	50410052 	subpl	r0, r1, r2, asr r0
 85c:	49443342 	stmdbmi	r4, {r1, r6, r8, r9, ip, sp}^
 860:	4d005256 	sfmmi	f5, 4, [r0, #-344]	; 0xfffffea8
 864:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 868:	504c3442 	subpl	r3, ip, r2, asr #8
 86c:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 870:	49005254 	stmdbmi	r0, {r2, r4, r6, r9, ip, lr}
 874:	32314332 	eorscc	r4, r1, #-939524096	; 0xc8000000
 878:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 87c:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 880:	4c4d5f43 	mcrrmi	15, 4, r5, sp, cr3
 884:	45424841 	strbmi	r4, [r2, #-2113]	; 0xfffff7bf
 888:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 88c:	75700052 	ldrbvc	r0, [r0, #-82]!	; 0xffffffae
 890:	74735f74 	ldrbtvc	r5, [r3], #-3956	; 0xfffff08c
 894:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 898:	5f434d00 	svcpl	0x00434d00
 89c:	33424841 	movtcc	r4, #10305	; 0x2841
 8a0:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 8a4:	50005254 	andpl	r5, r0, r4, asr r2
 8a8:	43314c4c 	teqmi	r1, #76, 24	; 0x4c00
 8ac:	31524746 	cmpcc	r2, r6, asr #14
 8b0:	4c4c5000 	marmi	acc0, r5, ip
 8b4:	47464331 	smlaldxmi	r4, r6, r1, r3
 8b8:	4d003252 	sfmmi	f3, 4, [r0, #-328]	; 0xfffffeb8
 8bc:	50415f50 	subpl	r5, r1, r0, asr pc
 8c0:	4e453142 	dvfmism	f3, f5, f2
 8c4:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 8c8:	415a5400 	cmpmi	sl, r0, lsl #8
 8cc:	52364248 	eorspl	r4, r6, #72, 4	; 0x80000004
 8d0:	4c435453 	cfstrdmi	mvd5, [r3], {83}	; 0x53
 8d4:	41005252 	tstmi	r0, r2, asr r2
 8d8:	52334248 	eorspl	r4, r3, #72, 4	; 0x80000004
 8dc:	4c435453 	cfstrdmi	mvd5, [r3], {83}	; 0x53
 8e0:	70005252 	andvc	r5, r0, r2, asr r2
 8e4:	635f7475 	cmpvs	pc, #1962934272	; 0x75000000
 8e8:	00726168 	rsbseq	r6, r2, r8, ror #2
 8ec:	545f504d 	ldrbpl	r5, [pc], #-77	; 8f4 <_start-0xc000770c>
 8f0:	4248415a 	submi	r4, r8, #-2147483626	; 0x80000016
 8f4:	45504c36 	ldrbmi	r4, [r0, #-3126]	; 0xfffff3ca
 8f8:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 8fc:	434d0052 	movtmi	r0, #53330	; 0xd052
 900:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 904:	534e4535 	movtpl	r4, #58677	; 0xe535
 908:	00525445 	subseq	r5, r2, r5, asr #8
 90c:	415f504d 	cmpmi	pc, sp, asr #32
 910:	4c334250 	lfmmi	f4, 4, [r3], #-320	; 0xfffffec0
 914:	534e4550 	movtpl	r4, #58704	; 0xe550
 918:	00525445 	subseq	r5, r2, r5, asr #8
 91c:	43495344 	movtmi	r5, #37700	; 0x9344
 920:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 924:	50530052 	subspl	r0, r3, r2, asr r0
 928:	32533249 	subscc	r3, r3, #-1879048188	; 0x90000004
 92c:	534b4333 	movtpl	r4, #45875	; 0xb333
 930:	00524c45 	subseq	r4, r2, r5, asr #24
 934:	4e45434f 	cdpmi	3, 4, cr4, cr5, cr15, {2}
 938:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 93c:	47424400 	strbmi	r4, [r2, -r0, lsl #8]
 940:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 944:	5f434d00 	svcpl	0x00434d00
 948:	33425041 	movtcc	r5, #8257	; 0x2041
 94c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 950:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 954:	4f434d00 	svcmi	0x00434d00
 958:	47464332 	smlaldxmi	r4, r6, r2, r3
 95c:	504d0052 	subpl	r0, sp, r2, asr r0
 960:	4457495f 	ldrbmi	r4, [r7], #-2399	; 0xfffff6a1
 964:	535a4647 	cmppl	sl, #74448896	; 0x4700000
 968:	00525445 	subseq	r5, r2, r5, asr #8
 96c:	44435452 	strbmi	r5, [r3], #-1106	; 0xfffffbae
 970:	00525649 	subseq	r5, r2, r9, asr #12
 974:	45475453 	strbmi	r5, [r7, #-1107]	; 0xfffffbad
 978:	534b434e 	movtpl	r4, #45902	; 0xb34e
 97c:	00524c45 	subseq	r4, r2, r5, asr #24
 980:	415f434d 	cmpmi	pc, sp, asr #6
 984:	4c344250 	lfmmi	f4, 4, [r4], #-320	; 0xfffffec0
 988:	534e4550 	movtpl	r4, #58704	; 0xe550
 98c:	00525445 	subseq	r5, r2, r5, asr #8
 990:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
 994:	4b433533 	blmi	10cde68 <_start-0xbef3a198>
 998:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 99c:	5f504d00 	svcpl	0x00504d00
 9a0:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 9a4:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 9a8:	41005252 	tstmi	r0, r2, asr r2
 9ac:	44324250 	ldrtmi	r4, [r2], #-592	; 0xfffffdb0
 9b0:	00525649 	subseq	r5, r2, r9, asr #12
 9b4:	415f434d 	cmpmi	pc, sp, asr #6
 9b8:	45334250 	ldrmi	r4, [r3, #-592]!	; 0xfffffdb0
 9bc:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 9c0:	49540052 	ldmdbmi	r4, {r1, r4, r6}^
 9c4:	5032474d 	eorspl	r4, r2, sp, asr #14
 9c8:	00524552 	subseq	r4, r2, r2, asr r5
 9cc:	334c4c50 	movtcc	r4, #52304	; 0xcc50
 9d0:	4d005243 	sfmmi	f5, 4, [r0, #-268]	; 0xfffffef4
 9d4:	50415f50 	subpl	r5, r1, r0, asr pc
 9d8:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
 9dc:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 9e0:	4c4c5000 	marmi	acc0, r5, ip
 9e4:	41524634 	cmpmi	r2, r4, lsr r6
 9e8:	4d005243 	sfmmi	f5, 4, [r0, #-268]	; 0xfffffef4
 9ec:	50415f50 	subpl	r5, r1, r0, asr pc
 9f0:	504c3242 	subpl	r3, ip, r2, asr #4
 9f4:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 9f8:	41005252 	tstmi	r0, r2, asr r2
 9fc:	52314250 	eorspl	r4, r1, #80, 4
 a00:	45535453 	ldrbmi	r5, [r3, #-1107]	; 0xfffffbad
 a04:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 a08:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 a0c:	504c3342 	subpl	r3, ip, r2, asr #6
 a10:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 a14:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 a18:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 a1c:	504c3642 	subpl	r3, ip, r2, asr #12
 a20:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 a24:	52005252 	andpl	r5, r0, #536870917	; 0x20000005
 a28:	49534c44 	ldmdbmi	r3, {r2, r6, sl, fp, lr}^
 a2c:	50005243 	andpl	r5, r0, r3, asr #4
 a30:	43344c4c 	teqmi	r4, #76, 24	; 0x4c00
 a34:	43500052 	cmpmi	r0, #82	; 0x52
 a38:	5332314b 	teqpl	r2, #-1073741806	; 0xc0000012
 a3c:	00524c45 	subseq	r4, r2, r5, asr #24
 a40:	324c4c50 	subcc	r4, ip, #80, 24	; 0x5000
 a44:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 a48:	4c500032 	mrrcmi	0, 3, r0, r0, cr2	; <UNPREDICTABLE>
 a4c:	4643344c 	strbmi	r3, [r3], -ip, asr #8
 a50:	00315247 	eorseq	r5, r1, r7, asr #4
 a54:	415f504d 	cmpmi	pc, sp, asr #32
 a58:	4c354248 	lfmmi	f4, 4, [r5], #-288	; 0xfffffee0
 a5c:	534e4550 	movtpl	r4, #58704	; 0xe550
 a60:	00525445 	subseq	r5, r2, r5, asr #8
 a64:	415f434d 	cmpmi	pc, sp, asr #6
 a68:	4c344248 	lfmmi	f4, 4, [r4], #-288	; 0xfffffee0
 a6c:	534e4550 	movtpl	r4, #58704	; 0xe550
 a70:	00525445 	subseq	r5, r2, r5, asr #8
 a74:	415f504d 	cmpmi	pc, sp, asr #32
 a78:	45334248 	ldrmi	r4, [r3, #-584]!	; 0xfffffdb8
 a7c:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 a80:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 a84:	5343334c 	movtpl	r3, #13132	; 0x334c
 a88:	4d005247 	sfmmi	f5, 4, [r0, #-284]	; 0xfffffee4
 a8c:	52535f50 	subspl	r5, r3, #80, 30	; 0x140
 a90:	45535145 	ldrbmi	r5, [r3, #-325]	; 0xfffffebb
 a94:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 a98:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 a9c:	504c3242 	subpl	r3, ip, r2, asr #4
 aa0:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 aa4:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 aa8:	58415f50 	stmdapl	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 aac:	504c4d49 	subpl	r4, ip, r9, asr #26
 ab0:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 ab4:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 ab8:	50415f43 	subpl	r5, r1, r3, asr #30
 abc:	504c3342 	subpl	r3, ip, r2, asr #6
 ac0:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 ac4:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 ac8:	50415f43 	subpl	r5, r1, r3, asr #30
 acc:	4e453142 	dvfmism	f3, f5, f2
 ad0:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 ad4:	44495300 	strbmi	r5, [r9], #-768	; 0xfffffd00
 ad8:	504d0052 	subpl	r0, sp, r2, asr r0
 adc:	49444b43 	stmdbmi	r4, {r0, r1, r6, r8, r9, fp, lr}^
 ae0:	44005256 	strmi	r5, [r0], #-598	; 0xfffffdaa
 ae4:	54495244 	strbpl	r5, [r9], #-580	; 0xfffffdbc
 ae8:	00524346 	subseq	r4, r2, r6, asr #6
 aec:	52455043 	subpl	r5, r5, #67	; 0x43
 af0:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 af4:	4300524c 	movwmi	r5, #588	; 0x24c
 af8:	4b434345 	blmi	10d1814 <_start-0xbef367ec>
 afc:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 b00:	5f504d00 	svcpl	0x00504d00
 b04:	52454943 	subpl	r4, r5, #1097728	; 0x10c000
 b08:	43444100 	movtmi	r4, #16640	; 0x4100
 b0c:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 b10:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 b14:	50415f43 	subpl	r5, r1, r3, asr #30
 b18:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
 b1c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 b20:	5f434d00 	svcpl	0x00434d00
 b24:	4d495841 	stclmi	8, cr5, [r9, #-260]	; 0xfffffefc
 b28:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 b2c:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 b30:	42484100 	submi	r4, r8, #0, 2
 b34:	54535236 	ldrbpl	r5, [r3], #-566	; 0xfffffdca
 b38:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 b3c:	5f504d00 	svcpl	0x00504d00
 b40:	53525041 	cmppl	r2, #65	; 0x41
 b44:	00524354 	subseq	r4, r2, r4, asr r3
 b48:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 b4c:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 b50:	00525445 	subseq	r5, r2, r5, asr #8
 b54:	415f434d 	cmpmi	pc, sp, asr #6
 b58:	45334248 	ldrmi	r4, [r3, #-584]!	; 0xfffffdb8
 b5c:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 b60:	43520052 	cmpmi	r2, #82	; 0x52
 b64:	4553334b 	ldrbmi	r3, [r3, #-843]	; 0xfffffcb5
 b68:	5600524c 	strpl	r5, [r0], -ip, asr #4
 b6c:	00525245 	subseq	r5, r2, r5, asr #4
 b70:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 b74:	5f434d00 	svcpl	0x00434d00
 b78:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 b7c:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 b80:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 b84:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 b88:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
 b8c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 b90:	5f434d00 	svcpl	0x00434d00
 b94:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 b98:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 b9c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 ba0:	55434d00 	strbpl	r4, [r3, #-3328]	; 0xfffff300
 ba4:	52564944 	subspl	r4, r6, #68, 18	; 0x110000
 ba8:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
 bac:	52503147 	subspl	r3, r0, #-1073741807	; 0xc0000011
 bb0:	4d005245 	sfmmi	f5, 4, [r0, #-276]	; 0xfffffeec
 bb4:	43475f50 	movtmi	r5, #32592	; 0x7f50
 bb8:	50530052 	subspl	r0, r3, r2, asr r0
 bbc:	31533249 	cmpcc	r3, r9, asr #4
 bc0:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 bc4:	4100524c 	tstmi	r0, ip, asr #4
 bc8:	44354250 	ldrtmi	r4, [r5], #-592	; 0xfffffdb0
 bcc:	00525649 	subseq	r5, r2, r9, asr #12
 bd0:	334c4c50 	movtcc	r4, #52304	; 0xcc50
 bd4:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 bd8:	504d0032 	subpl	r0, sp, r2, lsr r0
 bdc:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 be0:	45504c33 	ldrbmi	r4, [r0, #-3123]	; 0xfffff3cd
 be4:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 be8:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 bec:	4643344c 	strbmi	r3, [r3], -ip, asr #8
 bf0:	00325247 	eorseq	r5, r2, r7, asr #4
 bf4:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
 bf8:	534b4336 	movtpl	r4, #45878	; 0xb336
 bfc:	00524c45 	subseq	r4, r2, r5, asr #24
 c00:	415f434d 	cmpmi	pc, sp, asr #6
 c04:	45354248 	ldrmi	r4, [r5, #-584]!	; 0xfffffdb8
 c08:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 c0c:	504d0052 	subpl	r0, sp, r2, asr r0
 c10:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 c14:	45504c33 	ldrbmi	r4, [r0, #-3123]	; 0xfffff3cd
 c18:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 c1c:	504d0052 	subpl	r0, sp, r2, asr r0
 c20:	415a545f 	cmpmi	sl, pc, asr r4
 c24:	45364248 	ldrmi	r4, [r6, #-584]!	; 0xfffffdb8
 c28:	4c45534e 	mcrrmi	3, 4, r5, r5, cr14
 c2c:	504d0052 	subpl	r0, sp, r2, asr r0
 c30:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 c34:	434e4532 	movtmi	r4, #58674	; 0xe532
 c38:	0052524c 	subseq	r5, r2, ip, asr #4
 c3c:	324c4c50 	subcc	r4, ip, #80, 24	; 0x5000
 c40:	4d005243 	sfmmi	f5, 4, [r0, #-268]	; 0xfffffef4
 c44:	4b435353 	blmi	10d5998 <_start-0xbef32668>
 c48:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 c4c:	44505300 	ldrbmi	r5, [r0], #-768	; 0xfffffd00
 c50:	4b434649 	blmi	10d257c <_start-0xbef35a84>
 c54:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 c58:	54504c00 	ldrbpl	r4, [r0], #-3072	; 0xfffff400
 c5c:	33324d49 	teqcc	r2, #4672	; 0x1240
 c60:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 c64:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 c68:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 c6c:	504c3642 	subpl	r3, ip, r2, asr #12
 c70:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 c74:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 c78:	50415f43 	subpl	r5, r1, r3, asr #30
 c7c:	504c3242 	subpl	r3, ip, r2, asr #4
 c80:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 c84:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 c88:	50415f50 	subpl	r5, r1, r0, asr pc
 c8c:	504c3542 	subpl	r3, ip, r2, asr #10
 c90:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 c94:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 c98:	57495f50 	smlsldpl	r5, r9, r0, pc	; <UNPREDICTABLE>
 c9c:	5a464744 	bpl	11929b4 <_start-0xbee7564c>
 ca0:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 ca4:	5f504d00 	svcpl	0x00504d00
 ca8:	53525041 	cmppl	r2, #65	; 0x41
 cac:	00525354 	subseq	r5, r2, r4, asr r3
 cb0:	415f434d 	cmpmi	pc, sp, asr #6
 cb4:	4c344250 	lfmmi	f4, 4, [r4], #-320	; 0xfffffec0
 cb8:	434e4550 	movtmi	r4, #58704	; 0xe550
 cbc:	0052524c 	subseq	r5, r2, ip, asr #4
 cc0:	34424841 	strbcc	r4, [r2], #-2113	; 0xfffff7bf
 cc4:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 cc8:	00525445 	subseq	r5, r2, r5, asr #8
 ccc:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 cd0:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 cd4:	0052524c 	subseq	r5, r2, ip, asr #4
 cd8:	435f504d 	cmpmi	pc, #77	; 0x4d
 cdc:	00524649 	subseq	r4, r2, r9, asr #12
 ce0:	415f504d 	cmpmi	pc, sp, asr #32
 ce4:	45324248 	ldrmi	r4, [r2, #-584]!	; 0xfffffdb8
 ce8:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 cec:	504d0052 	subpl	r0, sp, r2, asr r0
 cf0:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 cf4:	45504c35 	ldrbmi	r4, [r0, #-3125]	; 0xfffff3cb
 cf8:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 cfc:	504d0052 	subpl	r0, sp, r2, asr r0
 d00:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 d04:	534e4533 	movtpl	r4, #58675	; 0xe533
 d08:	00525445 	subseq	r5, r2, r5, asr #8
 d0c:	31425041 	cmpcc	r2, r1, asr #32
 d10:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 d14:	0052524c 	subseq	r5, r2, ip, asr #4
 d18:	415f504d 	cmpmi	pc, sp, asr #32
 d1c:	45354250 	ldrmi	r4, [r5, #-592]!	; 0xfffffdb0
 d20:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 d24:	504d0052 	subpl	r0, sp, r2, asr r0
 d28:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 d2c:	45504c35 	ldrbmi	r4, [r0, #-3125]	; 0xfffff3cb
 d30:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 d34:	504d0052 	subpl	r0, sp, r2, asr r0
 d38:	5453525f 	ldrbpl	r5, [r3], #-607	; 0xfffffda1
 d3c:	4d005353 	stcmi	3, cr5, [r0, #-332]	; 0xfffffeb4
 d40:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 d44:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
 d48:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 d4c:	42504100 	subsmi	r4, r0, #0, 2
 d50:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
 d54:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 d58:	49534300 	ldmdbmi	r3, {r8, r9, lr}^
 d5c:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 d60:	5f504d00 	svcpl	0x00504d00
 d64:	51455253 	cmppl	r5, r3, asr r2
 d68:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 d6c:	5f434d00 	svcpl	0x00434d00
 d70:	52454943 	subpl	r4, r5, #1097728	; 0x10c000
 d74:	5f434d00 	svcpl	0x00434d00
 d78:	31425041 	cmpcc	r2, r1, asr #32
 d7c:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 d80:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 d84:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 d88:	4e453542 	cdpmi	5, 4, cr3, cr5, cr2, {2}
 d8c:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 d90:	5f504d00 	svcpl	0x00504d00
 d94:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 d98:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 d9c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 da0:	5f504d00 	svcpl	0x00504d00
 da4:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 da8:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 dac:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 db0:	49415300 	stmdbmi	r1, {r8, r9, ip, lr}^
 db4:	534b4332 	movtpl	r4, #45874	; 0xb332
 db8:	00524c45 	subseq	r4, r2, r5, asr #24
 dbc:	4d4d4453 	cfstrdmi	mvd4, [sp, #-332]	; 0xfffffeb4
 dc0:	43323143 	teqmi	r2, #-1073741808	; 0xc0000010
 dc4:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 dc8:	434d0052 	movtmi	r0, #53330	; 0xd052
 dcc:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 dd0:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
 dd4:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 dd8:	53510052 	cmppl	r1, #82	; 0x52
 ddc:	4b434950 	blmi	10d3324 <_start-0xbef34cdc>
 de0:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 de4:	5f434d00 	svcpl	0x00434d00
 de8:	4d495841 	stclmi	8, cr5, [r9, #-260]	; 0xfffffefc
 dec:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 df0:	53005254 	movwpl	r5, #596	; 0x254
 df4:	35344950 	ldrcc	r4, [r4, #-2384]!	; 0xfffff6b0
 df8:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 dfc:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 e00:	50415f50 	subpl	r5, r1, r0, asr pc
 e04:	504c3142 	subpl	r3, ip, r2, asr #2
 e08:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 e0c:	42005254 	andmi	r5, r0, #84, 4	; 0x40000005
 e10:	00524344 	subseq	r4, r2, r4, asr #6
 e14:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 e18:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 e1c:	0052524c 	subseq	r5, r2, ip, asr #4
 e20:	31474e52 	cmpcc	r7, r2, asr lr
 e24:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 e28:	5300524c 	movwpl	r5, #588	; 0x24c
 e2c:	43344941 	teqmi	r4, #1064960	; 0x104000
 e30:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 e34:	32490052 	subcc	r0, r9, #82	; 0x52
 e38:	43363443 	teqmi	r6, #1124073472	; 0x43000000
 e3c:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 e40:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 e44:	5246324c 	subpl	r3, r6, #76, 4	; 0xc0000004
 e48:	00524341 	subseq	r4, r2, r1, asr #6
 e4c:	415f434d 	cmpmi	pc, sp, asr #6
 e50:	45354250 	ldrmi	r4, [r5, #-592]!	; 0xfffffdb0
 e54:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 e58:	53550052 	cmppl	r5, #82	; 0x52
 e5c:	534b4342 	movtpl	r4, #45890	; 0xb342
 e60:	00524c45 	subseq	r4, r2, r5, asr #24
 e64:	43535341 	cmpmi	r3, #67108865	; 0x4000001
 e68:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 e6c:	434d0052 	movtmi	r0, #53330	; 0xd052
 e70:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 e74:	45504c35 	ldrbmi	r4, [r0, #-3125]	; 0xfffff3cb
 e78:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 e7c:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 e80:	5243314c 	subpl	r3, r3, #76, 2
 e84:	4c4c5000 	marmi	acc0, r5, ip
 e88:	41524633 	cmpmi	r2, r3, lsr r6
 e8c:	50005243 	andpl	r5, r0, r3, asr #4
 e90:	43334c4c 	teqmi	r3, #76, 24	; 0x4c00
 e94:	31524746 	cmpcc	r2, r6, asr #14
 e98:	435a5400 	cmpmi	sl, #0, 8
 e9c:	434f0052 	movtmi	r0, #61522	; 0xf052
 ea0:	52594452 	subspl	r4, r9, #1375731712	; 0x52000000
 ea4:	6c616800 	stclvs	8, cr6, [r1], #-0
 ea8:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 eac:	695f3474 	ldmdbvs	pc, {r2, r4, r5, r6, sl, ip, sp}^	; <UNPREDICTABLE>
 eb0:	0074696e 	rsbseq	r6, r4, lr, ror #18
 eb4:	415f504d 	cmpmi	pc, sp, asr #32
 eb8:	4c314250 	lfmmi	f4, 4, [r1], #-320	; 0xfffffec0
 ebc:	434e4550 	movtmi	r4, #58704	; 0xe550
 ec0:	0052524c 	subseq	r5, r2, ip, asr #4
 ec4:	415f504d 	cmpmi	pc, sp, asr #32
 ec8:	4c324250 	lfmmi	f4, 4, [r2], #-320	; 0xfffffec0
 ecc:	534e4550 	movtpl	r4, #58704	; 0xe550
 ed0:	00525445 	subseq	r5, r2, r5, asr #8
 ed4:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 ed8:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 edc:	00525445 	subseq	r5, r2, r5, asr #8
 ee0:	415f434d 	cmpmi	pc, sp, asr #6
 ee4:	45344248 	ldrmi	r4, [r4, #-584]!	; 0xfffffdb8
 ee8:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 eec:	4d460052 	stclmi	0, cr0, [r6, #-328]	; 0xfffffeb8
 ef0:	534b4343 	movtpl	r4, #45891	; 0xb343
 ef4:	00524c45 	subseq	r4, r2, r5, asr #24
 ef8:	324c4c50 	subcc	r4, ip, #80, 24	; 0x5000
 efc:	52475343 	subpl	r5, r7, #201326593	; 0xc000001
 f00:	5f504d00 	svcpl	0x00504d00
 f04:	36424841 	strbcc	r4, [r2], -r1, asr #16
 f08:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 f0c:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 f10:	5f434d00 	svcpl	0x00434d00
 f14:	52464943 	subpl	r4, r6, #1097728	; 0x10c000
 f18:	73657200 	cmnvc	r5, #0, 4
 f1c:	4d003232 	sfmmi	f3, 4, [r0, #-200]	; 0xffffff38
 f20:	53525f50 	cmppl	r2, #80, 30	; 0x140
 f24:	00525354 	subseq	r5, r2, r4, asr r3
 f28:	415f434d 	cmpmi	pc, sp, asr #6
 f2c:	45364248 	ldrmi	r4, [r6, #-584]!	; 0xfffffdb8
 f30:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 f34:	616d0052 	qdsubvs	r0, r2, sp
 f38:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 f3c:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 f40:	6564006e 	strbvs	r0, [r4, #-110]!	; 0xffffff92
 f44:	5f79616c 	svcpl	0x0079616c
 f48:	Address 0x00000f48 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	c000835c 	andgt	r8, r0, ip, asr r3
  1c:	00000050 	andeq	r0, r0, r0, asr r0
  20:	8b040e42 	blhi	103930 <_start-0xbff046d0>
  24:	0b0d4201 	bleq	350830 <_start-0xbfcb77d0>
  28:	420d0d60 	andmi	r0, sp, #96, 26	; 0x1800
  2c:	00000ecb 	andeq	r0, r0, fp, asr #29
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	c00083ac 	andgt	r8, r0, ip, lsr #7
  3c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  40:	8b080e42 	blhi	203950 <_start-0xbfe046b0>
  44:	42018e02 	andmi	r8, r1, #2, 28
  48:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
  4c:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	c0008564 	andgt	r8, r0, r4, ror #10
  5c:	0000006c 	andeq	r0, r0, ip, rrx
  60:	8b080e42 	blhi	203970 <_start-0xbfe04690>
  64:	42018e02 	andmi	r8, r1, #2, 28
  68:	70040b0c 	andvc	r0, r4, ip, lsl #22
  6c:	00080d0c 	andeq	r0, r8, ip, lsl #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	c00085d0 	ldrdgt	r8, [r0], -r0
  7c:	00000094 	muleq	r0, r4, r0
  80:	8b040e42 	blhi	103990 <_start-0xbff04670>
  84:	0b0d4201 	bleq	350890 <_start-0xbfcb7770>
  88:	0d0d4202 	sfmeq	f4, 4, [sp, #-8]
  8c:	000ecb42 	andeq	ip, lr, r2, asr #22
  90:	00000020 	andeq	r0, r0, r0, lsr #32
  94:	00000000 	andeq	r0, r0, r0
  98:	c0008664 	andgt	r8, r0, r4, ror #12
  9c:	000003e4 	andeq	r0, r0, r4, ror #7
  a0:	8b080e42 	blhi	2039b0 <_start-0xbfe04650>
  a4:	42018e02 	andmi	r8, r1, #2, 28
  a8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  ac:	0d0c01ec 	stfeqs	f0, [ip, #-944]	; 0xfffffc50
  b0:	00000008 	andeq	r0, r0, r8
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	c0008a48 	andgt	r8, r0, r8, asr #20
  c0:	0000006c 	andeq	r0, r0, ip, rrx
  c4:	8b040e42 	blhi	1039d4 <_start-0xbff0462c>
  c8:	0b0d4201 	bleq	3508d4 <_start-0xbfcb772c>
  cc:	420d0d6e 	andmi	r0, sp, #7040	; 0x1b80
  d0:	00000ecb 	andeq	r0, r0, fp, asr #29
  d4:	00000020 	andeq	r0, r0, r0, lsr #32
  d8:	00000000 	andeq	r0, r0, r0
  dc:	c0008ab4 			; <UNDEFINED> instruction: 0xc0008ab4
  e0:	000008c8 	andeq	r0, r0, r8, asr #17
  e4:	8b080e42 	blhi	2039f4 <_start-0xbfe0460c>
  e8:	42018e02 	andmi	r8, r1, #2, 28
  ec:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  f0:	0d0c045e 	cfstrseq	mvf0, [ip, #-376]	; 0xfffffe88
  f4:	00000008 	andeq	r0, r0, r8
  f8:	00000030 	andeq	r0, r0, r0, lsr r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	c000937c 	andgt	r9, r0, ip, ror r3
 104:	0000004c 	andeq	r0, r0, ip, asr #32
 108:	810c0e42 	tsthi	ip, r2, asr #28
 10c:	83028203 	movwhi	r8, #8707	; 0x2203
 110:	140e4201 	strne	r4, [lr], #-513	; 0xfffffdff
 114:	048e058b 	streq	r0, [lr], #1419	; 0x58b
 118:	100b0c42 	andne	r0, fp, r2, asr #24
 11c:	140d0c5a 	strne	r0, [sp], #-3162	; 0xfffff3a6
 120:	0ecbce42 	cdpeq	14, 12, cr12, cr11, cr2, {2}
 124:	c2c3420c 	sbcgt	r4, r3, #12, 4	; 0xc0000000
 128:	00000ec1 	andeq	r0, r0, r1, asr #29
 12c:	00000034 	andeq	r0, r0, r4, lsr r0
 130:	00000000 	andeq	r0, r0, r0
 134:	c00093c8 	andgt	r9, r0, r8, asr #7
 138:	0000004c 	andeq	r0, r0, ip, asr #32
 13c:	80100e42 	andshi	r0, r0, r2, asr #28
 140:	82038104 	andhi	r8, r3, #4, 2
 144:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 148:	068b180e 	streq	r1, [fp], lr, lsl #16
 14c:	0c42058e 	cfstr64eq	mvdx0, [r2], {142}	; 0x8e
 150:	0c5a140b 	cfldrdeq	mvd1, [sl], {11}
 154:	ce42180d 	cdpgt	8, 4, cr1, cr2, cr13, {0}
 158:	42100ecb 	andsmi	r0, r0, #3248	; 0xcb0
 15c:	c0c1c2c3 	sbcgt	ip, r1, r3, asr #5
 160:	0000000e 	andeq	r0, r0, lr
 164:	0000000c 	andeq	r0, r0, ip
 168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 16c:	7c020001 	stcvc	0, cr0, [r2], {1}
 170:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000164 	andeq	r0, r0, r4, ror #2
 17c:	c0009414 	andgt	r9, r0, r4, lsl r4
 180:	000001e8 	andeq	r0, r0, r8, ror #3
 184:	8b040e42 	blhi	103a94 <_start-0xbff0456c>
 188:	0b0d4201 	bleq	350994 <_start-0xbfcb766c>
 18c:	0d0dec02 	stceq	12, cr14, [sp, #-8]
 190:	000ecb42 	andeq	ip, lr, r2, asr #22
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000164 	andeq	r0, r0, r4, ror #2
 19c:	c00095fc 	strdgt	r9, [r0], -ip
 1a0:	00000060 	andeq	r0, r0, r0, rrx
 1a4:	8b080e42 	blhi	203ab4 <_start-0xbfe0454c>
 1a8:	42018e02 	andmi	r8, r1, #2, 28
 1ac:	6a040b0c 	bvs	102de4 <_start-0xbff0521c>
 1b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000164 	andeq	r0, r0, r4, ror #2
 1bc:	c000965c 	andgt	r9, r0, ip, asr r6
 1c0:	00000048 	andeq	r0, r0, r8, asr #32
 1c4:	8b080e42 	blhi	203ad4 <_start-0xbfe0452c>
 1c8:	42018e02 	andmi	r8, r1, #2, 28
 1cc:	5e040b0c 	vmlapl.f64	d0, d4, d12
 1d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000164 	andeq	r0, r0, r4, ror #2
 1dc:	c00096a4 	andgt	r9, r0, r4, lsr #13
 1e0:	0000004c 	andeq	r0, r0, ip, asr #32
 1e4:	8b040e42 	blhi	103af4 <_start-0xbff0450c>
 1e8:	0b0d4201 	bleq	3509f4 <_start-0xbfcb760c>
 1ec:	420d0d5e 	andmi	r0, sp, #6016	; 0x1780
 1f0:	00000ecb 	andeq	r0, r0, fp, asr #29
 1f4:	0000000c 	andeq	r0, r0, ip
 1f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 200:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
 208:	000001f4 	strdeq	r0, [r0], -r4
 20c:	c00096f0 	strdgt	r9, [r0], -r0
 210:	00000018 	andeq	r0, r0, r8, lsl r0
 214:	8b040e42 	blhi	103b24 <_start-0xbff044dc>
 218:	0b0d4201 	bleq	350a24 <_start-0xbfcb75dc>
 21c:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
 220:	00000ecb 	andeq	r0, r0, fp, asr #29
 224:	0000000c 	andeq	r0, r0, ip
 228:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 22c:	7c020001 	stcvc	0, cr0, [r2], {1}
 230:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	00000224 	andeq	r0, r0, r4, lsr #4
 23c:	c0009708 	andgt	r9, r0, r8, lsl #14
 240:	0000015c 	andeq	r0, r0, ip, asr r1
 244:	8b040e42 	blhi	103b54 <_start-0xbff044ac>
 248:	0b0d4201 	bleq	350a54 <_start-0xbfcb75ac>
 24c:	0d0da602 	stceq	6, cr10, [sp, #-8]
 250:	000ecb42 	andeq	ip, lr, r2, asr #22
 254:	0000001c 	andeq	r0, r0, ip, lsl r0
 258:	00000224 	andeq	r0, r0, r4, lsr #4
 25c:	c0009864 	andgt	r9, r0, r4, ror #16
 260:	00000088 	andeq	r0, r0, r8, lsl #1
 264:	8b040e42 	blhi	103b74 <_start-0xbff0448c>
 268:	0b0d4201 	bleq	350a74 <_start-0xbfcb758c>
 26c:	420d0d7c 	andmi	r0, sp, #124, 26	; 0x1f00
 270:	00000ecb 	andeq	r0, r0, fp, asr #29
 274:	0000000c 	andeq	r0, r0, ip
 278:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 27c:	7c020001 	stcvc	0, cr0, [r2], {1}
 280:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 284:	0000001c 	andeq	r0, r0, ip, lsl r0
 288:	00000274 	andeq	r0, r0, r4, ror r2
 28c:	c00098ec 	andgt	r9, r0, ip, ror #17
 290:	000001a4 	andeq	r0, r0, r4, lsr #3
 294:	8b040e42 	blhi	103ba4 <_start-0xbff0445c>
 298:	0b0d4201 	bleq	350aa4 <_start-0xbfcb755c>
 29c:	0d0dca02 	vstreq	s24, [sp, #-8]
 2a0:	000ecb42 	andeq	ip, lr, r2, asr #22
 2a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a8:	00000274 	andeq	r0, r0, r4, ror r2
 2ac:	c0009a90 	mulgt	r0, r0, sl
 2b0:	0000007c 	andeq	r0, r0, ip, ror r0
 2b4:	8b080e42 	blhi	203bc4 <_start-0xbfe0443c>
 2b8:	42018e02 	andmi	r8, r1, #2, 28
 2bc:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
 2c0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c8:	00000274 	andeq	r0, r0, r4, ror r2
 2cc:	c0009b0c 	andgt	r9, r0, ip, lsl #22
 2d0:	00000054 	andeq	r0, r0, r4, asr r0
 2d4:	8b080e42 	blhi	203be4 <_start-0xbfe0441c>
 2d8:	42018e02 	andmi	r8, r1, #2, 28
 2dc:	64040b0c 	strvs	r0, [r4], #-2828	; 0xfffff4f4
 2e0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	00000274 	andeq	r0, r0, r4, ror r2
 2ec:	c0009b60 	andgt	r9, r0, r0, ror #22
 2f0:	0000004c 	andeq	r0, r0, ip, asr #32
 2f4:	8b040e42 	blhi	103c04 <_start-0xbff043fc>
 2f8:	0b0d4201 	bleq	350b04 <_start-0xbfcb74fc>
 2fc:	420d0d5e 	andmi	r0, sp, #6016	; 0x1780
 300:	00000ecb 	andeq	r0, r0, fp, asr #29
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	00000274 	andeq	r0, r0, r4, ror r2
 30c:	c0009bac 	andgt	r9, r0, ip, lsr #23
 310:	000000c8 	andeq	r0, r0, r8, asr #1
 314:	8b080e42 	blhi	203c24 <_start-0xbfe043dc>
 318:	42018e02 	andmi	r8, r1, #2, 28
 31c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
 320:	080d0c5e 	stmdaeq	sp, {r1, r2, r3, r4, r6, sl, fp}
 324:	0000000c 	andeq	r0, r0, ip
 328:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 32c:	7c020001 	stcvc	0, cr0, [r2], {1}
 330:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 334:	0000001c 	andeq	r0, r0, ip, lsl r0
 338:	00000324 	andeq	r0, r0, r4, lsr #6
 33c:	c0009c74 	andgt	r9, r0, r4, ror ip
 340:	00000070 	andeq	r0, r0, r0, ror r0
 344:	8b040e42 	blhi	103c54 <_start-0xbff043ac>
 348:	0b0d4201 	bleq	350b54 <_start-0xbfcb74ac>
 34c:	420d0d70 	andmi	r0, sp, #112, 26	; 0x1c00
 350:	00000ecb 	andeq	r0, r0, fp, asr #29
 354:	00000018 	andeq	r0, r0, r8, lsl r0
 358:	00000324 	andeq	r0, r0, r4, lsr #6
 35c:	c0009ce4 	andgt	r9, r0, r4, ror #25
 360:	0000002c 	andeq	r0, r0, ip, lsr #32
 364:	8b080e42 	blhi	203c74 <_start-0xbfe0438c>
 368:	42018e02 	andmi	r8, r1, #2, 28
 36c:	00040b0c 	andeq	r0, r4, ip, lsl #22
